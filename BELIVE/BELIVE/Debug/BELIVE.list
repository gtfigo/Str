
BELIVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a814  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e68  0800a9c4  0800a9c4  0001a9c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d82c  0800d82c  000200cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d82c  0800d82c  0001d82c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d834  0800d834  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d834  0800d834  0001d834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d838  0800d838  0001d838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  0800d83c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200cc  2**0
                  CONTENTS
 10 .bss          000008d0  200000cc  200000cc  000200cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000099c  2000099c  000200cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002c798  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000058b1  00000000  00000000  0004c894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002490  00000000  00000000  00052148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002270  00000000  00000000  000545d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a9f2  00000000  00000000  00056848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029f8f  00000000  00000000  0008123a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fcbb8  00000000  00000000  000ab1c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001a7d81  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009fe4  00000000  00000000  001a7dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000cc 	.word	0x200000cc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a9ac 	.word	0x0800a9ac

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000d0 	.word	0x200000d0
 80001ec:	0800a9ac 	.word	0x0800a9ac

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <vApplicationStackOverflowHook>:
}
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800059e:	bf00      	nop
 80005a0:	370c      	adds	r7, #12
 80005a2:	46bd      	mov	sp, r7
 80005a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a8:	4770      	bx	lr

080005aa <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005aa:	b580      	push	{r7, lr}
 80005ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ae:	f002 fd1f 	bl	8002ff0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b2:	f000 f815 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b6:	f000 fc0d 	bl	8000dd4 <MX_GPIO_Init>
  MX_DMA2D_Init();
 80005ba:	f000 f883 	bl	80006c4 <MX_DMA2D_Init>
  MX_FMC_Init();
 80005be:	f000 fbbb 	bl	8000d38 <MX_FMC_Init>
  MX_I2C3_Init();
 80005c2:	f000 f8b1 	bl	8000728 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 80005c6:	f000 fb8d 	bl	8000ce4 <MX_USART1_UART_Init>
  MX_LTDC_Init();
 80005ca:	f000 faa1 	bl	8000b10 <MX_LTDC_Init>
  MX_SPI5_Init();
 80005ce:	f000 fb53 	bl	8000c78 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 80005d2:	f001 fc61 	bl	8001e98 <BSP_LCD_Init>
  /* USER CODE END 2 */

  Display_DemoDescription();
 80005d6:	f000 f8f3 	bl	80007c0 <Display_DemoDescription>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Display_DemoDescription();
 80005da:	f000 f8f1 	bl	80007c0 <Display_DemoDescription>
 80005de:	e7fc      	b.n	80005da <main+0x30>

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b094      	sub	sp, #80	; 0x50
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0320 	add.w	r3, r7, #32
 80005ea:	2230      	movs	r2, #48	; 0x30
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f009 fd74 	bl	800a0dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	f107 030c 	add.w	r3, r7, #12
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000604:	2300      	movs	r3, #0
 8000606:	60bb      	str	r3, [r7, #8]
 8000608:	4b2c      	ldr	r3, [pc, #176]	; (80006bc <SystemClock_Config+0xdc>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060c:	4a2b      	ldr	r2, [pc, #172]	; (80006bc <SystemClock_Config+0xdc>)
 800060e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000612:	6413      	str	r3, [r2, #64]	; 0x40
 8000614:	4b29      	ldr	r3, [pc, #164]	; (80006bc <SystemClock_Config+0xdc>)
 8000616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000620:	2300      	movs	r3, #0
 8000622:	607b      	str	r3, [r7, #4]
 8000624:	4b26      	ldr	r3, [pc, #152]	; (80006c0 <SystemClock_Config+0xe0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a25      	ldr	r2, [pc, #148]	; (80006c0 <SystemClock_Config+0xe0>)
 800062a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800062e:	6013      	str	r3, [r2, #0]
 8000630:	4b23      	ldr	r3, [pc, #140]	; (80006c0 <SystemClock_Config+0xe0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800063c:	2301      	movs	r3, #1
 800063e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000640:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000644:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000646:	2302      	movs	r3, #2
 8000648:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800064a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800064e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000650:	2308      	movs	r3, #8
 8000652:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 8000654:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000658:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800065a:	2302      	movs	r3, #2
 800065c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800065e:	2303      	movs	r3, #3
 8000660:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000662:	f107 0320 	add.w	r3, r7, #32
 8000666:	4618      	mov	r0, r3
 8000668:	f005 fcc4 	bl	8005ff4 <HAL_RCC_OscConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000672:	f000 fc2b 	bl	8000ecc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000676:	f005 fc6d 	bl	8005f54 <HAL_PWREx_EnableOverDrive>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000680:	f000 fc24 	bl	8000ecc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	230f      	movs	r3, #15
 8000686:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000688:	2302      	movs	r3, #2
 800068a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000690:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000694:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800069a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	2105      	movs	r1, #5
 80006a2:	4618      	mov	r0, r3
 80006a4:	f005 ff1e 	bl	80064e4 <HAL_RCC_ClockConfig>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006ae:	f000 fc0d 	bl	8000ecc <Error_Handler>
  }
}
 80006b2:	bf00      	nop
 80006b4:	3750      	adds	r7, #80	; 0x50
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40007000 	.word	0x40007000

080006c4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MX_DMA2D_Init+0x5c>)
 80006ca:	4a16      	ldr	r2, [pc, #88]	; (8000724 <MX_DMA2D_Init+0x60>)
 80006cc:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_DMA2D_Init+0x5c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_DMA2D_Init+0x5c>)
 80006d6:	2202      	movs	r2, #2
 80006d8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80006da:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_DMA2D_Init+0x5c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80006e0:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <MX_DMA2D_Init+0x5c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 80006e6:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_DMA2D_Init+0x5c>)
 80006e8:	2202      	movs	r2, #2
 80006ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_DMA2D_Init+0x5c>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80006f2:	4b0b      	ldr	r3, [pc, #44]	; (8000720 <MX_DMA2D_Init+0x5c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80006f8:	4809      	ldr	r0, [pc, #36]	; (8000720 <MX_DMA2D_Init+0x5c>)
 80006fa:	f002 ff6b 	bl	80035d4 <HAL_DMA2D_Init>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000704:	f000 fbe2 	bl	8000ecc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000708:	2101      	movs	r1, #1
 800070a:	4805      	ldr	r0, [pc, #20]	; (8000720 <MX_DMA2D_Init+0x5c>)
 800070c:	f003 f9d0 	bl	8003ab0 <HAL_DMA2D_ConfigLayer>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000716:	f000 fbd9 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	200000e8 	.word	0x200000e8
 8000724:	4002b000 	.word	0x4002b000

08000728 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800072c:	4b1b      	ldr	r3, [pc, #108]	; (800079c <MX_I2C3_Init+0x74>)
 800072e:	4a1c      	ldr	r2, [pc, #112]	; (80007a0 <MX_I2C3_Init+0x78>)
 8000730:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000732:	4b1a      	ldr	r3, [pc, #104]	; (800079c <MX_I2C3_Init+0x74>)
 8000734:	4a1b      	ldr	r2, [pc, #108]	; (80007a4 <MX_I2C3_Init+0x7c>)
 8000736:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000738:	4b18      	ldr	r3, [pc, #96]	; (800079c <MX_I2C3_Init+0x74>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800073e:	4b17      	ldr	r3, [pc, #92]	; (800079c <MX_I2C3_Init+0x74>)
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000744:	4b15      	ldr	r3, [pc, #84]	; (800079c <MX_I2C3_Init+0x74>)
 8000746:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800074a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800074c:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_I2C3_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000752:	4b12      	ldr	r3, [pc, #72]	; (800079c <MX_I2C3_Init+0x74>)
 8000754:	2200      	movs	r2, #0
 8000756:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000758:	4b10      	ldr	r3, [pc, #64]	; (800079c <MX_I2C3_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800075e:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MX_I2C3_Init+0x74>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000764:	480d      	ldr	r0, [pc, #52]	; (800079c <MX_I2C3_Init+0x74>)
 8000766:	f004 fecd 	bl	8005504 <HAL_I2C_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000770:	f000 fbac 	bl	8000ecc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000774:	2100      	movs	r1, #0
 8000776:	4809      	ldr	r0, [pc, #36]	; (800079c <MX_I2C3_Init+0x74>)
 8000778:	f005 f808 	bl	800578c <HAL_I2CEx_ConfigAnalogFilter>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000782:	f000 fba3 	bl	8000ecc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000786:	2100      	movs	r1, #0
 8000788:	4804      	ldr	r0, [pc, #16]	; (800079c <MX_I2C3_Init+0x74>)
 800078a:	f005 f83b 	bl	8005804 <HAL_I2CEx_ConfigDigitalFilter>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000794:	f000 fb9a 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}
 800079c:	20000128 	.word	0x20000128
 80007a0:	40005c00 	.word	0x40005c00
 80007a4:	000186a0 	.word	0x000186a0

080007a8 <ClearScreen>:
static void ClearScreen(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80007ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007b0:	f001 fc1c 	bl	8001fec <BSP_LCD_SetBackColor>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80007b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007b8:	f001 fc4c 	bl	8002054 <BSP_LCD_Clear>
}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}

080007c0 <Display_DemoDescription>:

static void Display_DemoDescription(void)
{
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b099      	sub	sp, #100	; 0x64
 80007c4:	af00      	add	r7, sp, #0
	int16_t minuta=0;
 80007c6:	2300      	movs	r3, #0
 80007c8:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	int16_t godzina=0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	int16_t licznik=0;
 80007d2:	2300      	movs	r3, #0
 80007d4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
  uint8_t desc[50];
  int16_t circle1_x = 25;
 80007d8:	2319      	movs	r3, #25
 80007da:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
  int16_t circle1_y = 200;
 80007de:	23c8      	movs	r3, #200	; 0xc8
 80007e0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  int16_t circle2_x = 25;
 80007e4:	2319      	movs	r3, #25
 80007e6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
  int16_t circle2_y = 200;
 80007ea:	23c8      	movs	r3, #200	; 0xc8
 80007ec:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
  int16_t pozycja = 5;
 80007f0:	2305      	movs	r3, #5
 80007f2:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

  /* Set LCD Foreground Layer */
  BSP_LCD_SelectLayer(1);
 80007f6:	2001      	movs	r0, #1
 80007f8:	f001 fbd0 	bl	8001f9c <BSP_LCD_SelectLayer>

  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80007fc:	48bd      	ldr	r0, [pc, #756]	; (8000af4 <Display_DemoDescription+0x334>)
 80007fe:	f001 fc0f 	bl	8002020 <BSP_LCD_SetFont>
  ClearScreen();
 8000802:	f7ff ffd1 	bl	80007a8 <ClearScreen>
  /* Clear the LCD */
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000806:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800080a:	f001 fbef 	bl	8001fec <BSP_LCD_SetBackColor>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800080e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000812:	f001 fc1f 	bl	8002054 <BSP_LCD_Clear>

  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8000816:	48b8      	ldr	r0, [pc, #736]	; (8000af8 <Display_DemoDescription+0x338>)
 8000818:	f001 fbd0 	bl	8001fbc <BSP_LCD_SetTextColor>

  /* Display LCD messages */

  while (1) {
	  ClearScreen();
 800081c:	f7ff ffc4 	bl	80007a8 <ClearScreen>
	  minuta++;
 8000820:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8000824:	b29b      	uxth	r3, r3
 8000826:	3301      	adds	r3, #1
 8000828:	b29b      	uxth	r3, r3
 800082a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	  licznik++;
 800082e:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8000832:	b29b      	uxth	r3, r3
 8000834:	3301      	adds	r3, #1
 8000836:	b29b      	uxth	r3, r3
 8000838:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	  if(licznik==4&&godzina<6){
 800083c:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8000840:	2b04      	cmp	r3, #4
 8000842:	d113      	bne.n	800086c <Display_DemoDescription+0xac>
 8000844:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8000848:	2b05      	cmp	r3, #5
 800084a:	dc0f      	bgt.n	800086c <Display_DemoDescription+0xac>
		    circle2_x++;
 800084c:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8000850:	b29b      	uxth	r3, r3
 8000852:	3301      	adds	r3, #1
 8000854:	b29b      	uxth	r3, r3
 8000856:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	 	   circle2_y=circle2_y-1;
 800085a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800085e:	3b01      	subs	r3, #1
 8000860:	b29b      	uxth	r3, r3
 8000862:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	 	   licznik=0;
 8000866:	2300      	movs	r3, #0
 8000868:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	  }
	  if(licznik==4&&godzina<12&&godzina>=6){
 800086c:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8000870:	2b04      	cmp	r3, #4
 8000872:	d117      	bne.n	80008a4 <Display_DemoDescription+0xe4>
 8000874:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8000878:	2b0b      	cmp	r3, #11
 800087a:	dc13      	bgt.n	80008a4 <Display_DemoDescription+0xe4>
 800087c:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8000880:	2b05      	cmp	r3, #5
 8000882:	dd0f      	ble.n	80008a4 <Display_DemoDescription+0xe4>
	 		    circle2_x++;
 8000884:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8000888:	b29b      	uxth	r3, r3
 800088a:	3301      	adds	r3, #1
 800088c:	b29b      	uxth	r3, r3
 800088e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	 	 	   circle2_y=circle2_y+1;
 8000892:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8000896:	3301      	adds	r3, #1
 8000898:	b29b      	uxth	r3, r3
 800089a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	 	 	   licznik=0;
 800089e:	2300      	movs	r3, #0
 80008a0:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	 	  }
	   if(minuta==60){
 80008a4:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 80008a8:	2b3c      	cmp	r3, #60	; 0x3c
 80008aa:	d109      	bne.n	80008c0 <Display_DemoDescription+0x100>
	 	  minuta=0;
 80008ac:	2300      	movs	r3, #0
 80008ae:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	 	  godzina++;
 80008b2:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 80008b6:	b29b      	uxth	r3, r3
 80008b8:	3301      	adds	r3, #1
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	   }
	   if(licznik==4&&godzina<18&&godzina>=12){
 80008c0:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80008c4:	2b04      	cmp	r3, #4
 80008c6:	d117      	bne.n	80008f8 <Display_DemoDescription+0x138>
 80008c8:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 80008cc:	2b11      	cmp	r3, #17
 80008ce:	dc13      	bgt.n	80008f8 <Display_DemoDescription+0x138>
 80008d0:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 80008d4:	2b0b      	cmp	r3, #11
 80008d6:	dd0f      	ble.n	80008f8 <Display_DemoDescription+0x138>
	 		    circle1_x++;
 80008d8:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 80008dc:	b29b      	uxth	r3, r3
 80008de:	3301      	adds	r3, #1
 80008e0:	b29b      	uxth	r3, r3
 80008e2:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	 	 	   circle1_y=circle1_y-1;
 80008e6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80008ea:	3b01      	subs	r3, #1
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	 	 	   licznik=0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	 	  }
	 	  if(licznik==4&&godzina<24&&godzina>=18){
 80008f8:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 80008fc:	2b04      	cmp	r3, #4
 80008fe:	d117      	bne.n	8000930 <Display_DemoDescription+0x170>
 8000900:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8000904:	2b17      	cmp	r3, #23
 8000906:	dc13      	bgt.n	8000930 <Display_DemoDescription+0x170>
 8000908:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 800090c:	2b11      	cmp	r3, #17
 800090e:	dd0f      	ble.n	8000930 <Display_DemoDescription+0x170>
	 	 		    circle1_x++;
 8000910:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8000914:	b29b      	uxth	r3, r3
 8000916:	3301      	adds	r3, #1
 8000918:	b29b      	uxth	r3, r3
 800091a:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	 	 	 	   circle1_y=circle1_y+1;
 800091e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000922:	3301      	adds	r3, #1
 8000924:	b29b      	uxth	r3, r3
 8000926:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	 	 	 	   licznik=0;
 800092a:	2300      	movs	r3, #0
 800092c:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	 	 	  }
	   if(godzina==24){
 8000930:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8000934:	2b18      	cmp	r3, #24
 8000936:	d10e      	bne.n	8000956 <Display_DemoDescription+0x196>
	   	 	  godzina=0;
 8000938:	2300      	movs	r3, #0
 800093a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	   	 	 circle1_x = 25;
 800093e:	2319      	movs	r3, #25
 8000940:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
	   	 	  circle1_y = 200;
 8000944:	23c8      	movs	r3, #200	; 0xc8
 8000946:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
	   	 	 circle2_x = 25;
 800094a:	2319      	movs	r3, #25
 800094c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
	   	 	 circle2_y = 200;
 8000950:	23c8      	movs	r3, #200	; 0xc8
 8000952:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	   }
    /* Draw Bitmap */
	  char minuta_str[10];
	  sprintf(minuta_str, "%d", minuta);
 8000956:	f9b7 205e 	ldrsh.w	r2, [r7, #94]	; 0x5e
 800095a:	f107 0310 	add.w	r3, r7, #16
 800095e:	4967      	ldr	r1, [pc, #412]	; (8000afc <Display_DemoDescription+0x33c>)
 8000960:	4618      	mov	r0, r3
 8000962:	f009 fcb3 	bl	800a2cc <siprintf>
	  char godzina_str[10];
	  	  sprintf(godzina_str, "%d", godzina);
 8000966:	f9b7 205c 	ldrsh.w	r2, [r7, #92]	; 0x5c
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	4963      	ldr	r1, [pc, #396]	; (8000afc <Display_DemoDescription+0x33c>)
 800096e:	4618      	mov	r0, r3
 8000970:	f009 fcac 	bl	800a2cc <siprintf>
	      BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8000974:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000978:	f001 fb20 	bl	8001fbc <BSP_LCD_SetTextColor>
	      BSP_LCD_SetFont(&Font20);
 800097c:	4860      	ldr	r0, [pc, #384]	; (8000b00 <Display_DemoDescription+0x340>)
 800097e:	f001 fb4f 	bl	8002020 <BSP_LCD_SetFont>
	  BSP_LCD_DisplayStringAt(0, 10, (uint8_t*)"Godzina: ", CENTER_MODE);
 8000982:	2301      	movs	r3, #1
 8000984:	4a5f      	ldr	r2, [pc, #380]	; (8000b04 <Display_DemoDescription+0x344>)
 8000986:	210a      	movs	r1, #10
 8000988:	2000      	movs	r0, #0
 800098a:	f001 fbcf 	bl	800212c <BSP_LCD_DisplayStringAt>
	  BSP_LCD_DisplayStringAt(0, 25, (uint8_t*)godzina_str, CENTER_MODE);
 800098e:	1d3a      	adds	r2, r7, #4
 8000990:	2301      	movs	r3, #1
 8000992:	2119      	movs	r1, #25
 8000994:	2000      	movs	r0, #0
 8000996:	f001 fbc9 	bl	800212c <BSP_LCD_DisplayStringAt>
	  BSP_LCD_DisplayStringAt(0, 40, (uint8_t*)minuta_str, CENTER_MODE);
 800099a:	f107 0210 	add.w	r2, r7, #16
 800099e:	2301      	movs	r3, #1
 80009a0:	2128      	movs	r1, #40	; 0x28
 80009a2:	2000      	movs	r0, #0
 80009a4:	f001 fbc2 	bl	800212c <BSP_LCD_DisplayStringAt>
	  if(godzina>=12){
 80009a8:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 80009ac:	2b0b      	cmp	r3, #11
 80009ae:	dd53      	ble.n	8000a58 <Display_DemoDescription+0x298>
    BSP_LCD_SetTextColor(LCD_COLOR_YELLOW);
 80009b0:	f06f 00ff 	mvn.w	r0, #255	; 0xff
 80009b4:	f001 fb02 	bl	8001fbc <BSP_LCD_SetTextColor>
    BSP_LCD_DrawCircle(circle1_x, circle1_y, 20);
 80009b8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80009bc:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 80009c0:	2214      	movs	r2, #20
 80009c2:	4618      	mov	r0, r3
 80009c4:	f001 fd78 	bl	80024b8 <BSP_LCD_DrawCircle>
    BSP_LCD_FillCircle(circle1_x, circle1_y, 20);
 80009c8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80009cc:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 80009d0:	2214      	movs	r2, #20
 80009d2:	4618      	mov	r0, r3
 80009d4:	f001 feb4 	bl	8002740 <BSP_LCD_FillCircle>
    BSP_LCD_DrawLine(circle1_x+40, circle1_y, circle1_x-40, circle1_y);
 80009d8:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80009dc:	3328      	adds	r3, #40	; 0x28
 80009de:	b298      	uxth	r0, r3
 80009e0:	f8b7 1056 	ldrh.w	r1, [r7, #86]	; 0x56
 80009e4:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 80009e8:	3b28      	subs	r3, #40	; 0x28
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80009f0:	f001 fc98 	bl	8002324 <BSP_LCD_DrawLine>
    BSP_LCD_DrawLine(circle1_x, circle1_y-40, circle1_x, circle1_y+40);
 80009f4:	f8b7 0058 	ldrh.w	r0, [r7, #88]	; 0x58
 80009f8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80009fc:	3b28      	subs	r3, #40	; 0x28
 80009fe:	b299      	uxth	r1, r3
 8000a00:	f8b7 2058 	ldrh.w	r2, [r7, #88]	; 0x58
 8000a04:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000a08:	3328      	adds	r3, #40	; 0x28
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	f001 fc8a 	bl	8002324 <BSP_LCD_DrawLine>
    BSP_LCD_DrawLine(circle1_x+40, circle1_y+40, circle1_x-40, circle1_y-40);
 8000a10:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000a14:	3328      	adds	r3, #40	; 0x28
 8000a16:	b298      	uxth	r0, r3
 8000a18:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000a1c:	3328      	adds	r3, #40	; 0x28
 8000a1e:	b299      	uxth	r1, r3
 8000a20:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000a24:	3b28      	subs	r3, #40	; 0x28
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000a2c:	3b28      	subs	r3, #40	; 0x28
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	f001 fc78 	bl	8002324 <BSP_LCD_DrawLine>
    BSP_LCD_DrawLine(circle1_x+40, circle1_y-40, circle1_x-40, circle1_y+40);
 8000a34:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000a38:	3328      	adds	r3, #40	; 0x28
 8000a3a:	b298      	uxth	r0, r3
 8000a3c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000a40:	3b28      	subs	r3, #40	; 0x28
 8000a42:	b299      	uxth	r1, r3
 8000a44:	f8b7 3058 	ldrh.w	r3, [r7, #88]	; 0x58
 8000a48:	3b28      	subs	r3, #40	; 0x28
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8000a50:	3328      	adds	r3, #40	; 0x28
 8000a52:	b29b      	uxth	r3, r3
 8000a54:	f001 fc66 	bl	8002324 <BSP_LCD_DrawLine>
	  }
	  if(godzina<12){
 8000a58:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8000a5c:	2b0b      	cmp	r3, #11
 8000a5e:	dc12      	bgt.n	8000a86 <Display_DemoDescription+0x2c6>
    BSP_LCD_SetTextColor(LCD_COLOR_GRAY);
 8000a60:	4829      	ldr	r0, [pc, #164]	; (8000b08 <Display_DemoDescription+0x348>)
 8000a62:	f001 faab 	bl	8001fbc <BSP_LCD_SetTextColor>
    BSP_LCD_DrawCircle(circle2_x, circle2_y, 20);
 8000a66:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000a6a:	f8b7 1052 	ldrh.w	r1, [r7, #82]	; 0x52
 8000a6e:	2214      	movs	r2, #20
 8000a70:	4618      	mov	r0, r3
 8000a72:	f001 fd21 	bl	80024b8 <BSP_LCD_DrawCircle>
    BSP_LCD_FillCircle(circle2_x, circle2_y, 20);
 8000a76:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8000a7a:	f8b7 1052 	ldrh.w	r1, [r7, #82]	; 0x52
 8000a7e:	2214      	movs	r2, #20
 8000a80:	4618      	mov	r0, r3
 8000a82:	f001 fe5d 	bl	8002740 <BSP_LCD_FillCircle>
  /* if (circle1_x >= BSP_LCD_GetXSize() - 20 || circle1_x <= 20) {
      circle_speed = -circle_speed;
    }*/
    //if(circle_y==10)
    /* Clear the area where description is displayed */
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000a86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a8a:	f001 faaf 	bl	8001fec <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000a8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a92:	f001 fa93 	bl	8001fbc <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(0, BSP_LCD_GetYSize() / 2 + 45, BSP_LCD_GetXSize(), 200);
 8000a96:	f001 fa75 	bl	8001f84 <BSP_LCD_GetYSize>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	085b      	lsrs	r3, r3, #1
 8000a9e:	b29b      	uxth	r3, r3
 8000aa0:	332d      	adds	r3, #45	; 0x2d
 8000aa2:	b29c      	uxth	r4, r3
 8000aa4:	f001 fa62 	bl	8001f6c <BSP_LCD_GetXSize>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	23c8      	movs	r3, #200	; 0xc8
 8000aae:	4621      	mov	r1, r4
 8000ab0:	2000      	movs	r0, #0
 8000ab2:	f001 fdeb 	bl	800268c <BSP_LCD_FillRect>

    /* Display description */
    BSP_LCD_SetFont(&Font12);
 8000ab6:	4815      	ldr	r0, [pc, #84]	; (8000b0c <Display_DemoDescription+0x34c>)
 8000ab8:	f001 fab2 	bl	8002020 <BSP_LCD_SetFont>
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8000abc:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8000ac0:	f001 fa7c 	bl	8001fbc <BSP_LCD_SetTextColor>
 //   BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() / 2 + 45, (uint8_t *)desc, CENTER_MODE);

    /* Delay to control the animation speed */
    BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8000ac4:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8000ac8:	f001 fa78 	bl	8001fbc <BSP_LCD_SetTextColor>
    BSP_LCD_FillRect(0, BSP_LCD_GetYSize()/2 +50, BSP_LCD_GetXSize(), 200);
 8000acc:	f001 fa5a 	bl	8001f84 <BSP_LCD_GetYSize>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	085b      	lsrs	r3, r3, #1
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	3332      	adds	r3, #50	; 0x32
 8000ad8:	b29c      	uxth	r4, r3
 8000ada:	f001 fa47 	bl	8001f6c <BSP_LCD_GetXSize>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	b29a      	uxth	r2, r3
 8000ae2:	23c8      	movs	r3, #200	; 0xc8
 8000ae4:	4621      	mov	r1, r4
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	f001 fdd0 	bl	800268c <BSP_LCD_FillRect>
    HAL_Delay(100);
 8000aec:	2064      	movs	r0, #100	; 0x64
 8000aee:	f002 faad 	bl	800304c <HAL_Delay>
  while (1) {
 8000af2:	e693      	b.n	800081c <Display_DemoDescription+0x5c>
 8000af4:	20000040 	.word	0x20000040
 8000af8:	ff000080 	.word	0xff000080
 8000afc:	0800a9c4 	.word	0x0800a9c4
 8000b00:	20000048 	.word	0x20000048
 8000b04:	0800a9c8 	.word	0x0800a9c8
 8000b08:	ff808080 	.word	0xff808080
 8000b0c:	20000050 	.word	0x20000050

08000b10 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b09a      	sub	sp, #104	; 0x68
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000b16:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b1a:	2234      	movs	r2, #52	; 0x34
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f009 fadc 	bl	800a0dc <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000b24:	463b      	mov	r3, r7
 8000b26:	2234      	movs	r2, #52	; 0x34
 8000b28:	2100      	movs	r1, #0
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f009 fad6 	bl	800a0dc <memset>

  /* USER CODE BEGIN LTDC_Init 1 */
  ili9341_Init();
 8000b30:	f000 fe57 	bl	80017e2 <ili9341_Init>
  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000b34:	4b4e      	ldr	r3, [pc, #312]	; (8000c70 <MX_LTDC_Init+0x160>)
 8000b36:	4a4f      	ldr	r2, [pc, #316]	; (8000c74 <MX_LTDC_Init+0x164>)
 8000b38:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000b3a:	4b4d      	ldr	r3, [pc, #308]	; (8000c70 <MX_LTDC_Init+0x160>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000b40:	4b4b      	ldr	r3, [pc, #300]	; (8000c70 <MX_LTDC_Init+0x160>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000b46:	4b4a      	ldr	r3, [pc, #296]	; (8000c70 <MX_LTDC_Init+0x160>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000b4c:	4b48      	ldr	r3, [pc, #288]	; (8000c70 <MX_LTDC_Init+0x160>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000b52:	4b47      	ldr	r3, [pc, #284]	; (8000c70 <MX_LTDC_Init+0x160>)
 8000b54:	2207      	movs	r2, #7
 8000b56:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000b58:	4b45      	ldr	r3, [pc, #276]	; (8000c70 <MX_LTDC_Init+0x160>)
 8000b5a:	2203      	movs	r2, #3
 8000b5c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000b5e:	4b44      	ldr	r3, [pc, #272]	; (8000c70 <MX_LTDC_Init+0x160>)
 8000b60:	220e      	movs	r2, #14
 8000b62:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000b64:	4b42      	ldr	r3, [pc, #264]	; (8000c70 <MX_LTDC_Init+0x160>)
 8000b66:	2205      	movs	r2, #5
 8000b68:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000b6a:	4b41      	ldr	r3, [pc, #260]	; (8000c70 <MX_LTDC_Init+0x160>)
 8000b6c:	f240 228e 	movw	r2, #654	; 0x28e
 8000b70:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000b72:	4b3f      	ldr	r3, [pc, #252]	; (8000c70 <MX_LTDC_Init+0x160>)
 8000b74:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000b78:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8000b7a:	4b3d      	ldr	r3, [pc, #244]	; (8000c70 <MX_LTDC_Init+0x160>)
 8000b7c:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000b80:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000b82:	4b3b      	ldr	r3, [pc, #236]	; (8000c70 <MX_LTDC_Init+0x160>)
 8000b84:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000b88:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000b8a:	4b39      	ldr	r3, [pc, #228]	; (8000c70 <MX_LTDC_Init+0x160>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000b92:	4b37      	ldr	r3, [pc, #220]	; (8000c70 <MX_LTDC_Init+0x160>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000b9a:	4b35      	ldr	r3, [pc, #212]	; (8000c70 <MX_LTDC_Init+0x160>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000ba2:	4833      	ldr	r0, [pc, #204]	; (8000c70 <MX_LTDC_Init+0x160>)
 8000ba4:	f004 fe6e 	bl	8005884 <HAL_LTDC_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_LTDC_Init+0xa2>
  {
    Error_Handler();
 8000bae:	f000 f98d 	bl	8000ecc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000bce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bd2:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000bd4:	2305      	movs	r3, #5
 8000bd6:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000bf6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	481c      	ldr	r0, [pc, #112]	; (8000c70 <MX_LTDC_Init+0x160>)
 8000c00:	f004 ffd2 	bl	8005ba8 <HAL_LTDC_ConfigLayer>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_LTDC_Init+0xfe>
  {
    Error_Handler();
 8000c0a:	f000 f95f 	bl	8000ecc <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000c2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c2e:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000c30:	2305      	movs	r3, #5
 8000c32:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000c40:	2300      	movs	r3, #0
 8000c42:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000c52:	463b      	mov	r3, r7
 8000c54:	2201      	movs	r2, #1
 8000c56:	4619      	mov	r1, r3
 8000c58:	4805      	ldr	r0, [pc, #20]	; (8000c70 <MX_LTDC_Init+0x160>)
 8000c5a:	f004 ffa5 	bl	8005ba8 <HAL_LTDC_ConfigLayer>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_LTDC_Init+0x158>
  {
    Error_Handler();
 8000c64:	f000 f932 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	3768      	adds	r7, #104	; 0x68
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	2000017c 	.word	0x2000017c
 8000c74:	40016800 	.word	0x40016800

08000c78 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000c7c:	4b17      	ldr	r3, [pc, #92]	; (8000cdc <MX_SPI5_Init+0x64>)
 8000c7e:	4a18      	ldr	r2, [pc, #96]	; (8000ce0 <MX_SPI5_Init+0x68>)
 8000c80:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000c82:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <MX_SPI5_Init+0x64>)
 8000c84:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c88:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000c8a:	4b14      	ldr	r3, [pc, #80]	; (8000cdc <MX_SPI5_Init+0x64>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <MX_SPI5_Init+0x64>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c96:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <MX_SPI5_Init+0x64>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <MX_SPI5_Init+0x64>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <MX_SPI5_Init+0x64>)
 8000ca4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ca8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <MX_SPI5_Init+0x64>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cb0:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <MX_SPI5_Init+0x64>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <MX_SPI5_Init+0x64>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cbc:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <MX_SPI5_Init+0x64>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <MX_SPI5_Init+0x64>)
 8000cc4:	220a      	movs	r2, #10
 8000cc6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000cc8:	4804      	ldr	r0, [pc, #16]	; (8000cdc <MX_SPI5_Init+0x64>)
 8000cca:	f006 f8ae 	bl	8006e2a <HAL_SPI_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000cd4:	f000 f8fa 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000224 	.word	0x20000224
 8000ce0:	40015000 	.word	0x40015000

08000ce4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ce8:	4b11      	ldr	r3, [pc, #68]	; (8000d30 <MX_USART1_UART_Init+0x4c>)
 8000cea:	4a12      	ldr	r2, [pc, #72]	; (8000d34 <MX_USART1_UART_Init+0x50>)
 8000cec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cee:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <MX_USART1_UART_Init+0x4c>)
 8000cf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cf4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cf6:	4b0e      	ldr	r3, [pc, #56]	; (8000d30 <MX_USART1_UART_Init+0x4c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000cfc:	4b0c      	ldr	r3, [pc, #48]	; (8000d30 <MX_USART1_UART_Init+0x4c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d02:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <MX_USART1_UART_Init+0x4c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d08:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <MX_USART1_UART_Init+0x4c>)
 8000d0a:	220c      	movs	r2, #12
 8000d0c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d0e:	4b08      	ldr	r3, [pc, #32]	; (8000d30 <MX_USART1_UART_Init+0x4c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d14:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <MX_USART1_UART_Init+0x4c>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d1a:	4805      	ldr	r0, [pc, #20]	; (8000d30 <MX_USART1_UART_Init+0x4c>)
 8000d1c:	f007 f912 	bl	8007f44 <HAL_UART_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d26:	f000 f8d1 	bl	8000ecc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	2000027c 	.word	0x2000027c
 8000d34:	40011000 	.word	0x40011000

08000d38 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b088      	sub	sp, #32
 8000d3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000d3e:	1d3b      	adds	r3, r7, #4
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
 8000d4c:	615a      	str	r2, [r3, #20]
 8000d4e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000d50:	4b1e      	ldr	r3, [pc, #120]	; (8000dcc <MX_FMC_Init+0x94>)
 8000d52:	4a1f      	ldr	r2, [pc, #124]	; (8000dd0 <MX_FMC_Init+0x98>)
 8000d54:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000d56:	4b1d      	ldr	r3, [pc, #116]	; (8000dcc <MX_FMC_Init+0x94>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000d5c:	4b1b      	ldr	r3, [pc, #108]	; (8000dcc <MX_FMC_Init+0x94>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000d62:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <MX_FMC_Init+0x94>)
 8000d64:	2204      	movs	r2, #4
 8000d66:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000d68:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <MX_FMC_Init+0x94>)
 8000d6a:	2210      	movs	r2, #16
 8000d6c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000d6e:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <MX_FMC_Init+0x94>)
 8000d70:	2240      	movs	r2, #64	; 0x40
 8000d72:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000d74:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <MX_FMC_Init+0x94>)
 8000d76:	2280      	movs	r2, #128	; 0x80
 8000d78:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000d7a:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <MX_FMC_Init+0x94>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <MX_FMC_Init+0x94>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000d86:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <MX_FMC_Init+0x94>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000d8c:	4b0f      	ldr	r3, [pc, #60]	; (8000dcc <MX_FMC_Init+0x94>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000d92:	2310      	movs	r3, #16
 8000d94:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000d96:	2310      	movs	r3, #16
 8000d98:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8000d9a:	2310      	movs	r3, #16
 8000d9c:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8000d9e:	2310      	movs	r3, #16
 8000da0:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000da2:	2310      	movs	r3, #16
 8000da4:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000da6:	2310      	movs	r3, #16
 8000da8:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8000daa:	2310      	movs	r3, #16
 8000dac:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	4619      	mov	r1, r3
 8000db2:	4806      	ldr	r0, [pc, #24]	; (8000dcc <MX_FMC_Init+0x94>)
 8000db4:	f005 ffa8 	bl	8006d08 <HAL_SDRAM_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8000dbe:	f000 f885 	bl	8000ecc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000dc2:	bf00      	nop
 8000dc4:	3720      	adds	r7, #32
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	200002c0 	.word	0x200002c0
 8000dd0:	a0000140 	.word	0xa0000140

08000dd4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b089      	sub	sp, #36	; 0x24
 8000dd8:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
 8000dde:	4b3a      	ldr	r3, [pc, #232]	; (8000ec8 <MX_GPIO_Init+0xf4>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a39      	ldr	r2, [pc, #228]	; (8000ec8 <MX_GPIO_Init+0xf4>)
 8000de4:	f043 0320 	orr.w	r3, r3, #32
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b37      	ldr	r3, [pc, #220]	; (8000ec8 <MX_GPIO_Init+0xf4>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0320 	and.w	r3, r3, #32
 8000df2:	61fb      	str	r3, [r7, #28]
 8000df4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	61bb      	str	r3, [r7, #24]
 8000dfa:	4b33      	ldr	r3, [pc, #204]	; (8000ec8 <MX_GPIO_Init+0xf4>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a32      	ldr	r2, [pc, #200]	; (8000ec8 <MX_GPIO_Init+0xf4>)
 8000e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b30      	ldr	r3, [pc, #192]	; (8000ec8 <MX_GPIO_Init+0xf4>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e0e:	61bb      	str	r3, [r7, #24]
 8000e10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	617b      	str	r3, [r7, #20]
 8000e16:	4b2c      	ldr	r3, [pc, #176]	; (8000ec8 <MX_GPIO_Init+0xf4>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	4a2b      	ldr	r2, [pc, #172]	; (8000ec8 <MX_GPIO_Init+0xf4>)
 8000e1c:	f043 0304 	orr.w	r3, r3, #4
 8000e20:	6313      	str	r3, [r2, #48]	; 0x30
 8000e22:	4b29      	ldr	r3, [pc, #164]	; (8000ec8 <MX_GPIO_Init+0xf4>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	f003 0304 	and.w	r3, r3, #4
 8000e2a:	617b      	str	r3, [r7, #20]
 8000e2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	613b      	str	r3, [r7, #16]
 8000e32:	4b25      	ldr	r3, [pc, #148]	; (8000ec8 <MX_GPIO_Init+0xf4>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a24      	ldr	r2, [pc, #144]	; (8000ec8 <MX_GPIO_Init+0xf4>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b22      	ldr	r3, [pc, #136]	; (8000ec8 <MX_GPIO_Init+0xf4>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	4b1e      	ldr	r3, [pc, #120]	; (8000ec8 <MX_GPIO_Init+0xf4>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e52:	4a1d      	ldr	r2, [pc, #116]	; (8000ec8 <MX_GPIO_Init+0xf4>)
 8000e54:	f043 0302 	orr.w	r3, r3, #2
 8000e58:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <MX_GPIO_Init+0xf4>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5e:	f003 0302 	and.w	r3, r3, #2
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e66:	2300      	movs	r3, #0
 8000e68:	60bb      	str	r3, [r7, #8]
 8000e6a:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <MX_GPIO_Init+0xf4>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a16      	ldr	r2, [pc, #88]	; (8000ec8 <MX_GPIO_Init+0xf4>)
 8000e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <MX_GPIO_Init+0xf4>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e82:	2300      	movs	r3, #0
 8000e84:	607b      	str	r3, [r7, #4]
 8000e86:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <MX_GPIO_Init+0xf4>)
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	4a0f      	ldr	r2, [pc, #60]	; (8000ec8 <MX_GPIO_Init+0xf4>)
 8000e8c:	f043 0310 	orr.w	r3, r3, #16
 8000e90:	6313      	str	r3, [r2, #48]	; 0x30
 8000e92:	4b0d      	ldr	r3, [pc, #52]	; (8000ec8 <MX_GPIO_Init+0xf4>)
 8000e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e96:	f003 0310 	and.w	r3, r3, #16
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	603b      	str	r3, [r7, #0]
 8000ea2:	4b09      	ldr	r3, [pc, #36]	; (8000ec8 <MX_GPIO_Init+0xf4>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	4a08      	ldr	r2, [pc, #32]	; (8000ec8 <MX_GPIO_Init+0xf4>)
 8000ea8:	f043 0308 	orr.w	r3, r3, #8
 8000eac:	6313      	str	r3, [r2, #48]	; 0x30
 8000eae:	4b06      	ldr	r3, [pc, #24]	; (8000ec8 <MX_GPIO_Init+0xf4>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	f003 0308 	and.w	r3, r3, #8
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000eba:	bf00      	nop
 8000ebc:	3724      	adds	r7, #36	; 0x24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	40023800 	.word	0x40023800

08000ecc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed0:	b672      	cpsid	i
}
 8000ed2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <Error_Handler+0x8>
	...

08000ed8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	607b      	str	r3, [r7, #4]
 8000ee2:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <HAL_MspInit+0x54>)
 8000ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee6:	4a11      	ldr	r2, [pc, #68]	; (8000f2c <HAL_MspInit+0x54>)
 8000ee8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eec:	6453      	str	r3, [r2, #68]	; 0x44
 8000eee:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <HAL_MspInit+0x54>)
 8000ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	603b      	str	r3, [r7, #0]
 8000efe:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <HAL_MspInit+0x54>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	4a0a      	ldr	r2, [pc, #40]	; (8000f2c <HAL_MspInit+0x54>)
 8000f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f08:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0a:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <HAL_MspInit+0x54>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	210f      	movs	r1, #15
 8000f1a:	f06f 0001 	mvn.w	r0, #1
 8000f1e:	f002 f971 	bl	8003204 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40023800 	.word	0x40023800

08000f30 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a0e      	ldr	r2, [pc, #56]	; (8000f78 <HAL_DMA2D_MspInit+0x48>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d115      	bne.n	8000f6e <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60fb      	str	r3, [r7, #12]
 8000f46:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <HAL_DMA2D_MspInit+0x4c>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4a:	4a0c      	ldr	r2, [pc, #48]	; (8000f7c <HAL_DMA2D_MspInit+0x4c>)
 8000f4c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000f50:	6313      	str	r3, [r2, #48]	; 0x30
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <HAL_DMA2D_MspInit+0x4c>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000f5e:	2200      	movs	r2, #0
 8000f60:	2105      	movs	r1, #5
 8000f62:	205a      	movs	r0, #90	; 0x5a
 8000f64:	f002 f94e 	bl	8003204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000f68:	205a      	movs	r0, #90	; 0x5a
 8000f6a:	f002 f967 	bl	800323c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	4002b000 	.word	0x4002b000
 8000f7c:	40023800 	.word	0x40023800

08000f80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b08a      	sub	sp, #40	; 0x28
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
 8000f96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a29      	ldr	r2, [pc, #164]	; (8001044 <HAL_I2C_MspInit+0xc4>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d14b      	bne.n	800103a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	4b28      	ldr	r3, [pc, #160]	; (8001048 <HAL_I2C_MspInit+0xc8>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	4a27      	ldr	r2, [pc, #156]	; (8001048 <HAL_I2C_MspInit+0xc8>)
 8000fac:	f043 0304 	orr.w	r3, r3, #4
 8000fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb2:	4b25      	ldr	r3, [pc, #148]	; (8001048 <HAL_I2C_MspInit+0xc8>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	f003 0304 	and.w	r3, r3, #4
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	4b21      	ldr	r3, [pc, #132]	; (8001048 <HAL_I2C_MspInit+0xc8>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a20      	ldr	r2, [pc, #128]	; (8001048 <HAL_I2C_MspInit+0xc8>)
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b1e      	ldr	r3, [pc, #120]	; (8001048 <HAL_I2C_MspInit+0xc8>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f003 0301 	and.w	r3, r3, #1
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000fda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fe0:	2312      	movs	r3, #18
 8000fe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000fec:	2304      	movs	r3, #4
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	4815      	ldr	r0, [pc, #84]	; (800104c <HAL_I2C_MspInit+0xcc>)
 8000ff8:	f002 fe88 	bl	8003d0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000ffc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001000:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001002:	2312      	movs	r3, #18
 8001004:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001006:	2301      	movs	r3, #1
 8001008:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800100e:	2304      	movs	r3, #4
 8001010:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001012:	f107 0314 	add.w	r3, r7, #20
 8001016:	4619      	mov	r1, r3
 8001018:	480d      	ldr	r0, [pc, #52]	; (8001050 <HAL_I2C_MspInit+0xd0>)
 800101a:	f002 fe77 	bl	8003d0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60bb      	str	r3, [r7, #8]
 8001022:	4b09      	ldr	r3, [pc, #36]	; (8001048 <HAL_I2C_MspInit+0xc8>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	4a08      	ldr	r2, [pc, #32]	; (8001048 <HAL_I2C_MspInit+0xc8>)
 8001028:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800102c:	6413      	str	r3, [r2, #64]	; 0x40
 800102e:	4b06      	ldr	r3, [pc, #24]	; (8001048 <HAL_I2C_MspInit+0xc8>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800103a:	bf00      	nop
 800103c:	3728      	adds	r7, #40	; 0x28
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40005c00 	.word	0x40005c00
 8001048:	40023800 	.word	0x40023800
 800104c:	40020800 	.word	0x40020800
 8001050:	40020000 	.word	0x40020000

08001054 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b09a      	sub	sp, #104	; 0x68
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800106c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001070:	2230      	movs	r2, #48	; 0x30
 8001072:	2100      	movs	r1, #0
 8001074:	4618      	mov	r0, r3
 8001076:	f009 f831 	bl	800a0dc <memset>
  if(hltdc->Instance==LTDC)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a85      	ldr	r2, [pc, #532]	; (8001294 <HAL_LTDC_MspInit+0x240>)
 8001080:	4293      	cmp	r3, r2
 8001082:	f040 8102 	bne.w	800128a <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001086:	2308      	movs	r3, #8
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800108a:	2332      	movs	r3, #50	; 0x32
 800108c:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800108e:	2302      	movs	r3, #2
 8001090:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001092:	2300      	movs	r3, #0
 8001094:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001096:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800109a:	4618      	mov	r0, r3
 800109c:	f005 fc74 	bl	8006988 <HAL_RCCEx_PeriphCLKConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80010a6:	f7ff ff11 	bl	8000ecc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	623b      	str	r3, [r7, #32]
 80010ae:	4b7a      	ldr	r3, [pc, #488]	; (8001298 <HAL_LTDC_MspInit+0x244>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	4a79      	ldr	r2, [pc, #484]	; (8001298 <HAL_LTDC_MspInit+0x244>)
 80010b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80010b8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ba:	4b77      	ldr	r3, [pc, #476]	; (8001298 <HAL_LTDC_MspInit+0x244>)
 80010bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010be:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80010c2:	623b      	str	r3, [r7, #32]
 80010c4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	61fb      	str	r3, [r7, #28]
 80010ca:	4b73      	ldr	r3, [pc, #460]	; (8001298 <HAL_LTDC_MspInit+0x244>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	4a72      	ldr	r2, [pc, #456]	; (8001298 <HAL_LTDC_MspInit+0x244>)
 80010d0:	f043 0320 	orr.w	r3, r3, #32
 80010d4:	6313      	str	r3, [r2, #48]	; 0x30
 80010d6:	4b70      	ldr	r3, [pc, #448]	; (8001298 <HAL_LTDC_MspInit+0x244>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010da:	f003 0320 	and.w	r3, r3, #32
 80010de:	61fb      	str	r3, [r7, #28]
 80010e0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	61bb      	str	r3, [r7, #24]
 80010e6:	4b6c      	ldr	r3, [pc, #432]	; (8001298 <HAL_LTDC_MspInit+0x244>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a6b      	ldr	r2, [pc, #428]	; (8001298 <HAL_LTDC_MspInit+0x244>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b69      	ldr	r3, [pc, #420]	; (8001298 <HAL_LTDC_MspInit+0x244>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	61bb      	str	r3, [r7, #24]
 80010fc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	4b65      	ldr	r3, [pc, #404]	; (8001298 <HAL_LTDC_MspInit+0x244>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4a64      	ldr	r2, [pc, #400]	; (8001298 <HAL_LTDC_MspInit+0x244>)
 8001108:	f043 0302 	orr.w	r3, r3, #2
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4b62      	ldr	r3, [pc, #392]	; (8001298 <HAL_LTDC_MspInit+0x244>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	617b      	str	r3, [r7, #20]
 8001118:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
 800111e:	4b5e      	ldr	r3, [pc, #376]	; (8001298 <HAL_LTDC_MspInit+0x244>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a5d      	ldr	r2, [pc, #372]	; (8001298 <HAL_LTDC_MspInit+0x244>)
 8001124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b5b      	ldr	r3, [pc, #364]	; (8001298 <HAL_LTDC_MspInit+0x244>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60fb      	str	r3, [r7, #12]
 800113a:	4b57      	ldr	r3, [pc, #348]	; (8001298 <HAL_LTDC_MspInit+0x244>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a56      	ldr	r2, [pc, #344]	; (8001298 <HAL_LTDC_MspInit+0x244>)
 8001140:	f043 0304 	orr.w	r3, r3, #4
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b54      	ldr	r3, [pc, #336]	; (8001298 <HAL_LTDC_MspInit+0x244>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f003 0304 	and.w	r3, r3, #4
 800114e:	60fb      	str	r3, [r7, #12]
 8001150:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	4b50      	ldr	r3, [pc, #320]	; (8001298 <HAL_LTDC_MspInit+0x244>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	4a4f      	ldr	r2, [pc, #316]	; (8001298 <HAL_LTDC_MspInit+0x244>)
 800115c:	f043 0308 	orr.w	r3, r3, #8
 8001160:	6313      	str	r3, [r2, #48]	; 0x30
 8001162:	4b4d      	ldr	r3, [pc, #308]	; (8001298 <HAL_LTDC_MspInit+0x244>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	f003 0308 	and.w	r3, r3, #8
 800116a:	60bb      	str	r3, [r7, #8]
 800116c:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800116e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001172:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001174:	2302      	movs	r3, #2
 8001176:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001178:	2300      	movs	r3, #0
 800117a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	2300      	movs	r3, #0
 800117e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001180:	230e      	movs	r3, #14
 8001182:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001184:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001188:	4619      	mov	r1, r3
 800118a:	4844      	ldr	r0, [pc, #272]	; (800129c <HAL_LTDC_MspInit+0x248>)
 800118c:	f002 fdbe 	bl	8003d0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001190:	f641 0358 	movw	r3, #6232	; 0x1858
 8001194:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001196:	2302      	movs	r3, #2
 8001198:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2300      	movs	r3, #0
 80011a0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011a2:	230e      	movs	r3, #14
 80011a4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011aa:	4619      	mov	r1, r3
 80011ac:	483c      	ldr	r0, [pc, #240]	; (80012a0 <HAL_LTDC_MspInit+0x24c>)
 80011ae:	f002 fdad 	bl	8003d0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80011b2:	2303      	movs	r3, #3
 80011b4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b6:	2302      	movs	r3, #2
 80011b8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ba:	2300      	movs	r3, #0
 80011bc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011be:	2300      	movs	r3, #0
 80011c0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80011c2:	2309      	movs	r3, #9
 80011c4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011c6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011ca:	4619      	mov	r1, r3
 80011cc:	4835      	ldr	r0, [pc, #212]	; (80012a4 <HAL_LTDC_MspInit+0x250>)
 80011ce:	f002 fd9d 	bl	8003d0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80011d2:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 80011d6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d8:	2302      	movs	r3, #2
 80011da:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e0:	2300      	movs	r3, #0
 80011e2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011e4:	230e      	movs	r3, #14
 80011e6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011ec:	4619      	mov	r1, r3
 80011ee:	482d      	ldr	r0, [pc, #180]	; (80012a4 <HAL_LTDC_MspInit+0x250>)
 80011f0:	f002 fd8c 	bl	8003d0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80011f4:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80011f8:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fa:	2302      	movs	r3, #2
 80011fc:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001202:	2300      	movs	r3, #0
 8001204:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001206:	230e      	movs	r3, #14
 8001208:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800120a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800120e:	4619      	mov	r1, r3
 8001210:	4825      	ldr	r0, [pc, #148]	; (80012a8 <HAL_LTDC_MspInit+0x254>)
 8001212:	f002 fd7b 	bl	8003d0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001216:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800121a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800121c:	2302      	movs	r3, #2
 800121e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001224:	2300      	movs	r3, #0
 8001226:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001228:	230e      	movs	r3, #14
 800122a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001230:	4619      	mov	r1, r3
 8001232:	481e      	ldr	r0, [pc, #120]	; (80012ac <HAL_LTDC_MspInit+0x258>)
 8001234:	f002 fd6a 	bl	8003d0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001238:	2348      	movs	r3, #72	; 0x48
 800123a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123c:	2302      	movs	r3, #2
 800123e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2300      	movs	r3, #0
 8001246:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001248:	230e      	movs	r3, #14
 800124a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800124c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001250:	4619      	mov	r1, r3
 8001252:	4817      	ldr	r0, [pc, #92]	; (80012b0 <HAL_LTDC_MspInit+0x25c>)
 8001254:	f002 fd5a 	bl	8003d0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001258:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800125c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001266:	2300      	movs	r3, #0
 8001268:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800126a:	2309      	movs	r3, #9
 800126c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800126e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001272:	4619      	mov	r1, r3
 8001274:	480c      	ldr	r0, [pc, #48]	; (80012a8 <HAL_LTDC_MspInit+0x254>)
 8001276:	f002 fd49 	bl	8003d0c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2105      	movs	r1, #5
 800127e:	2058      	movs	r0, #88	; 0x58
 8001280:	f001 ffc0 	bl	8003204 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001284:	2058      	movs	r0, #88	; 0x58
 8001286:	f001 ffd9 	bl	800323c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800128a:	bf00      	nop
 800128c:	3768      	adds	r7, #104	; 0x68
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	40016800 	.word	0x40016800
 8001298:	40023800 	.word	0x40023800
 800129c:	40021400 	.word	0x40021400
 80012a0:	40020000 	.word	0x40020000
 80012a4:	40020400 	.word	0x40020400
 80012a8:	40021800 	.word	0x40021800
 80012ac:	40020800 	.word	0x40020800
 80012b0:	40020c00 	.word	0x40020c00

080012b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a19      	ldr	r2, [pc, #100]	; (8001338 <HAL_SPI_MspInit+0x84>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d12c      	bne.n	8001330 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	4b18      	ldr	r3, [pc, #96]	; (800133c <HAL_SPI_MspInit+0x88>)
 80012dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012de:	4a17      	ldr	r2, [pc, #92]	; (800133c <HAL_SPI_MspInit+0x88>)
 80012e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80012e4:	6453      	str	r3, [r2, #68]	; 0x44
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <HAL_SPI_MspInit+0x88>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <HAL_SPI_MspInit+0x88>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a10      	ldr	r2, [pc, #64]	; (800133c <HAL_SPI_MspInit+0x88>)
 80012fc:	f043 0320 	orr.w	r3, r3, #32
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <HAL_SPI_MspInit+0x88>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0320 	and.w	r3, r3, #32
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800130e:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001312:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	2302      	movs	r3, #2
 8001316:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131c:	2300      	movs	r3, #0
 800131e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001320:	2305      	movs	r3, #5
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	4619      	mov	r1, r3
 800132a:	4805      	ldr	r0, [pc, #20]	; (8001340 <HAL_SPI_MspInit+0x8c>)
 800132c:	f002 fcee 	bl	8003d0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8001330:	bf00      	nop
 8001332:	3728      	adds	r7, #40	; 0x28
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40015000 	.word	0x40015000
 800133c:	40023800 	.word	0x40023800
 8001340:	40021400 	.word	0x40021400

08001344 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a08      	ldr	r2, [pc, #32]	; (8001374 <HAL_SPI_MspDeInit+0x30>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d10a      	bne.n	800136c <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001356:	4b08      	ldr	r3, [pc, #32]	; (8001378 <HAL_SPI_MspDeInit+0x34>)
 8001358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135a:	4a07      	ldr	r2, [pc, #28]	; (8001378 <HAL_SPI_MspDeInit+0x34>)
 800135c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001360:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001362:	f44f 7160 	mov.w	r1, #896	; 0x380
 8001366:	4805      	ldr	r0, [pc, #20]	; (800137c <HAL_SPI_MspDeInit+0x38>)
 8001368:	f002 fe7c 	bl	8004064 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 800136c:	bf00      	nop
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40015000 	.word	0x40015000
 8001378:	40023800 	.word	0x40023800
 800137c:	40021400 	.word	0x40021400

08001380 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001380:	b480      	push	{r7}
 8001382:	b085      	sub	sp, #20
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0b      	ldr	r2, [pc, #44]	; (80013bc <HAL_TIM_Base_MspInit+0x3c>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d10d      	bne.n	80013ae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <HAL_TIM_Base_MspInit+0x40>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	4a09      	ldr	r2, [pc, #36]	; (80013c0 <HAL_TIM_Base_MspInit+0x40>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6453      	str	r3, [r2, #68]	; 0x44
 80013a2:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <HAL_TIM_Base_MspInit+0x40>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]
 80013ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80013ae:	bf00      	nop
 80013b0:	3714      	adds	r7, #20
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40010000 	.word	0x40010000
 80013c0:	40023800 	.word	0x40023800

080013c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b08a      	sub	sp, #40	; 0x28
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a19      	ldr	r2, [pc, #100]	; (8001448 <HAL_UART_MspInit+0x84>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d12c      	bne.n	8001440 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
 80013ea:	4b18      	ldr	r3, [pc, #96]	; (800144c <HAL_UART_MspInit+0x88>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	4a17      	ldr	r2, [pc, #92]	; (800144c <HAL_UART_MspInit+0x88>)
 80013f0:	f043 0310 	orr.w	r3, r3, #16
 80013f4:	6453      	str	r3, [r2, #68]	; 0x44
 80013f6:	4b15      	ldr	r3, [pc, #84]	; (800144c <HAL_UART_MspInit+0x88>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013fa:	f003 0310 	and.w	r3, r3, #16
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	4b11      	ldr	r3, [pc, #68]	; (800144c <HAL_UART_MspInit+0x88>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a10      	ldr	r2, [pc, #64]	; (800144c <HAL_UART_MspInit+0x88>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <HAL_UART_MspInit+0x88>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800141e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001422:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001424:	2302      	movs	r3, #2
 8001426:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800142c:	2303      	movs	r3, #3
 800142e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001430:	2307      	movs	r3, #7
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	4619      	mov	r1, r3
 800143a:	4805      	ldr	r0, [pc, #20]	; (8001450 <HAL_UART_MspInit+0x8c>)
 800143c:	f002 fc66 	bl	8003d0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001440:	bf00      	nop
 8001442:	3728      	adds	r7, #40	; 0x28
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40011000 	.word	0x40011000
 800144c:	40023800 	.word	0x40023800
 8001450:	40020000 	.word	0x40020000

08001454 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001454:	b580      	push	{r7, lr}
 8001456:	b086      	sub	sp, #24
 8001458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001468:	4b3b      	ldr	r3, [pc, #236]	; (8001558 <HAL_FMC_MspInit+0x104>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d16f      	bne.n	8001550 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001470:	4b39      	ldr	r3, [pc, #228]	; (8001558 <HAL_FMC_MspInit+0x104>)
 8001472:	2201      	movs	r2, #1
 8001474:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	603b      	str	r3, [r7, #0]
 800147a:	4b38      	ldr	r3, [pc, #224]	; (800155c <HAL_FMC_MspInit+0x108>)
 800147c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800147e:	4a37      	ldr	r2, [pc, #220]	; (800155c <HAL_FMC_MspInit+0x108>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6393      	str	r3, [r2, #56]	; 0x38
 8001486:	4b35      	ldr	r3, [pc, #212]	; (800155c <HAL_FMC_MspInit+0x108>)
 8001488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	603b      	str	r3, [r7, #0]
 8001490:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001492:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001496:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	2302      	movs	r3, #2
 800149a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a0:	2303      	movs	r3, #3
 80014a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014a4:	230c      	movs	r3, #12
 80014a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	4619      	mov	r1, r3
 80014ac:	482c      	ldr	r0, [pc, #176]	; (8001560 <HAL_FMC_MspInit+0x10c>)
 80014ae:	f002 fc2d 	bl	8003d0c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 80014b2:	2301      	movs	r3, #1
 80014b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b6:	2302      	movs	r3, #2
 80014b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014be:	2303      	movs	r3, #3
 80014c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014c2:	230c      	movs	r3, #12
 80014c4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	4619      	mov	r1, r3
 80014ca:	4826      	ldr	r0, [pc, #152]	; (8001564 <HAL_FMC_MspInit+0x110>)
 80014cc:	f002 fc1e 	bl	8003d0c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80014d0:	f248 1333 	movw	r3, #33075	; 0x8133
 80014d4:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d6:	2302      	movs	r3, #2
 80014d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014da:	2300      	movs	r3, #0
 80014dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014de:	2303      	movs	r3, #3
 80014e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014e2:	230c      	movs	r3, #12
 80014e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	4619      	mov	r1, r3
 80014ea:	481f      	ldr	r0, [pc, #124]	; (8001568 <HAL_FMC_MspInit+0x114>)
 80014ec:	f002 fc0e 	bl	8003d0c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80014f0:	f64f 7383 	movw	r3, #65411	; 0xff83
 80014f4:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014fe:	2303      	movs	r3, #3
 8001500:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001502:	230c      	movs	r3, #12
 8001504:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	4619      	mov	r1, r3
 800150a:	4818      	ldr	r0, [pc, #96]	; (800156c <HAL_FMC_MspInit+0x118>)
 800150c:	f002 fbfe 	bl	8003d0c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001510:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001514:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151e:	2303      	movs	r3, #3
 8001520:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001522:	230c      	movs	r3, #12
 8001524:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	4619      	mov	r1, r3
 800152a:	4811      	ldr	r0, [pc, #68]	; (8001570 <HAL_FMC_MspInit+0x11c>)
 800152c:	f002 fbee 	bl	8003d0c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001530:	2360      	movs	r3, #96	; 0x60
 8001532:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153c:	2303      	movs	r3, #3
 800153e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001540:	230c      	movs	r3, #12
 8001542:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	4619      	mov	r1, r3
 8001548:	480a      	ldr	r0, [pc, #40]	; (8001574 <HAL_FMC_MspInit+0x120>)
 800154a:	f002 fbdf 	bl	8003d0c <HAL_GPIO_Init>
 800154e:	e000      	b.n	8001552 <HAL_FMC_MspInit+0xfe>
    return;
 8001550:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001552:	3718      	adds	r7, #24
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	200002f4 	.word	0x200002f4
 800155c:	40023800 	.word	0x40023800
 8001560:	40021400 	.word	0x40021400
 8001564:	40020800 	.word	0x40020800
 8001568:	40021800 	.word	0x40021800
 800156c:	40021000 	.word	0x40021000
 8001570:	40020c00 	.word	0x40020c00
 8001574:	40020400 	.word	0x40020400

08001578 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001580:	f7ff ff68 	bl	8001454 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08e      	sub	sp, #56	; 0x38
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001594:	2300      	movs	r3, #0
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001598:	2300      	movs	r3, #0
 800159a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800159c:	2300      	movs	r3, #0
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	4b33      	ldr	r3, [pc, #204]	; (8001670 <HAL_InitTick+0xe4>)
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	4a32      	ldr	r2, [pc, #200]	; (8001670 <HAL_InitTick+0xe4>)
 80015a6:	f043 0310 	orr.w	r3, r3, #16
 80015aa:	6413      	str	r3, [r2, #64]	; 0x40
 80015ac:	4b30      	ldr	r3, [pc, #192]	; (8001670 <HAL_InitTick+0xe4>)
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	f003 0310 	and.w	r3, r3, #16
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015b8:	f107 0210 	add.w	r2, r7, #16
 80015bc:	f107 0314 	add.w	r3, r7, #20
 80015c0:	4611      	mov	r1, r2
 80015c2:	4618      	mov	r0, r3
 80015c4:	f005 f9ae 	bl	8006924 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015c8:	6a3b      	ldr	r3, [r7, #32]
 80015ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d103      	bne.n	80015da <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015d2:	f005 f97f 	bl	80068d4 <HAL_RCC_GetPCLK1Freq>
 80015d6:	6378      	str	r0, [r7, #52]	; 0x34
 80015d8:	e004      	b.n	80015e4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015da:	f005 f97b 	bl	80068d4 <HAL_RCC_GetPCLK1Freq>
 80015de:	4603      	mov	r3, r0
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015e6:	4a23      	ldr	r2, [pc, #140]	; (8001674 <HAL_InitTick+0xe8>)
 80015e8:	fba2 2303 	umull	r2, r3, r2, r3
 80015ec:	0c9b      	lsrs	r3, r3, #18
 80015ee:	3b01      	subs	r3, #1
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015f2:	4b21      	ldr	r3, [pc, #132]	; (8001678 <HAL_InitTick+0xec>)
 80015f4:	4a21      	ldr	r2, [pc, #132]	; (800167c <HAL_InitTick+0xf0>)
 80015f6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015f8:	4b1f      	ldr	r3, [pc, #124]	; (8001678 <HAL_InitTick+0xec>)
 80015fa:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015fe:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001600:	4a1d      	ldr	r2, [pc, #116]	; (8001678 <HAL_InitTick+0xec>)
 8001602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001604:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001606:	4b1c      	ldr	r3, [pc, #112]	; (8001678 <HAL_InitTick+0xec>)
 8001608:	2200      	movs	r2, #0
 800160a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160c:	4b1a      	ldr	r3, [pc, #104]	; (8001678 <HAL_InitTick+0xec>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001612:	4b19      	ldr	r3, [pc, #100]	; (8001678 <HAL_InitTick+0xec>)
 8001614:	2200      	movs	r2, #0
 8001616:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001618:	4817      	ldr	r0, [pc, #92]	; (8001678 <HAL_InitTick+0xec>)
 800161a:	f006 f9e5 	bl	80079e8 <HAL_TIM_Base_Init>
 800161e:	4603      	mov	r3, r0
 8001620:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001624:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001628:	2b00      	cmp	r3, #0
 800162a:	d11b      	bne.n	8001664 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800162c:	4812      	ldr	r0, [pc, #72]	; (8001678 <HAL_InitTick+0xec>)
 800162e:	f006 fa2b 	bl	8007a88 <HAL_TIM_Base_Start_IT>
 8001632:	4603      	mov	r3, r0
 8001634:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001638:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800163c:	2b00      	cmp	r3, #0
 800163e:	d111      	bne.n	8001664 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001640:	2036      	movs	r0, #54	; 0x36
 8001642:	f001 fdfb 	bl	800323c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b0f      	cmp	r3, #15
 800164a:	d808      	bhi.n	800165e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800164c:	2200      	movs	r2, #0
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	2036      	movs	r0, #54	; 0x36
 8001652:	f001 fdd7 	bl	8003204 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001656:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <HAL_InitTick+0xf4>)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6013      	str	r3, [r2, #0]
 800165c:	e002      	b.n	8001664 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001664:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001668:	4618      	mov	r0, r3
 800166a:	3738      	adds	r7, #56	; 0x38
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40023800 	.word	0x40023800
 8001674:	431bde83 	.word	0x431bde83
 8001678:	200002f8 	.word	0x200002f8
 800167c:	40001000 	.word	0x40001000
 8001680:	2000005c 	.word	0x2000005c

08001684 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001688:	e7fe      	b.n	8001688 <NMI_Handler+0x4>

0800168a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800168e:	e7fe      	b.n	800168e <HardFault_Handler+0x4>

08001690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001694:	e7fe      	b.n	8001694 <MemManage_Handler+0x4>

08001696 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800169a:	e7fe      	b.n	800169a <BusFault_Handler+0x4>

0800169c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016a0:	e7fe      	b.n	80016a0 <UsageFault_Handler+0x4>

080016a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016b4:	4802      	ldr	r0, [pc, #8]	; (80016c0 <TIM6_DAC_IRQHandler+0x10>)
 80016b6:	f006 fa57 	bl	8007b68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	200002f8 	.word	0x200002f8

080016c4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80016c8:	4802      	ldr	r0, [pc, #8]	; (80016d4 <OTG_HS_IRQHandler+0x10>)
 80016ca:	f002 fdf0 	bl	80042ae <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000688 	.word	0x20000688

080016d8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80016dc:	4802      	ldr	r0, [pc, #8]	; (80016e8 <LTDC_IRQHandler+0x10>)
 80016de:	f004 f9a1 	bl	8005a24 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	2000017c 	.word	0x2000017c

080016ec <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80016f0:	4802      	ldr	r0, [pc, #8]	; (80016fc <DMA2D_IRQHandler+0x10>)
 80016f2:	f002 f8cc 	bl	800388e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	200000e8 	.word	0x200000e8

08001700 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001708:	4a14      	ldr	r2, [pc, #80]	; (800175c <_sbrk+0x5c>)
 800170a:	4b15      	ldr	r3, [pc, #84]	; (8001760 <_sbrk+0x60>)
 800170c:	1ad3      	subs	r3, r2, r3
 800170e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001714:	4b13      	ldr	r3, [pc, #76]	; (8001764 <_sbrk+0x64>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d102      	bne.n	8001722 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <_sbrk+0x64>)
 800171e:	4a12      	ldr	r2, [pc, #72]	; (8001768 <_sbrk+0x68>)
 8001720:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001722:	4b10      	ldr	r3, [pc, #64]	; (8001764 <_sbrk+0x64>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	429a      	cmp	r2, r3
 800172e:	d207      	bcs.n	8001740 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001730:	f008 fc9c 	bl	800a06c <__errno>
 8001734:	4603      	mov	r3, r0
 8001736:	220c      	movs	r2, #12
 8001738:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800173a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800173e:	e009      	b.n	8001754 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001740:	4b08      	ldr	r3, [pc, #32]	; (8001764 <_sbrk+0x64>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001746:	4b07      	ldr	r3, [pc, #28]	; (8001764 <_sbrk+0x64>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	4a05      	ldr	r2, [pc, #20]	; (8001764 <_sbrk+0x64>)
 8001750:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001752:	68fb      	ldr	r3, [r7, #12]
}
 8001754:	4618      	mov	r0, r3
 8001756:	3718      	adds	r7, #24
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20030000 	.word	0x20030000
 8001760:	00000400 	.word	0x00000400
 8001764:	20000340 	.word	0x20000340
 8001768:	200009a0 	.word	0x200009a0

0800176c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <SystemInit+0x20>)
 8001772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001776:	4a05      	ldr	r2, [pc, #20]	; (800178c <SystemInit+0x20>)
 8001778:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800177c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001780:	bf00      	nop
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000ed00 	.word	0xe000ed00

08001790 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001790:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017c8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001794:	480d      	ldr	r0, [pc, #52]	; (80017cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001796:	490e      	ldr	r1, [pc, #56]	; (80017d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001798:	4a0e      	ldr	r2, [pc, #56]	; (80017d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800179a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800179c:	e002      	b.n	80017a4 <LoopCopyDataInit>

0800179e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800179e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017a2:	3304      	adds	r3, #4

080017a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017a8:	d3f9      	bcc.n	800179e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017aa:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017ac:	4c0b      	ldr	r4, [pc, #44]	; (80017dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80017ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017b0:	e001      	b.n	80017b6 <LoopFillZerobss>

080017b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017b4:	3204      	adds	r2, #4

080017b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017b8:	d3fb      	bcc.n	80017b2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017ba:	f7ff ffd7 	bl	800176c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017be:	f008 fc5b 	bl	800a078 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017c2:	f7fe fef2 	bl	80005aa <main>
  bx  lr    
 80017c6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80017c8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80017cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017d0:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 80017d4:	0800d83c 	.word	0x0800d83c
  ldr r2, =_sbss
 80017d8:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 80017dc:	2000099c 	.word	0x2000099c

080017e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017e0:	e7fe      	b.n	80017e0 <ADC_IRQHandler>

080017e2 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80017e6:	f000 fa5d 	bl	8001ca4 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80017ea:	20ca      	movs	r0, #202	; 0xca
 80017ec:	f000 f95d 	bl	8001aaa <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80017f0:	20c3      	movs	r0, #195	; 0xc3
 80017f2:	f000 f967 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80017f6:	2008      	movs	r0, #8
 80017f8:	f000 f964 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80017fc:	2050      	movs	r0, #80	; 0x50
 80017fe:	f000 f961 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001802:	20cf      	movs	r0, #207	; 0xcf
 8001804:	f000 f951 	bl	8001aaa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001808:	2000      	movs	r0, #0
 800180a:	f000 f95b 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 800180e:	20c1      	movs	r0, #193	; 0xc1
 8001810:	f000 f958 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001814:	2030      	movs	r0, #48	; 0x30
 8001816:	f000 f955 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 800181a:	20ed      	movs	r0, #237	; 0xed
 800181c:	f000 f945 	bl	8001aaa <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001820:	2064      	movs	r0, #100	; 0x64
 8001822:	f000 f94f 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 8001826:	2003      	movs	r0, #3
 8001828:	f000 f94c 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 800182c:	2012      	movs	r0, #18
 800182e:	f000 f949 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001832:	2081      	movs	r0, #129	; 0x81
 8001834:	f000 f946 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001838:	20e8      	movs	r0, #232	; 0xe8
 800183a:	f000 f936 	bl	8001aaa <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 800183e:	2085      	movs	r0, #133	; 0x85
 8001840:	f000 f940 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001844:	2000      	movs	r0, #0
 8001846:	f000 f93d 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800184a:	2078      	movs	r0, #120	; 0x78
 800184c:	f000 f93a 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001850:	20cb      	movs	r0, #203	; 0xcb
 8001852:	f000 f92a 	bl	8001aaa <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 8001856:	2039      	movs	r0, #57	; 0x39
 8001858:	f000 f934 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 800185c:	202c      	movs	r0, #44	; 0x2c
 800185e:	f000 f931 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001862:	2000      	movs	r0, #0
 8001864:	f000 f92e 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001868:	2034      	movs	r0, #52	; 0x34
 800186a:	f000 f92b 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 800186e:	2002      	movs	r0, #2
 8001870:	f000 f928 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001874:	20f7      	movs	r0, #247	; 0xf7
 8001876:	f000 f918 	bl	8001aaa <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800187a:	2020      	movs	r0, #32
 800187c:	f000 f922 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001880:	20ea      	movs	r0, #234	; 0xea
 8001882:	f000 f912 	bl	8001aaa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001886:	2000      	movs	r0, #0
 8001888:	f000 f91c 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800188c:	2000      	movs	r0, #0
 800188e:	f000 f919 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001892:	20b1      	movs	r0, #177	; 0xb1
 8001894:	f000 f909 	bl	8001aaa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001898:	2000      	movs	r0, #0
 800189a:	f000 f913 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 800189e:	201b      	movs	r0, #27
 80018a0:	f000 f910 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80018a4:	20b6      	movs	r0, #182	; 0xb6
 80018a6:	f000 f900 	bl	8001aaa <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80018aa:	200a      	movs	r0, #10
 80018ac:	f000 f90a 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 80018b0:	20a2      	movs	r0, #162	; 0xa2
 80018b2:	f000 f907 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 80018b6:	20c0      	movs	r0, #192	; 0xc0
 80018b8:	f000 f8f7 	bl	8001aaa <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80018bc:	2010      	movs	r0, #16
 80018be:	f000 f901 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80018c2:	20c1      	movs	r0, #193	; 0xc1
 80018c4:	f000 f8f1 	bl	8001aaa <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80018c8:	2010      	movs	r0, #16
 80018ca:	f000 f8fb 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80018ce:	20c5      	movs	r0, #197	; 0xc5
 80018d0:	f000 f8eb 	bl	8001aaa <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80018d4:	2045      	movs	r0, #69	; 0x45
 80018d6:	f000 f8f5 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80018da:	2015      	movs	r0, #21
 80018dc:	f000 f8f2 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80018e0:	20c7      	movs	r0, #199	; 0xc7
 80018e2:	f000 f8e2 	bl	8001aaa <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80018e6:	2090      	movs	r0, #144	; 0x90
 80018e8:	f000 f8ec 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80018ec:	2036      	movs	r0, #54	; 0x36
 80018ee:	f000 f8dc 	bl	8001aaa <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80018f2:	20c8      	movs	r0, #200	; 0xc8
 80018f4:	f000 f8e6 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80018f8:	20f2      	movs	r0, #242	; 0xf2
 80018fa:	f000 f8d6 	bl	8001aaa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80018fe:	2000      	movs	r0, #0
 8001900:	f000 f8e0 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001904:	20b0      	movs	r0, #176	; 0xb0
 8001906:	f000 f8d0 	bl	8001aaa <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 800190a:	20c2      	movs	r0, #194	; 0xc2
 800190c:	f000 f8da 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001910:	20b6      	movs	r0, #182	; 0xb6
 8001912:	f000 f8ca 	bl	8001aaa <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001916:	200a      	movs	r0, #10
 8001918:	f000 f8d4 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 800191c:	20a7      	movs	r0, #167	; 0xa7
 800191e:	f000 f8d1 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001922:	2027      	movs	r0, #39	; 0x27
 8001924:	f000 f8ce 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001928:	2004      	movs	r0, #4
 800192a:	f000 f8cb 	bl	8001ac4 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 800192e:	202a      	movs	r0, #42	; 0x2a
 8001930:	f000 f8bb 	bl	8001aaa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001934:	2000      	movs	r0, #0
 8001936:	f000 f8c5 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800193a:	2000      	movs	r0, #0
 800193c:	f000 f8c2 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001940:	2000      	movs	r0, #0
 8001942:	f000 f8bf 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001946:	20ef      	movs	r0, #239	; 0xef
 8001948:	f000 f8bc 	bl	8001ac4 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 800194c:	202b      	movs	r0, #43	; 0x2b
 800194e:	f000 f8ac 	bl	8001aaa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001952:	2000      	movs	r0, #0
 8001954:	f000 f8b6 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001958:	2000      	movs	r0, #0
 800195a:	f000 f8b3 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 800195e:	2001      	movs	r0, #1
 8001960:	f000 f8b0 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001964:	203f      	movs	r0, #63	; 0x3f
 8001966:	f000 f8ad 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800196a:	20f6      	movs	r0, #246	; 0xf6
 800196c:	f000 f89d 	bl	8001aaa <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001970:	2001      	movs	r0, #1
 8001972:	f000 f8a7 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001976:	2000      	movs	r0, #0
 8001978:	f000 f8a4 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 800197c:	2006      	movs	r0, #6
 800197e:	f000 f8a1 	bl	8001ac4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001982:	202c      	movs	r0, #44	; 0x2c
 8001984:	f000 f891 	bl	8001aaa <ili9341_WriteReg>
  LCD_Delay(200);
 8001988:	20c8      	movs	r0, #200	; 0xc8
 800198a:	f000 fa79 	bl	8001e80 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 800198e:	2026      	movs	r0, #38	; 0x26
 8001990:	f000 f88b 	bl	8001aaa <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001994:	2001      	movs	r0, #1
 8001996:	f000 f895 	bl	8001ac4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800199a:	20e0      	movs	r0, #224	; 0xe0
 800199c:	f000 f885 	bl	8001aaa <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 80019a0:	200f      	movs	r0, #15
 80019a2:	f000 f88f 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 80019a6:	2029      	movs	r0, #41	; 0x29
 80019a8:	f000 f88c 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 80019ac:	2024      	movs	r0, #36	; 0x24
 80019ae:	f000 f889 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80019b2:	200c      	movs	r0, #12
 80019b4:	f000 f886 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 80019b8:	200e      	movs	r0, #14
 80019ba:	f000 f883 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80019be:	2009      	movs	r0, #9
 80019c0:	f000 f880 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80019c4:	204e      	movs	r0, #78	; 0x4e
 80019c6:	f000 f87d 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80019ca:	2078      	movs	r0, #120	; 0x78
 80019cc:	f000 f87a 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80019d0:	203c      	movs	r0, #60	; 0x3c
 80019d2:	f000 f877 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80019d6:	2009      	movs	r0, #9
 80019d8:	f000 f874 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80019dc:	2013      	movs	r0, #19
 80019de:	f000 f871 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80019e2:	2005      	movs	r0, #5
 80019e4:	f000 f86e 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80019e8:	2017      	movs	r0, #23
 80019ea:	f000 f86b 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80019ee:	2011      	movs	r0, #17
 80019f0:	f000 f868 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80019f4:	2000      	movs	r0, #0
 80019f6:	f000 f865 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80019fa:	20e1      	movs	r0, #225	; 0xe1
 80019fc:	f000 f855 	bl	8001aaa <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001a00:	2000      	movs	r0, #0
 8001a02:	f000 f85f 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001a06:	2016      	movs	r0, #22
 8001a08:	f000 f85c 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001a0c:	201b      	movs	r0, #27
 8001a0e:	f000 f859 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001a12:	2004      	movs	r0, #4
 8001a14:	f000 f856 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001a18:	2011      	movs	r0, #17
 8001a1a:	f000 f853 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001a1e:	2007      	movs	r0, #7
 8001a20:	f000 f850 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001a24:	2031      	movs	r0, #49	; 0x31
 8001a26:	f000 f84d 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001a2a:	2033      	movs	r0, #51	; 0x33
 8001a2c:	f000 f84a 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001a30:	2042      	movs	r0, #66	; 0x42
 8001a32:	f000 f847 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001a36:	2005      	movs	r0, #5
 8001a38:	f000 f844 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001a3c:	200c      	movs	r0, #12
 8001a3e:	f000 f841 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001a42:	200a      	movs	r0, #10
 8001a44:	f000 f83e 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001a48:	2028      	movs	r0, #40	; 0x28
 8001a4a:	f000 f83b 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001a4e:	202f      	movs	r0, #47	; 0x2f
 8001a50:	f000 f838 	bl	8001ac4 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001a54:	200f      	movs	r0, #15
 8001a56:	f000 f835 	bl	8001ac4 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001a5a:	2011      	movs	r0, #17
 8001a5c:	f000 f825 	bl	8001aaa <ili9341_WriteReg>
  LCD_Delay(200);
 8001a60:	20c8      	movs	r0, #200	; 0xc8
 8001a62:	f000 fa0d 	bl	8001e80 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001a66:	2029      	movs	r0, #41	; 0x29
 8001a68:	f000 f81f 	bl	8001aaa <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001a6c:	202c      	movs	r0, #44	; 0x2c
 8001a6e:	f000 f81c 	bl	8001aaa <ili9341_WriteReg>
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001a7a:	f000 f913 	bl	8001ca4 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001a7e:	2103      	movs	r1, #3
 8001a80:	20d3      	movs	r0, #211	; 0xd3
 8001a82:	f000 f82c 	bl	8001ade <ili9341_ReadData>
 8001a86:	4603      	mov	r3, r0
 8001a88:	b29b      	uxth	r3, r3
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001a92:	2029      	movs	r0, #41	; 0x29
 8001a94:	f000 f809 	bl	8001aaa <ili9341_WriteReg>
}
 8001a98:	bf00      	nop
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001aa0:	2028      	movs	r0, #40	; 0x28
 8001aa2:	f000 f802 	bl	8001aaa <ili9341_WriteReg>
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b082      	sub	sp, #8
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 f98e 	bl	8001dd8 <LCD_IO_WriteReg>
}
 8001abc:	bf00      	nop
 8001abe:	3708      	adds	r7, #8
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}

08001ac4 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	4603      	mov	r3, r0
 8001acc:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001ace:	88fb      	ldrh	r3, [r7, #6]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f000 f95f 	bl	8001d94 <LCD_IO_WriteData>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	460a      	mov	r2, r1
 8001ae8:	80fb      	strh	r3, [r7, #6]
 8001aea:	4613      	mov	r3, r2
 8001aec:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001aee:	797a      	ldrb	r2, [r7, #5]
 8001af0:	88fb      	ldrh	r3, [r7, #6]
 8001af2:	4611      	mov	r1, r2
 8001af4:	4618      	mov	r0, r3
 8001af6:	f000 f991 	bl	8001e1c <LCD_IO_ReadData>
 8001afa:	4603      	mov	r3, r0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001b08:	23f0      	movs	r3, #240	; 0xf0
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001b18:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
	...

08001b28 <SPIx_Init>:
/******************************* SPI Routines *********************************/

/**
 * @brief  SPIx Bus initialization
 */
static void SPIx_Init(void) {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
	if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET) {
 8001b2c:	4819      	ldr	r0, [pc, #100]	; (8001b94 <SPIx_Init+0x6c>)
 8001b2e:	f005 fe1c 	bl	800776a <HAL_SPI_GetState>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d12b      	bne.n	8001b90 <SPIx_Init+0x68>
		/* SPI configuration -----------------------------------------------------*/
		SpiHandle.Instance = DISCOVERY_SPIx;
 8001b38:	4b16      	ldr	r3, [pc, #88]	; (8001b94 <SPIx_Init+0x6c>)
 8001b3a:	4a17      	ldr	r2, [pc, #92]	; (8001b98 <SPIx_Init+0x70>)
 8001b3c:	601a      	str	r2, [r3, #0]
		 to verify these constraints:
		 - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
		 - l3gd20 SPI interface max baudrate is 10MHz for write/read
		 - PCLK2 frequency is set to 90 MHz 
		 */
		SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001b3e:	4b15      	ldr	r3, [pc, #84]	; (8001b94 <SPIx_Init+0x6c>)
 8001b40:	2218      	movs	r2, #24
 8001b42:	61da      	str	r2, [r3, #28]

		/* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
		/* for LCD and GYRO (SPI_DIRECTION_2LINES) */
		/* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
		SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 8001b44:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <SPIx_Init+0x6c>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
		SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001b4a:	4b12      	ldr	r3, [pc, #72]	; (8001b94 <SPIx_Init+0x6c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	615a      	str	r2, [r3, #20]
		SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b50:	4b10      	ldr	r3, [pc, #64]	; (8001b94 <SPIx_Init+0x6c>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	611a      	str	r2, [r3, #16]
		SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001b56:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <SPIx_Init+0x6c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	629a      	str	r2, [r3, #40]	; 0x28
		SpiHandle.Init.CRCPolynomial = 7;
 8001b5c:	4b0d      	ldr	r3, [pc, #52]	; (8001b94 <SPIx_Init+0x6c>)
 8001b5e:	2207      	movs	r2, #7
 8001b60:	62da      	str	r2, [r3, #44]	; 0x2c
		SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8001b62:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <SPIx_Init+0x6c>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	60da      	str	r2, [r3, #12]
		SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b68:	4b0a      	ldr	r3, [pc, #40]	; (8001b94 <SPIx_Init+0x6c>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	621a      	str	r2, [r3, #32]
		SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8001b6e:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <SPIx_Init+0x6c>)
 8001b70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b74:	619a      	str	r2, [r3, #24]
		SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 8001b76:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <SPIx_Init+0x6c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	625a      	str	r2, [r3, #36]	; 0x24
		SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8001b7c:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <SPIx_Init+0x6c>)
 8001b7e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001b82:	605a      	str	r2, [r3, #4]

		SPIx_MspInit(&SpiHandle);
 8001b84:	4803      	ldr	r0, [pc, #12]	; (8001b94 <SPIx_Init+0x6c>)
 8001b86:	f000 f853 	bl	8001c30 <SPIx_MspInit>
		HAL_SPI_Init(&SpiHandle);
 8001b8a:	4802      	ldr	r0, [pc, #8]	; (8001b94 <SPIx_Init+0x6c>)
 8001b8c:	f005 f94d 	bl	8006e2a <HAL_SPI_Init>
	}
}
 8001b90:	bf00      	nop
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	20000344 	.word	0x20000344
 8001b98:	40015000 	.word	0x40015000

08001b9c <SPIx_Read>:
/**
 * @brief  Reads 4 bytes from device.
 * @param  ReadSize: Number of bytes to read (max 4 bytes)
 * @retval Value read on the SPI
 */
static uint32_t SPIx_Read(uint8_t ReadSize) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = HAL_OK;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	73fb      	strb	r3, [r7, #15]
	uint32_t readvalue;

	status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize,
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	4b09      	ldr	r3, [pc, #36]	; (8001bd4 <SPIx_Read+0x38>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f107 0108 	add.w	r1, r7, #8
 8001bb6:	4808      	ldr	r0, [pc, #32]	; (8001bd8 <SPIx_Read+0x3c>)
 8001bb8:	f005 fb24 	bl	8007204 <HAL_SPI_Receive>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	73fb      	strb	r3, [r7, #15]
			SpixTimeout);

	/* Check the communication status */
	if (status != HAL_OK) {
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <SPIx_Read+0x2e>
		/* Re-Initialize the BUS */
		SPIx_Error();
 8001bc6:	f000 f827 	bl	8001c18 <SPIx_Error>
	}

	return readvalue;
 8001bca:	68bb      	ldr	r3, [r7, #8]
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3710      	adds	r7, #16
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	2000003c 	.word	0x2000003c
 8001bd8:	20000344 	.word	0x20000344

08001bdc <SPIx_Write>:

/**
 * @brief  Writes a byte to device.
 * @param  Value: value to be written
 */
static void SPIx_Write(uint16_t Value) {
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_OK;
 8001be6:	2300      	movs	r3, #0
 8001be8:	73fb      	strb	r3, [r7, #15]

	status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8001bea:	4b09      	ldr	r3, [pc, #36]	; (8001c10 <SPIx_Write+0x34>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	1db9      	adds	r1, r7, #6
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	4808      	ldr	r0, [pc, #32]	; (8001c14 <SPIx_Write+0x38>)
 8001bf4:	f005 f9ca 	bl	8006f8c <HAL_SPI_Transmit>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	73fb      	strb	r3, [r7, #15]

	/* Check the communication status */
	if (status != HAL_OK) {
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <SPIx_Write+0x2a>
		/* Re-Initialize the BUS */
		SPIx_Error();
 8001c02:	f000 f809 	bl	8001c18 <SPIx_Error>
	}
}
 8001c06:	bf00      	nop
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	2000003c 	.word	0x2000003c
 8001c14:	20000344 	.word	0x20000344

08001c18 <SPIx_Error>:
}

/**
 * @brief  SPIx error treatment function.
 */
static void SPIx_Error(void) {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
	/* De-initialize the SPI communication BUS */
	HAL_SPI_DeInit(&SpiHandle);
 8001c1c:	4803      	ldr	r0, [pc, #12]	; (8001c2c <SPIx_Error+0x14>)
 8001c1e:	f005 f98d 	bl	8006f3c <HAL_SPI_DeInit>

	/* Re- Initialize the SPI communication BUS */
	SPIx_Init();
 8001c22:	f7ff ff81 	bl	8001b28 <SPIx_Init>
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	20000344 	.word	0x20000344

08001c30 <SPIx_MspInit>:

/**
 * @brief  SPI MSP Init.
 * @param  hspi: SPI handle
 */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08a      	sub	sp, #40	; 0x28
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable SPIx clock */
	DISCOVERY_SPIx_CLK_ENABLE();
 8001c38:	2300      	movs	r3, #0
 8001c3a:	613b      	str	r3, [r7, #16]
 8001c3c:	4b17      	ldr	r3, [pc, #92]	; (8001c9c <SPIx_MspInit+0x6c>)
 8001c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c40:	4a16      	ldr	r2, [pc, #88]	; (8001c9c <SPIx_MspInit+0x6c>)
 8001c42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001c46:	6453      	str	r3, [r2, #68]	; 0x44
 8001c48:	4b14      	ldr	r3, [pc, #80]	; (8001c9c <SPIx_MspInit+0x6c>)
 8001c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	693b      	ldr	r3, [r7, #16]

	/* Enable DISCOVERY_SPI GPIO clock */
	DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]
 8001c58:	4b10      	ldr	r3, [pc, #64]	; (8001c9c <SPIx_MspInit+0x6c>)
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5c:	4a0f      	ldr	r2, [pc, #60]	; (8001c9c <SPIx_MspInit+0x6c>)
 8001c5e:	f043 0320 	orr.w	r3, r3, #32
 8001c62:	6313      	str	r3, [r2, #48]	; 0x30
 8001c64:	4b0d      	ldr	r3, [pc, #52]	; (8001c9c <SPIx_MspInit+0x6c>)
 8001c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c68:	f003 0320 	and.w	r3, r3, #32
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	68fb      	ldr	r3, [r7, #12]

	/* configure SPI SCK, MOSI and MISO */
	GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN
 8001c70:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001c74:	617b      	str	r3, [r7, #20]
			| DISCOVERY_SPIx_MISO_PIN);
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001c82:	2305      	movs	r3, #5
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8001c86:	f107 0314 	add.w	r3, r7, #20
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4804      	ldr	r0, [pc, #16]	; (8001ca0 <SPIx_MspInit+0x70>)
 8001c8e:	f002 f83d 	bl	8003d0c <HAL_GPIO_Init>
}
 8001c92:	bf00      	nop
 8001c94:	3728      	adds	r7, #40	; 0x28
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40021400 	.word	0x40021400

08001ca4 <LCD_IO_Init>:
/********************************* LINK LCD ***********************************/

/**
 * @brief  Configures the LCD_SPI interface.
 */
void LCD_IO_Init(void) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	if (Is_LCD_IO_Initialized == 0) {
 8001caa:	4b36      	ldr	r3, [pc, #216]	; (8001d84 <LCD_IO_Init+0xe0>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d164      	bne.n	8001d7c <LCD_IO_Init+0xd8>
		Is_LCD_IO_Initialized = 1;
 8001cb2:	4b34      	ldr	r3, [pc, #208]	; (8001d84 <LCD_IO_Init+0xe0>)
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	701a      	strb	r2, [r3, #0]

		/* Configure NCS in Output Push-Pull mode */
		LCD_WRX_GPIO_CLK_ENABLE();
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	4b32      	ldr	r3, [pc, #200]	; (8001d88 <LCD_IO_Init+0xe4>)
 8001cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc0:	4a31      	ldr	r2, [pc, #196]	; (8001d88 <LCD_IO_Init+0xe4>)
 8001cc2:	f043 0308 	orr.w	r3, r3, #8
 8001cc6:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc8:	4b2f      	ldr	r3, [pc, #188]	; (8001d88 <LCD_IO_Init+0xe4>)
 8001cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ccc:	f003 0308 	and.w	r3, r3, #8
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStructure.Pin = LCD_WRX_PIN;
 8001cd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cd8:	60fb      	str	r3, [r7, #12]
		GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	613b      	str	r3, [r7, #16]
		GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	617b      	str	r3, [r7, #20]
		GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001ce6:	f107 030c 	add.w	r3, r7, #12
 8001cea:	4619      	mov	r1, r3
 8001cec:	4827      	ldr	r0, [pc, #156]	; (8001d8c <LCD_IO_Init+0xe8>)
 8001cee:	f002 f80d 	bl	8003d0c <HAL_GPIO_Init>

		LCD_RDX_GPIO_CLK_ENABLE();
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	607b      	str	r3, [r7, #4]
 8001cf6:	4b24      	ldr	r3, [pc, #144]	; (8001d88 <LCD_IO_Init+0xe4>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	4a23      	ldr	r2, [pc, #140]	; (8001d88 <LCD_IO_Init+0xe4>)
 8001cfc:	f043 0308 	orr.w	r3, r3, #8
 8001d00:	6313      	str	r3, [r2, #48]	; 0x30
 8001d02:	4b21      	ldr	r3, [pc, #132]	; (8001d88 <LCD_IO_Init+0xe4>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	f003 0308 	and.w	r3, r3, #8
 8001d0a:	607b      	str	r3, [r7, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
		GPIO_InitStructure.Pin = LCD_RDX_PIN;
 8001d0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d12:	60fb      	str	r3, [r7, #12]
		GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001d14:	2301      	movs	r3, #1
 8001d16:	613b      	str	r3, [r7, #16]
		GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
		GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001d20:	f107 030c 	add.w	r3, r7, #12
 8001d24:	4619      	mov	r1, r3
 8001d26:	4819      	ldr	r0, [pc, #100]	; (8001d8c <LCD_IO_Init+0xe8>)
 8001d28:	f001 fff0 	bl	8003d0c <HAL_GPIO_Init>

		/* Configure the LCD Control pins ----------------------------------------*/
		LCD_NCS_GPIO_CLK_ENABLE();
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	4b15      	ldr	r3, [pc, #84]	; (8001d88 <LCD_IO_Init+0xe4>)
 8001d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d34:	4a14      	ldr	r2, [pc, #80]	; (8001d88 <LCD_IO_Init+0xe4>)
 8001d36:	f043 0304 	orr.w	r3, r3, #4
 8001d3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3c:	4b12      	ldr	r3, [pc, #72]	; (8001d88 <LCD_IO_Init+0xe4>)
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	603b      	str	r3, [r7, #0]
 8001d46:	683b      	ldr	r3, [r7, #0]

		/* Configure NCS in Output Push-Pull mode */
		GPIO_InitStructure.Pin = LCD_NCS_PIN;
 8001d48:	2304      	movs	r3, #4
 8001d4a:	60fb      	str	r3, [r7, #12]
		GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	613b      	str	r3, [r7, #16]
		GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
		GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001d54:	2302      	movs	r3, #2
 8001d56:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001d58:	f107 030c 	add.w	r3, r7, #12
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	480c      	ldr	r0, [pc, #48]	; (8001d90 <LCD_IO_Init+0xec>)
 8001d60:	f001 ffd4 	bl	8003d0c <HAL_GPIO_Init>

		/* Set or Reset the control line */
		LCD_CS_LOW();
 8001d64:	2200      	movs	r2, #0
 8001d66:	2104      	movs	r1, #4
 8001d68:	4809      	ldr	r0, [pc, #36]	; (8001d90 <LCD_IO_Init+0xec>)
 8001d6a:	f002 fa87 	bl	800427c <HAL_GPIO_WritePin>
		LCD_CS_HIGH();
 8001d6e:	2201      	movs	r2, #1
 8001d70:	2104      	movs	r1, #4
 8001d72:	4807      	ldr	r0, [pc, #28]	; (8001d90 <LCD_IO_Init+0xec>)
 8001d74:	f002 fa82 	bl	800427c <HAL_GPIO_WritePin>

		SPIx_Init();
 8001d78:	f7ff fed6 	bl	8001b28 <SPIx_Init>
	}
}
 8001d7c:	bf00      	nop
 8001d7e:	3720      	adds	r7, #32
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	2000039c 	.word	0x2000039c
 8001d88:	40023800 	.word	0x40023800
 8001d8c:	40020c00 	.word	0x40020c00
 8001d90:	40020800 	.word	0x40020800

08001d94 <LCD_IO_WriteData>:

/**
 * @brief  Writes register value.
 */
void LCD_IO_WriteData(uint16_t RegValue) {
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	80fb      	strh	r3, [r7, #6]
	/* Set WRX to send data */
	LCD_WRX_HIGH();
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001da4:	480a      	ldr	r0, [pc, #40]	; (8001dd0 <LCD_IO_WriteData+0x3c>)
 8001da6:	f002 fa69 	bl	800427c <HAL_GPIO_WritePin>

	/* Reset LCD control line(/CS) and Send data */
	LCD_CS_LOW();
 8001daa:	2200      	movs	r2, #0
 8001dac:	2104      	movs	r1, #4
 8001dae:	4809      	ldr	r0, [pc, #36]	; (8001dd4 <LCD_IO_WriteData+0x40>)
 8001db0:	f002 fa64 	bl	800427c <HAL_GPIO_WritePin>
	SPIx_Write(RegValue);
 8001db4:	88fb      	ldrh	r3, [r7, #6]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff ff10 	bl	8001bdc <SPIx_Write>

	/* Deselect: Chip Select high */
	LCD_CS_HIGH();
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	2104      	movs	r1, #4
 8001dc0:	4804      	ldr	r0, [pc, #16]	; (8001dd4 <LCD_IO_WriteData+0x40>)
 8001dc2:	f002 fa5b 	bl	800427c <HAL_GPIO_WritePin>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40020c00 	.word	0x40020c00
 8001dd4:	40020800 	.word	0x40020800

08001dd8 <LCD_IO_WriteReg>:

/**
 * @brief  Writes register address.
 */
void LCD_IO_WriteReg(uint8_t Reg) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
	/* Reset WRX to send command */
	LCD_WRX_LOW();
 8001de2:	2200      	movs	r2, #0
 8001de4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001de8:	480a      	ldr	r0, [pc, #40]	; (8001e14 <LCD_IO_WriteReg+0x3c>)
 8001dea:	f002 fa47 	bl	800427c <HAL_GPIO_WritePin>

	/* Reset LCD control line(/CS) and Send command */
	LCD_CS_LOW();
 8001dee:	2200      	movs	r2, #0
 8001df0:	2104      	movs	r1, #4
 8001df2:	4809      	ldr	r0, [pc, #36]	; (8001e18 <LCD_IO_WriteReg+0x40>)
 8001df4:	f002 fa42 	bl	800427c <HAL_GPIO_WritePin>
	SPIx_Write(Reg);
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff feed 	bl	8001bdc <SPIx_Write>

	/* Deselect: Chip Select high */
	LCD_CS_HIGH();
 8001e02:	2201      	movs	r2, #1
 8001e04:	2104      	movs	r1, #4
 8001e06:	4804      	ldr	r0, [pc, #16]	; (8001e18 <LCD_IO_WriteReg+0x40>)
 8001e08:	f002 fa38 	bl	800427c <HAL_GPIO_WritePin>
}
 8001e0c:	bf00      	nop
 8001e0e:	3708      	adds	r7, #8
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40020c00 	.word	0x40020c00
 8001e18:	40020800 	.word	0x40020800

08001e1c <LCD_IO_ReadData>:
 * @brief  Reads register value.
 * @param  RegValue Address of the register to read
 * @param  ReadSize Number of bytes to read
 * @retval Content of the register value
 */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) {
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	4603      	mov	r3, r0
 8001e24:	460a      	mov	r2, r1
 8001e26:	80fb      	strh	r3, [r7, #6]
 8001e28:	4613      	mov	r3, r2
 8001e2a:	717b      	strb	r3, [r7, #5]
	uint32_t readvalue = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60fb      	str	r3, [r7, #12]

	/* Select: Chip Select low */
	LCD_CS_LOW();
 8001e30:	2200      	movs	r2, #0
 8001e32:	2104      	movs	r1, #4
 8001e34:	4810      	ldr	r0, [pc, #64]	; (8001e78 <LCD_IO_ReadData+0x5c>)
 8001e36:	f002 fa21 	bl	800427c <HAL_GPIO_WritePin>

	/* Reset WRX to send command */
	LCD_WRX_LOW();
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e40:	480e      	ldr	r0, [pc, #56]	; (8001e7c <LCD_IO_ReadData+0x60>)
 8001e42:	f002 fa1b 	bl	800427c <HAL_GPIO_WritePin>

	SPIx_Write(RegValue);
 8001e46:	88fb      	ldrh	r3, [r7, #6]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff fec7 	bl	8001bdc <SPIx_Write>

	readvalue = SPIx_Read(ReadSize);
 8001e4e:	797b      	ldrb	r3, [r7, #5]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff fea3 	bl	8001b9c <SPIx_Read>
 8001e56:	60f8      	str	r0, [r7, #12]

	/* Set WRX to send data */
	LCD_WRX_HIGH();
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e5e:	4807      	ldr	r0, [pc, #28]	; (8001e7c <LCD_IO_ReadData+0x60>)
 8001e60:	f002 fa0c 	bl	800427c <HAL_GPIO_WritePin>

	/* Deselect: Chip Select high */
	LCD_CS_HIGH();
 8001e64:	2201      	movs	r2, #1
 8001e66:	2104      	movs	r1, #4
 8001e68:	4803      	ldr	r0, [pc, #12]	; (8001e78 <LCD_IO_ReadData+0x5c>)
 8001e6a:	f002 fa07 	bl	800427c <HAL_GPIO_WritePin>

	return readvalue;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40020800 	.word	0x40020800
 8001e7c:	40020c00 	.word	0x40020c00

08001e80 <LCD_Delay>:

/**
 * @brief  Wait for loop in ms.
 * @param  Delay in ms.
 */
void LCD_Delay(uint32_t Delay) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
	HAL_Delay(Delay);
 8001e88:	6878      	ldr	r0, [r7, #4]
 8001e8a:	f001 f8df 	bl	800304c <HAL_Delay>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
	...

08001e98 <BSP_LCD_Init>:

/**
 * @brief  Initializes the LCD.
 * @retval LCD state
 */
uint8_t BSP_LCD_Init(void) {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
	/* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
	/* In this case, ReadID function is bypassed.*/
	/*if(ili9341_drv.ReadID() == ILI9341_ID)*/

	/* LTDC Configuration ----------------------------------------------------*/
	LtdcHandler.Instance = LTDC;
 8001e9c:	4b2d      	ldr	r3, [pc, #180]	; (8001f54 <BSP_LCD_Init+0xbc>)
 8001e9e:	4a2e      	ldr	r2, [pc, #184]	; (8001f58 <BSP_LCD_Init+0xc0>)
 8001ea0:	601a      	str	r2, [r3, #0]
	 ActiveH=320 (323-2-2+1)
	 VFP=4 (327-320-2-2+1)
	 */

	/* Configure horizontal synchronization width */
	LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8001ea2:	4b2c      	ldr	r3, [pc, #176]	; (8001f54 <BSP_LCD_Init+0xbc>)
 8001ea4:	2209      	movs	r2, #9
 8001ea6:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8001ea8:	4b2a      	ldr	r3, [pc, #168]	; (8001f54 <BSP_LCD_Init+0xbc>)
 8001eaa:	2201      	movs	r2, #1
 8001eac:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8001eae:	4b29      	ldr	r3, [pc, #164]	; (8001f54 <BSP_LCD_Init+0xbc>)
 8001eb0:	221d      	movs	r2, #29
 8001eb2:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8001eb4:	4b27      	ldr	r3, [pc, #156]	; (8001f54 <BSP_LCD_Init+0xbc>)
 8001eb6:	2203      	movs	r2, #3
 8001eb8:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	LtdcHandler.Init.AccumulatedActiveW = 269;
 8001eba:	4b26      	ldr	r3, [pc, #152]	; (8001f54 <BSP_LCD_Init+0xbc>)
 8001ebc:	f240 120d 	movw	r2, #269	; 0x10d
 8001ec0:	625a      	str	r2, [r3, #36]	; 0x24
	/* Configure accumulated active height */
	LtdcHandler.Init.AccumulatedActiveH = 323;
 8001ec2:	4b24      	ldr	r3, [pc, #144]	; (8001f54 <BSP_LCD_Init+0xbc>)
 8001ec4:	f240 1243 	movw	r2, #323	; 0x143
 8001ec8:	629a      	str	r2, [r3, #40]	; 0x28
	/* Configure total width */
	LtdcHandler.Init.TotalWidth = 279;
 8001eca:	4b22      	ldr	r3, [pc, #136]	; (8001f54 <BSP_LCD_Init+0xbc>)
 8001ecc:	f240 1217 	movw	r2, #279	; 0x117
 8001ed0:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Configure total height */
	LtdcHandler.Init.TotalHeigh = 327;
 8001ed2:	4b20      	ldr	r3, [pc, #128]	; (8001f54 <BSP_LCD_Init+0xbc>)
 8001ed4:	f240 1247 	movw	r2, #327	; 0x147
 8001ed8:	631a      	str	r2, [r3, #48]	; 0x30

	/* Configure R,G,B component values for LCD background color */
	LtdcHandler.Init.Backcolor.Red = 0;
 8001eda:	4b1e      	ldr	r3, [pc, #120]	; (8001f54 <BSP_LCD_Init+0xbc>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	LtdcHandler.Init.Backcolor.Blue = 0;
 8001ee2:	4b1c      	ldr	r3, [pc, #112]	; (8001f54 <BSP_LCD_Init+0xbc>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	LtdcHandler.Init.Backcolor.Green = 0;
 8001eea:	4b1a      	ldr	r3, [pc, #104]	; (8001f54 <BSP_LCD_Init+0xbc>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	/* LCD clock configuration */
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001ef2:	4b1a      	ldr	r3, [pc, #104]	; (8001f5c <BSP_LCD_Init+0xc4>)
 8001ef4:	2208      	movs	r2, #8
 8001ef6:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001ef8:	4b18      	ldr	r3, [pc, #96]	; (8001f5c <BSP_LCD_Init+0xc4>)
 8001efa:	22c0      	movs	r2, #192	; 0xc0
 8001efc:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001efe:	4b17      	ldr	r3, [pc, #92]	; (8001f5c <BSP_LCD_Init+0xc4>)
 8001f00:	2204      	movs	r2, #4
 8001f02:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001f04:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <BSP_LCD_Init+0xc4>)
 8001f06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f0a:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001f0c:	4813      	ldr	r0, [pc, #76]	; (8001f5c <BSP_LCD_Init+0xc4>)
 8001f0e:	f004 fd3b 	bl	8006988 <HAL_RCCEx_PeriphCLKConfig>

	/* Polarity */
	LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001f12:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <BSP_LCD_Init+0xbc>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	605a      	str	r2, [r3, #4]
	LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001f18:	4b0e      	ldr	r3, [pc, #56]	; (8001f54 <BSP_LCD_Init+0xbc>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
	LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001f1e:	4b0d      	ldr	r3, [pc, #52]	; (8001f54 <BSP_LCD_Init+0xbc>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	60da      	str	r2, [r3, #12]
	LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001f24:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <BSP_LCD_Init+0xbc>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	611a      	str	r2, [r3, #16]

	BSP_LCD_MspInit();
 8001f2a:	f000 fca9 	bl	8002880 <BSP_LCD_MspInit>
	HAL_LTDC_Init(&LtdcHandler);
 8001f2e:	4809      	ldr	r0, [pc, #36]	; (8001f54 <BSP_LCD_Init+0xbc>)
 8001f30:	f003 fca8 	bl	8005884 <HAL_LTDC_Init>

	/* Select the device */
	LcdDrv = &ili9341_drv;
 8001f34:	4b0a      	ldr	r3, [pc, #40]	; (8001f60 <BSP_LCD_Init+0xc8>)
 8001f36:	4a0b      	ldr	r2, [pc, #44]	; (8001f64 <BSP_LCD_Init+0xcc>)
 8001f38:	601a      	str	r2, [r3, #0]

	/* LCD Init */
	LcdDrv->Init();
 8001f3a:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <BSP_LCD_Init+0xc8>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4798      	blx	r3

	/* Initialize the SDRAM */
	BSP_SDRAM_Init();
 8001f42:	f000 fe8b 	bl	8002c5c <BSP_SDRAM_Init>

	/* Initialize the font */
	BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001f46:	4808      	ldr	r0, [pc, #32]	; (8001f68 <BSP_LCD_Init+0xd0>)
 8001f48:	f000 f86a 	bl	8002020 <BSP_LCD_SetFont>

	return LCD_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	200003a0 	.word	0x200003a0
 8001f58:	40016800 	.word	0x40016800
 8001f5c:	20000488 	.word	0x20000488
 8001f60:	200004d4 	.word	0x200004d4
 8001f64:	20000004 	.word	0x20000004
 8001f68:	20000040 	.word	0x20000040

08001f6c <BSP_LCD_GetXSize>:

/**
 * @brief  Gets the LCD X size.  
 * @retval The used LCD X size
 */
uint32_t BSP_LCD_GetXSize(void) {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
	return LcdDrv->GetLcdPixelWidth();
 8001f70:	4b03      	ldr	r3, [pc, #12]	; (8001f80 <BSP_LCD_GetXSize+0x14>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f76:	4798      	blx	r3
 8001f78:	4603      	mov	r3, r0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	200004d4 	.word	0x200004d4

08001f84 <BSP_LCD_GetYSize>:

/**
 * @brief  Gets the LCD Y size.  
 * @retval The used LCD Y size
 */
uint32_t BSP_LCD_GetYSize(void) {
 8001f84:	b580      	push	{r7, lr}
 8001f86:	af00      	add	r7, sp, #0
	return LcdDrv->GetLcdPixelHeight();
 8001f88:	4b03      	ldr	r3, [pc, #12]	; (8001f98 <BSP_LCD_GetYSize+0x14>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8e:	4798      	blx	r3
 8001f90:	4603      	mov	r3, r0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	200004d4 	.word	0x200004d4

08001f9c <BSP_LCD_SelectLayer>:

/**
 * @brief  Selects the LCD Layer.
 * @param  LayerIndex: the Layer foreground or background.
 */
void BSP_LCD_SelectLayer(uint32_t LayerIndex) {
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
	ActiveLayer = LayerIndex;
 8001fa4:	4a04      	ldr	r2, [pc, #16]	; (8001fb8 <BSP_LCD_SelectLayer+0x1c>)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6013      	str	r3, [r2, #0]
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	200004b8 	.word	0x200004b8

08001fbc <BSP_LCD_SetTextColor>:

/**
 * @brief  Sets the Text color.
 * @param  Color: the Text color code ARGB(8-8-8-8)
 */
void BSP_LCD_SetTextColor(uint32_t Color) {
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
	DrawProp[ActiveLayer].TextColor = Color;
 8001fc4:	4b07      	ldr	r3, [pc, #28]	; (8001fe4 <BSP_LCD_SetTextColor+0x28>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4907      	ldr	r1, [pc, #28]	; (8001fe8 <BSP_LCD_SetTextColor+0x2c>)
 8001fca:	4613      	mov	r3, r2
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	4413      	add	r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	440b      	add	r3, r1
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	601a      	str	r2, [r3, #0]
}
 8001fd8:	bf00      	nop
 8001fda:	370c      	adds	r7, #12
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	200004b8 	.word	0x200004b8
 8001fe8:	200004bc 	.word	0x200004bc

08001fec <BSP_LCD_SetBackColor>:

/**
 * @brief  Sets the Background color.
 * @param  Color: the layer Background color code ARGB(8-8-8-8)
 */
void BSP_LCD_SetBackColor(uint32_t Color) {
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
	DrawProp[ActiveLayer].BackColor = Color;
 8001ff4:	4b08      	ldr	r3, [pc, #32]	; (8002018 <BSP_LCD_SetBackColor+0x2c>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4908      	ldr	r1, [pc, #32]	; (800201c <BSP_LCD_SetBackColor+0x30>)
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	4413      	add	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	440b      	add	r3, r1
 8002004:	3304      	adds	r3, #4
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	601a      	str	r2, [r3, #0]
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
 8002016:	bf00      	nop
 8002018:	200004b8 	.word	0x200004b8
 800201c:	200004bc 	.word	0x200004bc

08002020 <BSP_LCD_SetFont>:

/**
 * @brief  Sets the Text Font.
 * @param  pFonts: the layer font to be used
 */
void BSP_LCD_SetFont(sFONT *pFonts) {
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
	DrawProp[ActiveLayer].pFont = pFonts;
 8002028:	4b08      	ldr	r3, [pc, #32]	; (800204c <BSP_LCD_SetFont+0x2c>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4908      	ldr	r1, [pc, #32]	; (8002050 <BSP_LCD_SetFont+0x30>)
 800202e:	4613      	mov	r3, r2
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	4413      	add	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	440b      	add	r3, r1
 8002038:	3308      	adds	r3, #8
 800203a:	687a      	ldr	r2, [r7, #4]
 800203c:	601a      	str	r2, [r3, #0]
}
 800203e:	bf00      	nop
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	200004b8 	.word	0x200004b8
 8002050:	200004bc 	.word	0x200004bc

08002054 <BSP_LCD_Clear>:

/**
 * @brief  Clears the hole LCD.
 * @param  Color: the color of the background
 */
void BSP_LCD_Clear(uint32_t Color) {
 8002054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002056:	b085      	sub	sp, #20
 8002058:	af02      	add	r7, sp, #8
 800205a:	6078      	str	r0, [r7, #4]
	/* Clear the LCD */
	FillBuffer(ActiveLayer,
 800205c:	4b0f      	ldr	r3, [pc, #60]	; (800209c <BSP_LCD_Clear+0x48>)
 800205e:	681c      	ldr	r4, [r3, #0]
			(uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress),
 8002060:	4b0e      	ldr	r3, [pc, #56]	; (800209c <BSP_LCD_Clear+0x48>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a0e      	ldr	r2, [pc, #56]	; (80020a0 <BSP_LCD_Clear+0x4c>)
 8002066:	2134      	movs	r1, #52	; 0x34
 8002068:	fb01 f303 	mul.w	r3, r1, r3
 800206c:	4413      	add	r3, r2
 800206e:	335c      	adds	r3, #92	; 0x5c
 8002070:	681b      	ldr	r3, [r3, #0]
	FillBuffer(ActiveLayer,
 8002072:	461e      	mov	r6, r3
 8002074:	f7ff ff7a 	bl	8001f6c <BSP_LCD_GetXSize>
 8002078:	4605      	mov	r5, r0
 800207a:	f7ff ff83 	bl	8001f84 <BSP_LCD_GetYSize>
 800207e:	4602      	mov	r2, r0
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	9301      	str	r3, [sp, #4]
 8002084:	2300      	movs	r3, #0
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	4613      	mov	r3, r2
 800208a:	462a      	mov	r2, r5
 800208c:	4631      	mov	r1, r6
 800208e:	4620      	mov	r0, r4
 8002090:	f000 fdac 	bl	8002bec <FillBuffer>
			BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
}
 8002094:	bf00      	nop
 8002096:	370c      	adds	r7, #12
 8002098:	46bd      	mov	sp, r7
 800209a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800209c:	200004b8 	.word	0x200004b8
 80020a0:	200003a0 	.word	0x200003a0

080020a4 <BSP_LCD_DisplayChar>:
 * @brief  Displays one character.
 * @param  Xpos: start column address
 * @param  Ypos: the Line where to display the character shape
 * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
 */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii) {
 80020a4:	b590      	push	{r4, r7, lr}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	80fb      	strh	r3, [r7, #6]
 80020ae:	460b      	mov	r3, r1
 80020b0:	80bb      	strh	r3, [r7, #4]
 80020b2:	4613      	mov	r3, r2
 80020b4:	70fb      	strb	r3, [r7, #3]
	DrawChar(Xpos, Ypos,
			&DrawProp[ActiveLayer].pFont->table[(Ascii - ' ')
 80020b6:	4b1b      	ldr	r3, [pc, #108]	; (8002124 <BSP_LCD_DisplayChar+0x80>)
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	491b      	ldr	r1, [pc, #108]	; (8002128 <BSP_LCD_DisplayChar+0x84>)
 80020bc:	4613      	mov	r3, r2
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	4413      	add	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	3308      	adds	r3, #8
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6819      	ldr	r1, [r3, #0]
 80020cc:	78fb      	ldrb	r3, [r7, #3]
 80020ce:	f1a3 0020 	sub.w	r0, r3, #32
					*\
 DrawProp[ActiveLayer].pFont->Height
 80020d2:	4b14      	ldr	r3, [pc, #80]	; (8002124 <BSP_LCD_DisplayChar+0x80>)
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	4c14      	ldr	r4, [pc, #80]	; (8002128 <BSP_LCD_DisplayChar+0x84>)
 80020d8:	4613      	mov	r3, r2
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4413      	add	r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	4423      	add	r3, r4
 80020e2:	3308      	adds	r3, #8
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	88db      	ldrh	r3, [r3, #6]
					*\
 80020e8:	fb03 f000 	mul.w	r0, r3, r0
					* ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80020ec:	4b0d      	ldr	r3, [pc, #52]	; (8002124 <BSP_LCD_DisplayChar+0x80>)
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	4c0d      	ldr	r4, [pc, #52]	; (8002128 <BSP_LCD_DisplayChar+0x84>)
 80020f2:	4613      	mov	r3, r2
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	4413      	add	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4423      	add	r3, r4
 80020fc:	3308      	adds	r3, #8
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	889b      	ldrh	r3, [r3, #4]
 8002102:	3307      	adds	r3, #7
 8002104:	2b00      	cmp	r3, #0
 8002106:	da00      	bge.n	800210a <BSP_LCD_DisplayChar+0x66>
 8002108:	3307      	adds	r3, #7
 800210a:	10db      	asrs	r3, r3, #3
 800210c:	fb00 f303 	mul.w	r3, r0, r3
	DrawChar(Xpos, Ypos,
 8002110:	18ca      	adds	r2, r1, r3
 8002112:	88b9      	ldrh	r1, [r7, #4]
 8002114:	88fb      	ldrh	r3, [r7, #6]
 8002116:	4618      	mov	r0, r3
 8002118:	f000 fcae 	bl	8002a78 <DrawChar>
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	bd90      	pop	{r4, r7, pc}
 8002124:	200004b8 	.word	0x200004b8
 8002128:	200004bc 	.word	0x200004bc

0800212c <BSP_LCD_DisplayStringAt>:
 *                @arg CENTER_MODE 
 *                @arg RIGHT_MODE
 *                @arg LEFT_MODE   
 */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText,
		Text_AlignModeTypdef mode) {
 800212c:	b5b0      	push	{r4, r5, r7, lr}
 800212e:	b088      	sub	sp, #32
 8002130:	af00      	add	r7, sp, #0
 8002132:	60ba      	str	r2, [r7, #8]
 8002134:	461a      	mov	r2, r3
 8002136:	4603      	mov	r3, r0
 8002138:	81fb      	strh	r3, [r7, #14]
 800213a:	460b      	mov	r3, r1
 800213c:	81bb      	strh	r3, [r7, #12]
 800213e:	4613      	mov	r3, r2
 8002140:	71fb      	strb	r3, [r7, #7]
	uint16_t refcolumn = 1, i = 0;
 8002142:	2301      	movs	r3, #1
 8002144:	83fb      	strh	r3, [r7, #30]
 8002146:	2300      	movs	r3, #0
 8002148:	83bb      	strh	r3, [r7, #28]
	uint32_t size = 0, xsize = 0;
 800214a:	2300      	movs	r3, #0
 800214c:	61bb      	str	r3, [r7, #24]
 800214e:	2300      	movs	r3, #0
 8002150:	613b      	str	r3, [r7, #16]
	uint8_t *ptr = pText;
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	617b      	str	r3, [r7, #20]

	/* Get the text size */
	while (*ptr++)
 8002156:	e002      	b.n	800215e <BSP_LCD_DisplayStringAt+0x32>
		size++;
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	3301      	adds	r3, #1
 800215c:	61bb      	str	r3, [r7, #24]
	while (*ptr++)
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	1c5a      	adds	r2, r3, #1
 8002162:	617a      	str	r2, [r7, #20]
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f6      	bne.n	8002158 <BSP_LCD_DisplayStringAt+0x2c>

	/* Characters number per line */
	xsize = (BSP_LCD_GetXSize() / DrawProp[ActiveLayer].pFont->Width);
 800216a:	f7ff feff 	bl	8001f6c <BSP_LCD_GetXSize>
 800216e:	4601      	mov	r1, r0
 8002170:	4b4b      	ldr	r3, [pc, #300]	; (80022a0 <BSP_LCD_DisplayStringAt+0x174>)
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	484b      	ldr	r0, [pc, #300]	; (80022a4 <BSP_LCD_DisplayStringAt+0x178>)
 8002176:	4613      	mov	r3, r2
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	4413      	add	r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	4403      	add	r3, r0
 8002180:	3308      	adds	r3, #8
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	889b      	ldrh	r3, [r3, #4]
 8002186:	fbb1 f3f3 	udiv	r3, r1, r3
 800218a:	613b      	str	r3, [r7, #16]

	switch (mode) {
 800218c:	79fb      	ldrb	r3, [r7, #7]
 800218e:	2b03      	cmp	r3, #3
 8002190:	d01c      	beq.n	80021cc <BSP_LCD_DisplayStringAt+0xa0>
 8002192:	2b03      	cmp	r3, #3
 8002194:	dc33      	bgt.n	80021fe <BSP_LCD_DisplayStringAt+0xd2>
 8002196:	2b01      	cmp	r3, #1
 8002198:	d002      	beq.n	80021a0 <BSP_LCD_DisplayStringAt+0x74>
 800219a:	2b02      	cmp	r3, #2
 800219c:	d019      	beq.n	80021d2 <BSP_LCD_DisplayStringAt+0xa6>
 800219e:	e02e      	b.n	80021fe <BSP_LCD_DisplayStringAt+0xd2>
	case CENTER_MODE: {
		refcolumn = X
				+ ((xsize - size) * DrawProp[ActiveLayer].pFont->Width) / 2;
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	1ad1      	subs	r1, r2, r3
 80021a6:	4b3e      	ldr	r3, [pc, #248]	; (80022a0 <BSP_LCD_DisplayStringAt+0x174>)
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	483e      	ldr	r0, [pc, #248]	; (80022a4 <BSP_LCD_DisplayStringAt+0x178>)
 80021ac:	4613      	mov	r3, r2
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	4413      	add	r3, r2
 80021b2:	009b      	lsls	r3, r3, #2
 80021b4:	4403      	add	r3, r0
 80021b6:	3308      	adds	r3, #8
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	889b      	ldrh	r3, [r3, #4]
 80021bc:	fb01 f303 	mul.w	r3, r1, r3
 80021c0:	085b      	lsrs	r3, r3, #1
 80021c2:	b29a      	uxth	r2, r3
		refcolumn = X
 80021c4:	89fb      	ldrh	r3, [r7, #14]
 80021c6:	4413      	add	r3, r2
 80021c8:	83fb      	strh	r3, [r7, #30]
		break;
 80021ca:	e01b      	b.n	8002204 <BSP_LCD_DisplayStringAt+0xd8>
	}
	case LEFT_MODE: {
		refcolumn = X;
 80021cc:	89fb      	ldrh	r3, [r7, #14]
 80021ce:	83fb      	strh	r3, [r7, #30]
		break;
 80021d0:	e018      	b.n	8002204 <BSP_LCD_DisplayStringAt+0xd8>
	}
	case RIGHT_MODE: {
		refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width);
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	b299      	uxth	r1, r3
 80021da:	4b31      	ldr	r3, [pc, #196]	; (80022a0 <BSP_LCD_DisplayStringAt+0x174>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	4831      	ldr	r0, [pc, #196]	; (80022a4 <BSP_LCD_DisplayStringAt+0x178>)
 80021e0:	4613      	mov	r3, r2
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	4413      	add	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	4403      	add	r3, r0
 80021ea:	3308      	adds	r3, #8
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	889b      	ldrh	r3, [r3, #4]
 80021f0:	fb11 f303 	smulbb	r3, r1, r3
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	89fb      	ldrh	r3, [r7, #14]
 80021f8:	4413      	add	r3, r2
 80021fa:	83fb      	strh	r3, [r7, #30]
		break;
 80021fc:	e002      	b.n	8002204 <BSP_LCD_DisplayStringAt+0xd8>
	}
	default: {
		refcolumn = X;
 80021fe:	89fb      	ldrh	r3, [r7, #14]
 8002200:	83fb      	strh	r3, [r7, #30]
		break;
 8002202:	bf00      	nop
	}
	}

	/* Send the string character by character on LCD */
	while ((*pText != 0)
 8002204:	e01a      	b.n	800223c <BSP_LCD_DisplayStringAt+0x110>
			& (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width))
					& 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width)) {
		/* Display one character on LCD */
		BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	781a      	ldrb	r2, [r3, #0]
 800220a:	89b9      	ldrh	r1, [r7, #12]
 800220c:	8bfb      	ldrh	r3, [r7, #30]
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff ff48 	bl	80020a4 <BSP_LCD_DisplayChar>
		/* Decrement the column position by 16 */
		refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8002214:	4b22      	ldr	r3, [pc, #136]	; (80022a0 <BSP_LCD_DisplayStringAt+0x174>)
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	4922      	ldr	r1, [pc, #136]	; (80022a4 <BSP_LCD_DisplayStringAt+0x178>)
 800221a:	4613      	mov	r3, r2
 800221c:	005b      	lsls	r3, r3, #1
 800221e:	4413      	add	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	440b      	add	r3, r1
 8002224:	3308      	adds	r3, #8
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	889a      	ldrh	r2, [r3, #4]
 800222a:	8bfb      	ldrh	r3, [r7, #30]
 800222c:	4413      	add	r3, r2
 800222e:	83fb      	strh	r3, [r7, #30]
		/* Point on the next character */
		pText++;
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	3301      	adds	r3, #1
 8002234:	60bb      	str	r3, [r7, #8]
		i++;
 8002236:	8bbb      	ldrh	r3, [r7, #28]
 8002238:	3301      	adds	r3, #1
 800223a:	83bb      	strh	r3, [r7, #28]
	while ((*pText != 0)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	781b      	ldrb	r3, [r3, #0]
			& (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width))
 8002240:	2b00      	cmp	r3, #0
 8002242:	bf14      	ite	ne
 8002244:	2301      	movne	r3, #1
 8002246:	2300      	moveq	r3, #0
 8002248:	b2dc      	uxtb	r4, r3
 800224a:	f7ff fe8f 	bl	8001f6c <BSP_LCD_GetXSize>
 800224e:	8bb9      	ldrh	r1, [r7, #28]
 8002250:	4b13      	ldr	r3, [pc, #76]	; (80022a0 <BSP_LCD_DisplayStringAt+0x174>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4d13      	ldr	r5, [pc, #76]	; (80022a4 <BSP_LCD_DisplayStringAt+0x178>)
 8002256:	4613      	mov	r3, r2
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	4413      	add	r3, r2
 800225c:	009b      	lsls	r3, r3, #2
 800225e:	442b      	add	r3, r5
 8002260:	3308      	adds	r3, #8
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	889b      	ldrh	r3, [r3, #4]
 8002266:	fb01 f303 	mul.w	r3, r1, r3
 800226a:	1ac3      	subs	r3, r0, r3
					& 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width)) {
 800226c:	b299      	uxth	r1, r3
 800226e:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <BSP_LCD_DisplayStringAt+0x174>)
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	480c      	ldr	r0, [pc, #48]	; (80022a4 <BSP_LCD_DisplayStringAt+0x178>)
 8002274:	4613      	mov	r3, r2
 8002276:	005b      	lsls	r3, r3, #1
 8002278:	4413      	add	r3, r2
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	4403      	add	r3, r0
 800227e:	3308      	adds	r3, #8
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	889b      	ldrh	r3, [r3, #4]
			& (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width))
 8002284:	4299      	cmp	r1, r3
 8002286:	bf2c      	ite	cs
 8002288:	2301      	movcs	r3, #1
 800228a:	2300      	movcc	r3, #0
 800228c:	b2db      	uxtb	r3, r3
 800228e:	4023      	ands	r3, r4
 8002290:	b2db      	uxtb	r3, r3
	while ((*pText != 0)
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1b7      	bne.n	8002206 <BSP_LCD_DisplayStringAt+0xda>
	}
}
 8002296:	bf00      	nop
 8002298:	bf00      	nop
 800229a:	3720      	adds	r7, #32
 800229c:	46bd      	mov	sp, r7
 800229e:	bdb0      	pop	{r4, r5, r7, pc}
 80022a0:	200004b8 	.word	0x200004b8
 80022a4:	200004bc 	.word	0x200004bc

080022a8 <BSP_LCD_DrawHLine>:
 * @brief  Displays an horizontal line.
 * @param  Xpos: the X position
 * @param  Ypos: the Y position
 * @param  Length: line length
 */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length) {
 80022a8:	b5b0      	push	{r4, r5, r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af02      	add	r7, sp, #8
 80022ae:	4603      	mov	r3, r0
 80022b0:	80fb      	strh	r3, [r7, #6]
 80022b2:	460b      	mov	r3, r1
 80022b4:	80bb      	strh	r3, [r7, #4]
 80022b6:	4613      	mov	r3, r2
 80022b8:	807b      	strh	r3, [r7, #2]
	uint32_t xaddress = 0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]

	/* Get the line address */
	xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress)
 80022be:	4b16      	ldr	r3, [pc, #88]	; (8002318 <BSP_LCD_DrawHLine+0x70>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a16      	ldr	r2, [pc, #88]	; (800231c <BSP_LCD_DrawHLine+0x74>)
 80022c4:	2134      	movs	r1, #52	; 0x34
 80022c6:	fb01 f303 	mul.w	r3, r1, r3
 80022ca:	4413      	add	r3, r2
 80022cc:	335c      	adds	r3, #92	; 0x5c
 80022ce:	681c      	ldr	r4, [r3, #0]
			+ 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 80022d0:	f7ff fe4c 	bl	8001f6c <BSP_LCD_GetXSize>
 80022d4:	4602      	mov	r2, r0
 80022d6:	88bb      	ldrh	r3, [r7, #4]
 80022d8:	fb03 f202 	mul.w	r2, r3, r2
 80022dc:	88fb      	ldrh	r3, [r7, #6]
 80022de:	4413      	add	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
	xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress)
 80022e2:	4423      	add	r3, r4
 80022e4:	60fb      	str	r3, [r7, #12]

	/* Write line */
	FillBuffer(ActiveLayer, (uint32_t*) xaddress, Length, 1, 0,
 80022e6:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <BSP_LCD_DrawHLine+0x70>)
 80022e8:	6818      	ldr	r0, [r3, #0]
 80022ea:	68f9      	ldr	r1, [r7, #12]
 80022ec:	887c      	ldrh	r4, [r7, #2]
 80022ee:	4b0a      	ldr	r3, [pc, #40]	; (8002318 <BSP_LCD_DrawHLine+0x70>)
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	4d0b      	ldr	r5, [pc, #44]	; (8002320 <BSP_LCD_DrawHLine+0x78>)
 80022f4:	4613      	mov	r3, r2
 80022f6:	005b      	lsls	r3, r3, #1
 80022f8:	4413      	add	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	442b      	add	r3, r5
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	9301      	str	r3, [sp, #4]
 8002302:	2300      	movs	r3, #0
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	2301      	movs	r3, #1
 8002308:	4622      	mov	r2, r4
 800230a:	f000 fc6f 	bl	8002bec <FillBuffer>
			DrawProp[ActiveLayer].TextColor);
}
 800230e:	bf00      	nop
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bdb0      	pop	{r4, r5, r7, pc}
 8002316:	bf00      	nop
 8002318:	200004b8 	.word	0x200004b8
 800231c:	200003a0 	.word	0x200003a0
 8002320:	200004bc 	.word	0x200004bc

08002324 <BSP_LCD_DrawLine>:
 * @param  X1: the point 1 X position
 * @param  Y1: the point 1 Y position
 * @param  X2: the point 2 X position
 * @param  Y2: the point 2 Y position
 */
void BSP_LCD_DrawLine(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2) {
 8002324:	b590      	push	{r4, r7, lr}
 8002326:	b08b      	sub	sp, #44	; 0x2c
 8002328:	af00      	add	r7, sp, #0
 800232a:	4604      	mov	r4, r0
 800232c:	4608      	mov	r0, r1
 800232e:	4611      	mov	r1, r2
 8002330:	461a      	mov	r2, r3
 8002332:	4623      	mov	r3, r4
 8002334:	80fb      	strh	r3, [r7, #6]
 8002336:	4603      	mov	r3, r0
 8002338:	80bb      	strh	r3, [r7, #4]
 800233a:	460b      	mov	r3, r1
 800233c:	807b      	strh	r3, [r7, #2]
 800233e:	4613      	mov	r3, r2
 8002340:	803b      	strh	r3, [r7, #0]
	int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, yinc1 =
 8002342:	2300      	movs	r3, #0
 8002344:	823b      	strh	r3, [r7, #16]
 8002346:	2300      	movs	r3, #0
 8002348:	81fb      	strh	r3, [r7, #14]
 800234a:	2300      	movs	r3, #0
 800234c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800234e:	2300      	movs	r3, #0
 8002350:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002352:	2300      	movs	r3, #0
 8002354:	847b      	strh	r3, [r7, #34]	; 0x22
 8002356:	2300      	movs	r3, #0
 8002358:	843b      	strh	r3, [r7, #32]
 800235a:	2300      	movs	r3, #0
 800235c:	83fb      	strh	r3, [r7, #30]
			0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
 800235e:	2300      	movs	r3, #0
 8002360:	83bb      	strh	r3, [r7, #28]
 8002362:	2300      	movs	r3, #0
 8002364:	837b      	strh	r3, [r7, #26]
 8002366:	2300      	movs	r3, #0
 8002368:	833b      	strh	r3, [r7, #24]
 800236a:	2300      	movs	r3, #0
 800236c:	82fb      	strh	r3, [r7, #22]
 800236e:	2300      	movs	r3, #0
 8002370:	82bb      	strh	r3, [r7, #20]
			curpixel = 0;
 8002372:	2300      	movs	r3, #0
 8002374:	827b      	strh	r3, [r7, #18]

	deltax = ABS(X2 - X1); /* The difference between the x's */
 8002376:	887a      	ldrh	r2, [r7, #2]
 8002378:	88fb      	ldrh	r3, [r7, #6]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	bfb8      	it	lt
 8002380:	425b      	neglt	r3, r3
 8002382:	823b      	strh	r3, [r7, #16]
	deltay = ABS(Y2 - Y1); /* The difference between the y's */
 8002384:	883a      	ldrh	r2, [r7, #0]
 8002386:	88bb      	ldrh	r3, [r7, #4]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b00      	cmp	r3, #0
 800238c:	bfb8      	it	lt
 800238e:	425b      	neglt	r3, r3
 8002390:	81fb      	strh	r3, [r7, #14]
	x = X1; /* Start x off at the first pixel */
 8002392:	88fb      	ldrh	r3, [r7, #6]
 8002394:	84fb      	strh	r3, [r7, #38]	; 0x26
	y = Y1; /* Start y off at the first pixel */
 8002396:	88bb      	ldrh	r3, [r7, #4]
 8002398:	84bb      	strh	r3, [r7, #36]	; 0x24

	if (X2 >= X1) /* The x-values are increasing */
 800239a:	887a      	ldrh	r2, [r7, #2]
 800239c:	88fb      	ldrh	r3, [r7, #6]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d304      	bcc.n	80023ac <BSP_LCD_DrawLine+0x88>
	{
		xinc1 = 1;
 80023a2:	2301      	movs	r3, #1
 80023a4:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = 1;
 80023a6:	2301      	movs	r3, #1
 80023a8:	843b      	strh	r3, [r7, #32]
 80023aa:	e005      	b.n	80023b8 <BSP_LCD_DrawLine+0x94>
	} else /* The x-values are decreasing */
	{
		xinc1 = -1;
 80023ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023b0:	847b      	strh	r3, [r7, #34]	; 0x22
		xinc2 = -1;
 80023b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023b6:	843b      	strh	r3, [r7, #32]
	}

	if (Y2 >= Y1) /* The y-values are increasing */
 80023b8:	883a      	ldrh	r2, [r7, #0]
 80023ba:	88bb      	ldrh	r3, [r7, #4]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d304      	bcc.n	80023ca <BSP_LCD_DrawLine+0xa6>
	{
		yinc1 = 1;
 80023c0:	2301      	movs	r3, #1
 80023c2:	83fb      	strh	r3, [r7, #30]
		yinc2 = 1;
 80023c4:	2301      	movs	r3, #1
 80023c6:	83bb      	strh	r3, [r7, #28]
 80023c8:	e005      	b.n	80023d6 <BSP_LCD_DrawLine+0xb2>
	} else /* The y-values are decreasing */
	{
		yinc1 = -1;
 80023ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023ce:	83fb      	strh	r3, [r7, #30]
		yinc2 = -1;
 80023d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023d4:	83bb      	strh	r3, [r7, #28]
	}

	if (deltax >= deltay) /* There is at least one x-value for every y-value */
 80023d6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80023da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023de:	429a      	cmp	r2, r3
 80023e0:	db10      	blt.n	8002404 <BSP_LCD_DrawLine+0xe0>
	{
		xinc1 = 0; /* Don't change the x when numerator >= denominator */
 80023e2:	2300      	movs	r3, #0
 80023e4:	847b      	strh	r3, [r7, #34]	; 0x22
		yinc2 = 0; /* Don't change the y for every iteration */
 80023e6:	2300      	movs	r3, #0
 80023e8:	83bb      	strh	r3, [r7, #28]
		den = deltax;
 80023ea:	8a3b      	ldrh	r3, [r7, #16]
 80023ec:	837b      	strh	r3, [r7, #26]
		num = deltax / 2;
 80023ee:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80023f2:	0fda      	lsrs	r2, r3, #31
 80023f4:	4413      	add	r3, r2
 80023f6:	105b      	asrs	r3, r3, #1
 80023f8:	833b      	strh	r3, [r7, #24]
		numadd = deltay;
 80023fa:	89fb      	ldrh	r3, [r7, #14]
 80023fc:	82fb      	strh	r3, [r7, #22]
		numpixels = deltax; /* There are more x-values than y-values */
 80023fe:	8a3b      	ldrh	r3, [r7, #16]
 8002400:	82bb      	strh	r3, [r7, #20]
 8002402:	e00f      	b.n	8002424 <BSP_LCD_DrawLine+0x100>
	} else /* There is at least one y-value for every x-value */
	{
		xinc2 = 0; /* Don't change the x for every iteration */
 8002404:	2300      	movs	r3, #0
 8002406:	843b      	strh	r3, [r7, #32]
		yinc1 = 0; /* Don't change the y when numerator >= denominator */
 8002408:	2300      	movs	r3, #0
 800240a:	83fb      	strh	r3, [r7, #30]
		den = deltay;
 800240c:	89fb      	ldrh	r3, [r7, #14]
 800240e:	837b      	strh	r3, [r7, #26]
		num = deltay / 2;
 8002410:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002414:	0fda      	lsrs	r2, r3, #31
 8002416:	4413      	add	r3, r2
 8002418:	105b      	asrs	r3, r3, #1
 800241a:	833b      	strh	r3, [r7, #24]
		numadd = deltax;
 800241c:	8a3b      	ldrh	r3, [r7, #16]
 800241e:	82fb      	strh	r3, [r7, #22]
		numpixels = deltay; /* There are more y-values than x-values */
 8002420:	89fb      	ldrh	r3, [r7, #14]
 8002422:	82bb      	strh	r3, [r7, #20]
	}

	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 8002424:	2300      	movs	r3, #0
 8002426:	827b      	strh	r3, [r7, #18]
 8002428:	e037      	b.n	800249a <BSP_LCD_DrawLine+0x176>
		BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor); /* Draw the current pixel */
 800242a:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800242c:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800242e:	4b20      	ldr	r3, [pc, #128]	; (80024b0 <BSP_LCD_DrawLine+0x18c>)
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	4c20      	ldr	r4, [pc, #128]	; (80024b4 <BSP_LCD_DrawLine+0x190>)
 8002434:	4613      	mov	r3, r2
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	4413      	add	r3, r2
 800243a:	009b      	lsls	r3, r3, #2
 800243c:	4423      	add	r3, r4
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	461a      	mov	r2, r3
 8002442:	f000 faf3 	bl	8002a2c <BSP_LCD_DrawPixel>
		num += numadd; /* Increase the numerator by the top of the fraction */
 8002446:	8b3a      	ldrh	r2, [r7, #24]
 8002448:	8afb      	ldrh	r3, [r7, #22]
 800244a:	4413      	add	r3, r2
 800244c:	b29b      	uxth	r3, r3
 800244e:	833b      	strh	r3, [r7, #24]
		if (num >= den) /* Check if numerator >= denominator */
 8002450:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002454:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002458:	429a      	cmp	r2, r3
 800245a:	db0e      	blt.n	800247a <BSP_LCD_DrawLine+0x156>
		{
			num -= den; /* Calculate the new numerator value */
 800245c:	8b3a      	ldrh	r2, [r7, #24]
 800245e:	8b7b      	ldrh	r3, [r7, #26]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	b29b      	uxth	r3, r3
 8002464:	833b      	strh	r3, [r7, #24]
			x += xinc1; /* Change the x as appropriate */
 8002466:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002468:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800246a:	4413      	add	r3, r2
 800246c:	b29b      	uxth	r3, r3
 800246e:	84fb      	strh	r3, [r7, #38]	; 0x26
			y += yinc1; /* Change the y as appropriate */
 8002470:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002472:	8bfb      	ldrh	r3, [r7, #30]
 8002474:	4413      	add	r3, r2
 8002476:	b29b      	uxth	r3, r3
 8002478:	84bb      	strh	r3, [r7, #36]	; 0x24
		}
		x += xinc2; /* Change the x as appropriate */
 800247a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800247c:	8c3b      	ldrh	r3, [r7, #32]
 800247e:	4413      	add	r3, r2
 8002480:	b29b      	uxth	r3, r3
 8002482:	84fb      	strh	r3, [r7, #38]	; 0x26
		y += yinc2; /* Change the y as appropriate */
 8002484:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002486:	8bbb      	ldrh	r3, [r7, #28]
 8002488:	4413      	add	r3, r2
 800248a:	b29b      	uxth	r3, r3
 800248c:	84bb      	strh	r3, [r7, #36]	; 0x24
	for (curpixel = 0; curpixel <= numpixels; curpixel++) {
 800248e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002492:	b29b      	uxth	r3, r3
 8002494:	3301      	adds	r3, #1
 8002496:	b29b      	uxth	r3, r3
 8002498:	827b      	strh	r3, [r7, #18]
 800249a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800249e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	ddc1      	ble.n	800242a <BSP_LCD_DrawLine+0x106>
	}
}
 80024a6:	bf00      	nop
 80024a8:	bf00      	nop
 80024aa:	372c      	adds	r7, #44	; 0x2c
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd90      	pop	{r4, r7, pc}
 80024b0:	200004b8 	.word	0x200004b8
 80024b4:	200004bc 	.word	0x200004bc

080024b8 <BSP_LCD_DrawCircle>:
 * @brief  Displays a circle.
 * @param  Xpos: the X position
 * @param  Ypos: the Y position
 * @param  Radius: the circle radius
 */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius) {
 80024b8:	b590      	push	{r4, r7, lr}
 80024ba:	b087      	sub	sp, #28
 80024bc:	af00      	add	r7, sp, #0
 80024be:	4603      	mov	r3, r0
 80024c0:	80fb      	strh	r3, [r7, #6]
 80024c2:	460b      	mov	r3, r1
 80024c4:	80bb      	strh	r3, [r7, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	807b      	strh	r3, [r7, #2]
	int32_t d;/* Decision Variable */
	uint32_t curx;/* Current X Value */
	uint32_t cury;/* Current Y Value */

	d = 3 - (Radius << 1);
 80024ca:	887b      	ldrh	r3, [r7, #2]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	f1c3 0303 	rsb	r3, r3, #3
 80024d2:	617b      	str	r3, [r7, #20]
	curx = 0;
 80024d4:	2300      	movs	r3, #0
 80024d6:	613b      	str	r3, [r7, #16]
	cury = Radius;
 80024d8:	887b      	ldrh	r3, [r7, #2]
 80024da:	60fb      	str	r3, [r7, #12]

	while (curx <= cury) {
 80024dc:	e0c7      	b.n	800266e <BSP_LCD_DrawCircle+0x1b6>
		BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury),
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	88fb      	ldrh	r3, [r7, #6]
 80024e4:	4413      	add	r3, r2
 80024e6:	b298      	uxth	r0, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	88ba      	ldrh	r2, [r7, #4]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	b299      	uxth	r1, r3
 80024f2:	4b64      	ldr	r3, [pc, #400]	; (8002684 <BSP_LCD_DrawCircle+0x1cc>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	4c64      	ldr	r4, [pc, #400]	; (8002688 <BSP_LCD_DrawCircle+0x1d0>)
 80024f8:	4613      	mov	r3, r2
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	4413      	add	r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	4423      	add	r3, r4
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	461a      	mov	r2, r3
 8002506:	f000 fa91 	bl	8002a2c <BSP_LCD_DrawPixel>
				DrawProp[ActiveLayer].TextColor);
		BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury),
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	b29b      	uxth	r3, r3
 800250e:	88fa      	ldrh	r2, [r7, #6]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	b298      	uxth	r0, r3
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	b29b      	uxth	r3, r3
 8002518:	88ba      	ldrh	r2, [r7, #4]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	b299      	uxth	r1, r3
 800251e:	4b59      	ldr	r3, [pc, #356]	; (8002684 <BSP_LCD_DrawCircle+0x1cc>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	4c59      	ldr	r4, [pc, #356]	; (8002688 <BSP_LCD_DrawCircle+0x1d0>)
 8002524:	4613      	mov	r3, r2
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	4413      	add	r3, r2
 800252a:	009b      	lsls	r3, r3, #2
 800252c:	4423      	add	r3, r4
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	461a      	mov	r2, r3
 8002532:	f000 fa7b 	bl	8002a2c <BSP_LCD_DrawPixel>
				DrawProp[ActiveLayer].TextColor);
		BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx),
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	b29a      	uxth	r2, r3
 800253a:	88fb      	ldrh	r3, [r7, #6]
 800253c:	4413      	add	r3, r2
 800253e:	b298      	uxth	r0, r3
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	b29b      	uxth	r3, r3
 8002544:	88ba      	ldrh	r2, [r7, #4]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	b299      	uxth	r1, r3
 800254a:	4b4e      	ldr	r3, [pc, #312]	; (8002684 <BSP_LCD_DrawCircle+0x1cc>)
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	4c4e      	ldr	r4, [pc, #312]	; (8002688 <BSP_LCD_DrawCircle+0x1d0>)
 8002550:	4613      	mov	r3, r2
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	4413      	add	r3, r2
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	4423      	add	r3, r4
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	461a      	mov	r2, r3
 800255e:	f000 fa65 	bl	8002a2c <BSP_LCD_DrawPixel>
				DrawProp[ActiveLayer].TextColor);
		BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx),
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	b29b      	uxth	r3, r3
 8002566:	88fa      	ldrh	r2, [r7, #6]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	b298      	uxth	r0, r3
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	b29b      	uxth	r3, r3
 8002570:	88ba      	ldrh	r2, [r7, #4]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	b299      	uxth	r1, r3
 8002576:	4b43      	ldr	r3, [pc, #268]	; (8002684 <BSP_LCD_DrawCircle+0x1cc>)
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	4c43      	ldr	r4, [pc, #268]	; (8002688 <BSP_LCD_DrawCircle+0x1d0>)
 800257c:	4613      	mov	r3, r2
 800257e:	005b      	lsls	r3, r3, #1
 8002580:	4413      	add	r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	4423      	add	r3, r4
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	461a      	mov	r2, r3
 800258a:	f000 fa4f 	bl	8002a2c <BSP_LCD_DrawPixel>
				DrawProp[ActiveLayer].TextColor);
		BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury),
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	b29a      	uxth	r2, r3
 8002592:	88fb      	ldrh	r3, [r7, #6]
 8002594:	4413      	add	r3, r2
 8002596:	b298      	uxth	r0, r3
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	b29a      	uxth	r2, r3
 800259c:	88bb      	ldrh	r3, [r7, #4]
 800259e:	4413      	add	r3, r2
 80025a0:	b299      	uxth	r1, r3
 80025a2:	4b38      	ldr	r3, [pc, #224]	; (8002684 <BSP_LCD_DrawCircle+0x1cc>)
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	4c38      	ldr	r4, [pc, #224]	; (8002688 <BSP_LCD_DrawCircle+0x1d0>)
 80025a8:	4613      	mov	r3, r2
 80025aa:	005b      	lsls	r3, r3, #1
 80025ac:	4413      	add	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4423      	add	r3, r4
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	461a      	mov	r2, r3
 80025b6:	f000 fa39 	bl	8002a2c <BSP_LCD_DrawPixel>
				DrawProp[ActiveLayer].TextColor);
		BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury),
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	b29b      	uxth	r3, r3
 80025be:	88fa      	ldrh	r2, [r7, #6]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	b298      	uxth	r0, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	88bb      	ldrh	r3, [r7, #4]
 80025ca:	4413      	add	r3, r2
 80025cc:	b299      	uxth	r1, r3
 80025ce:	4b2d      	ldr	r3, [pc, #180]	; (8002684 <BSP_LCD_DrawCircle+0x1cc>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	4c2d      	ldr	r4, [pc, #180]	; (8002688 <BSP_LCD_DrawCircle+0x1d0>)
 80025d4:	4613      	mov	r3, r2
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	4413      	add	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4423      	add	r3, r4
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	461a      	mov	r2, r3
 80025e2:	f000 fa23 	bl	8002a2c <BSP_LCD_DrawPixel>
				DrawProp[ActiveLayer].TextColor);
		BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx),
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	b29a      	uxth	r2, r3
 80025ea:	88fb      	ldrh	r3, [r7, #6]
 80025ec:	4413      	add	r3, r2
 80025ee:	b298      	uxth	r0, r3
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	b29a      	uxth	r2, r3
 80025f4:	88bb      	ldrh	r3, [r7, #4]
 80025f6:	4413      	add	r3, r2
 80025f8:	b299      	uxth	r1, r3
 80025fa:	4b22      	ldr	r3, [pc, #136]	; (8002684 <BSP_LCD_DrawCircle+0x1cc>)
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	4c22      	ldr	r4, [pc, #136]	; (8002688 <BSP_LCD_DrawCircle+0x1d0>)
 8002600:	4613      	mov	r3, r2
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	4413      	add	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4423      	add	r3, r4
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	461a      	mov	r2, r3
 800260e:	f000 fa0d 	bl	8002a2c <BSP_LCD_DrawPixel>
				DrawProp[ActiveLayer].TextColor);
		BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx),
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	b29b      	uxth	r3, r3
 8002616:	88fa      	ldrh	r2, [r7, #6]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	b298      	uxth	r0, r3
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	b29a      	uxth	r2, r3
 8002620:	88bb      	ldrh	r3, [r7, #4]
 8002622:	4413      	add	r3, r2
 8002624:	b299      	uxth	r1, r3
 8002626:	4b17      	ldr	r3, [pc, #92]	; (8002684 <BSP_LCD_DrawCircle+0x1cc>)
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	4c17      	ldr	r4, [pc, #92]	; (8002688 <BSP_LCD_DrawCircle+0x1d0>)
 800262c:	4613      	mov	r3, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	4413      	add	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4423      	add	r3, r4
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	f000 f9f7 	bl	8002a2c <BSP_LCD_DrawPixel>
				DrawProp[ActiveLayer].TextColor);

		if (d < 0) {
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	2b00      	cmp	r3, #0
 8002642:	da06      	bge.n	8002652 <BSP_LCD_DrawCircle+0x19a>
			d += (curx << 2) + 6;
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	009a      	lsls	r2, r3, #2
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	4413      	add	r3, r2
 800264c:	3306      	adds	r3, #6
 800264e:	617b      	str	r3, [r7, #20]
 8002650:	e00a      	b.n	8002668 <BSP_LCD_DrawCircle+0x1b0>
		} else {
			d += ((curx - cury) << 2) + 10;
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	009a      	lsls	r2, r3, #2
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	4413      	add	r3, r2
 800265e:	330a      	adds	r3, #10
 8002660:	617b      	str	r3, [r7, #20]
			cury--;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	3b01      	subs	r3, #1
 8002666:	60fb      	str	r3, [r7, #12]
		}
		curx++;
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	3301      	adds	r3, #1
 800266c:	613b      	str	r3, [r7, #16]
	while (curx <= cury) {
 800266e:	693a      	ldr	r2, [r7, #16]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	429a      	cmp	r2, r3
 8002674:	f67f af33 	bls.w	80024de <BSP_LCD_DrawCircle+0x26>
	}
}
 8002678:	bf00      	nop
 800267a:	bf00      	nop
 800267c:	371c      	adds	r7, #28
 800267e:	46bd      	mov	sp, r7
 8002680:	bd90      	pop	{r4, r7, pc}
 8002682:	bf00      	nop
 8002684:	200004b8 	.word	0x200004b8
 8002688:	200004bc 	.word	0x200004bc

0800268c <BSP_LCD_FillRect>:
 * @param  Ypos: the Y position
 * @param  Height: rectangle height
 * @param  Width: rectangle width
 */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width,
		uint16_t Height) {
 800268c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002690:	b086      	sub	sp, #24
 8002692:	af02      	add	r7, sp, #8
 8002694:	4604      	mov	r4, r0
 8002696:	4608      	mov	r0, r1
 8002698:	4611      	mov	r1, r2
 800269a:	461a      	mov	r2, r3
 800269c:	4623      	mov	r3, r4
 800269e:	80fb      	strh	r3, [r7, #6]
 80026a0:	4603      	mov	r3, r0
 80026a2:	80bb      	strh	r3, [r7, #4]
 80026a4:	460b      	mov	r3, r1
 80026a6:	807b      	strh	r3, [r7, #2]
 80026a8:	4613      	mov	r3, r2
 80026aa:	803b      	strh	r3, [r7, #0]
	uint32_t xaddress = 0;
 80026ac:	2300      	movs	r3, #0
 80026ae:	60fb      	str	r3, [r7, #12]

	/* Set the text color */
	BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80026b0:	4b20      	ldr	r3, [pc, #128]	; (8002734 <BSP_LCD_FillRect+0xa8>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	4920      	ldr	r1, [pc, #128]	; (8002738 <BSP_LCD_FillRect+0xac>)
 80026b6:	4613      	mov	r3, r2
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	4413      	add	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7ff fc7a 	bl	8001fbc <BSP_LCD_SetTextColor>

	/* Get the rectangle start address */
	xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress)
 80026c8:	4b1a      	ldr	r3, [pc, #104]	; (8002734 <BSP_LCD_FillRect+0xa8>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a1b      	ldr	r2, [pc, #108]	; (800273c <BSP_LCD_FillRect+0xb0>)
 80026ce:	2134      	movs	r1, #52	; 0x34
 80026d0:	fb01 f303 	mul.w	r3, r1, r3
 80026d4:	4413      	add	r3, r2
 80026d6:	335c      	adds	r3, #92	; 0x5c
 80026d8:	681c      	ldr	r4, [r3, #0]
			+ 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 80026da:	f7ff fc47 	bl	8001f6c <BSP_LCD_GetXSize>
 80026de:	4602      	mov	r2, r0
 80026e0:	88bb      	ldrh	r3, [r7, #4]
 80026e2:	fb03 f202 	mul.w	r2, r3, r2
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	4413      	add	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
	xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress)
 80026ec:	4423      	add	r3, r4
 80026ee:	60fb      	str	r3, [r7, #12]

	/* Fill the rectangle */
	FillBuffer(ActiveLayer, (uint32_t*) xaddress, Width, Height,
 80026f0:	4b10      	ldr	r3, [pc, #64]	; (8002734 <BSP_LCD_FillRect+0xa8>)
 80026f2:	681c      	ldr	r4, [r3, #0]
 80026f4:	68fd      	ldr	r5, [r7, #12]
 80026f6:	887e      	ldrh	r6, [r7, #2]
 80026f8:	f8b7 8000 	ldrh.w	r8, [r7]
			(BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80026fc:	f7ff fc36 	bl	8001f6c <BSP_LCD_GetXSize>
 8002700:	4602      	mov	r2, r0
	FillBuffer(ActiveLayer, (uint32_t*) xaddress, Width, Height,
 8002702:	887b      	ldrh	r3, [r7, #2]
 8002704:	1ad1      	subs	r1, r2, r3
 8002706:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <BSP_LCD_FillRect+0xa8>)
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	480b      	ldr	r0, [pc, #44]	; (8002738 <BSP_LCD_FillRect+0xac>)
 800270c:	4613      	mov	r3, r2
 800270e:	005b      	lsls	r3, r3, #1
 8002710:	4413      	add	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4403      	add	r3, r0
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	9301      	str	r3, [sp, #4]
 800271a:	9100      	str	r1, [sp, #0]
 800271c:	4643      	mov	r3, r8
 800271e:	4632      	mov	r2, r6
 8002720:	4629      	mov	r1, r5
 8002722:	4620      	mov	r0, r4
 8002724:	f000 fa62 	bl	8002bec <FillBuffer>
}
 8002728:	bf00      	nop
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002732:	bf00      	nop
 8002734:	200004b8 	.word	0x200004b8
 8002738:	200004bc 	.word	0x200004bc
 800273c:	200003a0 	.word	0x200003a0

08002740 <BSP_LCD_FillCircle>:
 * @brief  Displays a full circle.
 * @param  Xpos: the X position
 * @param  Ypos: the Y position
 * @param  Radius: the circle radius
 */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius) {
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	80fb      	strh	r3, [r7, #6]
 800274a:	460b      	mov	r3, r1
 800274c:	80bb      	strh	r3, [r7, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	807b      	strh	r3, [r7, #2]
	int32_t d; /* Decision Variable */
	uint32_t curx;/* Current X Value */
	uint32_t cury;/* Current Y Value */

	d = 3 - (Radius << 1);
 8002752:	887b      	ldrh	r3, [r7, #2]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	f1c3 0303 	rsb	r3, r3, #3
 800275a:	617b      	str	r3, [r7, #20]

	curx = 0;
 800275c:	2300      	movs	r3, #0
 800275e:	613b      	str	r3, [r7, #16]
	cury = Radius;
 8002760:	887b      	ldrh	r3, [r7, #2]
 8002762:	60fb      	str	r3, [r7, #12]

	BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002764:	4b44      	ldr	r3, [pc, #272]	; (8002878 <BSP_LCD_FillCircle+0x138>)
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	4944      	ldr	r1, [pc, #272]	; (800287c <BSP_LCD_FillCircle+0x13c>)
 800276a:	4613      	mov	r3, r2
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	4413      	add	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	440b      	add	r3, r1
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff fc20 	bl	8001fbc <BSP_LCD_SetTextColor>

	while (curx <= cury) {
 800277c:	e061      	b.n	8002842 <BSP_LCD_FillCircle+0x102>
		if (cury > 0) {
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d021      	beq.n	80027c8 <BSP_LCD_FillCircle+0x88>
			BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2 * cury);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	b29b      	uxth	r3, r3
 8002788:	88fa      	ldrh	r2, [r7, #6]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	b298      	uxth	r0, r3
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	b29a      	uxth	r2, r3
 8002792:	88bb      	ldrh	r3, [r7, #4]
 8002794:	4413      	add	r3, r2
 8002796:	b299      	uxth	r1, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	b29b      	uxth	r3, r3
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	b29b      	uxth	r3, r3
 80027a0:	461a      	mov	r2, r3
 80027a2:	f7ff fd81 	bl	80022a8 <BSP_LCD_DrawHLine>
			BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2 * cury);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	88fa      	ldrh	r2, [r7, #6]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	b298      	uxth	r0, r3
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	88ba      	ldrh	r2, [r7, #4]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	b299      	uxth	r1, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	b29b      	uxth	r3, r3
 80027be:	005b      	lsls	r3, r3, #1
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	461a      	mov	r2, r3
 80027c4:	f7ff fd70 	bl	80022a8 <BSP_LCD_DrawHLine>
		}

		if (curx > 0) {
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d021      	beq.n	8002812 <BSP_LCD_FillCircle+0xd2>
			BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2 * curx);
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	88fa      	ldrh	r2, [r7, #6]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	b298      	uxth	r0, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	b29b      	uxth	r3, r3
 80027dc:	88ba      	ldrh	r2, [r7, #4]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	b299      	uxth	r1, r3
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	461a      	mov	r2, r3
 80027ec:	f7ff fd5c 	bl	80022a8 <BSP_LCD_DrawHLine>
			BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2 * curx);
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	88fa      	ldrh	r2, [r7, #6]
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	b298      	uxth	r0, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	b29a      	uxth	r2, r3
 80027fe:	88bb      	ldrh	r3, [r7, #4]
 8002800:	4413      	add	r3, r2
 8002802:	b299      	uxth	r1, r3
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	b29b      	uxth	r3, r3
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	b29b      	uxth	r3, r3
 800280c:	461a      	mov	r2, r3
 800280e:	f7ff fd4b 	bl	80022a8 <BSP_LCD_DrawHLine>
		}
		if (d < 0) {
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	2b00      	cmp	r3, #0
 8002816:	da06      	bge.n	8002826 <BSP_LCD_FillCircle+0xe6>
			d += (curx << 2) + 6;
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	009a      	lsls	r2, r3, #2
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	4413      	add	r3, r2
 8002820:	3306      	adds	r3, #6
 8002822:	617b      	str	r3, [r7, #20]
 8002824:	e00a      	b.n	800283c <BSP_LCD_FillCircle+0xfc>
		} else {
			d += ((curx - cury) << 2) + 10;
 8002826:	693a      	ldr	r2, [r7, #16]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	009a      	lsls	r2, r3, #2
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	4413      	add	r3, r2
 8002832:	330a      	adds	r3, #10
 8002834:	617b      	str	r3, [r7, #20]
			cury--;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	3b01      	subs	r3, #1
 800283a:	60fb      	str	r3, [r7, #12]
		}
		curx++;
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	3301      	adds	r3, #1
 8002840:	613b      	str	r3, [r7, #16]
	while (curx <= cury) {
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	429a      	cmp	r2, r3
 8002848:	d999      	bls.n	800277e <BSP_LCD_FillCircle+0x3e>
	}

	BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800284a:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <BSP_LCD_FillCircle+0x138>)
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	490b      	ldr	r1, [pc, #44]	; (800287c <BSP_LCD_FillCircle+0x13c>)
 8002850:	4613      	mov	r3, r2
 8002852:	005b      	lsls	r3, r3, #1
 8002854:	4413      	add	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	440b      	add	r3, r1
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff fbad 	bl	8001fbc <BSP_LCD_SetTextColor>
	BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8002862:	887a      	ldrh	r2, [r7, #2]
 8002864:	88b9      	ldrh	r1, [r7, #4]
 8002866:	88fb      	ldrh	r3, [r7, #6]
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff fe25 	bl	80024b8 <BSP_LCD_DrawCircle>
}
 800286e:	bf00      	nop
 8002870:	3718      	adds	r7, #24
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	200004b8 	.word	0x200004b8
 800287c:	200004bc 	.word	0x200004bc

08002880 <BSP_LCD_MspInit>:
 *******************************************************************************/

/**
 * @brief  Initializes the LTDC MSP.
 */
__weak void BSP_LCD_MspInit(void) {
 8002880:	b580      	push	{r7, lr}
 8002882:	b08e      	sub	sp, #56	; 0x38
 8002884:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable the LTDC and DMA2D Clock */
	__HAL_RCC_LTDC_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	623b      	str	r3, [r7, #32]
 800288a:	4b61      	ldr	r3, [pc, #388]	; (8002a10 <BSP_LCD_MspInit+0x190>)
 800288c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288e:	4a60      	ldr	r2, [pc, #384]	; (8002a10 <BSP_LCD_MspInit+0x190>)
 8002890:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002894:	6453      	str	r3, [r2, #68]	; 0x44
 8002896:	4b5e      	ldr	r3, [pc, #376]	; (8002a10 <BSP_LCD_MspInit+0x190>)
 8002898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800289e:	623b      	str	r3, [r7, #32]
 80028a0:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_DMA2D_CLK_ENABLE();
 80028a2:	2300      	movs	r3, #0
 80028a4:	61fb      	str	r3, [r7, #28]
 80028a6:	4b5a      	ldr	r3, [pc, #360]	; (8002a10 <BSP_LCD_MspInit+0x190>)
 80028a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028aa:	4a59      	ldr	r2, [pc, #356]	; (8002a10 <BSP_LCD_MspInit+0x190>)
 80028ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028b0:	6313      	str	r3, [r2, #48]	; 0x30
 80028b2:	4b57      	ldr	r3, [pc, #348]	; (8002a10 <BSP_LCD_MspInit+0x190>)
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028ba:	61fb      	str	r3, [r7, #28]
 80028bc:	69fb      	ldr	r3, [r7, #28]

	/* Enable GPIOs clock */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	61bb      	str	r3, [r7, #24]
 80028c2:	4b53      	ldr	r3, [pc, #332]	; (8002a10 <BSP_LCD_MspInit+0x190>)
 80028c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c6:	4a52      	ldr	r2, [pc, #328]	; (8002a10 <BSP_LCD_MspInit+0x190>)
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	6313      	str	r3, [r2, #48]	; 0x30
 80028ce:	4b50      	ldr	r3, [pc, #320]	; (8002a10 <BSP_LCD_MspInit+0x190>)
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	61bb      	str	r3, [r7, #24]
 80028d8:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	617b      	str	r3, [r7, #20]
 80028de:	4b4c      	ldr	r3, [pc, #304]	; (8002a10 <BSP_LCD_MspInit+0x190>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	4a4b      	ldr	r2, [pc, #300]	; (8002a10 <BSP_LCD_MspInit+0x190>)
 80028e4:	f043 0302 	orr.w	r3, r3, #2
 80028e8:	6313      	str	r3, [r2, #48]	; 0x30
 80028ea:	4b49      	ldr	r3, [pc, #292]	; (8002a10 <BSP_LCD_MspInit+0x190>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	613b      	str	r3, [r7, #16]
 80028fa:	4b45      	ldr	r3, [pc, #276]	; (8002a10 <BSP_LCD_MspInit+0x190>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	4a44      	ldr	r2, [pc, #272]	; (8002a10 <BSP_LCD_MspInit+0x190>)
 8002900:	f043 0304 	orr.w	r3, r3, #4
 8002904:	6313      	str	r3, [r2, #48]	; 0x30
 8002906:	4b42      	ldr	r3, [pc, #264]	; (8002a10 <BSP_LCD_MspInit+0x190>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	613b      	str	r3, [r7, #16]
 8002910:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	60fb      	str	r3, [r7, #12]
 8002916:	4b3e      	ldr	r3, [pc, #248]	; (8002a10 <BSP_LCD_MspInit+0x190>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	4a3d      	ldr	r2, [pc, #244]	; (8002a10 <BSP_LCD_MspInit+0x190>)
 800291c:	f043 0308 	orr.w	r3, r3, #8
 8002920:	6313      	str	r3, [r2, #48]	; 0x30
 8002922:	4b3b      	ldr	r3, [pc, #236]	; (8002a10 <BSP_LCD_MspInit+0x190>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	f003 0308 	and.w	r3, r3, #8
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	60bb      	str	r3, [r7, #8]
 8002932:	4b37      	ldr	r3, [pc, #220]	; (8002a10 <BSP_LCD_MspInit+0x190>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	4a36      	ldr	r2, [pc, #216]	; (8002a10 <BSP_LCD_MspInit+0x190>)
 8002938:	f043 0320 	orr.w	r3, r3, #32
 800293c:	6313      	str	r3, [r2, #48]	; 0x30
 800293e:	4b34      	ldr	r3, [pc, #208]	; (8002a10 <BSP_LCD_MspInit+0x190>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	f003 0320 	and.w	r3, r3, #32
 8002946:	60bb      	str	r3, [r7, #8]
 8002948:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	607b      	str	r3, [r7, #4]
 800294e:	4b30      	ldr	r3, [pc, #192]	; (8002a10 <BSP_LCD_MspInit+0x190>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	4a2f      	ldr	r2, [pc, #188]	; (8002a10 <BSP_LCD_MspInit+0x190>)
 8002954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002958:	6313      	str	r3, [r2, #48]	; 0x30
 800295a:	4b2d      	ldr	r3, [pc, #180]	; (8002a10 <BSP_LCD_MspInit+0x190>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002962:	607b      	str	r3, [r7, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
	 |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
	 -----------------------------------------------------
	 */

	/* GPIOA configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8002966:	f641 0358 	movw	r3, #6232	; 0x1858
 800296a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_PIN_11 | GPIO_PIN_12;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800296c:	2302      	movs	r3, #2
 800296e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002970:	2300      	movs	r3, #0
 8002972:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002974:	2302      	movs	r3, #2
 8002976:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStructure.Alternate = GPIO_AF14_LTDC;
 8002978:	230e      	movs	r3, #14
 800297a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800297c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002980:	4619      	mov	r1, r3
 8002982:	4824      	ldr	r0, [pc, #144]	; (8002a14 <BSP_LCD_MspInit+0x194>)
 8002984:	f001 f9c2 	bl	8003d0c <HAL_GPIO_Init>

	/* GPIOB configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_8 |
 8002988:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800298e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002992:	4619      	mov	r1, r3
 8002994:	4820      	ldr	r0, [pc, #128]	; (8002a18 <BSP_LCD_MspInit+0x198>)
 8002996:	f001 f9b9 	bl	8003d0c <HAL_GPIO_Init>

	/* GPIOC configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800299a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800299e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80029a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029a4:	4619      	mov	r1, r3
 80029a6:	481d      	ldr	r0, [pc, #116]	; (8002a1c <BSP_LCD_MspInit+0x19c>)
 80029a8:	f001 f9b0 	bl	8003d0c <HAL_GPIO_Init>

	/* GPIOD configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 80029ac:	2348      	movs	r3, #72	; 0x48
 80029ae:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80029b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029b4:	4619      	mov	r1, r3
 80029b6:	481a      	ldr	r0, [pc, #104]	; (8002a20 <BSP_LCD_MspInit+0x1a0>)
 80029b8:	f001 f9a8 	bl	8003d0c <HAL_GPIO_Init>

	/* GPIOF configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_10;
 80029bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80029c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029c6:	4619      	mov	r1, r3
 80029c8:	4816      	ldr	r0, [pc, #88]	; (8002a24 <BSP_LCD_MspInit+0x1a4>)
 80029ca:	f001 f99f 	bl	8003d0c <HAL_GPIO_Init>

	/* GPIOG configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 |
 80029ce:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80029d2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_PIN_11;
	HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80029d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029d8:	4619      	mov	r1, r3
 80029da:	4813      	ldr	r0, [pc, #76]	; (8002a28 <BSP_LCD_MspInit+0x1a8>)
 80029dc:	f001 f996 	bl	8003d0c <HAL_GPIO_Init>

	/* GPIOB configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80029e0:	2303      	movs	r3, #3
 80029e2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStructure.Alternate = GPIO_AF9_LTDC;
 80029e4:	2309      	movs	r3, #9
 80029e6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80029e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029ec:	4619      	mov	r1, r3
 80029ee:	480a      	ldr	r0, [pc, #40]	; (8002a18 <BSP_LCD_MspInit+0x198>)
 80029f0:	f001 f98c 	bl	8003d0c <HAL_GPIO_Init>

	/* GPIOG configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80029f4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80029f8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80029fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029fe:	4619      	mov	r1, r3
 8002a00:	4809      	ldr	r0, [pc, #36]	; (8002a28 <BSP_LCD_MspInit+0x1a8>)
 8002a02:	f001 f983 	bl	8003d0c <HAL_GPIO_Init>
}
 8002a06:	bf00      	nop
 8002a08:	3738      	adds	r7, #56	; 0x38
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40023800 	.word	0x40023800
 8002a14:	40020000 	.word	0x40020000
 8002a18:	40020400 	.word	0x40020400
 8002a1c:	40020800 	.word	0x40020800
 8002a20:	40020c00 	.word	0x40020c00
 8002a24:	40021400 	.word	0x40021400
 8002a28:	40021800 	.word	0x40021800

08002a2c <BSP_LCD_DrawPixel>:
 * @brief  Writes Pixel.
 * @param  Xpos: the X position
 * @param  Ypos: the Y position
 * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
 */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code) {
 8002a2c:	b5b0      	push	{r4, r5, r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	4603      	mov	r3, r0
 8002a34:	603a      	str	r2, [r7, #0]
 8002a36:	80fb      	strh	r3, [r7, #6]
 8002a38:	460b      	mov	r3, r1
 8002a3a:	80bb      	strh	r3, [r7, #4]
	/* Write data value to all SDRAM memory */
	*(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress
 8002a3c:	4b0c      	ldr	r3, [pc, #48]	; (8002a70 <BSP_LCD_DrawPixel+0x44>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a0c      	ldr	r2, [pc, #48]	; (8002a74 <BSP_LCD_DrawPixel+0x48>)
 8002a42:	2134      	movs	r1, #52	; 0x34
 8002a44:	fb01 f303 	mul.w	r3, r1, r3
 8002a48:	4413      	add	r3, r2
 8002a4a:	335c      	adds	r3, #92	; 0x5c
 8002a4c:	681c      	ldr	r4, [r3, #0]
			+ (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002a4e:	88bd      	ldrh	r5, [r7, #4]
 8002a50:	f7ff fa8c 	bl	8001f6c <BSP_LCD_GetXSize>
 8002a54:	4603      	mov	r3, r0
 8002a56:	fb03 f205 	mul.w	r2, r3, r5
 8002a5a:	88fb      	ldrh	r3, [r7, #6]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	4423      	add	r3, r4
	*(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress
 8002a62:	461a      	mov	r2, r3
			+ (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	6013      	str	r3, [r2, #0]
}
 8002a68:	bf00      	nop
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bdb0      	pop	{r4, r5, r7, pc}
 8002a70:	200004b8 	.word	0x200004b8
 8002a74:	200003a0 	.word	0x200003a0

08002a78 <DrawChar>:
 * @brief  Draws a character on LCD.
 * @param  Xpos: the Line where to display the character shape
 * @param  Ypos: start column address
 * @param  c: pointer to the character data
 */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c) {
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b088      	sub	sp, #32
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	603a      	str	r2, [r7, #0]
 8002a82:	80fb      	strh	r3, [r7, #6]
 8002a84:	460b      	mov	r3, r1
 8002a86:	80bb      	strh	r3, [r7, #4]
	uint32_t i = 0, j = 0;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	61fb      	str	r3, [r7, #28]
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	61bb      	str	r3, [r7, #24]
	uint16_t height, width;
	uint8_t offset;
	uint8_t *pchar;
	uint32_t line = 0;
 8002a90:	2300      	movs	r3, #0
 8002a92:	617b      	str	r3, [r7, #20]

	height = DrawProp[ActiveLayer].pFont->Height;
 8002a94:	4b53      	ldr	r3, [pc, #332]	; (8002be4 <DrawChar+0x16c>)
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	4953      	ldr	r1, [pc, #332]	; (8002be8 <DrawChar+0x170>)
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	4413      	add	r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	440b      	add	r3, r1
 8002aa4:	3308      	adds	r3, #8
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	88db      	ldrh	r3, [r3, #6]
 8002aaa:	827b      	strh	r3, [r7, #18]
	width = DrawProp[ActiveLayer].pFont->Width;
 8002aac:	4b4d      	ldr	r3, [pc, #308]	; (8002be4 <DrawChar+0x16c>)
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	494d      	ldr	r1, [pc, #308]	; (8002be8 <DrawChar+0x170>)
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	4413      	add	r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	440b      	add	r3, r1
 8002abc:	3308      	adds	r3, #8
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	889b      	ldrh	r3, [r3, #4]
 8002ac2:	823b      	strh	r3, [r7, #16]

	offset = 8 * ((width + 7) / 8) - width;
 8002ac4:	8a3b      	ldrh	r3, [r7, #16]
 8002ac6:	3307      	adds	r3, #7
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	da00      	bge.n	8002ace <DrawChar+0x56>
 8002acc:	3307      	adds	r3, #7
 8002ace:	10db      	asrs	r3, r3, #3
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	b2da      	uxtb	r2, r3
 8002ad6:	8a3b      	ldrh	r3, [r7, #16]
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	1ad3      	subs	r3, r2, r3
 8002adc:	73fb      	strb	r3, [r7, #15]

	for (i = 0; i < height; i++) {
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61fb      	str	r3, [r7, #28]
 8002ae2:	e076      	b.n	8002bd2 <DrawChar+0x15a>
		pchar = ((uint8_t*) c + (width + 7) / 8 * i);
 8002ae4:	8a3b      	ldrh	r3, [r7, #16]
 8002ae6:	3307      	adds	r3, #7
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	da00      	bge.n	8002aee <DrawChar+0x76>
 8002aec:	3307      	adds	r3, #7
 8002aee:	10db      	asrs	r3, r3, #3
 8002af0:	461a      	mov	r2, r3
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	fb02 f303 	mul.w	r3, r2, r3
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	4413      	add	r3, r2
 8002afc:	60bb      	str	r3, [r7, #8]

		switch (((width + 7) / 8)) {
 8002afe:	8a3b      	ldrh	r3, [r7, #16]
 8002b00:	3307      	adds	r3, #7
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	da00      	bge.n	8002b08 <DrawChar+0x90>
 8002b06:	3307      	adds	r3, #7
 8002b08:	10db      	asrs	r3, r3, #3
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d002      	beq.n	8002b14 <DrawChar+0x9c>
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d004      	beq.n	8002b1c <DrawChar+0xa4>
 8002b12:	e00c      	b.n	8002b2e <DrawChar+0xb6>
		case 1:
			line = pchar[0];
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	617b      	str	r3, [r7, #20]
			break;
 8002b1a:	e016      	b.n	8002b4a <DrawChar+0xd2>

		case 2:
			line = (pchar[0] << 8) | pchar[1];
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	021b      	lsls	r3, r3, #8
 8002b22:	68ba      	ldr	r2, [r7, #8]
 8002b24:	3201      	adds	r2, #1
 8002b26:	7812      	ldrb	r2, [r2, #0]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]
			break;
 8002b2c:	e00d      	b.n	8002b4a <DrawChar+0xd2>

		case 3:
		default:
			line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	041a      	lsls	r2, r3, #16
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	3301      	adds	r3, #1
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	021b      	lsls	r3, r3, #8
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	68ba      	ldr	r2, [r7, #8]
 8002b40:	3202      	adds	r2, #2
 8002b42:	7812      	ldrb	r2, [r2, #0]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]
			break;
 8002b48:	bf00      	nop
		}

		for (j = 0; j < width; j++) {
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	61bb      	str	r3, [r7, #24]
 8002b4e:	e036      	b.n	8002bbe <DrawChar+0x146>
			if (line & (1 << (width - j + offset - 1))) {
 8002b50:	8a3a      	ldrh	r2, [r7, #16]
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	1ad2      	subs	r2, r2, r3
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
 8002b58:	4413      	add	r3, r2
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b62:	461a      	mov	r2, r3
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	4013      	ands	r3, r2
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d012      	beq.n	8002b92 <DrawChar+0x11a>
				BSP_LCD_DrawPixel((Xpos + j), Ypos,
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	88fb      	ldrh	r3, [r7, #6]
 8002b72:	4413      	add	r3, r2
 8002b74:	b298      	uxth	r0, r3
 8002b76:	4b1b      	ldr	r3, [pc, #108]	; (8002be4 <DrawChar+0x16c>)
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	491b      	ldr	r1, [pc, #108]	; (8002be8 <DrawChar+0x170>)
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	4413      	add	r3, r2
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	440b      	add	r3, r1
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	88bb      	ldrh	r3, [r7, #4]
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	f7ff ff4e 	bl	8002a2c <BSP_LCD_DrawPixel>
 8002b90:	e012      	b.n	8002bb8 <DrawChar+0x140>
						DrawProp[ActiveLayer].TextColor);
			} else {
				BSP_LCD_DrawPixel((Xpos + j), Ypos,
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	88fb      	ldrh	r3, [r7, #6]
 8002b98:	4413      	add	r3, r2
 8002b9a:	b298      	uxth	r0, r3
 8002b9c:	4b11      	ldr	r3, [pc, #68]	; (8002be4 <DrawChar+0x16c>)
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	4911      	ldr	r1, [pc, #68]	; (8002be8 <DrawChar+0x170>)
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	4413      	add	r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	440b      	add	r3, r1
 8002bac:	3304      	adds	r3, #4
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	88bb      	ldrh	r3, [r7, #4]
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	f7ff ff3a 	bl	8002a2c <BSP_LCD_DrawPixel>
		for (j = 0; j < width; j++) {
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	61bb      	str	r3, [r7, #24]
 8002bbe:	8a3b      	ldrh	r3, [r7, #16]
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d3c4      	bcc.n	8002b50 <DrawChar+0xd8>
						DrawProp[ActiveLayer].BackColor);
			}
		}
		Ypos++;
 8002bc6:	88bb      	ldrh	r3, [r7, #4]
 8002bc8:	3301      	adds	r3, #1
 8002bca:	80bb      	strh	r3, [r7, #4]
	for (i = 0; i < height; i++) {
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	61fb      	str	r3, [r7, #28]
 8002bd2:	8a7b      	ldrh	r3, [r7, #18]
 8002bd4:	69fa      	ldr	r2, [r7, #28]
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d384      	bcc.n	8002ae4 <DrawChar+0x6c>
	}
}
 8002bda:	bf00      	nop
 8002bdc:	bf00      	nop
 8002bde:	3720      	adds	r7, #32
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	200004b8 	.word	0x200004b8
 8002be8:	200004bc 	.word	0x200004bc

08002bec <FillBuffer>:
 * @param  ySize: buffer height
 * @param  OffLine: offset
 * @param  ColorIndex: color Index  
 */
static void FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize,
		uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) {
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af02      	add	r7, sp, #8
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]
 8002bf8:	603b      	str	r3, [r7, #0]

	/* Register to memory mode with ARGB8888 as color Mode */
	Dma2dHandler.Init.Mode = DMA2D_R2M;
 8002bfa:	4b16      	ldr	r3, [pc, #88]	; (8002c54 <FillBuffer+0x68>)
 8002bfc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002c00:	605a      	str	r2, [r3, #4]
	Dma2dHandler.Init.ColorMode = DMA2D_ARGB8888;
 8002c02:	4b14      	ldr	r3, [pc, #80]	; (8002c54 <FillBuffer+0x68>)
 8002c04:	2200      	movs	r2, #0
 8002c06:	609a      	str	r2, [r3, #8]
	Dma2dHandler.Init.OutputOffset = OffLine;
 8002c08:	4a12      	ldr	r2, [pc, #72]	; (8002c54 <FillBuffer+0x68>)
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	60d3      	str	r3, [r2, #12]

	Dma2dHandler.Instance = DMA2D;
 8002c0e:	4b11      	ldr	r3, [pc, #68]	; (8002c54 <FillBuffer+0x68>)
 8002c10:	4a11      	ldr	r2, [pc, #68]	; (8002c58 <FillBuffer+0x6c>)
 8002c12:	601a      	str	r2, [r3, #0]

	/* DMA2D Initialization */
	if (HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) {
 8002c14:	480f      	ldr	r0, [pc, #60]	; (8002c54 <FillBuffer+0x68>)
 8002c16:	f000 fcdd 	bl	80035d4 <HAL_DMA2D_Init>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d115      	bne.n	8002c4c <FillBuffer+0x60>
		if (HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) {
 8002c20:	68f9      	ldr	r1, [r7, #12]
 8002c22:	480c      	ldr	r0, [pc, #48]	; (8002c54 <FillBuffer+0x68>)
 8002c24:	f000 ff44 	bl	8003ab0 <HAL_DMA2D_ConfigLayer>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10e      	bne.n	8002c4c <FillBuffer+0x60>
			if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t) pDst,
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	69f9      	ldr	r1, [r7, #28]
 8002c38:	4806      	ldr	r0, [pc, #24]	; (8002c54 <FillBuffer+0x68>)
 8002c3a:	f000 fd14 	bl	8003666 <HAL_DMA2D_Start>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d103      	bne.n	8002c4c <FillBuffer+0x60>
					xSize, ySize) == HAL_OK) {
				/* Polling For DMA transfer */
				HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002c44:	210a      	movs	r1, #10
 8002c46:	4803      	ldr	r0, [pc, #12]	; (8002c54 <FillBuffer+0x68>)
 8002c48:	f000 fd38 	bl	80036bc <HAL_DMA2D_PollForTransfer>
			}
		}
	}
}
 8002c4c:	bf00      	nop
 8002c4e:	3710      	adds	r7, #16
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	20000448 	.word	0x20000448
 8002c58:	4002b000 	.word	0x4002b000

08002c5c <BSP_SDRAM_Init>:
 */

/**
 * @brief  Initializes the SDRAM device.
 */
uint8_t BSP_SDRAM_Init(void) {
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
	static uint8_t sdramstatus = SDRAM_ERROR;

	/* SDRAM device configuration */
	SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002c60:	4b29      	ldr	r3, [pc, #164]	; (8002d08 <BSP_SDRAM_Init+0xac>)
 8002c62:	4a2a      	ldr	r2, [pc, #168]	; (8002d0c <BSP_SDRAM_Init+0xb0>)
 8002c64:	601a      	str	r2, [r3, #0]

	/* FMC Configuration -------------------------------------------------------*/
	/* FMC SDRAM Bank configuration */
	/* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
	/* TMRD: 2 Clock cycles */
	Timing.LoadToActiveDelay = 2;
 8002c66:	4b2a      	ldr	r3, [pc, #168]	; (8002d10 <BSP_SDRAM_Init+0xb4>)
 8002c68:	2202      	movs	r2, #2
 8002c6a:	601a      	str	r2, [r3, #0]
	/* TXSR: min=70ns (7x11.11ns) */
	Timing.ExitSelfRefreshDelay = 7;
 8002c6c:	4b28      	ldr	r3, [pc, #160]	; (8002d10 <BSP_SDRAM_Init+0xb4>)
 8002c6e:	2207      	movs	r2, #7
 8002c70:	605a      	str	r2, [r3, #4]
	/* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
	Timing.SelfRefreshTime = 4;
 8002c72:	4b27      	ldr	r3, [pc, #156]	; (8002d10 <BSP_SDRAM_Init+0xb4>)
 8002c74:	2204      	movs	r2, #4
 8002c76:	609a      	str	r2, [r3, #8]
	/* TRC:  min=70 (7x11.11ns) */
	Timing.RowCycleDelay = 7;
 8002c78:	4b25      	ldr	r3, [pc, #148]	; (8002d10 <BSP_SDRAM_Init+0xb4>)
 8002c7a:	2207      	movs	r2, #7
 8002c7c:	60da      	str	r2, [r3, #12]
	/* TWR:  min=1+ 7ns (1+1x11.11ns) */
	Timing.WriteRecoveryTime = 2;
 8002c7e:	4b24      	ldr	r3, [pc, #144]	; (8002d10 <BSP_SDRAM_Init+0xb4>)
 8002c80:	2202      	movs	r2, #2
 8002c82:	611a      	str	r2, [r3, #16]
	/* TRP:  20ns => 2x11.11ns*/
	Timing.RPDelay = 2;
 8002c84:	4b22      	ldr	r3, [pc, #136]	; (8002d10 <BSP_SDRAM_Init+0xb4>)
 8002c86:	2202      	movs	r2, #2
 8002c88:	615a      	str	r2, [r3, #20]
	/* TRCD: 20ns => 2x11.11ns */
	Timing.RCDDelay = 2;
 8002c8a:	4b21      	ldr	r3, [pc, #132]	; (8002d10 <BSP_SDRAM_Init+0xb4>)
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	619a      	str	r2, [r3, #24]

	/* FMC SDRAM control configuration */
	SdramHandle.Init.SDBank = FMC_SDRAM_BANK2;
 8002c90:	4b1d      	ldr	r3, [pc, #116]	; (8002d08 <BSP_SDRAM_Init+0xac>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	605a      	str	r2, [r3, #4]
	/* Row addressing: [7:0] */
	SdramHandle.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002c96:	4b1c      	ldr	r3, [pc, #112]	; (8002d08 <BSP_SDRAM_Init+0xac>)
 8002c98:	2200      	movs	r2, #0
 8002c9a:	609a      	str	r2, [r3, #8]
	/* Column addressing: [11:0] */
	SdramHandle.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002c9c:	4b1a      	ldr	r3, [pc, #104]	; (8002d08 <BSP_SDRAM_Init+0xac>)
 8002c9e:	2204      	movs	r2, #4
 8002ca0:	60da      	str	r2, [r3, #12]
	SdramHandle.Init.MemoryDataWidth = SDRAM_MEMORY_WIDTH;
 8002ca2:	4b19      	ldr	r3, [pc, #100]	; (8002d08 <BSP_SDRAM_Init+0xac>)
 8002ca4:	2210      	movs	r2, #16
 8002ca6:	611a      	str	r2, [r3, #16]
	SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002ca8:	4b17      	ldr	r3, [pc, #92]	; (8002d08 <BSP_SDRAM_Init+0xac>)
 8002caa:	2240      	movs	r2, #64	; 0x40
 8002cac:	615a      	str	r2, [r3, #20]
	SdramHandle.Init.CASLatency = SDRAM_CAS_LATENCY;
 8002cae:	4b16      	ldr	r3, [pc, #88]	; (8002d08 <BSP_SDRAM_Init+0xac>)
 8002cb0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002cb4:	619a      	str	r2, [r3, #24]
	SdramHandle.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002cb6:	4b14      	ldr	r3, [pc, #80]	; (8002d08 <BSP_SDRAM_Init+0xac>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	61da      	str	r2, [r3, #28]
	SdramHandle.Init.SDClockPeriod = SDCLOCK_PERIOD;
 8002cbc:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <BSP_SDRAM_Init+0xac>)
 8002cbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cc2:	621a      	str	r2, [r3, #32]
	SdramHandle.Init.ReadBurst = SDRAM_READBURST;
 8002cc4:	4b10      	ldr	r3, [pc, #64]	; (8002d08 <BSP_SDRAM_Init+0xac>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	625a      	str	r2, [r3, #36]	; 0x24
	SdramHandle.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8002cca:	4b0f      	ldr	r3, [pc, #60]	; (8002d08 <BSP_SDRAM_Init+0xac>)
 8002ccc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cd0:	629a      	str	r2, [r3, #40]	; 0x28

	/* SDRAM controller initialization */
	/* __weak function can be surcharged by the application code */
	BSP_SDRAM_MspInit(&SdramHandle, (void*) NULL);
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	480c      	ldr	r0, [pc, #48]	; (8002d08 <BSP_SDRAM_Init+0xac>)
 8002cd6:	f000 f87f 	bl	8002dd8 <BSP_SDRAM_MspInit>
	if (HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK) {
 8002cda:	490d      	ldr	r1, [pc, #52]	; (8002d10 <BSP_SDRAM_Init+0xb4>)
 8002cdc:	480a      	ldr	r0, [pc, #40]	; (8002d08 <BSP_SDRAM_Init+0xac>)
 8002cde:	f004 f813 	bl	8006d08 <HAL_SDRAM_Init>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d003      	beq.n	8002cf0 <BSP_SDRAM_Init+0x94>
		sdramstatus = SDRAM_ERROR;
 8002ce8:	4b0a      	ldr	r3, [pc, #40]	; (8002d14 <BSP_SDRAM_Init+0xb8>)
 8002cea:	2201      	movs	r2, #1
 8002cec:	701a      	strb	r2, [r3, #0]
 8002cee:	e002      	b.n	8002cf6 <BSP_SDRAM_Init+0x9a>
	} else {
		sdramstatus = SDRAM_OK;
 8002cf0:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <BSP_SDRAM_Init+0xb8>)
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	701a      	strb	r2, [r3, #0]
	}

	/* SDRAM initialization sequence */
	BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8002cf6:	f240 506a 	movw	r0, #1386	; 0x56a
 8002cfa:	f000 f80d 	bl	8002d18 <BSP_SDRAM_Initialization_sequence>

	return sdramstatus;
 8002cfe:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <BSP_SDRAM_Init+0xb8>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	200004d8 	.word	0x200004d8
 8002d0c:	a0000140 	.word	0xa0000140
 8002d10:	2000050c 	.word	0x2000050c
 8002d14:	20000058 	.word	0x20000058

08002d18 <BSP_SDRAM_Initialization_sequence>:

/**
 * @brief  Programs the SDRAM device.
 * @param  RefreshCount: SDRAM refresh counter value 
 */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount) {
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
	__IO uint32_t tmpmrd = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	60fb      	str	r3, [r7, #12]

	/* Step 1:  Configure a clock configuration enable command */
	Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 8002d24:	4b2a      	ldr	r3, [pc, #168]	; (8002dd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d26:	2201      	movs	r2, #1
 8002d28:	601a      	str	r2, [r3, #0]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8002d2a:	4b29      	ldr	r3, [pc, #164]	; (8002dd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d2c:	2208      	movs	r2, #8
 8002d2e:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber = 1;
 8002d30:	4b27      	ldr	r3, [pc, #156]	; (8002dd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d32:	2201      	movs	r2, #1
 8002d34:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition = 0;
 8002d36:	4b26      	ldr	r3, [pc, #152]	; (8002dd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	60da      	str	r2, [r3, #12]

	/* Send the command */
	HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002d3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d40:	4923      	ldr	r1, [pc, #140]	; (8002dd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d42:	4824      	ldr	r0, [pc, #144]	; (8002dd4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002d44:	f004 f814 	bl	8006d70 <HAL_SDRAM_SendCommand>

	/* Step 2: Insert 100 us minimum delay */
	/* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
	HAL_Delay(1);
 8002d48:	2001      	movs	r0, #1
 8002d4a:	f000 f97f 	bl	800304c <HAL_Delay>

	/* Step 3: Configure a PALL (precharge all) command */
	Command.CommandMode = FMC_SDRAM_CMD_PALL;
 8002d4e:	4b20      	ldr	r3, [pc, #128]	; (8002dd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d50:	2202      	movs	r2, #2
 8002d52:	601a      	str	r2, [r3, #0]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8002d54:	4b1e      	ldr	r3, [pc, #120]	; (8002dd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d56:	2208      	movs	r2, #8
 8002d58:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber = 1;
 8002d5a:	4b1d      	ldr	r3, [pc, #116]	; (8002dd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition = 0;
 8002d60:	4b1b      	ldr	r3, [pc, #108]	; (8002dd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	60da      	str	r2, [r3, #12]

	/* Send the command */
	HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002d66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d6a:	4919      	ldr	r1, [pc, #100]	; (8002dd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d6c:	4819      	ldr	r0, [pc, #100]	; (8002dd4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002d6e:	f003 ffff 	bl	8006d70 <HAL_SDRAM_SendCommand>

	/* Step 4: Configure an Auto Refresh command */
	Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002d72:	4b17      	ldr	r3, [pc, #92]	; (8002dd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d74:	2203      	movs	r2, #3
 8002d76:	601a      	str	r2, [r3, #0]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8002d78:	4b15      	ldr	r3, [pc, #84]	; (8002dd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d7a:	2208      	movs	r2, #8
 8002d7c:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber = 4;
 8002d7e:	4b14      	ldr	r3, [pc, #80]	; (8002dd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d80:	2204      	movs	r2, #4
 8002d82:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition = 0;
 8002d84:	4b12      	ldr	r3, [pc, #72]	; (8002dd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	60da      	str	r2, [r3, #12]

	/* Send the command */
	HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002d8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d8e:	4910      	ldr	r1, [pc, #64]	; (8002dd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d90:	4810      	ldr	r0, [pc, #64]	; (8002dd4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002d92:	f003 ffed 	bl	8006d70 <HAL_SDRAM_SendCommand>

	/* Step 5: Program the external memory mode register */
	tmpmrd = (uint32_t) SDRAM_MODEREG_BURST_LENGTH_1 |
 8002d96:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002d9a:	60fb      	str	r3, [r7, #12]
	SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL |
	SDRAM_MODEREG_CAS_LATENCY_3 |
	SDRAM_MODEREG_OPERATING_MODE_STANDARD |
	SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

	Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	; (8002dd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002d9e:	2204      	movs	r2, #4
 8002da0:	601a      	str	r2, [r3, #0]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8002da2:	4b0b      	ldr	r3, [pc, #44]	; (8002dd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002da4:	2208      	movs	r2, #8
 8002da6:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber = 1;
 8002da8:	4b09      	ldr	r3, [pc, #36]	; (8002dd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002daa:	2201      	movs	r2, #1
 8002dac:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition = tmpmrd;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	4a07      	ldr	r2, [pc, #28]	; (8002dd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002db2:	60d3      	str	r3, [r2, #12]

	/* Send the command */
	HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002db4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002db8:	4905      	ldr	r1, [pc, #20]	; (8002dd0 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002dba:	4806      	ldr	r0, [pc, #24]	; (8002dd4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002dbc:	f003 ffd8 	bl	8006d70 <HAL_SDRAM_SendCommand>

	/* Step 6: Set the refresh rate counter */
	/* Set the device refresh rate */
	HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount);
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	4804      	ldr	r0, [pc, #16]	; (8002dd4 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002dc4:	f004 f809 	bl	8006dda <HAL_SDRAM_ProgramRefreshRate>
}
 8002dc8:	bf00      	nop
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	20000528 	.word	0x20000528
 8002dd4:	200004d8 	.word	0x200004d8

08002dd8 <BSP_SDRAM_MspInit>:
 * @brief  Initializes SDRAM MSP.
 * @note   This function can be surcharged by application code.
 * @param  hsdram: pointer on SDRAM handle
 * @param  Params: pointer on additional configuration parameters, can be NULL.
 */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram, void *Params) {
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b090      	sub	sp, #64	; 0x40
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
 8002de0:	6039      	str	r1, [r7, #0]
	static DMA_HandleTypeDef dmaHandle;
	GPIO_InitTypeDef GPIO_InitStructure;

	if (hsdram != (SDRAM_HandleTypeDef*) NULL) {
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 80ec 	beq.w	8002fc2 <BSP_SDRAM_MspInit+0x1ea>
		/* Enable FMC clock */
		__HAL_RCC_FMC_CLK_ENABLE();
 8002dea:	2300      	movs	r3, #0
 8002dec:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dee:	4b77      	ldr	r3, [pc, #476]	; (8002fcc <BSP_SDRAM_MspInit+0x1f4>)
 8002df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df2:	4a76      	ldr	r2, [pc, #472]	; (8002fcc <BSP_SDRAM_MspInit+0x1f4>)
 8002df4:	f043 0301 	orr.w	r3, r3, #1
 8002df8:	6393      	str	r3, [r2, #56]	; 0x38
 8002dfa:	4b74      	ldr	r3, [pc, #464]	; (8002fcc <BSP_SDRAM_MspInit+0x1f4>)
 8002dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	62bb      	str	r3, [r7, #40]	; 0x28
 8002e04:	6abb      	ldr	r3, [r7, #40]	; 0x28

		/* Enable chosen DMAx clock */
		__DMAx_CLK_ENABLE()
 8002e06:	2300      	movs	r3, #0
 8002e08:	627b      	str	r3, [r7, #36]	; 0x24
 8002e0a:	4b70      	ldr	r3, [pc, #448]	; (8002fcc <BSP_SDRAM_MspInit+0x1f4>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	4a6f      	ldr	r2, [pc, #444]	; (8002fcc <BSP_SDRAM_MspInit+0x1f4>)
 8002e10:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e14:	6313      	str	r3, [r2, #48]	; 0x30
 8002e16:	4b6d      	ldr	r3, [pc, #436]	; (8002fcc <BSP_SDRAM_MspInit+0x1f4>)
 8002e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		;

		/* Enable GPIOs clock */
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8002e22:	2300      	movs	r3, #0
 8002e24:	623b      	str	r3, [r7, #32]
 8002e26:	4b69      	ldr	r3, [pc, #420]	; (8002fcc <BSP_SDRAM_MspInit+0x1f4>)
 8002e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e2a:	4a68      	ldr	r2, [pc, #416]	; (8002fcc <BSP_SDRAM_MspInit+0x1f4>)
 8002e2c:	f043 0302 	orr.w	r3, r3, #2
 8002e30:	6313      	str	r3, [r2, #48]	; 0x30
 8002e32:	4b66      	ldr	r3, [pc, #408]	; (8002fcc <BSP_SDRAM_MspInit+0x1f4>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	623b      	str	r3, [r7, #32]
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61fb      	str	r3, [r7, #28]
 8002e42:	4b62      	ldr	r3, [pc, #392]	; (8002fcc <BSP_SDRAM_MspInit+0x1f4>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	4a61      	ldr	r2, [pc, #388]	; (8002fcc <BSP_SDRAM_MspInit+0x1f4>)
 8002e48:	f043 0304 	orr.w	r3, r3, #4
 8002e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4e:	4b5f      	ldr	r3, [pc, #380]	; (8002fcc <BSP_SDRAM_MspInit+0x1f4>)
 8002e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e52:	f003 0304 	and.w	r3, r3, #4
 8002e56:	61fb      	str	r3, [r7, #28]
 8002e58:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61bb      	str	r3, [r7, #24]
 8002e5e:	4b5b      	ldr	r3, [pc, #364]	; (8002fcc <BSP_SDRAM_MspInit+0x1f4>)
 8002e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e62:	4a5a      	ldr	r2, [pc, #360]	; (8002fcc <BSP_SDRAM_MspInit+0x1f4>)
 8002e64:	f043 0308 	orr.w	r3, r3, #8
 8002e68:	6313      	str	r3, [r2, #48]	; 0x30
 8002e6a:	4b58      	ldr	r3, [pc, #352]	; (8002fcc <BSP_SDRAM_MspInit+0x1f4>)
 8002e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	61bb      	str	r3, [r7, #24]
 8002e74:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	617b      	str	r3, [r7, #20]
 8002e7a:	4b54      	ldr	r3, [pc, #336]	; (8002fcc <BSP_SDRAM_MspInit+0x1f4>)
 8002e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7e:	4a53      	ldr	r2, [pc, #332]	; (8002fcc <BSP_SDRAM_MspInit+0x1f4>)
 8002e80:	f043 0310 	orr.w	r3, r3, #16
 8002e84:	6313      	str	r3, [r2, #48]	; 0x30
 8002e86:	4b51      	ldr	r3, [pc, #324]	; (8002fcc <BSP_SDRAM_MspInit+0x1f4>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	f003 0310 	and.w	r3, r3, #16
 8002e8e:	617b      	str	r3, [r7, #20]
 8002e90:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	613b      	str	r3, [r7, #16]
 8002e96:	4b4d      	ldr	r3, [pc, #308]	; (8002fcc <BSP_SDRAM_MspInit+0x1f4>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	4a4c      	ldr	r2, [pc, #304]	; (8002fcc <BSP_SDRAM_MspInit+0x1f4>)
 8002e9c:	f043 0320 	orr.w	r3, r3, #32
 8002ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ea2:	4b4a      	ldr	r3, [pc, #296]	; (8002fcc <BSP_SDRAM_MspInit+0x1f4>)
 8002ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea6:	f003 0320 	and.w	r3, r3, #32
 8002eaa:	613b      	str	r3, [r7, #16]
 8002eac:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOG_CLK_ENABLE();
 8002eae:	2300      	movs	r3, #0
 8002eb0:	60fb      	str	r3, [r7, #12]
 8002eb2:	4b46      	ldr	r3, [pc, #280]	; (8002fcc <BSP_SDRAM_MspInit+0x1f4>)
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	4a45      	ldr	r2, [pc, #276]	; (8002fcc <BSP_SDRAM_MspInit+0x1f4>)
 8002eb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8002ebe:	4b43      	ldr	r3, [pc, #268]	; (8002fcc <BSP_SDRAM_MspInit+0x1f4>)
 8002ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
		 +-------------------+  
		 
		 */

		/* Common GPIO configuration */
		GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002eca:	2302      	movs	r3, #2
 8002ecc:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002ece:	2302      	movs	r3, #2
 8002ed0:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002ed6:	230c      	movs	r3, #12
 8002ed8:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* GPIOB configuration */
		GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002eda:	2360      	movs	r3, #96	; 0x60
 8002edc:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002ede:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ee2:	4619      	mov	r1, r3
 8002ee4:	483a      	ldr	r0, [pc, #232]	; (8002fd0 <BSP_SDRAM_MspInit+0x1f8>)
 8002ee6:	f000 ff11 	bl	8003d0c <HAL_GPIO_Init>

		/* GPIOC configuration */
		GPIO_InitStructure.Pin = GPIO_PIN_0;
 8002eea:	2301      	movs	r3, #1
 8002eec:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002eee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	4837      	ldr	r0, [pc, #220]	; (8002fd4 <BSP_SDRAM_MspInit+0x1fc>)
 8002ef6:	f000 ff09 	bl	8003d0c <HAL_GPIO_Init>

		/* GPIOD configuration */
		GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 |
 8002efa:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002efe:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
		GPIO_PIN_15;
		HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002f00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f04:	4619      	mov	r1, r3
 8002f06:	4834      	ldr	r0, [pc, #208]	; (8002fd8 <BSP_SDRAM_MspInit+0x200>)
 8002f08:	f000 ff00 	bl	8003d0c <HAL_GPIO_Init>

		/* GPIOE configuration */
		GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7 |
 8002f0c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002f10:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 |
		GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
		GPIO_PIN_14 | GPIO_PIN_15;
		HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 8002f12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f16:	4619      	mov	r1, r3
 8002f18:	4830      	ldr	r0, [pc, #192]	; (8002fdc <BSP_SDRAM_MspInit+0x204>)
 8002f1a:	f000 fef7 	bl	8003d0c <HAL_GPIO_Init>

		/* GPIOF configuration */
		GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 |
 8002f1e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8002f22:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 |
		GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
		GPIO_PIN_14 | GPIO_PIN_15;
		HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002f24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f28:	4619      	mov	r1, r3
 8002f2a:	482d      	ldr	r0, [pc, #180]	; (8002fe0 <BSP_SDRAM_MspInit+0x208>)
 8002f2c:	f000 feee 	bl	8003d0c <HAL_GPIO_Init>

		/* GPIOG configuration */
		GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002f30:	f248 1333 	movw	r3, #33075	; 0x8133
 8002f34:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
		HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002f36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	4829      	ldr	r0, [pc, #164]	; (8002fe4 <BSP_SDRAM_MspInit+0x20c>)
 8002f3e:	f000 fee5 	bl	8003d0c <HAL_GPIO_Init>

		/* Configure common DMA parameters */
		dmaHandle.Init.Channel = SDRAM_DMAx_CHANNEL;
 8002f42:	4b29      	ldr	r3, [pc, #164]	; (8002fe8 <BSP_SDRAM_MspInit+0x210>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	605a      	str	r2, [r3, #4]
		dmaHandle.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8002f48:	4b27      	ldr	r3, [pc, #156]	; (8002fe8 <BSP_SDRAM_MspInit+0x210>)
 8002f4a:	2280      	movs	r2, #128	; 0x80
 8002f4c:	609a      	str	r2, [r3, #8]
		dmaHandle.Init.PeriphInc = DMA_PINC_ENABLE;
 8002f4e:	4b26      	ldr	r3, [pc, #152]	; (8002fe8 <BSP_SDRAM_MspInit+0x210>)
 8002f50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f54:	60da      	str	r2, [r3, #12]
		dmaHandle.Init.MemInc = DMA_MINC_ENABLE;
 8002f56:	4b24      	ldr	r3, [pc, #144]	; (8002fe8 <BSP_SDRAM_MspInit+0x210>)
 8002f58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f5c:	611a      	str	r2, [r3, #16]
		dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f5e:	4b22      	ldr	r3, [pc, #136]	; (8002fe8 <BSP_SDRAM_MspInit+0x210>)
 8002f60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f64:	615a      	str	r2, [r3, #20]
		dmaHandle.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002f66:	4b20      	ldr	r3, [pc, #128]	; (8002fe8 <BSP_SDRAM_MspInit+0x210>)
 8002f68:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f6c:	619a      	str	r2, [r3, #24]
		dmaHandle.Init.Mode = DMA_NORMAL;
 8002f6e:	4b1e      	ldr	r3, [pc, #120]	; (8002fe8 <BSP_SDRAM_MspInit+0x210>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	61da      	str	r2, [r3, #28]
		dmaHandle.Init.Priority = DMA_PRIORITY_HIGH;
 8002f74:	4b1c      	ldr	r3, [pc, #112]	; (8002fe8 <BSP_SDRAM_MspInit+0x210>)
 8002f76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002f7a:	621a      	str	r2, [r3, #32]
		dmaHandle.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f7c:	4b1a      	ldr	r3, [pc, #104]	; (8002fe8 <BSP_SDRAM_MspInit+0x210>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	625a      	str	r2, [r3, #36]	; 0x24
		dmaHandle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002f82:	4b19      	ldr	r3, [pc, #100]	; (8002fe8 <BSP_SDRAM_MspInit+0x210>)
 8002f84:	2203      	movs	r2, #3
 8002f86:	629a      	str	r2, [r3, #40]	; 0x28
		dmaHandle.Init.MemBurst = DMA_MBURST_SINGLE;
 8002f88:	4b17      	ldr	r3, [pc, #92]	; (8002fe8 <BSP_SDRAM_MspInit+0x210>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	62da      	str	r2, [r3, #44]	; 0x2c
		dmaHandle.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002f8e:	4b16      	ldr	r3, [pc, #88]	; (8002fe8 <BSP_SDRAM_MspInit+0x210>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	631a      	str	r2, [r3, #48]	; 0x30

		dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002f94:	4b14      	ldr	r3, [pc, #80]	; (8002fe8 <BSP_SDRAM_MspInit+0x210>)
 8002f96:	4a15      	ldr	r2, [pc, #84]	; (8002fec <BSP_SDRAM_MspInit+0x214>)
 8002f98:	601a      	str	r2, [r3, #0]

		/* Associate the DMA handle */
		__HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a12      	ldr	r2, [pc, #72]	; (8002fe8 <BSP_SDRAM_MspInit+0x210>)
 8002f9e:	631a      	str	r2, [r3, #48]	; 0x30
 8002fa0:	4a11      	ldr	r2, [pc, #68]	; (8002fe8 <BSP_SDRAM_MspInit+0x210>)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6393      	str	r3, [r2, #56]	; 0x38

		/* Deinitialize the stream for new transfer */
		HAL_DMA_DeInit(&dmaHandle);
 8002fa6:	4810      	ldr	r0, [pc, #64]	; (8002fe8 <BSP_SDRAM_MspInit+0x210>)
 8002fa8:	f000 fa04 	bl	80033b4 <HAL_DMA_DeInit>

		/* Configure the DMA stream */
		HAL_DMA_Init(&dmaHandle);
 8002fac:	480e      	ldr	r0, [pc, #56]	; (8002fe8 <BSP_SDRAM_MspInit+0x210>)
 8002fae:	f000 f953 	bl	8003258 <HAL_DMA_Init>

		/* NVIC configuration for DMA transfer complete interrupt */
		HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	210f      	movs	r1, #15
 8002fb6:	2038      	movs	r0, #56	; 0x38
 8002fb8:	f000 f924 	bl	8003204 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002fbc:	2038      	movs	r0, #56	; 0x38
 8002fbe:	f000 f93d 	bl	800323c <HAL_NVIC_EnableIRQ>
	} /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8002fc2:	bf00      	nop
 8002fc4:	3740      	adds	r7, #64	; 0x40
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	40020400 	.word	0x40020400
 8002fd4:	40020800 	.word	0x40020800
 8002fd8:	40020c00 	.word	0x40020c00
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	40021400 	.word	0x40021400
 8002fe4:	40021800 	.word	0x40021800
 8002fe8:	20000538 	.word	0x20000538
 8002fec:	40026410 	.word	0x40026410

08002ff0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ff4:	4b0e      	ldr	r3, [pc, #56]	; (8003030 <HAL_Init+0x40>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a0d      	ldr	r2, [pc, #52]	; (8003030 <HAL_Init+0x40>)
 8002ffa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ffe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003000:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <HAL_Init+0x40>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a0a      	ldr	r2, [pc, #40]	; (8003030 <HAL_Init+0x40>)
 8003006:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800300a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800300c:	4b08      	ldr	r3, [pc, #32]	; (8003030 <HAL_Init+0x40>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a07      	ldr	r2, [pc, #28]	; (8003030 <HAL_Init+0x40>)
 8003012:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003016:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003018:	2003      	movs	r0, #3
 800301a:	f000 f8e8 	bl	80031ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800301e:	2000      	movs	r0, #0
 8003020:	f7fe fab4 	bl	800158c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003024:	f7fd ff58 	bl	8000ed8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40023c00 	.word	0x40023c00

08003034 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  return uwTick;
 8003038:	4b03      	ldr	r3, [pc, #12]	; (8003048 <HAL_GetTick+0x14>)
 800303a:	681b      	ldr	r3, [r3, #0]
}
 800303c:	4618      	mov	r0, r3
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	20000598 	.word	0x20000598

0800304c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003054:	f7ff ffee 	bl	8003034 <HAL_GetTick>
 8003058:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003064:	d005      	beq.n	8003072 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003066:	4b0a      	ldr	r3, [pc, #40]	; (8003090 <HAL_Delay+0x44>)
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	461a      	mov	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	4413      	add	r3, r2
 8003070:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003072:	bf00      	nop
 8003074:	f7ff ffde 	bl	8003034 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	429a      	cmp	r2, r3
 8003082:	d8f7      	bhi.n	8003074 <HAL_Delay+0x28>
  {
  }
}
 8003084:	bf00      	nop
 8003086:	bf00      	nop
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	20000060 	.word	0x20000060

08003094 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f003 0307 	and.w	r3, r3, #7
 80030a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030a4:	4b0c      	ldr	r3, [pc, #48]	; (80030d8 <__NVIC_SetPriorityGrouping+0x44>)
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030b0:	4013      	ands	r3, r2
 80030b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030c6:	4a04      	ldr	r2, [pc, #16]	; (80030d8 <__NVIC_SetPriorityGrouping+0x44>)
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	60d3      	str	r3, [r2, #12]
}
 80030cc:	bf00      	nop
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	e000ed00 	.word	0xe000ed00

080030dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030e0:	4b04      	ldr	r3, [pc, #16]	; (80030f4 <__NVIC_GetPriorityGrouping+0x18>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	0a1b      	lsrs	r3, r3, #8
 80030e6:	f003 0307 	and.w	r3, r3, #7
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	46bd      	mov	sp, r7
 80030ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f2:	4770      	bx	lr
 80030f4:	e000ed00 	.word	0xe000ed00

080030f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	4603      	mov	r3, r0
 8003100:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003106:	2b00      	cmp	r3, #0
 8003108:	db0b      	blt.n	8003122 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800310a:	79fb      	ldrb	r3, [r7, #7]
 800310c:	f003 021f 	and.w	r2, r3, #31
 8003110:	4907      	ldr	r1, [pc, #28]	; (8003130 <__NVIC_EnableIRQ+0x38>)
 8003112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003116:	095b      	lsrs	r3, r3, #5
 8003118:	2001      	movs	r0, #1
 800311a:	fa00 f202 	lsl.w	r2, r0, r2
 800311e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003122:	bf00      	nop
 8003124:	370c      	adds	r7, #12
 8003126:	46bd      	mov	sp, r7
 8003128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	e000e100 	.word	0xe000e100

08003134 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	6039      	str	r1, [r7, #0]
 800313e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003144:	2b00      	cmp	r3, #0
 8003146:	db0a      	blt.n	800315e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	b2da      	uxtb	r2, r3
 800314c:	490c      	ldr	r1, [pc, #48]	; (8003180 <__NVIC_SetPriority+0x4c>)
 800314e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003152:	0112      	lsls	r2, r2, #4
 8003154:	b2d2      	uxtb	r2, r2
 8003156:	440b      	add	r3, r1
 8003158:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800315c:	e00a      	b.n	8003174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	b2da      	uxtb	r2, r3
 8003162:	4908      	ldr	r1, [pc, #32]	; (8003184 <__NVIC_SetPriority+0x50>)
 8003164:	79fb      	ldrb	r3, [r7, #7]
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	3b04      	subs	r3, #4
 800316c:	0112      	lsls	r2, r2, #4
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	440b      	add	r3, r1
 8003172:	761a      	strb	r2, [r3, #24]
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	e000e100 	.word	0xe000e100
 8003184:	e000ed00 	.word	0xe000ed00

08003188 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003188:	b480      	push	{r7}
 800318a:	b089      	sub	sp, #36	; 0x24
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f1c3 0307 	rsb	r3, r3, #7
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	bf28      	it	cs
 80031a6:	2304      	movcs	r3, #4
 80031a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	3304      	adds	r3, #4
 80031ae:	2b06      	cmp	r3, #6
 80031b0:	d902      	bls.n	80031b8 <NVIC_EncodePriority+0x30>
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	3b03      	subs	r3, #3
 80031b6:	e000      	b.n	80031ba <NVIC_EncodePriority+0x32>
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	fa02 f303 	lsl.w	r3, r2, r3
 80031c6:	43da      	mvns	r2, r3
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	401a      	ands	r2, r3
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	fa01 f303 	lsl.w	r3, r1, r3
 80031da:	43d9      	mvns	r1, r3
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e0:	4313      	orrs	r3, r2
         );
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3724      	adds	r7, #36	; 0x24
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b082      	sub	sp, #8
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7ff ff4c 	bl	8003094 <__NVIC_SetPriorityGrouping>
}
 80031fc:	bf00      	nop
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	4603      	mov	r3, r0
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
 8003210:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003212:	2300      	movs	r3, #0
 8003214:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003216:	f7ff ff61 	bl	80030dc <__NVIC_GetPriorityGrouping>
 800321a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	68b9      	ldr	r1, [r7, #8]
 8003220:	6978      	ldr	r0, [r7, #20]
 8003222:	f7ff ffb1 	bl	8003188 <NVIC_EncodePriority>
 8003226:	4602      	mov	r2, r0
 8003228:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800322c:	4611      	mov	r1, r2
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff ff80 	bl	8003134 <__NVIC_SetPriority>
}
 8003234:	bf00      	nop
 8003236:	3718      	adds	r7, #24
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}

0800323c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	4603      	mov	r3, r0
 8003244:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff ff54 	bl	80030f8 <__NVIC_EnableIRQ>
}
 8003250:	bf00      	nop
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003264:	f7ff fee6 	bl	8003034 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d101      	bne.n	8003274 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e099      	b.n	80033a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2202      	movs	r2, #2
 8003278:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f022 0201 	bic.w	r2, r2, #1
 8003292:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003294:	e00f      	b.n	80032b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003296:	f7ff fecd 	bl	8003034 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	2b05      	cmp	r3, #5
 80032a2:	d908      	bls.n	80032b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2220      	movs	r2, #32
 80032a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2203      	movs	r2, #3
 80032ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e078      	b.n	80033a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f003 0301 	and.w	r3, r3, #1
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d1e8      	bne.n	8003296 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	4b38      	ldr	r3, [pc, #224]	; (80033b0 <HAL_DMA_Init+0x158>)
 80032d0:	4013      	ands	r3, r2
 80032d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	691b      	ldr	r3, [r3, #16]
 80032e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003302:	697a      	ldr	r2, [r7, #20]
 8003304:	4313      	orrs	r3, r2
 8003306:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	2b04      	cmp	r3, #4
 800330e:	d107      	bne.n	8003320 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003318:	4313      	orrs	r3, r2
 800331a:	697a      	ldr	r2, [r7, #20]
 800331c:	4313      	orrs	r3, r2
 800331e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	697a      	ldr	r2, [r7, #20]
 8003326:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f023 0307 	bic.w	r3, r3, #7
 8003336:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	4313      	orrs	r3, r2
 8003340:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	2b04      	cmp	r3, #4
 8003348:	d117      	bne.n	800337a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	4313      	orrs	r3, r2
 8003352:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00e      	beq.n	800337a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 f8bd 	bl	80034dc <DMA_CheckFifoParam>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d008      	beq.n	800337a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2240      	movs	r2, #64	; 0x40
 800336c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003376:	2301      	movs	r3, #1
 8003378:	e016      	b.n	80033a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f000 f874 	bl	8003470 <DMA_CalcBaseAndBitshift>
 8003388:	4603      	mov	r3, r0
 800338a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003390:	223f      	movs	r2, #63	; 0x3f
 8003392:	409a      	lsls	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3718      	adds	r7, #24
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	f010803f 	.word	0xf010803f

080033b4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e050      	b.n	8003468 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d101      	bne.n	80033d6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80033d2:	2302      	movs	r3, #2
 80033d4:	e048      	b.n	8003468 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0201 	bic.w	r2, r2, #1
 80033e4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2200      	movs	r2, #0
 80033f4:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2200      	movs	r2, #0
 80033fc:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2200      	movs	r2, #0
 8003404:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2200      	movs	r2, #0
 800340c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2221      	movs	r2, #33	; 0x21
 8003414:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 f82a 	bl	8003470 <DMA_CalcBaseAndBitshift>
 800341c:	4603      	mov	r3, r0
 800341e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003448:	223f      	movs	r2, #63	; 0x3f
 800344a:	409a      	lsls	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	b2db      	uxtb	r3, r3
 800347e:	3b10      	subs	r3, #16
 8003480:	4a14      	ldr	r2, [pc, #80]	; (80034d4 <DMA_CalcBaseAndBitshift+0x64>)
 8003482:	fba2 2303 	umull	r2, r3, r2, r3
 8003486:	091b      	lsrs	r3, r3, #4
 8003488:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800348a:	4a13      	ldr	r2, [pc, #76]	; (80034d8 <DMA_CalcBaseAndBitshift+0x68>)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	4413      	add	r3, r2
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	461a      	mov	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2b03      	cmp	r3, #3
 800349c:	d909      	bls.n	80034b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034a6:	f023 0303 	bic.w	r3, r3, #3
 80034aa:	1d1a      	adds	r2, r3, #4
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	659a      	str	r2, [r3, #88]	; 0x58
 80034b0:	e007      	b.n	80034c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034ba:	f023 0303 	bic.w	r3, r3, #3
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	aaaaaaab 	.word	0xaaaaaaab
 80034d8:	0800d7f0 	.word	0x0800d7f0

080034dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80034dc:	b480      	push	{r7}
 80034de:	b085      	sub	sp, #20
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034e4:	2300      	movs	r3, #0
 80034e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	699b      	ldr	r3, [r3, #24]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d11f      	bne.n	8003536 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	2b03      	cmp	r3, #3
 80034fa:	d856      	bhi.n	80035aa <DMA_CheckFifoParam+0xce>
 80034fc:	a201      	add	r2, pc, #4	; (adr r2, 8003504 <DMA_CheckFifoParam+0x28>)
 80034fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003502:	bf00      	nop
 8003504:	08003515 	.word	0x08003515
 8003508:	08003527 	.word	0x08003527
 800350c:	08003515 	.word	0x08003515
 8003510:	080035ab 	.word	0x080035ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003518:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d046      	beq.n	80035ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003524:	e043      	b.n	80035ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800352e:	d140      	bne.n	80035b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003534:	e03d      	b.n	80035b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	699b      	ldr	r3, [r3, #24]
 800353a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800353e:	d121      	bne.n	8003584 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2b03      	cmp	r3, #3
 8003544:	d837      	bhi.n	80035b6 <DMA_CheckFifoParam+0xda>
 8003546:	a201      	add	r2, pc, #4	; (adr r2, 800354c <DMA_CheckFifoParam+0x70>)
 8003548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800354c:	0800355d 	.word	0x0800355d
 8003550:	08003563 	.word	0x08003563
 8003554:	0800355d 	.word	0x0800355d
 8003558:	08003575 	.word	0x08003575
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	73fb      	strb	r3, [r7, #15]
      break;
 8003560:	e030      	b.n	80035c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003566:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d025      	beq.n	80035ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003572:	e022      	b.n	80035ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003578:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800357c:	d11f      	bne.n	80035be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003582:	e01c      	b.n	80035be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	2b02      	cmp	r3, #2
 8003588:	d903      	bls.n	8003592 <DMA_CheckFifoParam+0xb6>
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	2b03      	cmp	r3, #3
 800358e:	d003      	beq.n	8003598 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003590:	e018      	b.n	80035c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	73fb      	strb	r3, [r7, #15]
      break;
 8003596:	e015      	b.n	80035c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800359c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00e      	beq.n	80035c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	73fb      	strb	r3, [r7, #15]
      break;
 80035a8:	e00b      	b.n	80035c2 <DMA_CheckFifoParam+0xe6>
      break;
 80035aa:	bf00      	nop
 80035ac:	e00a      	b.n	80035c4 <DMA_CheckFifoParam+0xe8>
      break;
 80035ae:	bf00      	nop
 80035b0:	e008      	b.n	80035c4 <DMA_CheckFifoParam+0xe8>
      break;
 80035b2:	bf00      	nop
 80035b4:	e006      	b.n	80035c4 <DMA_CheckFifoParam+0xe8>
      break;
 80035b6:	bf00      	nop
 80035b8:	e004      	b.n	80035c4 <DMA_CheckFifoParam+0xe8>
      break;
 80035ba:	bf00      	nop
 80035bc:	e002      	b.n	80035c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80035be:	bf00      	nop
 80035c0:	e000      	b.n	80035c4 <DMA_CheckFifoParam+0xe8>
      break;
 80035c2:	bf00      	nop
    }
  } 
  
  return status; 
 80035c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3714      	adds	r7, #20
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop

080035d4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e03b      	b.n	800365e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d106      	bne.n	8003600 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7fd fc98 	bl	8000f30 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2202      	movs	r2, #2
 8003604:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	430a      	orrs	r2, r1
 800361c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003624:	f023 0107 	bic.w	r1, r3, #7
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	689a      	ldr	r2, [r3, #8]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800363e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	68d1      	ldr	r1, [r2, #12]
 8003646:	687a      	ldr	r2, [r7, #4]
 8003648:	6812      	ldr	r2, [r2, #0]
 800364a:	430b      	orrs	r3, r1
 800364c:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b086      	sub	sp, #24
 800366a:	af02      	add	r7, sp, #8
 800366c:	60f8      	str	r0, [r7, #12]
 800366e:	60b9      	str	r1, [r7, #8]
 8003670:	607a      	str	r2, [r7, #4]
 8003672:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800367a:	2b01      	cmp	r3, #1
 800367c:	d101      	bne.n	8003682 <HAL_DMA2D_Start+0x1c>
 800367e:	2302      	movs	r3, #2
 8003680:	e018      	b.n	80036b4 <HAL_DMA2D_Start+0x4e>
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2202      	movs	r2, #2
 800368e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	687a      	ldr	r2, [r7, #4]
 800369a:	68b9      	ldr	r1, [r7, #8]
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 fa99 	bl	8003bd4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f042 0201 	orr.w	r2, r2, #1
 80036b0:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80036b2:	2300      	movs	r3, #0
}
 80036b4:	4618      	mov	r0, r3
 80036b6:	3710      	adds	r7, #16
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}

080036bc <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80036c6:	2300      	movs	r3, #0
 80036c8:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d056      	beq.n	8003786 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80036d8:	f7ff fcac 	bl	8003034 <HAL_GetTick>
 80036dc:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80036de:	e04b      	b.n	8003778 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d023      	beq.n	800373a <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f003 0320 	and.w	r3, r3, #32
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d005      	beq.n	8003708 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003700:	f043 0202 	orr.w	r2, r3, #2
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d005      	beq.n	800371e <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003716:	f043 0201 	orr.w	r2, r3, #1
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2221      	movs	r2, #33	; 0x21
 8003724:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2204      	movs	r2, #4
 800372a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e0a5      	b.n	8003886 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003740:	d01a      	beq.n	8003778 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003742:	f7ff fc77 	bl	8003034 <HAL_GetTick>
 8003746:	4602      	mov	r2, r0
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	1ad3      	subs	r3, r2, r3
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	429a      	cmp	r2, r3
 8003750:	d302      	bcc.n	8003758 <HAL_DMA2D_PollForTransfer+0x9c>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10f      	bne.n	8003778 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375c:	f043 0220 	orr.w	r2, r3, #32
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2203      	movs	r2, #3
 8003768:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8003774:	2303      	movs	r3, #3
 8003776:	e086      	b.n	8003886 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0ac      	beq.n	80036e0 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	69db      	ldr	r3, [r3, #28]
 800378c:	f003 0320 	and.w	r3, r3, #32
 8003790:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003798:	f003 0320 	and.w	r3, r3, #32
 800379c:	693a      	ldr	r2, [r7, #16]
 800379e:	4313      	orrs	r3, r2
 80037a0:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d061      	beq.n	800386c <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80037a8:	f7ff fc44 	bl	8003034 <HAL_GetTick>
 80037ac:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80037ae:	e056      	b.n	800385e <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d02e      	beq.n	8003820 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f003 0308 	and.w	r3, r3, #8
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d005      	beq.n	80037d8 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d0:	f043 0204 	orr.w	r2, r3, #4
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f003 0320 	and.w	r3, r3, #32
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d005      	beq.n	80037ee <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037e6:	f043 0202 	orr.w	r2, r3, #2
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d005      	beq.n	8003804 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037fc:	f043 0201 	orr.w	r2, r3, #1
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2229      	movs	r2, #41	; 0x29
 800380a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2204      	movs	r2, #4
 8003810:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e032      	b.n	8003886 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003826:	d01a      	beq.n	800385e <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003828:	f7ff fc04 	bl	8003034 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	429a      	cmp	r2, r3
 8003836:	d302      	bcc.n	800383e <HAL_DMA2D_PollForTransfer+0x182>
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d10f      	bne.n	800385e <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003842:	f043 0220 	orr.w	r2, r3, #32
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2203      	movs	r2, #3
 800384e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e013      	b.n	8003886 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f003 0310 	and.w	r3, r3, #16
 8003868:	2b00      	cmp	r3, #0
 800386a:	d0a1      	beq.n	80037b0 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2212      	movs	r2, #18
 8003872:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3718      	adds	r7, #24
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b084      	sub	sp, #16
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f003 0301 	and.w	r3, r3, #1
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d026      	beq.n	80038fe <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d021      	beq.n	80038fe <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038c8:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ce:	f043 0201 	orr.w	r2, r3, #1
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2201      	movs	r2, #1
 80038dc:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2204      	movs	r2, #4
 80038e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d003      	beq.n	80038fe <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f003 0320 	and.w	r3, r3, #32
 8003904:	2b00      	cmp	r3, #0
 8003906:	d026      	beq.n	8003956 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d021      	beq.n	8003956 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003920:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2220      	movs	r2, #32
 8003928:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392e:	f043 0202 	orr.w	r2, r3, #2
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2204      	movs	r2, #4
 800393a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d003      	beq.n	8003956 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	695b      	ldr	r3, [r3, #20]
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f003 0308 	and.w	r3, r3, #8
 800395c:	2b00      	cmp	r3, #0
 800395e:	d026      	beq.n	80039ae <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003966:	2b00      	cmp	r3, #0
 8003968:	d021      	beq.n	80039ae <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003978:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2208      	movs	r2, #8
 8003980:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003986:	f043 0204 	orr.w	r2, r3, #4
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2204      	movs	r2, #4
 8003992:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	695b      	ldr	r3, [r3, #20]
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	f003 0304 	and.w	r3, r3, #4
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d013      	beq.n	80039e0 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00e      	beq.n	80039e0 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039d0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2204      	movs	r2, #4
 80039d8:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 f853 	bl	8003a86 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f003 0302 	and.w	r3, r3, #2
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d024      	beq.n	8003a34 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d01f      	beq.n	8003a34 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003a02:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2202      	movs	r2, #2
 8003a0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d003      	beq.n	8003a34 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f003 0310 	and.w	r3, r3, #16
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d01f      	beq.n	8003a7e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d01a      	beq.n	8003a7e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003a56:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2210      	movs	r2, #16
 8003a5e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f000 f80e 	bl	8003a9a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8003a7e:	bf00      	nop
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b083      	sub	sp, #12
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8003a8e:	bf00      	nop
 8003a90:	370c      	adds	r7, #12
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr

08003a9a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8003a9a:	b480      	push	{r7}
 8003a9c:	b083      	sub	sp, #12
 8003a9e:	af00      	add	r7, sp, #0
 8003aa0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
	...

08003ab0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b087      	sub	sp, #28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d101      	bne.n	8003ad0 <HAL_DMA2D_ConfigLayer+0x20>
 8003acc:	2302      	movs	r3, #2
 8003ace:	e079      	b.n	8003bc4 <HAL_DMA2D_ConfigLayer+0x114>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2202      	movs	r2, #2
 8003adc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	011b      	lsls	r3, r3, #4
 8003ae4:	3318      	adds	r3, #24
 8003ae6:	687a      	ldr	r2, [r7, #4]
 8003ae8:	4413      	add	r3, r2
 8003aea:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	041b      	lsls	r3, r3, #16
 8003af6:	4313      	orrs	r3, r2
 8003af8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8003afa:	4b35      	ldr	r3, [pc, #212]	; (8003bd0 <HAL_DMA2D_ConfigLayer+0x120>)
 8003afc:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	2b0a      	cmp	r3, #10
 8003b04:	d003      	beq.n	8003b0e <HAL_DMA2D_ConfigLayer+0x5e>
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b09      	cmp	r3, #9
 8003b0c:	d107      	bne.n	8003b1e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003b16:	697a      	ldr	r2, [r7, #20]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	617b      	str	r3, [r7, #20]
 8003b1c:	e005      	b.n	8003b2a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	061b      	lsls	r3, r3, #24
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d120      	bne.n	8003b72 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	43db      	mvns	r3, r3
 8003b3a:	ea02 0103 	and.w	r1, r2, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	430a      	orrs	r2, r1
 8003b46:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	6812      	ldr	r2, [r2, #0]
 8003b50:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2b0a      	cmp	r3, #10
 8003b58:	d003      	beq.n	8003b62 <HAL_DMA2D_ConfigLayer+0xb2>
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2b09      	cmp	r3, #9
 8003b60:	d127      	bne.n	8003bb2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	68da      	ldr	r2, [r3, #12]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003b6e:	629a      	str	r2, [r3, #40]	; 0x28
 8003b70:	e01f      	b.n	8003bb2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	69da      	ldr	r2, [r3, #28]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	43db      	mvns	r3, r3
 8003b7c:	ea02 0103 	and.w	r1, r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	697a      	ldr	r2, [r7, #20]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	6812      	ldr	r2, [r2, #0]
 8003b92:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	2b0a      	cmp	r3, #10
 8003b9a:	d003      	beq.n	8003ba4 <HAL_DMA2D_ConfigLayer+0xf4>
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	2b09      	cmp	r3, #9
 8003ba2:	d106      	bne.n	8003bb2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	68da      	ldr	r2, [r3, #12]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003bb0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	371c      	adds	r7, #28
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	ff03000f 	.word	0xff03000f

08003bd4 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b08b      	sub	sp, #44	; 0x2c
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	60b9      	str	r1, [r7, #8]
 8003bde:	607a      	str	r2, [r7, #4]
 8003be0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	041a      	lsls	r2, r3, #16
 8003bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	430a      	orrs	r2, r1
 8003bfa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003c0c:	d174      	bne.n	8003cf8 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8003c14:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c1c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8003c24:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d108      	bne.n	8003c46 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	6a3b      	ldr	r3, [r7, #32]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	627b      	str	r3, [r7, #36]	; 0x24
 8003c44:	e053      	b.n	8003cee <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d106      	bne.n	8003c5c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	627b      	str	r3, [r7, #36]	; 0x24
 8003c5a:	e048      	b.n	8003cee <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d111      	bne.n	8003c88 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	0cdb      	lsrs	r3, r3, #19
 8003c68:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	0a9b      	lsrs	r3, r3, #10
 8003c6e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	08db      	lsrs	r3, r3, #3
 8003c74:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	015a      	lsls	r2, r3, #5
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	02db      	lsls	r3, r3, #11
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	627b      	str	r3, [r7, #36]	; 0x24
 8003c86:	e032      	b.n	8003cee <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	2b03      	cmp	r3, #3
 8003c8e:	d117      	bne.n	8003cc0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	0fdb      	lsrs	r3, r3, #31
 8003c94:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8003c96:	69fb      	ldr	r3, [r7, #28]
 8003c98:	0cdb      	lsrs	r3, r3, #19
 8003c9a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	0adb      	lsrs	r3, r3, #11
 8003ca0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	08db      	lsrs	r3, r3, #3
 8003ca6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	015a      	lsls	r2, r3, #5
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	029b      	lsls	r3, r3, #10
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	6a3b      	ldr	r3, [r7, #32]
 8003cb4:	03db      	lsls	r3, r3, #15
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8003cbe:	e016      	b.n	8003cee <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	0f1b      	lsrs	r3, r3, #28
 8003cc4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	0d1b      	lsrs	r3, r3, #20
 8003cca:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	0b1b      	lsrs	r3, r3, #12
 8003cd0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	091b      	lsrs	r3, r3, #4
 8003cd6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	011a      	lsls	r2, r3, #4
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	021b      	lsls	r3, r3, #8
 8003ce0:	431a      	orrs	r2, r3
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	031b      	lsls	r3, r3, #12
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	697a      	ldr	r2, [r7, #20]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf4:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8003cf6:	e003      	b.n	8003d00 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	60da      	str	r2, [r3, #12]
}
 8003d00:	bf00      	nop
 8003d02:	372c      	adds	r7, #44	; 0x2c
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b089      	sub	sp, #36	; 0x24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d16:	2300      	movs	r3, #0
 8003d18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d22:	2300      	movs	r3, #0
 8003d24:	61fb      	str	r3, [r7, #28]
 8003d26:	e177      	b.n	8004018 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d28:	2201      	movs	r2, #1
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	4013      	ands	r3, r2
 8003d3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	f040 8166 	bne.w	8004012 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f003 0303 	and.w	r3, r3, #3
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d005      	beq.n	8003d5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d130      	bne.n	8003dc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	005b      	lsls	r3, r3, #1
 8003d68:	2203      	movs	r2, #3
 8003d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d6e:	43db      	mvns	r3, r3
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	4013      	ands	r3, r2
 8003d74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	68da      	ldr	r2, [r3, #12]
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d94:	2201      	movs	r2, #1
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	4013      	ands	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	091b      	lsrs	r3, r3, #4
 8003daa:	f003 0201 	and.w	r2, r3, #1
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f003 0303 	and.w	r3, r3, #3
 8003dc8:	2b03      	cmp	r3, #3
 8003dca:	d017      	beq.n	8003dfc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	005b      	lsls	r3, r3, #1
 8003dd6:	2203      	movs	r2, #3
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	4013      	ands	r3, r2
 8003de2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	005b      	lsls	r3, r3, #1
 8003dec:	fa02 f303 	lsl.w	r3, r2, r3
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	69ba      	ldr	r2, [r7, #24]
 8003dfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f003 0303 	and.w	r3, r3, #3
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d123      	bne.n	8003e50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	08da      	lsrs	r2, r3, #3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3208      	adds	r2, #8
 8003e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e16:	69fb      	ldr	r3, [r7, #28]
 8003e18:	f003 0307 	and.w	r3, r3, #7
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	220f      	movs	r2, #15
 8003e20:	fa02 f303 	lsl.w	r3, r2, r3
 8003e24:	43db      	mvns	r3, r3
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	691a      	ldr	r2, [r3, #16]
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	f003 0307 	and.w	r3, r3, #7
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	08da      	lsrs	r2, r3, #3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	3208      	adds	r2, #8
 8003e4a:	69b9      	ldr	r1, [r7, #24]
 8003e4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	2203      	movs	r2, #3
 8003e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e60:	43db      	mvns	r3, r3
 8003e62:	69ba      	ldr	r2, [r7, #24]
 8003e64:	4013      	ands	r3, r2
 8003e66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f003 0203 	and.w	r2, r3, #3
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 80c0 	beq.w	8004012 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e92:	2300      	movs	r3, #0
 8003e94:	60fb      	str	r3, [r7, #12]
 8003e96:	4b66      	ldr	r3, [pc, #408]	; (8004030 <HAL_GPIO_Init+0x324>)
 8003e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9a:	4a65      	ldr	r2, [pc, #404]	; (8004030 <HAL_GPIO_Init+0x324>)
 8003e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ea2:	4b63      	ldr	r3, [pc, #396]	; (8004030 <HAL_GPIO_Init+0x324>)
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eaa:	60fb      	str	r3, [r7, #12]
 8003eac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003eae:	4a61      	ldr	r2, [pc, #388]	; (8004034 <HAL_GPIO_Init+0x328>)
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	089b      	lsrs	r3, r3, #2
 8003eb4:	3302      	adds	r3, #2
 8003eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	f003 0303 	and.w	r3, r3, #3
 8003ec2:	009b      	lsls	r3, r3, #2
 8003ec4:	220f      	movs	r2, #15
 8003ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eca:	43db      	mvns	r3, r3
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	4013      	ands	r3, r2
 8003ed0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a58      	ldr	r2, [pc, #352]	; (8004038 <HAL_GPIO_Init+0x32c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d037      	beq.n	8003f4a <HAL_GPIO_Init+0x23e>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a57      	ldr	r2, [pc, #348]	; (800403c <HAL_GPIO_Init+0x330>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d031      	beq.n	8003f46 <HAL_GPIO_Init+0x23a>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a56      	ldr	r2, [pc, #344]	; (8004040 <HAL_GPIO_Init+0x334>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d02b      	beq.n	8003f42 <HAL_GPIO_Init+0x236>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a55      	ldr	r2, [pc, #340]	; (8004044 <HAL_GPIO_Init+0x338>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d025      	beq.n	8003f3e <HAL_GPIO_Init+0x232>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a54      	ldr	r2, [pc, #336]	; (8004048 <HAL_GPIO_Init+0x33c>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d01f      	beq.n	8003f3a <HAL_GPIO_Init+0x22e>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a53      	ldr	r2, [pc, #332]	; (800404c <HAL_GPIO_Init+0x340>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d019      	beq.n	8003f36 <HAL_GPIO_Init+0x22a>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a52      	ldr	r2, [pc, #328]	; (8004050 <HAL_GPIO_Init+0x344>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d013      	beq.n	8003f32 <HAL_GPIO_Init+0x226>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a51      	ldr	r2, [pc, #324]	; (8004054 <HAL_GPIO_Init+0x348>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d00d      	beq.n	8003f2e <HAL_GPIO_Init+0x222>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a50      	ldr	r2, [pc, #320]	; (8004058 <HAL_GPIO_Init+0x34c>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d007      	beq.n	8003f2a <HAL_GPIO_Init+0x21e>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a4f      	ldr	r2, [pc, #316]	; (800405c <HAL_GPIO_Init+0x350>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d101      	bne.n	8003f26 <HAL_GPIO_Init+0x21a>
 8003f22:	2309      	movs	r3, #9
 8003f24:	e012      	b.n	8003f4c <HAL_GPIO_Init+0x240>
 8003f26:	230a      	movs	r3, #10
 8003f28:	e010      	b.n	8003f4c <HAL_GPIO_Init+0x240>
 8003f2a:	2308      	movs	r3, #8
 8003f2c:	e00e      	b.n	8003f4c <HAL_GPIO_Init+0x240>
 8003f2e:	2307      	movs	r3, #7
 8003f30:	e00c      	b.n	8003f4c <HAL_GPIO_Init+0x240>
 8003f32:	2306      	movs	r3, #6
 8003f34:	e00a      	b.n	8003f4c <HAL_GPIO_Init+0x240>
 8003f36:	2305      	movs	r3, #5
 8003f38:	e008      	b.n	8003f4c <HAL_GPIO_Init+0x240>
 8003f3a:	2304      	movs	r3, #4
 8003f3c:	e006      	b.n	8003f4c <HAL_GPIO_Init+0x240>
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e004      	b.n	8003f4c <HAL_GPIO_Init+0x240>
 8003f42:	2302      	movs	r3, #2
 8003f44:	e002      	b.n	8003f4c <HAL_GPIO_Init+0x240>
 8003f46:	2301      	movs	r3, #1
 8003f48:	e000      	b.n	8003f4c <HAL_GPIO_Init+0x240>
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	69fa      	ldr	r2, [r7, #28]
 8003f4e:	f002 0203 	and.w	r2, r2, #3
 8003f52:	0092      	lsls	r2, r2, #2
 8003f54:	4093      	lsls	r3, r2
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f5c:	4935      	ldr	r1, [pc, #212]	; (8004034 <HAL_GPIO_Init+0x328>)
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	089b      	lsrs	r3, r3, #2
 8003f62:	3302      	adds	r3, #2
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f6a:	4b3d      	ldr	r3, [pc, #244]	; (8004060 <HAL_GPIO_Init+0x354>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	43db      	mvns	r3, r3
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	4013      	ands	r3, r2
 8003f78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d003      	beq.n	8003f8e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f8e:	4a34      	ldr	r2, [pc, #208]	; (8004060 <HAL_GPIO_Init+0x354>)
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f94:	4b32      	ldr	r3, [pc, #200]	; (8004060 <HAL_GPIO_Init+0x354>)
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	43db      	mvns	r3, r3
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d003      	beq.n	8003fb8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003fb8:	4a29      	ldr	r2, [pc, #164]	; (8004060 <HAL_GPIO_Init+0x354>)
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003fbe:	4b28      	ldr	r3, [pc, #160]	; (8004060 <HAL_GPIO_Init+0x354>)
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	43db      	mvns	r3, r3
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	4013      	ands	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d003      	beq.n	8003fe2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fe2:	4a1f      	ldr	r2, [pc, #124]	; (8004060 <HAL_GPIO_Init+0x354>)
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fe8:	4b1d      	ldr	r3, [pc, #116]	; (8004060 <HAL_GPIO_Init+0x354>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	43db      	mvns	r3, r3
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004000:	2b00      	cmp	r3, #0
 8004002:	d003      	beq.n	800400c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004004:	69ba      	ldr	r2, [r7, #24]
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	4313      	orrs	r3, r2
 800400a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800400c:	4a14      	ldr	r2, [pc, #80]	; (8004060 <HAL_GPIO_Init+0x354>)
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	3301      	adds	r3, #1
 8004016:	61fb      	str	r3, [r7, #28]
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	2b0f      	cmp	r3, #15
 800401c:	f67f ae84 	bls.w	8003d28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004020:	bf00      	nop
 8004022:	bf00      	nop
 8004024:	3724      	adds	r7, #36	; 0x24
 8004026:	46bd      	mov	sp, r7
 8004028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402c:	4770      	bx	lr
 800402e:	bf00      	nop
 8004030:	40023800 	.word	0x40023800
 8004034:	40013800 	.word	0x40013800
 8004038:	40020000 	.word	0x40020000
 800403c:	40020400 	.word	0x40020400
 8004040:	40020800 	.word	0x40020800
 8004044:	40020c00 	.word	0x40020c00
 8004048:	40021000 	.word	0x40021000
 800404c:	40021400 	.word	0x40021400
 8004050:	40021800 	.word	0x40021800
 8004054:	40021c00 	.word	0x40021c00
 8004058:	40022000 	.word	0x40022000
 800405c:	40022400 	.word	0x40022400
 8004060:	40013c00 	.word	0x40013c00

08004064 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004064:	b480      	push	{r7}
 8004066:	b087      	sub	sp, #28
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800406e:	2300      	movs	r3, #0
 8004070:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8004072:	2300      	movs	r3, #0
 8004074:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8004076:	2300      	movs	r3, #0
 8004078:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800407a:	2300      	movs	r3, #0
 800407c:	617b      	str	r3, [r7, #20]
 800407e:	e0d9      	b.n	8004234 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004080:	2201      	movs	r2, #1
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	fa02 f303 	lsl.w	r3, r2, r3
 8004088:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800408a:	683a      	ldr	r2, [r7, #0]
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	4013      	ands	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	429a      	cmp	r2, r3
 8004098:	f040 80c9 	bne.w	800422e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 800409c:	4a6b      	ldr	r2, [pc, #428]	; (800424c <HAL_GPIO_DeInit+0x1e8>)
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	089b      	lsrs	r3, r3, #2
 80040a2:	3302      	adds	r3, #2
 80040a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040a8:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f003 0303 	and.w	r3, r3, #3
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	220f      	movs	r2, #15
 80040b4:	fa02 f303 	lsl.w	r3, r2, r3
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	4013      	ands	r3, r2
 80040bc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a63      	ldr	r2, [pc, #396]	; (8004250 <HAL_GPIO_DeInit+0x1ec>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d037      	beq.n	8004136 <HAL_GPIO_DeInit+0xd2>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a62      	ldr	r2, [pc, #392]	; (8004254 <HAL_GPIO_DeInit+0x1f0>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d031      	beq.n	8004132 <HAL_GPIO_DeInit+0xce>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a61      	ldr	r2, [pc, #388]	; (8004258 <HAL_GPIO_DeInit+0x1f4>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d02b      	beq.n	800412e <HAL_GPIO_DeInit+0xca>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a60      	ldr	r2, [pc, #384]	; (800425c <HAL_GPIO_DeInit+0x1f8>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d025      	beq.n	800412a <HAL_GPIO_DeInit+0xc6>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a5f      	ldr	r2, [pc, #380]	; (8004260 <HAL_GPIO_DeInit+0x1fc>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d01f      	beq.n	8004126 <HAL_GPIO_DeInit+0xc2>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a5e      	ldr	r2, [pc, #376]	; (8004264 <HAL_GPIO_DeInit+0x200>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d019      	beq.n	8004122 <HAL_GPIO_DeInit+0xbe>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a5d      	ldr	r2, [pc, #372]	; (8004268 <HAL_GPIO_DeInit+0x204>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d013      	beq.n	800411e <HAL_GPIO_DeInit+0xba>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a5c      	ldr	r2, [pc, #368]	; (800426c <HAL_GPIO_DeInit+0x208>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d00d      	beq.n	800411a <HAL_GPIO_DeInit+0xb6>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a5b      	ldr	r2, [pc, #364]	; (8004270 <HAL_GPIO_DeInit+0x20c>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d007      	beq.n	8004116 <HAL_GPIO_DeInit+0xb2>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a5a      	ldr	r2, [pc, #360]	; (8004274 <HAL_GPIO_DeInit+0x210>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d101      	bne.n	8004112 <HAL_GPIO_DeInit+0xae>
 800410e:	2309      	movs	r3, #9
 8004110:	e012      	b.n	8004138 <HAL_GPIO_DeInit+0xd4>
 8004112:	230a      	movs	r3, #10
 8004114:	e010      	b.n	8004138 <HAL_GPIO_DeInit+0xd4>
 8004116:	2308      	movs	r3, #8
 8004118:	e00e      	b.n	8004138 <HAL_GPIO_DeInit+0xd4>
 800411a:	2307      	movs	r3, #7
 800411c:	e00c      	b.n	8004138 <HAL_GPIO_DeInit+0xd4>
 800411e:	2306      	movs	r3, #6
 8004120:	e00a      	b.n	8004138 <HAL_GPIO_DeInit+0xd4>
 8004122:	2305      	movs	r3, #5
 8004124:	e008      	b.n	8004138 <HAL_GPIO_DeInit+0xd4>
 8004126:	2304      	movs	r3, #4
 8004128:	e006      	b.n	8004138 <HAL_GPIO_DeInit+0xd4>
 800412a:	2303      	movs	r3, #3
 800412c:	e004      	b.n	8004138 <HAL_GPIO_DeInit+0xd4>
 800412e:	2302      	movs	r3, #2
 8004130:	e002      	b.n	8004138 <HAL_GPIO_DeInit+0xd4>
 8004132:	2301      	movs	r3, #1
 8004134:	e000      	b.n	8004138 <HAL_GPIO_DeInit+0xd4>
 8004136:	2300      	movs	r3, #0
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	f002 0203 	and.w	r2, r2, #3
 800413e:	0092      	lsls	r2, r2, #2
 8004140:	4093      	lsls	r3, r2
 8004142:	68ba      	ldr	r2, [r7, #8]
 8004144:	429a      	cmp	r2, r3
 8004146:	d132      	bne.n	80041ae <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8004148:	4b4b      	ldr	r3, [pc, #300]	; (8004278 <HAL_GPIO_DeInit+0x214>)
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	43db      	mvns	r3, r3
 8004150:	4949      	ldr	r1, [pc, #292]	; (8004278 <HAL_GPIO_DeInit+0x214>)
 8004152:	4013      	ands	r3, r2
 8004154:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8004156:	4b48      	ldr	r3, [pc, #288]	; (8004278 <HAL_GPIO_DeInit+0x214>)
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	43db      	mvns	r3, r3
 800415e:	4946      	ldr	r1, [pc, #280]	; (8004278 <HAL_GPIO_DeInit+0x214>)
 8004160:	4013      	ands	r3, r2
 8004162:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8004164:	4b44      	ldr	r3, [pc, #272]	; (8004278 <HAL_GPIO_DeInit+0x214>)
 8004166:	68da      	ldr	r2, [r3, #12]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	43db      	mvns	r3, r3
 800416c:	4942      	ldr	r1, [pc, #264]	; (8004278 <HAL_GPIO_DeInit+0x214>)
 800416e:	4013      	ands	r3, r2
 8004170:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8004172:	4b41      	ldr	r3, [pc, #260]	; (8004278 <HAL_GPIO_DeInit+0x214>)
 8004174:	689a      	ldr	r2, [r3, #8]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	43db      	mvns	r3, r3
 800417a:	493f      	ldr	r1, [pc, #252]	; (8004278 <HAL_GPIO_DeInit+0x214>)
 800417c:	4013      	ands	r3, r2
 800417e:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	f003 0303 	and.w	r3, r3, #3
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	220f      	movs	r2, #15
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8004190:	4a2e      	ldr	r2, [pc, #184]	; (800424c <HAL_GPIO_DeInit+0x1e8>)
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	089b      	lsrs	r3, r3, #2
 8004196:	3302      	adds	r3, #2
 8004198:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	43da      	mvns	r2, r3
 80041a0:	482a      	ldr	r0, [pc, #168]	; (800424c <HAL_GPIO_DeInit+0x1e8>)
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	089b      	lsrs	r3, r3, #2
 80041a6:	400a      	ands	r2, r1
 80041a8:	3302      	adds	r3, #2
 80041aa:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	2103      	movs	r1, #3
 80041b8:	fa01 f303 	lsl.w	r3, r1, r3
 80041bc:	43db      	mvns	r3, r3
 80041be:	401a      	ands	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	08da      	lsrs	r2, r3, #3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	3208      	adds	r2, #8
 80041cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	f003 0307 	and.w	r3, r3, #7
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	220f      	movs	r2, #15
 80041da:	fa02 f303 	lsl.w	r3, r2, r3
 80041de:	43db      	mvns	r3, r3
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	08d2      	lsrs	r2, r2, #3
 80041e4:	4019      	ands	r1, r3
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	3208      	adds	r2, #8
 80041ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68da      	ldr	r2, [r3, #12]
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	2103      	movs	r1, #3
 80041f8:	fa01 f303 	lsl.w	r3, r1, r3
 80041fc:	43db      	mvns	r3, r3
 80041fe:	401a      	ands	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	2101      	movs	r1, #1
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	fa01 f303 	lsl.w	r3, r1, r3
 8004210:	43db      	mvns	r3, r3
 8004212:	401a      	ands	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	005b      	lsls	r3, r3, #1
 8004220:	2103      	movs	r1, #3
 8004222:	fa01 f303 	lsl.w	r3, r1, r3
 8004226:	43db      	mvns	r3, r3
 8004228:	401a      	ands	r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	3301      	adds	r3, #1
 8004232:	617b      	str	r3, [r7, #20]
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	2b0f      	cmp	r3, #15
 8004238:	f67f af22 	bls.w	8004080 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800423c:	bf00      	nop
 800423e:	bf00      	nop
 8004240:	371c      	adds	r7, #28
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	40013800 	.word	0x40013800
 8004250:	40020000 	.word	0x40020000
 8004254:	40020400 	.word	0x40020400
 8004258:	40020800 	.word	0x40020800
 800425c:	40020c00 	.word	0x40020c00
 8004260:	40021000 	.word	0x40021000
 8004264:	40021400 	.word	0x40021400
 8004268:	40021800 	.word	0x40021800
 800426c:	40021c00 	.word	0x40021c00
 8004270:	40022000 	.word	0x40022000
 8004274:	40022400 	.word	0x40022400
 8004278:	40013c00 	.word	0x40013c00

0800427c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
 8004284:	460b      	mov	r3, r1
 8004286:	807b      	strh	r3, [r7, #2]
 8004288:	4613      	mov	r3, r2
 800428a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800428c:	787b      	ldrb	r3, [r7, #1]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d003      	beq.n	800429a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004292:	887a      	ldrh	r2, [r7, #2]
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004298:	e003      	b.n	80042a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800429a:	887b      	ldrh	r3, [r7, #2]
 800429c:	041a      	lsls	r2, r3, #16
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	619a      	str	r2, [r3, #24]
}
 80042a2:	bf00      	nop
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr

080042ae <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b086      	sub	sp, #24
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f004 fb0a 	bl	80088de <USB_GetMode>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	f040 80f6 	bne.w	80044be <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f004 faee 	bl	80088b8 <USB_ReadInterrupts>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 80ec 	beq.w	80044bc <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f004 fae5 	bl	80088b8 <USB_ReadInterrupts>
 80042ee:	4603      	mov	r3, r0
 80042f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042f8:	d104      	bne.n	8004304 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004302:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4618      	mov	r0, r3
 800430a:	f004 fad5 	bl	80088b8 <USB_ReadInterrupts>
 800430e:	4603      	mov	r3, r0
 8004310:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004314:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004318:	d104      	bne.n	8004324 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004322:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4618      	mov	r0, r3
 800432a:	f004 fac5 	bl	80088b8 <USB_ReadInterrupts>
 800432e:	4603      	mov	r3, r0
 8004330:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004334:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004338:	d104      	bne.n	8004344 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004342:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4618      	mov	r0, r3
 800434a:	f004 fab5 	bl	80088b8 <USB_ReadInterrupts>
 800434e:	4603      	mov	r3, r0
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b02      	cmp	r3, #2
 8004356:	d103      	bne.n	8004360 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2202      	movs	r2, #2
 800435e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4618      	mov	r0, r3
 8004366:	f004 faa7 	bl	80088b8 <USB_ReadInterrupts>
 800436a:	4603      	mov	r3, r0
 800436c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004370:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004374:	d11c      	bne.n	80043b0 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800437e:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 0301 	and.w	r3, r3, #1
 800438c:	2b00      	cmp	r3, #0
 800438e:	d10f      	bne.n	80043b0 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8004390:	2110      	movs	r1, #16
 8004392:	6938      	ldr	r0, [r7, #16]
 8004394:	f004 f9d4 	bl	8008740 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004398:	6938      	ldr	r0, [r7, #16]
 800439a:	f004 fa05 	bl	80087a8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2101      	movs	r1, #1
 80043a4:	4618      	mov	r0, r3
 80043a6:	f004 faa8 	bl	80088fa <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f005 fdda 	bl	8009f64 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4618      	mov	r0, r3
 80043b6:	f004 fa7f 	bl	80088b8 <USB_ReadInterrupts>
 80043ba:	4603      	mov	r3, r0
 80043bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80043c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043c4:	d102      	bne.n	80043cc <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f001 f829 	bl	800541e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4618      	mov	r0, r3
 80043d2:	f004 fa71 	bl	80088b8 <USB_ReadInterrupts>
 80043d6:	4603      	mov	r3, r0
 80043d8:	f003 0308 	and.w	r3, r3, #8
 80043dc:	2b08      	cmp	r3, #8
 80043de:	d106      	bne.n	80043ee <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f005 fda3 	bl	8009f2c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	2208      	movs	r2, #8
 80043ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f004 fa60 	bl	80088b8 <USB_ReadInterrupts>
 80043f8:	4603      	mov	r3, r0
 80043fa:	f003 0310 	and.w	r3, r3, #16
 80043fe:	2b10      	cmp	r3, #16
 8004400:	d101      	bne.n	8004406 <HAL_HCD_IRQHandler+0x158>
 8004402:	2301      	movs	r3, #1
 8004404:	e000      	b.n	8004408 <HAL_HCD_IRQHandler+0x15a>
 8004406:	2300      	movs	r3, #0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d012      	beq.n	8004432 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	699a      	ldr	r2, [r3, #24]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 0210 	bic.w	r2, r2, #16
 800441a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 ff2c 	bl	800527a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	699a      	ldr	r2, [r3, #24]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f042 0210 	orr.w	r2, r2, #16
 8004430:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f004 fa3e 	bl	80088b8 <USB_ReadInterrupts>
 800443c:	4603      	mov	r3, r0
 800443e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004442:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004446:	d13a      	bne.n	80044be <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4618      	mov	r0, r3
 800444e:	f004 fa8e 	bl	800896e <USB_HC_ReadInterrupt>
 8004452:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004454:	2300      	movs	r3, #0
 8004456:	617b      	str	r3, [r7, #20]
 8004458:	e025      	b.n	80044a6 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	f003 030f 	and.w	r3, r3, #15
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	fa22 f303 	lsr.w	r3, r2, r3
 8004466:	f003 0301 	and.w	r3, r3, #1
 800446a:	2b00      	cmp	r3, #0
 800446c:	d018      	beq.n	80044a0 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	015a      	lsls	r2, r3, #5
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	4413      	add	r3, r2
 8004476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004480:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004484:	d106      	bne.n	8004494 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	b2db      	uxtb	r3, r3
 800448a:	4619      	mov	r1, r3
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 f836 	bl	80044fe <HCD_HC_IN_IRQHandler>
 8004492:	e005      	b.n	80044a0 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	b2db      	uxtb	r3, r3
 8004498:	4619      	mov	r1, r3
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 fb84 	bl	8004ba8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	3301      	adds	r3, #1
 80044a4:	617b      	str	r3, [r7, #20]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	697a      	ldr	r2, [r7, #20]
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d3d4      	bcc.n	800445a <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80044b8:	615a      	str	r2, [r3, #20]
 80044ba:	e000      	b.n	80044be <HAL_HCD_IRQHandler+0x210>
      return;
 80044bc:	bf00      	nop
    }
  }
}
 80044be:	3718      	adds	r7, #24
 80044c0:	46bd      	mov	sp, r7
 80044c2:	bd80      	pop	{r7, pc}

080044c4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b082      	sub	sp, #8
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d101      	bne.n	80044da <HAL_HCD_Stop+0x16>
 80044d6:	2302      	movs	r3, #2
 80044d8:	e00d      	b.n	80044f6 <HAL_HCD_Stop+0x32>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f004 fb4e 	bl	8008b88 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}

080044fe <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80044fe:	b580      	push	{r7, lr}
 8004500:	b086      	sub	sp, #24
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
 8004506:	460b      	mov	r3, r1
 8004508:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004514:	78fb      	ldrb	r3, [r7, #3]
 8004516:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	015a      	lsls	r2, r3, #5
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	4413      	add	r3, r2
 8004520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 0304 	and.w	r3, r3, #4
 800452a:	2b04      	cmp	r3, #4
 800452c:	d11a      	bne.n	8004564 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	015a      	lsls	r2, r3, #5
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	4413      	add	r3, r2
 8004536:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800453a:	461a      	mov	r2, r3
 800453c:	2304      	movs	r3, #4
 800453e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	212c      	movs	r1, #44	; 0x2c
 8004546:	fb01 f303 	mul.w	r3, r1, r3
 800454a:	4413      	add	r3, r2
 800454c:	3361      	adds	r3, #97	; 0x61
 800454e:	2206      	movs	r2, #6
 8004550:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	b2d2      	uxtb	r2, r2
 800455a:	4611      	mov	r1, r2
 800455c:	4618      	mov	r0, r3
 800455e:	f004 fa17 	bl	8008990 <USB_HC_Halt>
 8004562:	e0af      	b.n	80046c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	015a      	lsls	r2, r3, #5
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	4413      	add	r3, r2
 800456c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800457a:	d11b      	bne.n	80045b4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	015a      	lsls	r2, r3, #5
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	4413      	add	r3, r2
 8004584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004588:	461a      	mov	r2, r3
 800458a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800458e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	212c      	movs	r1, #44	; 0x2c
 8004596:	fb01 f303 	mul.w	r3, r1, r3
 800459a:	4413      	add	r3, r2
 800459c:	3361      	adds	r3, #97	; 0x61
 800459e:	2207      	movs	r2, #7
 80045a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	b2d2      	uxtb	r2, r2
 80045aa:	4611      	mov	r1, r2
 80045ac:	4618      	mov	r0, r3
 80045ae:	f004 f9ef 	bl	8008990 <USB_HC_Halt>
 80045b2:	e087      	b.n	80046c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	015a      	lsls	r2, r3, #5
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	4413      	add	r3, r2
 80045bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f003 0320 	and.w	r3, r3, #32
 80045c6:	2b20      	cmp	r3, #32
 80045c8:	d109      	bne.n	80045de <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	015a      	lsls	r2, r3, #5
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	4413      	add	r3, r2
 80045d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045d6:	461a      	mov	r2, r3
 80045d8:	2320      	movs	r3, #32
 80045da:	6093      	str	r3, [r2, #8]
 80045dc:	e072      	b.n	80046c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	015a      	lsls	r2, r3, #5
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	4413      	add	r3, r2
 80045e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f003 0308 	and.w	r3, r3, #8
 80045f0:	2b08      	cmp	r3, #8
 80045f2:	d11a      	bne.n	800462a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	015a      	lsls	r2, r3, #5
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	4413      	add	r3, r2
 80045fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004600:	461a      	mov	r2, r3
 8004602:	2308      	movs	r3, #8
 8004604:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	212c      	movs	r1, #44	; 0x2c
 800460c:	fb01 f303 	mul.w	r3, r1, r3
 8004610:	4413      	add	r3, r2
 8004612:	3361      	adds	r3, #97	; 0x61
 8004614:	2205      	movs	r2, #5
 8004616:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	4611      	mov	r1, r2
 8004622:	4618      	mov	r0, r3
 8004624:	f004 f9b4 	bl	8008990 <USB_HC_Halt>
 8004628:	e04c      	b.n	80046c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	015a      	lsls	r2, r3, #5
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	4413      	add	r3, r2
 8004632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800463c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004640:	d11b      	bne.n	800467a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	015a      	lsls	r2, r3, #5
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	4413      	add	r3, r2
 800464a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800464e:	461a      	mov	r2, r3
 8004650:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004654:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	212c      	movs	r1, #44	; 0x2c
 800465c:	fb01 f303 	mul.w	r3, r1, r3
 8004660:	4413      	add	r3, r2
 8004662:	3361      	adds	r3, #97	; 0x61
 8004664:	2208      	movs	r2, #8
 8004666:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68fa      	ldr	r2, [r7, #12]
 800466e:	b2d2      	uxtb	r2, r2
 8004670:	4611      	mov	r1, r2
 8004672:	4618      	mov	r0, r3
 8004674:	f004 f98c 	bl	8008990 <USB_HC_Halt>
 8004678:	e024      	b.n	80046c4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	015a      	lsls	r2, r3, #5
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	4413      	add	r3, r2
 8004682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800468c:	2b80      	cmp	r3, #128	; 0x80
 800468e:	d119      	bne.n	80046c4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	015a      	lsls	r2, r3, #5
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	4413      	add	r3, r2
 8004698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800469c:	461a      	mov	r2, r3
 800469e:	2380      	movs	r3, #128	; 0x80
 80046a0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	212c      	movs	r1, #44	; 0x2c
 80046a8:	fb01 f303 	mul.w	r3, r1, r3
 80046ac:	4413      	add	r3, r2
 80046ae:	3361      	adds	r3, #97	; 0x61
 80046b0:	2206      	movs	r2, #6
 80046b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	b2d2      	uxtb	r2, r2
 80046bc:	4611      	mov	r1, r2
 80046be:	4618      	mov	r0, r3
 80046c0:	f004 f966 	bl	8008990 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	015a      	lsls	r2, r3, #5
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046da:	d112      	bne.n	8004702 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	68fa      	ldr	r2, [r7, #12]
 80046e2:	b2d2      	uxtb	r2, r2
 80046e4:	4611      	mov	r1, r2
 80046e6:	4618      	mov	r0, r3
 80046e8:	f004 f952 	bl	8008990 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	015a      	lsls	r2, r3, #5
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	4413      	add	r3, r2
 80046f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046f8:	461a      	mov	r2, r3
 80046fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046fe:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004700:	e24e      	b.n	8004ba0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	015a      	lsls	r2, r3, #5
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	4413      	add	r3, r2
 800470a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	2b01      	cmp	r3, #1
 8004716:	f040 80df 	bne.w	80048d8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	691b      	ldr	r3, [r3, #16]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d019      	beq.n	8004756 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	212c      	movs	r1, #44	; 0x2c
 8004728:	fb01 f303 	mul.w	r3, r1, r3
 800472c:	4413      	add	r3, r2
 800472e:	3348      	adds	r3, #72	; 0x48
 8004730:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	0159      	lsls	r1, r3, #5
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	440b      	add	r3, r1
 800473a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004744:	1ad2      	subs	r2, r2, r3
 8004746:	6879      	ldr	r1, [r7, #4]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	202c      	movs	r0, #44	; 0x2c
 800474c:	fb00 f303 	mul.w	r3, r0, r3
 8004750:	440b      	add	r3, r1
 8004752:	3350      	adds	r3, #80	; 0x50
 8004754:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	212c      	movs	r1, #44	; 0x2c
 800475c:	fb01 f303 	mul.w	r3, r1, r3
 8004760:	4413      	add	r3, r2
 8004762:	3361      	adds	r3, #97	; 0x61
 8004764:	2201      	movs	r2, #1
 8004766:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	212c      	movs	r1, #44	; 0x2c
 800476e:	fb01 f303 	mul.w	r3, r1, r3
 8004772:	4413      	add	r3, r2
 8004774:	335c      	adds	r3, #92	; 0x5c
 8004776:	2200      	movs	r2, #0
 8004778:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	015a      	lsls	r2, r3, #5
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	4413      	add	r3, r2
 8004782:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004786:	461a      	mov	r2, r3
 8004788:	2301      	movs	r3, #1
 800478a:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	212c      	movs	r1, #44	; 0x2c
 8004792:	fb01 f303 	mul.w	r3, r1, r3
 8004796:	4413      	add	r3, r2
 8004798:	333f      	adds	r3, #63	; 0x3f
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d009      	beq.n	80047b4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	212c      	movs	r1, #44	; 0x2c
 80047a6:	fb01 f303 	mul.w	r3, r1, r3
 80047aa:	4413      	add	r3, r2
 80047ac:	333f      	adds	r3, #63	; 0x3f
 80047ae:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d111      	bne.n	80047d8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68fa      	ldr	r2, [r7, #12]
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	4611      	mov	r1, r2
 80047be:	4618      	mov	r0, r3
 80047c0:	f004 f8e6 	bl	8008990 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	015a      	lsls	r2, r3, #5
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	4413      	add	r3, r2
 80047cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047d0:	461a      	mov	r2, r3
 80047d2:	2310      	movs	r3, #16
 80047d4:	6093      	str	r3, [r2, #8]
 80047d6:	e03a      	b.n	800484e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	212c      	movs	r1, #44	; 0x2c
 80047de:	fb01 f303 	mul.w	r3, r1, r3
 80047e2:	4413      	add	r3, r2
 80047e4:	333f      	adds	r3, #63	; 0x3f
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	2b03      	cmp	r3, #3
 80047ea:	d009      	beq.n	8004800 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	212c      	movs	r1, #44	; 0x2c
 80047f2:	fb01 f303 	mul.w	r3, r1, r3
 80047f6:	4413      	add	r3, r2
 80047f8:	333f      	adds	r3, #63	; 0x3f
 80047fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d126      	bne.n	800484e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	015a      	lsls	r2, r3, #5
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	4413      	add	r3, r2
 8004808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	0151      	lsls	r1, r2, #5
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	440a      	add	r2, r1
 8004816:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800481a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800481e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	212c      	movs	r1, #44	; 0x2c
 8004826:	fb01 f303 	mul.w	r3, r1, r3
 800482a:	4413      	add	r3, r2
 800482c:	3360      	adds	r3, #96	; 0x60
 800482e:	2201      	movs	r2, #1
 8004830:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	b2d9      	uxtb	r1, r3
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	202c      	movs	r0, #44	; 0x2c
 800483c:	fb00 f303 	mul.w	r3, r0, r3
 8004840:	4413      	add	r3, r2
 8004842:	3360      	adds	r3, #96	; 0x60
 8004844:	781b      	ldrb	r3, [r3, #0]
 8004846:	461a      	mov	r2, r3
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f005 fb99 	bl	8009f80 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d12b      	bne.n	80048ae <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	212c      	movs	r1, #44	; 0x2c
 800485c:	fb01 f303 	mul.w	r3, r1, r3
 8004860:	4413      	add	r3, r2
 8004862:	3348      	adds	r3, #72	; 0x48
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	6879      	ldr	r1, [r7, #4]
 8004868:	68fa      	ldr	r2, [r7, #12]
 800486a:	202c      	movs	r0, #44	; 0x2c
 800486c:	fb00 f202 	mul.w	r2, r0, r2
 8004870:	440a      	add	r2, r1
 8004872:	3240      	adds	r2, #64	; 0x40
 8004874:	8812      	ldrh	r2, [r2, #0]
 8004876:	fbb3 f3f2 	udiv	r3, r3, r2
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	f000 818e 	beq.w	8004ba0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004884:	687a      	ldr	r2, [r7, #4]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	212c      	movs	r1, #44	; 0x2c
 800488a:	fb01 f303 	mul.w	r3, r1, r3
 800488e:	4413      	add	r3, r2
 8004890:	3354      	adds	r3, #84	; 0x54
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	f083 0301 	eor.w	r3, r3, #1
 8004898:	b2d8      	uxtb	r0, r3
 800489a:	687a      	ldr	r2, [r7, #4]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	212c      	movs	r1, #44	; 0x2c
 80048a0:	fb01 f303 	mul.w	r3, r1, r3
 80048a4:	4413      	add	r3, r2
 80048a6:	3354      	adds	r3, #84	; 0x54
 80048a8:	4602      	mov	r2, r0
 80048aa:	701a      	strb	r2, [r3, #0]
}
 80048ac:	e178      	b.n	8004ba0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	212c      	movs	r1, #44	; 0x2c
 80048b4:	fb01 f303 	mul.w	r3, r1, r3
 80048b8:	4413      	add	r3, r2
 80048ba:	3354      	adds	r3, #84	; 0x54
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	f083 0301 	eor.w	r3, r3, #1
 80048c2:	b2d8      	uxtb	r0, r3
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	212c      	movs	r1, #44	; 0x2c
 80048ca:	fb01 f303 	mul.w	r3, r1, r3
 80048ce:	4413      	add	r3, r2
 80048d0:	3354      	adds	r3, #84	; 0x54
 80048d2:	4602      	mov	r2, r0
 80048d4:	701a      	strb	r2, [r3, #0]
}
 80048d6:	e163      	b.n	8004ba0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	015a      	lsls	r2, r3, #5
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	4413      	add	r3, r2
 80048e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b02      	cmp	r3, #2
 80048ec:	f040 80f6 	bne.w	8004adc <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	212c      	movs	r1, #44	; 0x2c
 80048f6:	fb01 f303 	mul.w	r3, r1, r3
 80048fa:	4413      	add	r3, r2
 80048fc:	3361      	adds	r3, #97	; 0x61
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	2b01      	cmp	r3, #1
 8004902:	d109      	bne.n	8004918 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	212c      	movs	r1, #44	; 0x2c
 800490a:	fb01 f303 	mul.w	r3, r1, r3
 800490e:	4413      	add	r3, r2
 8004910:	3360      	adds	r3, #96	; 0x60
 8004912:	2201      	movs	r2, #1
 8004914:	701a      	strb	r2, [r3, #0]
 8004916:	e0c9      	b.n	8004aac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	212c      	movs	r1, #44	; 0x2c
 800491e:	fb01 f303 	mul.w	r3, r1, r3
 8004922:	4413      	add	r3, r2
 8004924:	3361      	adds	r3, #97	; 0x61
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	2b05      	cmp	r3, #5
 800492a:	d109      	bne.n	8004940 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	212c      	movs	r1, #44	; 0x2c
 8004932:	fb01 f303 	mul.w	r3, r1, r3
 8004936:	4413      	add	r3, r2
 8004938:	3360      	adds	r3, #96	; 0x60
 800493a:	2205      	movs	r2, #5
 800493c:	701a      	strb	r2, [r3, #0]
 800493e:	e0b5      	b.n	8004aac <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004940:	687a      	ldr	r2, [r7, #4]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	212c      	movs	r1, #44	; 0x2c
 8004946:	fb01 f303 	mul.w	r3, r1, r3
 800494a:	4413      	add	r3, r2
 800494c:	3361      	adds	r3, #97	; 0x61
 800494e:	781b      	ldrb	r3, [r3, #0]
 8004950:	2b06      	cmp	r3, #6
 8004952:	d009      	beq.n	8004968 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	212c      	movs	r1, #44	; 0x2c
 800495a:	fb01 f303 	mul.w	r3, r1, r3
 800495e:	4413      	add	r3, r2
 8004960:	3361      	adds	r3, #97	; 0x61
 8004962:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004964:	2b08      	cmp	r3, #8
 8004966:	d150      	bne.n	8004a0a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	212c      	movs	r1, #44	; 0x2c
 800496e:	fb01 f303 	mul.w	r3, r1, r3
 8004972:	4413      	add	r3, r2
 8004974:	335c      	adds	r3, #92	; 0x5c
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	6879      	ldr	r1, [r7, #4]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	202c      	movs	r0, #44	; 0x2c
 8004980:	fb00 f303 	mul.w	r3, r0, r3
 8004984:	440b      	add	r3, r1
 8004986:	335c      	adds	r3, #92	; 0x5c
 8004988:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	212c      	movs	r1, #44	; 0x2c
 8004990:	fb01 f303 	mul.w	r3, r1, r3
 8004994:	4413      	add	r3, r2
 8004996:	335c      	adds	r3, #92	; 0x5c
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b02      	cmp	r3, #2
 800499c:	d912      	bls.n	80049c4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	212c      	movs	r1, #44	; 0x2c
 80049a4:	fb01 f303 	mul.w	r3, r1, r3
 80049a8:	4413      	add	r3, r2
 80049aa:	335c      	adds	r3, #92	; 0x5c
 80049ac:	2200      	movs	r2, #0
 80049ae:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	212c      	movs	r1, #44	; 0x2c
 80049b6:	fb01 f303 	mul.w	r3, r1, r3
 80049ba:	4413      	add	r3, r2
 80049bc:	3360      	adds	r3, #96	; 0x60
 80049be:	2204      	movs	r2, #4
 80049c0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80049c2:	e073      	b.n	8004aac <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80049c4:	687a      	ldr	r2, [r7, #4]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	212c      	movs	r1, #44	; 0x2c
 80049ca:	fb01 f303 	mul.w	r3, r1, r3
 80049ce:	4413      	add	r3, r2
 80049d0:	3360      	adds	r3, #96	; 0x60
 80049d2:	2202      	movs	r2, #2
 80049d4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	015a      	lsls	r2, r3, #5
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	4413      	add	r3, r2
 80049de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80049ec:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80049f4:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	015a      	lsls	r2, r3, #5
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	4413      	add	r3, r2
 80049fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a02:	461a      	mov	r2, r3
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004a08:	e050      	b.n	8004aac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	212c      	movs	r1, #44	; 0x2c
 8004a10:	fb01 f303 	mul.w	r3, r1, r3
 8004a14:	4413      	add	r3, r2
 8004a16:	3361      	adds	r3, #97	; 0x61
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	2b03      	cmp	r3, #3
 8004a1c:	d122      	bne.n	8004a64 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	212c      	movs	r1, #44	; 0x2c
 8004a24:	fb01 f303 	mul.w	r3, r1, r3
 8004a28:	4413      	add	r3, r2
 8004a2a:	3360      	adds	r3, #96	; 0x60
 8004a2c:	2202      	movs	r2, #2
 8004a2e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	015a      	lsls	r2, r3, #5
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	4413      	add	r3, r2
 8004a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a46:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a48:	68bb      	ldr	r3, [r7, #8]
 8004a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a4e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	015a      	lsls	r2, r3, #5
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	4413      	add	r3, r2
 8004a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	6013      	str	r3, [r2, #0]
 8004a62:	e023      	b.n	8004aac <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	212c      	movs	r1, #44	; 0x2c
 8004a6a:	fb01 f303 	mul.w	r3, r1, r3
 8004a6e:	4413      	add	r3, r2
 8004a70:	3361      	adds	r3, #97	; 0x61
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	2b07      	cmp	r3, #7
 8004a76:	d119      	bne.n	8004aac <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	212c      	movs	r1, #44	; 0x2c
 8004a7e:	fb01 f303 	mul.w	r3, r1, r3
 8004a82:	4413      	add	r3, r2
 8004a84:	335c      	adds	r3, #92	; 0x5c
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	1c5a      	adds	r2, r3, #1
 8004a8a:	6879      	ldr	r1, [r7, #4]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	202c      	movs	r0, #44	; 0x2c
 8004a90:	fb00 f303 	mul.w	r3, r0, r3
 8004a94:	440b      	add	r3, r1
 8004a96:	335c      	adds	r3, #92	; 0x5c
 8004a98:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	212c      	movs	r1, #44	; 0x2c
 8004aa0:	fb01 f303 	mul.w	r3, r1, r3
 8004aa4:	4413      	add	r3, r2
 8004aa6:	3360      	adds	r3, #96	; 0x60
 8004aa8:	2204      	movs	r2, #4
 8004aaa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	015a      	lsls	r2, r3, #5
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ab8:	461a      	mov	r2, r3
 8004aba:	2302      	movs	r3, #2
 8004abc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	b2d9      	uxtb	r1, r3
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	202c      	movs	r0, #44	; 0x2c
 8004ac8:	fb00 f303 	mul.w	r3, r0, r3
 8004acc:	4413      	add	r3, r2
 8004ace:	3360      	adds	r3, #96	; 0x60
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f005 fa53 	bl	8009f80 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004ada:	e061      	b.n	8004ba0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f003 0310 	and.w	r3, r3, #16
 8004aee:	2b10      	cmp	r3, #16
 8004af0:	d156      	bne.n	8004ba0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	212c      	movs	r1, #44	; 0x2c
 8004af8:	fb01 f303 	mul.w	r3, r1, r3
 8004afc:	4413      	add	r3, r2
 8004afe:	333f      	adds	r3, #63	; 0x3f
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	2b03      	cmp	r3, #3
 8004b04:	d111      	bne.n	8004b2a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	212c      	movs	r1, #44	; 0x2c
 8004b0c:	fb01 f303 	mul.w	r3, r1, r3
 8004b10:	4413      	add	r3, r2
 8004b12:	335c      	adds	r3, #92	; 0x5c
 8004b14:	2200      	movs	r2, #0
 8004b16:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	b2d2      	uxtb	r2, r2
 8004b20:	4611      	mov	r1, r2
 8004b22:	4618      	mov	r0, r3
 8004b24:	f003 ff34 	bl	8008990 <USB_HC_Halt>
 8004b28:	e031      	b.n	8004b8e <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	212c      	movs	r1, #44	; 0x2c
 8004b30:	fb01 f303 	mul.w	r3, r1, r3
 8004b34:	4413      	add	r3, r2
 8004b36:	333f      	adds	r3, #63	; 0x3f
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d009      	beq.n	8004b52 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	212c      	movs	r1, #44	; 0x2c
 8004b44:	fb01 f303 	mul.w	r3, r1, r3
 8004b48:	4413      	add	r3, r2
 8004b4a:	333f      	adds	r3, #63	; 0x3f
 8004b4c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004b4e:	2b02      	cmp	r3, #2
 8004b50:	d11d      	bne.n	8004b8e <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	212c      	movs	r1, #44	; 0x2c
 8004b58:	fb01 f303 	mul.w	r3, r1, r3
 8004b5c:	4413      	add	r3, r2
 8004b5e:	335c      	adds	r3, #92	; 0x5c
 8004b60:	2200      	movs	r2, #0
 8004b62:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d110      	bne.n	8004b8e <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004b6c:	687a      	ldr	r2, [r7, #4]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	212c      	movs	r1, #44	; 0x2c
 8004b72:	fb01 f303 	mul.w	r3, r1, r3
 8004b76:	4413      	add	r3, r2
 8004b78:	3361      	adds	r3, #97	; 0x61
 8004b7a:	2203      	movs	r2, #3
 8004b7c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	b2d2      	uxtb	r2, r2
 8004b86:	4611      	mov	r1, r2
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f003 ff01 	bl	8008990 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	2310      	movs	r3, #16
 8004b9e:	6093      	str	r3, [r2, #8]
}
 8004ba0:	bf00      	nop
 8004ba2:	3718      	adds	r7, #24
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b088      	sub	sp, #32
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004bbe:	78fb      	ldrb	r3, [r7, #3]
 8004bc0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	015a      	lsls	r2, r3, #5
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	4413      	add	r3, r2
 8004bca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f003 0304 	and.w	r3, r3, #4
 8004bd4:	2b04      	cmp	r3, #4
 8004bd6:	d11a      	bne.n	8004c0e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	015a      	lsls	r2, r3, #5
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	4413      	add	r3, r2
 8004be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004be4:	461a      	mov	r2, r3
 8004be6:	2304      	movs	r3, #4
 8004be8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	212c      	movs	r1, #44	; 0x2c
 8004bf0:	fb01 f303 	mul.w	r3, r1, r3
 8004bf4:	4413      	add	r3, r2
 8004bf6:	3361      	adds	r3, #97	; 0x61
 8004bf8:	2206      	movs	r2, #6
 8004bfa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	b2d2      	uxtb	r2, r2
 8004c04:	4611      	mov	r1, r2
 8004c06:	4618      	mov	r0, r3
 8004c08:	f003 fec2 	bl	8008990 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004c0c:	e331      	b.n	8005272 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	015a      	lsls	r2, r3, #5
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	4413      	add	r3, r2
 8004c16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f003 0320 	and.w	r3, r3, #32
 8004c20:	2b20      	cmp	r3, #32
 8004c22:	d12e      	bne.n	8004c82 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	015a      	lsls	r2, r3, #5
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c30:	461a      	mov	r2, r3
 8004c32:	2320      	movs	r3, #32
 8004c34:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	212c      	movs	r1, #44	; 0x2c
 8004c3c:	fb01 f303 	mul.w	r3, r1, r3
 8004c40:	4413      	add	r3, r2
 8004c42:	333d      	adds	r3, #61	; 0x3d
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	f040 8313 	bne.w	8005272 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	212c      	movs	r1, #44	; 0x2c
 8004c52:	fb01 f303 	mul.w	r3, r1, r3
 8004c56:	4413      	add	r3, r2
 8004c58:	333d      	adds	r3, #61	; 0x3d
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	212c      	movs	r1, #44	; 0x2c
 8004c64:	fb01 f303 	mul.w	r3, r1, r3
 8004c68:	4413      	add	r3, r2
 8004c6a:	3360      	adds	r3, #96	; 0x60
 8004c6c:	2202      	movs	r2, #2
 8004c6e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	697a      	ldr	r2, [r7, #20]
 8004c76:	b2d2      	uxtb	r2, r2
 8004c78:	4611      	mov	r1, r2
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f003 fe88 	bl	8008990 <USB_HC_Halt>
}
 8004c80:	e2f7      	b.n	8005272 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	015a      	lsls	r2, r3, #5
 8004c86:	69bb      	ldr	r3, [r7, #24]
 8004c88:	4413      	add	r3, r2
 8004c8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c8e:	689b      	ldr	r3, [r3, #8]
 8004c90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c98:	d112      	bne.n	8004cc0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	015a      	lsls	r2, r3, #5
 8004c9e:	69bb      	ldr	r3, [r7, #24]
 8004ca0:	4413      	add	r3, r2
 8004ca2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004cac:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	697a      	ldr	r2, [r7, #20]
 8004cb4:	b2d2      	uxtb	r2, r2
 8004cb6:	4611      	mov	r1, r2
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f003 fe69 	bl	8008990 <USB_HC_Halt>
}
 8004cbe:	e2d8      	b.n	8005272 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d140      	bne.n	8004d58 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	212c      	movs	r1, #44	; 0x2c
 8004cdc:	fb01 f303 	mul.w	r3, r1, r3
 8004ce0:	4413      	add	r3, r2
 8004ce2:	335c      	adds	r3, #92	; 0x5c
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfa:	2b40      	cmp	r3, #64	; 0x40
 8004cfc:	d111      	bne.n	8004d22 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	212c      	movs	r1, #44	; 0x2c
 8004d04:	fb01 f303 	mul.w	r3, r1, r3
 8004d08:	4413      	add	r3, r2
 8004d0a:	333d      	adds	r3, #61	; 0x3d
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	015a      	lsls	r2, r3, #5
 8004d14:	69bb      	ldr	r3, [r7, #24]
 8004d16:	4413      	add	r3, r2
 8004d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	2340      	movs	r3, #64	; 0x40
 8004d20:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	015a      	lsls	r2, r3, #5
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d2e:	461a      	mov	r2, r3
 8004d30:	2301      	movs	r3, #1
 8004d32:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	212c      	movs	r1, #44	; 0x2c
 8004d3a:	fb01 f303 	mul.w	r3, r1, r3
 8004d3e:	4413      	add	r3, r2
 8004d40:	3361      	adds	r3, #97	; 0x61
 8004d42:	2201      	movs	r2, #1
 8004d44:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	b2d2      	uxtb	r2, r2
 8004d4e:	4611      	mov	r1, r2
 8004d50:	4618      	mov	r0, r3
 8004d52:	f003 fe1d 	bl	8008990 <USB_HC_Halt>
}
 8004d56:	e28c      	b.n	8005272 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	69bb      	ldr	r3, [r7, #24]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6a:	2b40      	cmp	r3, #64	; 0x40
 8004d6c:	d12c      	bne.n	8004dc8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	212c      	movs	r1, #44	; 0x2c
 8004d74:	fb01 f303 	mul.w	r3, r1, r3
 8004d78:	4413      	add	r3, r2
 8004d7a:	3361      	adds	r3, #97	; 0x61
 8004d7c:	2204      	movs	r2, #4
 8004d7e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	212c      	movs	r1, #44	; 0x2c
 8004d86:	fb01 f303 	mul.w	r3, r1, r3
 8004d8a:	4413      	add	r3, r2
 8004d8c:	333d      	adds	r3, #61	; 0x3d
 8004d8e:	2201      	movs	r2, #1
 8004d90:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	212c      	movs	r1, #44	; 0x2c
 8004d98:	fb01 f303 	mul.w	r3, r1, r3
 8004d9c:	4413      	add	r3, r2
 8004d9e:	335c      	adds	r3, #92	; 0x5c
 8004da0:	2200      	movs	r2, #0
 8004da2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	697a      	ldr	r2, [r7, #20]
 8004daa:	b2d2      	uxtb	r2, r2
 8004dac:	4611      	mov	r1, r2
 8004dae:	4618      	mov	r0, r3
 8004db0:	f003 fdee 	bl	8008990 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	015a      	lsls	r2, r3, #5
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	4413      	add	r3, r2
 8004dbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	2340      	movs	r3, #64	; 0x40
 8004dc4:	6093      	str	r3, [r2, #8]
}
 8004dc6:	e254      	b.n	8005272 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	015a      	lsls	r2, r3, #5
 8004dcc:	69bb      	ldr	r3, [r7, #24]
 8004dce:	4413      	add	r3, r2
 8004dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	f003 0308 	and.w	r3, r3, #8
 8004dda:	2b08      	cmp	r3, #8
 8004ddc:	d11a      	bne.n	8004e14 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	015a      	lsls	r2, r3, #5
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	4413      	add	r3, r2
 8004de6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004dea:	461a      	mov	r2, r3
 8004dec:	2308      	movs	r3, #8
 8004dee:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004df0:	687a      	ldr	r2, [r7, #4]
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	212c      	movs	r1, #44	; 0x2c
 8004df6:	fb01 f303 	mul.w	r3, r1, r3
 8004dfa:	4413      	add	r3, r2
 8004dfc:	3361      	adds	r3, #97	; 0x61
 8004dfe:	2205      	movs	r2, #5
 8004e00:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	697a      	ldr	r2, [r7, #20]
 8004e08:	b2d2      	uxtb	r2, r2
 8004e0a:	4611      	mov	r1, r2
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f003 fdbf 	bl	8008990 <USB_HC_Halt>
}
 8004e12:	e22e      	b.n	8005272 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	015a      	lsls	r2, r3, #5
 8004e18:	69bb      	ldr	r3, [r7, #24]
 8004e1a:	4413      	add	r3, r2
 8004e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f003 0310 	and.w	r3, r3, #16
 8004e26:	2b10      	cmp	r3, #16
 8004e28:	d140      	bne.n	8004eac <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	212c      	movs	r1, #44	; 0x2c
 8004e30:	fb01 f303 	mul.w	r3, r1, r3
 8004e34:	4413      	add	r3, r2
 8004e36:	335c      	adds	r3, #92	; 0x5c
 8004e38:	2200      	movs	r2, #0
 8004e3a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	212c      	movs	r1, #44	; 0x2c
 8004e42:	fb01 f303 	mul.w	r3, r1, r3
 8004e46:	4413      	add	r3, r2
 8004e48:	3361      	adds	r3, #97	; 0x61
 8004e4a:	2203      	movs	r2, #3
 8004e4c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	212c      	movs	r1, #44	; 0x2c
 8004e54:	fb01 f303 	mul.w	r3, r1, r3
 8004e58:	4413      	add	r3, r2
 8004e5a:	333d      	adds	r3, #61	; 0x3d
 8004e5c:	781b      	ldrb	r3, [r3, #0]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d112      	bne.n	8004e88 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	212c      	movs	r1, #44	; 0x2c
 8004e68:	fb01 f303 	mul.w	r3, r1, r3
 8004e6c:	4413      	add	r3, r2
 8004e6e:	333c      	adds	r3, #60	; 0x3c
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d108      	bne.n	8004e88 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	212c      	movs	r1, #44	; 0x2c
 8004e7c:	fb01 f303 	mul.w	r3, r1, r3
 8004e80:	4413      	add	r3, r2
 8004e82:	333d      	adds	r3, #61	; 0x3d
 8004e84:	2201      	movs	r2, #1
 8004e86:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	697a      	ldr	r2, [r7, #20]
 8004e8e:	b2d2      	uxtb	r2, r2
 8004e90:	4611      	mov	r1, r2
 8004e92:	4618      	mov	r0, r3
 8004e94:	f003 fd7c 	bl	8008990 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	2310      	movs	r3, #16
 8004ea8:	6093      	str	r3, [r2, #8]
}
 8004eaa:	e1e2      	b.n	8005272 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	015a      	lsls	r2, r3, #5
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ebe:	2b80      	cmp	r3, #128	; 0x80
 8004ec0:	d164      	bne.n	8004f8c <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d111      	bne.n	8004eee <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	212c      	movs	r1, #44	; 0x2c
 8004ed0:	fb01 f303 	mul.w	r3, r1, r3
 8004ed4:	4413      	add	r3, r2
 8004ed6:	3361      	adds	r3, #97	; 0x61
 8004ed8:	2206      	movs	r2, #6
 8004eda:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	b2d2      	uxtb	r2, r2
 8004ee4:	4611      	mov	r1, r2
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f003 fd52 	bl	8008990 <USB_HC_Halt>
 8004eec:	e044      	b.n	8004f78 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	212c      	movs	r1, #44	; 0x2c
 8004ef4:	fb01 f303 	mul.w	r3, r1, r3
 8004ef8:	4413      	add	r3, r2
 8004efa:	335c      	adds	r3, #92	; 0x5c
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	1c5a      	adds	r2, r3, #1
 8004f00:	6879      	ldr	r1, [r7, #4]
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	202c      	movs	r0, #44	; 0x2c
 8004f06:	fb00 f303 	mul.w	r3, r0, r3
 8004f0a:	440b      	add	r3, r1
 8004f0c:	335c      	adds	r3, #92	; 0x5c
 8004f0e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004f10:	687a      	ldr	r2, [r7, #4]
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	212c      	movs	r1, #44	; 0x2c
 8004f16:	fb01 f303 	mul.w	r3, r1, r3
 8004f1a:	4413      	add	r3, r2
 8004f1c:	335c      	adds	r3, #92	; 0x5c
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2b02      	cmp	r3, #2
 8004f22:	d920      	bls.n	8004f66 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004f24:	687a      	ldr	r2, [r7, #4]
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	212c      	movs	r1, #44	; 0x2c
 8004f2a:	fb01 f303 	mul.w	r3, r1, r3
 8004f2e:	4413      	add	r3, r2
 8004f30:	335c      	adds	r3, #92	; 0x5c
 8004f32:	2200      	movs	r2, #0
 8004f34:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	212c      	movs	r1, #44	; 0x2c
 8004f3c:	fb01 f303 	mul.w	r3, r1, r3
 8004f40:	4413      	add	r3, r2
 8004f42:	3360      	adds	r3, #96	; 0x60
 8004f44:	2204      	movs	r2, #4
 8004f46:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	b2d9      	uxtb	r1, r3
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	202c      	movs	r0, #44	; 0x2c
 8004f52:	fb00 f303 	mul.w	r3, r0, r3
 8004f56:	4413      	add	r3, r2
 8004f58:	3360      	adds	r3, #96	; 0x60
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f005 f80e 	bl	8009f80 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004f64:	e008      	b.n	8004f78 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004f66:	687a      	ldr	r2, [r7, #4]
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	212c      	movs	r1, #44	; 0x2c
 8004f6c:	fb01 f303 	mul.w	r3, r1, r3
 8004f70:	4413      	add	r3, r2
 8004f72:	3360      	adds	r3, #96	; 0x60
 8004f74:	2202      	movs	r2, #2
 8004f76:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	015a      	lsls	r2, r3, #5
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	4413      	add	r3, r2
 8004f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f84:	461a      	mov	r2, r3
 8004f86:	2380      	movs	r3, #128	; 0x80
 8004f88:	6093      	str	r3, [r2, #8]
}
 8004f8a:	e172      	b.n	8005272 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fa2:	d11b      	bne.n	8004fdc <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	212c      	movs	r1, #44	; 0x2c
 8004faa:	fb01 f303 	mul.w	r3, r1, r3
 8004fae:	4413      	add	r3, r2
 8004fb0:	3361      	adds	r3, #97	; 0x61
 8004fb2:	2208      	movs	r2, #8
 8004fb4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	b2d2      	uxtb	r2, r2
 8004fbe:	4611      	mov	r1, r2
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f003 fce5 	bl	8008990 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fd8:	6093      	str	r3, [r2, #8]
}
 8004fda:	e14a      	b.n	8005272 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	015a      	lsls	r2, r3, #5
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	4413      	add	r3, r2
 8004fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f003 0302 	and.w	r3, r3, #2
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	f040 813f 	bne.w	8005272 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	212c      	movs	r1, #44	; 0x2c
 8004ffa:	fb01 f303 	mul.w	r3, r1, r3
 8004ffe:	4413      	add	r3, r2
 8005000:	3361      	adds	r3, #97	; 0x61
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	2b01      	cmp	r3, #1
 8005006:	d17d      	bne.n	8005104 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	212c      	movs	r1, #44	; 0x2c
 800500e:	fb01 f303 	mul.w	r3, r1, r3
 8005012:	4413      	add	r3, r2
 8005014:	3360      	adds	r3, #96	; 0x60
 8005016:	2201      	movs	r2, #1
 8005018:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	212c      	movs	r1, #44	; 0x2c
 8005020:	fb01 f303 	mul.w	r3, r1, r3
 8005024:	4413      	add	r3, r2
 8005026:	333f      	adds	r3, #63	; 0x3f
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	2b02      	cmp	r3, #2
 800502c:	d00a      	beq.n	8005044 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	212c      	movs	r1, #44	; 0x2c
 8005034:	fb01 f303 	mul.w	r3, r1, r3
 8005038:	4413      	add	r3, r2
 800503a:	333f      	adds	r3, #63	; 0x3f
 800503c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800503e:	2b03      	cmp	r3, #3
 8005040:	f040 8100 	bne.w	8005244 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d113      	bne.n	8005074 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	212c      	movs	r1, #44	; 0x2c
 8005052:	fb01 f303 	mul.w	r3, r1, r3
 8005056:	4413      	add	r3, r2
 8005058:	3355      	adds	r3, #85	; 0x55
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	f083 0301 	eor.w	r3, r3, #1
 8005060:	b2d8      	uxtb	r0, r3
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	212c      	movs	r1, #44	; 0x2c
 8005068:	fb01 f303 	mul.w	r3, r1, r3
 800506c:	4413      	add	r3, r2
 800506e:	3355      	adds	r3, #85	; 0x55
 8005070:	4602      	mov	r2, r0
 8005072:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	691b      	ldr	r3, [r3, #16]
 8005078:	2b01      	cmp	r3, #1
 800507a:	f040 80e3 	bne.w	8005244 <HCD_HC_OUT_IRQHandler+0x69c>
 800507e:	687a      	ldr	r2, [r7, #4]
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	212c      	movs	r1, #44	; 0x2c
 8005084:	fb01 f303 	mul.w	r3, r1, r3
 8005088:	4413      	add	r3, r2
 800508a:	334c      	adds	r3, #76	; 0x4c
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	f000 80d8 	beq.w	8005244 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	212c      	movs	r1, #44	; 0x2c
 800509a:	fb01 f303 	mul.w	r3, r1, r3
 800509e:	4413      	add	r3, r2
 80050a0:	334c      	adds	r3, #76	; 0x4c
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	6879      	ldr	r1, [r7, #4]
 80050a6:	697a      	ldr	r2, [r7, #20]
 80050a8:	202c      	movs	r0, #44	; 0x2c
 80050aa:	fb00 f202 	mul.w	r2, r0, r2
 80050ae:	440a      	add	r2, r1
 80050b0:	3240      	adds	r2, #64	; 0x40
 80050b2:	8812      	ldrh	r2, [r2, #0]
 80050b4:	4413      	add	r3, r2
 80050b6:	3b01      	subs	r3, #1
 80050b8:	6879      	ldr	r1, [r7, #4]
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	202c      	movs	r0, #44	; 0x2c
 80050be:	fb00 f202 	mul.w	r2, r0, r2
 80050c2:	440a      	add	r2, r1
 80050c4:	3240      	adds	r2, #64	; 0x40
 80050c6:	8812      	ldrh	r2, [r2, #0]
 80050c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80050cc:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 80b5 	beq.w	8005244 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	212c      	movs	r1, #44	; 0x2c
 80050e0:	fb01 f303 	mul.w	r3, r1, r3
 80050e4:	4413      	add	r3, r2
 80050e6:	3355      	adds	r3, #85	; 0x55
 80050e8:	781b      	ldrb	r3, [r3, #0]
 80050ea:	f083 0301 	eor.w	r3, r3, #1
 80050ee:	b2d8      	uxtb	r0, r3
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	212c      	movs	r1, #44	; 0x2c
 80050f6:	fb01 f303 	mul.w	r3, r1, r3
 80050fa:	4413      	add	r3, r2
 80050fc:	3355      	adds	r3, #85	; 0x55
 80050fe:	4602      	mov	r2, r0
 8005100:	701a      	strb	r2, [r3, #0]
 8005102:	e09f      	b.n	8005244 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005104:	687a      	ldr	r2, [r7, #4]
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	212c      	movs	r1, #44	; 0x2c
 800510a:	fb01 f303 	mul.w	r3, r1, r3
 800510e:	4413      	add	r3, r2
 8005110:	3361      	adds	r3, #97	; 0x61
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	2b03      	cmp	r3, #3
 8005116:	d109      	bne.n	800512c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005118:	687a      	ldr	r2, [r7, #4]
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	212c      	movs	r1, #44	; 0x2c
 800511e:	fb01 f303 	mul.w	r3, r1, r3
 8005122:	4413      	add	r3, r2
 8005124:	3360      	adds	r3, #96	; 0x60
 8005126:	2202      	movs	r2, #2
 8005128:	701a      	strb	r2, [r3, #0]
 800512a:	e08b      	b.n	8005244 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800512c:	687a      	ldr	r2, [r7, #4]
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	212c      	movs	r1, #44	; 0x2c
 8005132:	fb01 f303 	mul.w	r3, r1, r3
 8005136:	4413      	add	r3, r2
 8005138:	3361      	adds	r3, #97	; 0x61
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	2b04      	cmp	r3, #4
 800513e:	d109      	bne.n	8005154 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8005140:	687a      	ldr	r2, [r7, #4]
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	212c      	movs	r1, #44	; 0x2c
 8005146:	fb01 f303 	mul.w	r3, r1, r3
 800514a:	4413      	add	r3, r2
 800514c:	3360      	adds	r3, #96	; 0x60
 800514e:	2202      	movs	r2, #2
 8005150:	701a      	strb	r2, [r3, #0]
 8005152:	e077      	b.n	8005244 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005154:	687a      	ldr	r2, [r7, #4]
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	212c      	movs	r1, #44	; 0x2c
 800515a:	fb01 f303 	mul.w	r3, r1, r3
 800515e:	4413      	add	r3, r2
 8005160:	3361      	adds	r3, #97	; 0x61
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	2b05      	cmp	r3, #5
 8005166:	d109      	bne.n	800517c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	212c      	movs	r1, #44	; 0x2c
 800516e:	fb01 f303 	mul.w	r3, r1, r3
 8005172:	4413      	add	r3, r2
 8005174:	3360      	adds	r3, #96	; 0x60
 8005176:	2205      	movs	r2, #5
 8005178:	701a      	strb	r2, [r3, #0]
 800517a:	e063      	b.n	8005244 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	212c      	movs	r1, #44	; 0x2c
 8005182:	fb01 f303 	mul.w	r3, r1, r3
 8005186:	4413      	add	r3, r2
 8005188:	3361      	adds	r3, #97	; 0x61
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	2b06      	cmp	r3, #6
 800518e:	d009      	beq.n	80051a4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	212c      	movs	r1, #44	; 0x2c
 8005196:	fb01 f303 	mul.w	r3, r1, r3
 800519a:	4413      	add	r3, r2
 800519c:	3361      	adds	r3, #97	; 0x61
 800519e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80051a0:	2b08      	cmp	r3, #8
 80051a2:	d14f      	bne.n	8005244 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80051a4:	687a      	ldr	r2, [r7, #4]
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	212c      	movs	r1, #44	; 0x2c
 80051aa:	fb01 f303 	mul.w	r3, r1, r3
 80051ae:	4413      	add	r3, r2
 80051b0:	335c      	adds	r3, #92	; 0x5c
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	1c5a      	adds	r2, r3, #1
 80051b6:	6879      	ldr	r1, [r7, #4]
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	202c      	movs	r0, #44	; 0x2c
 80051bc:	fb00 f303 	mul.w	r3, r0, r3
 80051c0:	440b      	add	r3, r1
 80051c2:	335c      	adds	r3, #92	; 0x5c
 80051c4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80051c6:	687a      	ldr	r2, [r7, #4]
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	212c      	movs	r1, #44	; 0x2c
 80051cc:	fb01 f303 	mul.w	r3, r1, r3
 80051d0:	4413      	add	r3, r2
 80051d2:	335c      	adds	r3, #92	; 0x5c
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2b02      	cmp	r3, #2
 80051d8:	d912      	bls.n	8005200 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80051da:	687a      	ldr	r2, [r7, #4]
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	212c      	movs	r1, #44	; 0x2c
 80051e0:	fb01 f303 	mul.w	r3, r1, r3
 80051e4:	4413      	add	r3, r2
 80051e6:	335c      	adds	r3, #92	; 0x5c
 80051e8:	2200      	movs	r2, #0
 80051ea:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80051ec:	687a      	ldr	r2, [r7, #4]
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	212c      	movs	r1, #44	; 0x2c
 80051f2:	fb01 f303 	mul.w	r3, r1, r3
 80051f6:	4413      	add	r3, r2
 80051f8:	3360      	adds	r3, #96	; 0x60
 80051fa:	2204      	movs	r2, #4
 80051fc:	701a      	strb	r2, [r3, #0]
 80051fe:	e021      	b.n	8005244 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005200:	687a      	ldr	r2, [r7, #4]
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	212c      	movs	r1, #44	; 0x2c
 8005206:	fb01 f303 	mul.w	r3, r1, r3
 800520a:	4413      	add	r3, r2
 800520c:	3360      	adds	r3, #96	; 0x60
 800520e:	2202      	movs	r2, #2
 8005210:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	015a      	lsls	r2, r3, #5
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	4413      	add	r3, r2
 800521a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005228:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005230:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	69bb      	ldr	r3, [r7, #24]
 8005238:	4413      	add	r3, r2
 800523a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800523e:	461a      	mov	r2, r3
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	015a      	lsls	r2, r3, #5
 8005248:	69bb      	ldr	r3, [r7, #24]
 800524a:	4413      	add	r3, r2
 800524c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005250:	461a      	mov	r2, r3
 8005252:	2302      	movs	r3, #2
 8005254:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	b2d9      	uxtb	r1, r3
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	202c      	movs	r0, #44	; 0x2c
 8005260:	fb00 f303 	mul.w	r3, r0, r3
 8005264:	4413      	add	r3, r2
 8005266:	3360      	adds	r3, #96	; 0x60
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	461a      	mov	r2, r3
 800526c:	6878      	ldr	r0, [r7, #4]
 800526e:	f004 fe87 	bl	8009f80 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8005272:	bf00      	nop
 8005274:	3720      	adds	r7, #32
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}

0800527a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b08a      	sub	sp, #40	; 0x28
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800528a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	6a1b      	ldr	r3, [r3, #32]
 8005292:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	f003 030f 	and.w	r3, r3, #15
 800529a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	0c5b      	lsrs	r3, r3, #17
 80052a0:	f003 030f 	and.w	r3, r3, #15
 80052a4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80052a6:	69fb      	ldr	r3, [r7, #28]
 80052a8:	091b      	lsrs	r3, r3, #4
 80052aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052ae:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d004      	beq.n	80052c0 <HCD_RXQLVL_IRQHandler+0x46>
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	2b05      	cmp	r3, #5
 80052ba:	f000 80a9 	beq.w	8005410 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80052be:	e0aa      	b.n	8005416 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f000 80a6 	beq.w	8005414 <HCD_RXQLVL_IRQHandler+0x19a>
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	212c      	movs	r1, #44	; 0x2c
 80052ce:	fb01 f303 	mul.w	r3, r1, r3
 80052d2:	4413      	add	r3, r2
 80052d4:	3344      	adds	r3, #68	; 0x44
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 809b 	beq.w	8005414 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	69bb      	ldr	r3, [r7, #24]
 80052e2:	212c      	movs	r1, #44	; 0x2c
 80052e4:	fb01 f303 	mul.w	r3, r1, r3
 80052e8:	4413      	add	r3, r2
 80052ea:	3350      	adds	r3, #80	; 0x50
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	441a      	add	r2, r3
 80052f2:	6879      	ldr	r1, [r7, #4]
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	202c      	movs	r0, #44	; 0x2c
 80052f8:	fb00 f303 	mul.w	r3, r0, r3
 80052fc:	440b      	add	r3, r1
 80052fe:	334c      	adds	r3, #76	; 0x4c
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	429a      	cmp	r2, r3
 8005304:	d87a      	bhi.n	80053fc <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6818      	ldr	r0, [r3, #0]
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	212c      	movs	r1, #44	; 0x2c
 8005310:	fb01 f303 	mul.w	r3, r1, r3
 8005314:	4413      	add	r3, r2
 8005316:	3344      	adds	r3, #68	; 0x44
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	b292      	uxth	r2, r2
 800531e:	4619      	mov	r1, r3
 8005320:	f003 fa72 	bl	8008808 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	212c      	movs	r1, #44	; 0x2c
 800532a:	fb01 f303 	mul.w	r3, r1, r3
 800532e:	4413      	add	r3, r2
 8005330:	3344      	adds	r3, #68	; 0x44
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	441a      	add	r2, r3
 8005338:	6879      	ldr	r1, [r7, #4]
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	202c      	movs	r0, #44	; 0x2c
 800533e:	fb00 f303 	mul.w	r3, r0, r3
 8005342:	440b      	add	r3, r1
 8005344:	3344      	adds	r3, #68	; 0x44
 8005346:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	212c      	movs	r1, #44	; 0x2c
 800534e:	fb01 f303 	mul.w	r3, r1, r3
 8005352:	4413      	add	r3, r2
 8005354:	3350      	adds	r3, #80	; 0x50
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	441a      	add	r2, r3
 800535c:	6879      	ldr	r1, [r7, #4]
 800535e:	69bb      	ldr	r3, [r7, #24]
 8005360:	202c      	movs	r0, #44	; 0x2c
 8005362:	fb00 f303 	mul.w	r3, r0, r3
 8005366:	440b      	add	r3, r1
 8005368:	3350      	adds	r3, #80	; 0x50
 800536a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	015a      	lsls	r2, r3, #5
 8005370:	6a3b      	ldr	r3, [r7, #32]
 8005372:	4413      	add	r3, r2
 8005374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	0cdb      	lsrs	r3, r3, #19
 800537c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005380:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	212c      	movs	r1, #44	; 0x2c
 8005388:	fb01 f303 	mul.w	r3, r1, r3
 800538c:	4413      	add	r3, r2
 800538e:	3340      	adds	r3, #64	; 0x40
 8005390:	881b      	ldrh	r3, [r3, #0]
 8005392:	461a      	mov	r2, r3
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	4293      	cmp	r3, r2
 8005398:	d13c      	bne.n	8005414 <HCD_RXQLVL_IRQHandler+0x19a>
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d039      	beq.n	8005414 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80053a0:	69bb      	ldr	r3, [r7, #24]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	6a3b      	ldr	r3, [r7, #32]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80053b6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80053b8:	68bb      	ldr	r3, [r7, #8]
 80053ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80053be:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80053c0:	69bb      	ldr	r3, [r7, #24]
 80053c2:	015a      	lsls	r2, r3, #5
 80053c4:	6a3b      	ldr	r3, [r7, #32]
 80053c6:	4413      	add	r3, r2
 80053c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053cc:	461a      	mov	r2, r3
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	212c      	movs	r1, #44	; 0x2c
 80053d8:	fb01 f303 	mul.w	r3, r1, r3
 80053dc:	4413      	add	r3, r2
 80053de:	3354      	adds	r3, #84	; 0x54
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	f083 0301 	eor.w	r3, r3, #1
 80053e6:	b2d8      	uxtb	r0, r3
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	69bb      	ldr	r3, [r7, #24]
 80053ec:	212c      	movs	r1, #44	; 0x2c
 80053ee:	fb01 f303 	mul.w	r3, r1, r3
 80053f2:	4413      	add	r3, r2
 80053f4:	3354      	adds	r3, #84	; 0x54
 80053f6:	4602      	mov	r2, r0
 80053f8:	701a      	strb	r2, [r3, #0]
      break;
 80053fa:	e00b      	b.n	8005414 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	212c      	movs	r1, #44	; 0x2c
 8005402:	fb01 f303 	mul.w	r3, r1, r3
 8005406:	4413      	add	r3, r2
 8005408:	3360      	adds	r3, #96	; 0x60
 800540a:	2204      	movs	r2, #4
 800540c:	701a      	strb	r2, [r3, #0]
      break;
 800540e:	e001      	b.n	8005414 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005410:	bf00      	nop
 8005412:	e000      	b.n	8005416 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005414:	bf00      	nop
  }
}
 8005416:	bf00      	nop
 8005418:	3728      	adds	r7, #40	; 0x28
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b086      	sub	sp, #24
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800544a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f003 0302 	and.w	r3, r3, #2
 8005452:	2b02      	cmp	r3, #2
 8005454:	d10b      	bne.n	800546e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f003 0301 	and.w	r3, r3, #1
 800545c:	2b01      	cmp	r3, #1
 800545e:	d102      	bne.n	8005466 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f004 fd71 	bl	8009f48 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	f043 0302 	orr.w	r3, r3, #2
 800546c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f003 0308 	and.w	r3, r3, #8
 8005474:	2b08      	cmp	r3, #8
 8005476:	d132      	bne.n	80054de <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	f043 0308 	orr.w	r3, r3, #8
 800547e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f003 0304 	and.w	r3, r3, #4
 8005486:	2b04      	cmp	r3, #4
 8005488:	d126      	bne.n	80054d8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	2b02      	cmp	r3, #2
 8005490:	d113      	bne.n	80054ba <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005498:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800549c:	d106      	bne.n	80054ac <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	2102      	movs	r1, #2
 80054a4:	4618      	mov	r0, r3
 80054a6:	f003 fa28 	bl	80088fa <USB_InitFSLSPClkSel>
 80054aa:	e011      	b.n	80054d0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2101      	movs	r1, #1
 80054b2:	4618      	mov	r0, r3
 80054b4:	f003 fa21 	bl	80088fa <USB_InitFSLSPClkSel>
 80054b8:	e00a      	b.n	80054d0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d106      	bne.n	80054d0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054c8:	461a      	mov	r2, r3
 80054ca:	f64e 2360 	movw	r3, #60000	; 0xea60
 80054ce:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f004 fd67 	bl	8009fa4 <HAL_HCD_PortEnabled_Callback>
 80054d6:	e002      	b.n	80054de <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80054d8:	6878      	ldr	r0, [r7, #4]
 80054da:	f004 fd71 	bl	8009fc0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f003 0320 	and.w	r3, r3, #32
 80054e4:	2b20      	cmp	r3, #32
 80054e6:	d103      	bne.n	80054f0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80054e8:	68bb      	ldr	r3, [r7, #8]
 80054ea:	f043 0320 	orr.w	r3, r3, #32
 80054ee:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054f6:	461a      	mov	r2, r3
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	6013      	str	r3, [r2, #0]
}
 80054fc:	bf00      	nop
 80054fe:	3718      	adds	r7, #24
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e12b      	b.n	800576e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800551c:	b2db      	uxtb	r3, r3
 800551e:	2b00      	cmp	r3, #0
 8005520:	d106      	bne.n	8005530 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f7fb fd28 	bl	8000f80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2224      	movs	r2, #36	; 0x24
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f022 0201 	bic.w	r2, r2, #1
 8005546:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005556:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005566:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005568:	f001 f9b4 	bl	80068d4 <HAL_RCC_GetPCLK1Freq>
 800556c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	4a81      	ldr	r2, [pc, #516]	; (8005778 <HAL_I2C_Init+0x274>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d807      	bhi.n	8005588 <HAL_I2C_Init+0x84>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	4a80      	ldr	r2, [pc, #512]	; (800577c <HAL_I2C_Init+0x278>)
 800557c:	4293      	cmp	r3, r2
 800557e:	bf94      	ite	ls
 8005580:	2301      	movls	r3, #1
 8005582:	2300      	movhi	r3, #0
 8005584:	b2db      	uxtb	r3, r3
 8005586:	e006      	b.n	8005596 <HAL_I2C_Init+0x92>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	4a7d      	ldr	r2, [pc, #500]	; (8005780 <HAL_I2C_Init+0x27c>)
 800558c:	4293      	cmp	r3, r2
 800558e:	bf94      	ite	ls
 8005590:	2301      	movls	r3, #1
 8005592:	2300      	movhi	r3, #0
 8005594:	b2db      	uxtb	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e0e7      	b.n	800576e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	4a78      	ldr	r2, [pc, #480]	; (8005784 <HAL_I2C_Init+0x280>)
 80055a2:	fba2 2303 	umull	r2, r3, r2, r3
 80055a6:	0c9b      	lsrs	r3, r3, #18
 80055a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	6a1b      	ldr	r3, [r3, #32]
 80055c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	4a6a      	ldr	r2, [pc, #424]	; (8005778 <HAL_I2C_Init+0x274>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d802      	bhi.n	80055d8 <HAL_I2C_Init+0xd4>
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	3301      	adds	r3, #1
 80055d6:	e009      	b.n	80055ec <HAL_I2C_Init+0xe8>
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80055de:	fb02 f303 	mul.w	r3, r2, r3
 80055e2:	4a69      	ldr	r2, [pc, #420]	; (8005788 <HAL_I2C_Init+0x284>)
 80055e4:	fba2 2303 	umull	r2, r3, r2, r3
 80055e8:	099b      	lsrs	r3, r3, #6
 80055ea:	3301      	adds	r3, #1
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	6812      	ldr	r2, [r2, #0]
 80055f0:	430b      	orrs	r3, r1
 80055f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	69db      	ldr	r3, [r3, #28]
 80055fa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80055fe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	495c      	ldr	r1, [pc, #368]	; (8005778 <HAL_I2C_Init+0x274>)
 8005608:	428b      	cmp	r3, r1
 800560a:	d819      	bhi.n	8005640 <HAL_I2C_Init+0x13c>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	1e59      	subs	r1, r3, #1
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	005b      	lsls	r3, r3, #1
 8005616:	fbb1 f3f3 	udiv	r3, r1, r3
 800561a:	1c59      	adds	r1, r3, #1
 800561c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005620:	400b      	ands	r3, r1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00a      	beq.n	800563c <HAL_I2C_Init+0x138>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	1e59      	subs	r1, r3, #1
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	005b      	lsls	r3, r3, #1
 8005630:	fbb1 f3f3 	udiv	r3, r1, r3
 8005634:	3301      	adds	r3, #1
 8005636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800563a:	e051      	b.n	80056e0 <HAL_I2C_Init+0x1dc>
 800563c:	2304      	movs	r3, #4
 800563e:	e04f      	b.n	80056e0 <HAL_I2C_Init+0x1dc>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d111      	bne.n	800566c <HAL_I2C_Init+0x168>
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	1e58      	subs	r0, r3, #1
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6859      	ldr	r1, [r3, #4]
 8005650:	460b      	mov	r3, r1
 8005652:	005b      	lsls	r3, r3, #1
 8005654:	440b      	add	r3, r1
 8005656:	fbb0 f3f3 	udiv	r3, r0, r3
 800565a:	3301      	adds	r3, #1
 800565c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005660:	2b00      	cmp	r3, #0
 8005662:	bf0c      	ite	eq
 8005664:	2301      	moveq	r3, #1
 8005666:	2300      	movne	r3, #0
 8005668:	b2db      	uxtb	r3, r3
 800566a:	e012      	b.n	8005692 <HAL_I2C_Init+0x18e>
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	1e58      	subs	r0, r3, #1
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6859      	ldr	r1, [r3, #4]
 8005674:	460b      	mov	r3, r1
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	440b      	add	r3, r1
 800567a:	0099      	lsls	r1, r3, #2
 800567c:	440b      	add	r3, r1
 800567e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005682:	3301      	adds	r3, #1
 8005684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005688:	2b00      	cmp	r3, #0
 800568a:	bf0c      	ite	eq
 800568c:	2301      	moveq	r3, #1
 800568e:	2300      	movne	r3, #0
 8005690:	b2db      	uxtb	r3, r3
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <HAL_I2C_Init+0x196>
 8005696:	2301      	movs	r3, #1
 8005698:	e022      	b.n	80056e0 <HAL_I2C_Init+0x1dc>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689b      	ldr	r3, [r3, #8]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d10e      	bne.n	80056c0 <HAL_I2C_Init+0x1bc>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	1e58      	subs	r0, r3, #1
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6859      	ldr	r1, [r3, #4]
 80056aa:	460b      	mov	r3, r1
 80056ac:	005b      	lsls	r3, r3, #1
 80056ae:	440b      	add	r3, r1
 80056b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80056b4:	3301      	adds	r3, #1
 80056b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056be:	e00f      	b.n	80056e0 <HAL_I2C_Init+0x1dc>
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	1e58      	subs	r0, r3, #1
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	6859      	ldr	r1, [r3, #4]
 80056c8:	460b      	mov	r3, r1
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	440b      	add	r3, r1
 80056ce:	0099      	lsls	r1, r3, #2
 80056d0:	440b      	add	r3, r1
 80056d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80056d6:	3301      	adds	r3, #1
 80056d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80056e0:	6879      	ldr	r1, [r7, #4]
 80056e2:	6809      	ldr	r1, [r1, #0]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	69da      	ldr	r2, [r3, #28]
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	431a      	orrs	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	430a      	orrs	r2, r1
 8005702:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800570e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	6911      	ldr	r1, [r2, #16]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	68d2      	ldr	r2, [r2, #12]
 800571a:	4311      	orrs	r1, r2
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	6812      	ldr	r2, [r2, #0]
 8005720:	430b      	orrs	r3, r1
 8005722:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	695a      	ldr	r2, [r3, #20]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	431a      	orrs	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	430a      	orrs	r2, r1
 800573e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f042 0201 	orr.w	r2, r2, #1
 800574e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2220      	movs	r2, #32
 800575a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3710      	adds	r7, #16
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	000186a0 	.word	0x000186a0
 800577c:	001e847f 	.word	0x001e847f
 8005780:	003d08ff 	.word	0x003d08ff
 8005784:	431bde83 	.word	0x431bde83
 8005788:	10624dd3 	.word	0x10624dd3

0800578c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b20      	cmp	r3, #32
 80057a0:	d129      	bne.n	80057f6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2224      	movs	r2, #36	; 0x24
 80057a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f022 0201 	bic.w	r2, r2, #1
 80057b8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f022 0210 	bic.w	r2, r2, #16
 80057c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	683a      	ldr	r2, [r7, #0]
 80057d6:	430a      	orrs	r2, r1
 80057d8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f042 0201 	orr.w	r2, r2, #1
 80057e8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2220      	movs	r2, #32
 80057ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80057f2:	2300      	movs	r3, #0
 80057f4:	e000      	b.n	80057f8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80057f6:	2302      	movs	r3, #2
  }
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	370c      	adds	r7, #12
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800580e:	2300      	movs	r3, #0
 8005810:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005818:	b2db      	uxtb	r3, r3
 800581a:	2b20      	cmp	r3, #32
 800581c:	d12a      	bne.n	8005874 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2224      	movs	r2, #36	; 0x24
 8005822:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	681a      	ldr	r2, [r3, #0]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f022 0201 	bic.w	r2, r2, #1
 8005834:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800583c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800583e:	89fb      	ldrh	r3, [r7, #14]
 8005840:	f023 030f 	bic.w	r3, r3, #15
 8005844:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	b29a      	uxth	r2, r3
 800584a:	89fb      	ldrh	r3, [r7, #14]
 800584c:	4313      	orrs	r3, r2
 800584e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	89fa      	ldrh	r2, [r7, #14]
 8005856:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f042 0201 	orr.w	r2, r2, #1
 8005866:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2220      	movs	r2, #32
 800586c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005870:	2300      	movs	r3, #0
 8005872:	e000      	b.n	8005876 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005874:	2302      	movs	r3, #2
  }
}
 8005876:	4618      	mov	r0, r3
 8005878:	3714      	adds	r7, #20
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr
	...

08005884 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d101      	bne.n	8005896 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005892:	2301      	movs	r3, #1
 8005894:	e0bf      	b.n	8005a16 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800589c:	b2db      	uxtb	r3, r3
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d106      	bne.n	80058b0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f7fb fbd2 	bl	8001054 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2202      	movs	r2, #2
 80058b4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699a      	ldr	r2, [r3, #24]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80058c6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6999      	ldr	r1, [r3, #24]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685a      	ldr	r2, [r3, #4]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80058dc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	691b      	ldr	r3, [r3, #16]
 80058e2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	430a      	orrs	r2, r1
 80058ea:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6899      	ldr	r1, [r3, #8]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	4b4a      	ldr	r3, [pc, #296]	; (8005a20 <HAL_LTDC_Init+0x19c>)
 80058f8:	400b      	ands	r3, r1
 80058fa:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	041b      	lsls	r3, r3, #16
 8005902:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6899      	ldr	r1, [r3, #8]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	699a      	ldr	r2, [r3, #24]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	431a      	orrs	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68d9      	ldr	r1, [r3, #12]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	4b3e      	ldr	r3, [pc, #248]	; (8005a20 <HAL_LTDC_Init+0x19c>)
 8005926:	400b      	ands	r3, r1
 8005928:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	69db      	ldr	r3, [r3, #28]
 800592e:	041b      	lsls	r3, r3, #16
 8005930:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68d9      	ldr	r1, [r3, #12]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a1a      	ldr	r2, [r3, #32]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	431a      	orrs	r2, r3
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	430a      	orrs	r2, r1
 8005946:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6919      	ldr	r1, [r3, #16]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	4b33      	ldr	r3, [pc, #204]	; (8005a20 <HAL_LTDC_Init+0x19c>)
 8005954:	400b      	ands	r3, r1
 8005956:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800595c:	041b      	lsls	r3, r3, #16
 800595e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6919      	ldr	r1, [r3, #16]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	431a      	orrs	r2, r3
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	430a      	orrs	r2, r1
 8005974:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	6959      	ldr	r1, [r3, #20]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681a      	ldr	r2, [r3, #0]
 8005980:	4b27      	ldr	r3, [pc, #156]	; (8005a20 <HAL_LTDC_Init+0x19c>)
 8005982:	400b      	ands	r3, r1
 8005984:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598a:	041b      	lsls	r3, r3, #16
 800598c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6959      	ldr	r1, [r3, #20]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	431a      	orrs	r2, r3
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	430a      	orrs	r2, r1
 80059a2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059aa:	021b      	lsls	r3, r3, #8
 80059ac:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80059b4:	041b      	lsls	r3, r3, #16
 80059b6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80059c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80059da:	431a      	orrs	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	430a      	orrs	r2, r1
 80059e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0206 	orr.w	r2, r2, #6
 80059f2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	699a      	ldr	r2, [r3, #24]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f042 0201 	orr.w	r2, r2, #1
 8005a02:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	f000f800 	.word	0xf000f800

08005a24 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a32:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a3a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f003 0304 	and.w	r3, r3, #4
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d023      	beq.n	8005a8e <HAL_LTDC_IRQHandler+0x6a>
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	f003 0304 	and.w	r3, r3, #4
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d01e      	beq.n	8005a8e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f022 0204 	bic.w	r2, r2, #4
 8005a5e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2204      	movs	r2, #4
 8005a66:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005a6e:	f043 0201 	orr.w	r2, r3, #1
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2204      	movs	r2, #4
 8005a7c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 f86f 	bl	8005b6c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f003 0302 	and.w	r3, r3, #2
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d023      	beq.n	8005ae0 <HAL_LTDC_IRQHandler+0xbc>
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	f003 0302 	and.w	r3, r3, #2
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d01e      	beq.n	8005ae0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f022 0202 	bic.w	r2, r2, #2
 8005ab0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2202      	movs	r2, #2
 8005ab8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005ac0:	f043 0202 	orr.w	r2, r3, #2
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2204      	movs	r2, #4
 8005ace:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f846 	bl	8005b6c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f003 0301 	and.w	r3, r3, #1
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d01b      	beq.n	8005b22 <HAL_LTDC_IRQHandler+0xfe>
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	f003 0301 	and.w	r3, r3, #1
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d016      	beq.n	8005b22 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 0201 	bic.w	r2, r2, #1
 8005b02:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 f82f 	bl	8005b80 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f003 0308 	and.w	r3, r3, #8
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d01b      	beq.n	8005b64 <HAL_LTDC_IRQHandler+0x140>
 8005b2c:	68bb      	ldr	r3, [r7, #8]
 8005b2e:	f003 0308 	and.w	r3, r3, #8
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d016      	beq.n	8005b64 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f022 0208 	bic.w	r2, r2, #8
 8005b44:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	2208      	movs	r2, #8
 8005b4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f818 	bl	8005b94 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005b64:	bf00      	nop
 8005b66:	3710      	adds	r7, #16
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005ba8:	b5b0      	push	{r4, r5, r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	60f8      	str	r0, [r7, #12]
 8005bb0:	60b9      	str	r1, [r7, #8]
 8005bb2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d101      	bne.n	8005bc2 <HAL_LTDC_ConfigLayer+0x1a>
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	e02c      	b.n	8005c1c <HAL_LTDC_ConfigLayer+0x74>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2202      	movs	r2, #2
 8005bce:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2134      	movs	r1, #52	; 0x34
 8005bd8:	fb01 f303 	mul.w	r3, r1, r3
 8005bdc:	4413      	add	r3, r2
 8005bde:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	4614      	mov	r4, r2
 8005be6:	461d      	mov	r5, r3
 8005be8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005bea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005bec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005bee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005bf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005bf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005bf4:	682b      	ldr	r3, [r5, #0]
 8005bf6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	68b9      	ldr	r1, [r7, #8]
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f000 f811 	bl	8005c24 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2201      	movs	r2, #1
 8005c08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3710      	adds	r7, #16
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bdb0      	pop	{r4, r5, r7, pc}

08005c24 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005c24:	b480      	push	{r7}
 8005c26:	b089      	sub	sp, #36	; 0x24
 8005c28:	af00      	add	r7, sp, #0
 8005c2a:	60f8      	str	r0, [r7, #12]
 8005c2c:	60b9      	str	r1, [r7, #8]
 8005c2e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	0c1b      	lsrs	r3, r3, #16
 8005c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c40:	4413      	add	r3, r2
 8005c42:	041b      	lsls	r3, r3, #16
 8005c44:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	01db      	lsls	r3, r3, #7
 8005c50:	4413      	add	r3, r2
 8005c52:	3384      	adds	r3, #132	; 0x84
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	6812      	ldr	r2, [r2, #0]
 8005c5a:	4611      	mov	r1, r2
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	01d2      	lsls	r2, r2, #7
 8005c60:	440a      	add	r2, r1
 8005c62:	3284      	adds	r2, #132	; 0x84
 8005c64:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005c68:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	0c1b      	lsrs	r3, r3, #16
 8005c76:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005c7a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005c7c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4619      	mov	r1, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	01db      	lsls	r3, r3, #7
 8005c88:	440b      	add	r3, r1
 8005c8a:	3384      	adds	r3, #132	; 0x84
 8005c8c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005c8e:	69fb      	ldr	r3, [r7, #28]
 8005c90:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005c92:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	68da      	ldr	r2, [r3, #12]
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ca2:	4413      	add	r3, r2
 8005ca4:	041b      	lsls	r3, r3, #16
 8005ca6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	461a      	mov	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	01db      	lsls	r3, r3, #7
 8005cb2:	4413      	add	r3, r2
 8005cb4:	3384      	adds	r3, #132	; 0x84
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	6812      	ldr	r2, [r2, #0]
 8005cbc:	4611      	mov	r1, r2
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	01d2      	lsls	r2, r2, #7
 8005cc2:	440a      	add	r2, r1
 8005cc4:	3284      	adds	r2, #132	; 0x84
 8005cc6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005cca:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
 8005cd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cda:	4413      	add	r3, r2
 8005cdc:	1c5a      	adds	r2, r3, #1
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	01db      	lsls	r3, r3, #7
 8005ce8:	440b      	add	r3, r1
 8005cea:	3384      	adds	r3, #132	; 0x84
 8005cec:	4619      	mov	r1, r3
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	01db      	lsls	r3, r3, #7
 8005cfe:	4413      	add	r3, r2
 8005d00:	3384      	adds	r3, #132	; 0x84
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	6812      	ldr	r2, [r2, #0]
 8005d08:	4611      	mov	r1, r2
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	01d2      	lsls	r2, r2, #7
 8005d0e:	440a      	add	r2, r1
 8005d10:	3284      	adds	r2, #132	; 0x84
 8005d12:	f023 0307 	bic.w	r3, r3, #7
 8005d16:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	461a      	mov	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	01db      	lsls	r3, r3, #7
 8005d22:	4413      	add	r3, r2
 8005d24:	3384      	adds	r3, #132	; 0x84
 8005d26:	461a      	mov	r2, r3
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005d34:	021b      	lsls	r3, r3, #8
 8005d36:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005d3e:	041b      	lsls	r3, r3, #16
 8005d40:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	699b      	ldr	r3, [r3, #24]
 8005d46:	061b      	lsls	r3, r3, #24
 8005d48:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	461a      	mov	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	01db      	lsls	r3, r3, #7
 8005d54:	4413      	add	r3, r2
 8005d56:	3384      	adds	r3, #132	; 0x84
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	461a      	mov	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	01db      	lsls	r3, r3, #7
 8005d64:	4413      	add	r3, r2
 8005d66:	3384      	adds	r3, #132	; 0x84
 8005d68:	461a      	mov	r2, r3
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005d74:	461a      	mov	r2, r3
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	431a      	orrs	r2, r3
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	431a      	orrs	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4619      	mov	r1, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	01db      	lsls	r3, r3, #7
 8005d88:	440b      	add	r3, r1
 8005d8a:	3384      	adds	r3, #132	; 0x84
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	4313      	orrs	r3, r2
 8005d92:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	461a      	mov	r2, r3
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	01db      	lsls	r3, r3, #7
 8005d9e:	4413      	add	r3, r2
 8005da0:	3384      	adds	r3, #132	; 0x84
 8005da2:	695b      	ldr	r3, [r3, #20]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	6812      	ldr	r2, [r2, #0]
 8005da8:	4611      	mov	r1, r2
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	01d2      	lsls	r2, r2, #7
 8005dae:	440a      	add	r2, r1
 8005db0:	3284      	adds	r2, #132	; 0x84
 8005db2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005db6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	01db      	lsls	r3, r3, #7
 8005dc2:	4413      	add	r3, r2
 8005dc4:	3384      	adds	r3, #132	; 0x84
 8005dc6:	461a      	mov	r2, r3
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	695b      	ldr	r3, [r3, #20]
 8005dcc:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	01db      	lsls	r3, r3, #7
 8005dd8:	4413      	add	r3, r2
 8005dda:	3384      	adds	r3, #132	; 0x84
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	6812      	ldr	r2, [r2, #0]
 8005de2:	4611      	mov	r1, r2
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	01d2      	lsls	r2, r2, #7
 8005de8:	440a      	add	r2, r1
 8005dea:	3284      	adds	r2, #132	; 0x84
 8005dec:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005df0:	f023 0307 	bic.w	r3, r3, #7
 8005df4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	69da      	ldr	r2, [r3, #28]
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	68f9      	ldr	r1, [r7, #12]
 8005e00:	6809      	ldr	r1, [r1, #0]
 8005e02:	4608      	mov	r0, r1
 8005e04:	6879      	ldr	r1, [r7, #4]
 8005e06:	01c9      	lsls	r1, r1, #7
 8005e08:	4401      	add	r1, r0
 8005e0a:	3184      	adds	r1, #132	; 0x84
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	461a      	mov	r2, r3
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	01db      	lsls	r3, r3, #7
 8005e1a:	4413      	add	r3, r2
 8005e1c:	3384      	adds	r3, #132	; 0x84
 8005e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	461a      	mov	r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	01db      	lsls	r3, r3, #7
 8005e2a:	4413      	add	r3, r2
 8005e2c:	3384      	adds	r3, #132	; 0x84
 8005e2e:	461a      	mov	r2, r3
 8005e30:	2300      	movs	r3, #0
 8005e32:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	461a      	mov	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	01db      	lsls	r3, r3, #7
 8005e3e:	4413      	add	r3, r2
 8005e40:	3384      	adds	r3, #132	; 0x84
 8005e42:	461a      	mov	r2, r3
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e48:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d102      	bne.n	8005e58 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8005e52:	2304      	movs	r3, #4
 8005e54:	61fb      	str	r3, [r7, #28]
 8005e56:	e01b      	b.n	8005e90 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d102      	bne.n	8005e66 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8005e60:	2303      	movs	r3, #3
 8005e62:	61fb      	str	r3, [r7, #28]
 8005e64:	e014      	b.n	8005e90 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	691b      	ldr	r3, [r3, #16]
 8005e6a:	2b04      	cmp	r3, #4
 8005e6c:	d00b      	beq.n	8005e86 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005e72:	2b02      	cmp	r3, #2
 8005e74:	d007      	beq.n	8005e86 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005e7a:	2b03      	cmp	r3, #3
 8005e7c:	d003      	beq.n	8005e86 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005e82:	2b07      	cmp	r3, #7
 8005e84:	d102      	bne.n	8005e8c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8005e86:	2302      	movs	r3, #2
 8005e88:	61fb      	str	r3, [r7, #28]
 8005e8a:	e001      	b.n	8005e90 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	461a      	mov	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	01db      	lsls	r3, r3, #7
 8005e9a:	4413      	add	r3, r2
 8005e9c:	3384      	adds	r3, #132	; 0x84
 8005e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	6812      	ldr	r2, [r2, #0]
 8005ea4:	4611      	mov	r1, r2
 8005ea6:	687a      	ldr	r2, [r7, #4]
 8005ea8:	01d2      	lsls	r2, r2, #7
 8005eaa:	440a      	add	r2, r1
 8005eac:	3284      	adds	r2, #132	; 0x84
 8005eae:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8005eb2:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eb8:	69fa      	ldr	r2, [r7, #28]
 8005eba:	fb02 f303 	mul.w	r3, r2, r3
 8005ebe:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	6859      	ldr	r1, [r3, #4]
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	1acb      	subs	r3, r1, r3
 8005eca:	69f9      	ldr	r1, [r7, #28]
 8005ecc:	fb01 f303 	mul.w	r3, r1, r3
 8005ed0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8005ed2:	68f9      	ldr	r1, [r7, #12]
 8005ed4:	6809      	ldr	r1, [r1, #0]
 8005ed6:	4608      	mov	r0, r1
 8005ed8:	6879      	ldr	r1, [r7, #4]
 8005eda:	01c9      	lsls	r1, r1, #7
 8005edc:	4401      	add	r1, r0
 8005ede:	3184      	adds	r1, #132	; 0x84
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	461a      	mov	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	01db      	lsls	r3, r3, #7
 8005eee:	4413      	add	r3, r2
 8005ef0:	3384      	adds	r3, #132	; 0x84
 8005ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef4:	68fa      	ldr	r2, [r7, #12]
 8005ef6:	6812      	ldr	r2, [r2, #0]
 8005ef8:	4611      	mov	r1, r2
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	01d2      	lsls	r2, r2, #7
 8005efe:	440a      	add	r2, r1
 8005f00:	3284      	adds	r2, #132	; 0x84
 8005f02:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005f06:	f023 0307 	bic.w	r3, r3, #7
 8005f0a:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	461a      	mov	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	01db      	lsls	r3, r3, #7
 8005f16:	4413      	add	r3, r2
 8005f18:	3384      	adds	r3, #132	; 0x84
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f20:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	461a      	mov	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	01db      	lsls	r3, r3, #7
 8005f2c:	4413      	add	r3, r2
 8005f2e:	3384      	adds	r3, #132	; 0x84
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	6812      	ldr	r2, [r2, #0]
 8005f36:	4611      	mov	r1, r2
 8005f38:	687a      	ldr	r2, [r7, #4]
 8005f3a:	01d2      	lsls	r2, r2, #7
 8005f3c:	440a      	add	r2, r1
 8005f3e:	3284      	adds	r2, #132	; 0x84
 8005f40:	f043 0301 	orr.w	r3, r3, #1
 8005f44:	6013      	str	r3, [r2, #0]
}
 8005f46:	bf00      	nop
 8005f48:	3724      	adds	r7, #36	; 0x24
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
	...

08005f54 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b082      	sub	sp, #8
 8005f58:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8005f5e:	2300      	movs	r3, #0
 8005f60:	603b      	str	r3, [r7, #0]
 8005f62:	4b20      	ldr	r3, [pc, #128]	; (8005fe4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f66:	4a1f      	ldr	r2, [pc, #124]	; (8005fe4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8005f6e:	4b1d      	ldr	r3, [pc, #116]	; (8005fe4 <HAL_PWREx_EnableOverDrive+0x90>)
 8005f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f76:	603b      	str	r3, [r7, #0]
 8005f78:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005f7a:	4b1b      	ldr	r3, [pc, #108]	; (8005fe8 <HAL_PWREx_EnableOverDrive+0x94>)
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f80:	f7fd f858 	bl	8003034 <HAL_GetTick>
 8005f84:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005f86:	e009      	b.n	8005f9c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005f88:	f7fd f854 	bl	8003034 <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f96:	d901      	bls.n	8005f9c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e01f      	b.n	8005fdc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005f9c:	4b13      	ldr	r3, [pc, #76]	; (8005fec <HAL_PWREx_EnableOverDrive+0x98>)
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fa8:	d1ee      	bne.n	8005f88 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005faa:	4b11      	ldr	r3, [pc, #68]	; (8005ff0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005fac:	2201      	movs	r2, #1
 8005fae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005fb0:	f7fd f840 	bl	8003034 <HAL_GetTick>
 8005fb4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005fb6:	e009      	b.n	8005fcc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005fb8:	f7fd f83c 	bl	8003034 <HAL_GetTick>
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	1ad3      	subs	r3, r2, r3
 8005fc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fc6:	d901      	bls.n	8005fcc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	e007      	b.n	8005fdc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005fcc:	4b07      	ldr	r3, [pc, #28]	; (8005fec <HAL_PWREx_EnableOverDrive+0x98>)
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005fd8:	d1ee      	bne.n	8005fb8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8005fda:	2300      	movs	r3, #0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3708      	adds	r7, #8
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}
 8005fe4:	40023800 	.word	0x40023800
 8005fe8:	420e0040 	.word	0x420e0040
 8005fec:	40007000 	.word	0x40007000
 8005ff0:	420e0044 	.word	0x420e0044

08005ff4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d101      	bne.n	8006006 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e267      	b.n	80064d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	2b00      	cmp	r3, #0
 8006010:	d075      	beq.n	80060fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006012:	4b88      	ldr	r3, [pc, #544]	; (8006234 <HAL_RCC_OscConfig+0x240>)
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f003 030c 	and.w	r3, r3, #12
 800601a:	2b04      	cmp	r3, #4
 800601c:	d00c      	beq.n	8006038 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800601e:	4b85      	ldr	r3, [pc, #532]	; (8006234 <HAL_RCC_OscConfig+0x240>)
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006026:	2b08      	cmp	r3, #8
 8006028:	d112      	bne.n	8006050 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800602a:	4b82      	ldr	r3, [pc, #520]	; (8006234 <HAL_RCC_OscConfig+0x240>)
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006032:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006036:	d10b      	bne.n	8006050 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006038:	4b7e      	ldr	r3, [pc, #504]	; (8006234 <HAL_RCC_OscConfig+0x240>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d05b      	beq.n	80060fc <HAL_RCC_OscConfig+0x108>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d157      	bne.n	80060fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e242      	b.n	80064d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006058:	d106      	bne.n	8006068 <HAL_RCC_OscConfig+0x74>
 800605a:	4b76      	ldr	r3, [pc, #472]	; (8006234 <HAL_RCC_OscConfig+0x240>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a75      	ldr	r2, [pc, #468]	; (8006234 <HAL_RCC_OscConfig+0x240>)
 8006060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006064:	6013      	str	r3, [r2, #0]
 8006066:	e01d      	b.n	80060a4 <HAL_RCC_OscConfig+0xb0>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006070:	d10c      	bne.n	800608c <HAL_RCC_OscConfig+0x98>
 8006072:	4b70      	ldr	r3, [pc, #448]	; (8006234 <HAL_RCC_OscConfig+0x240>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a6f      	ldr	r2, [pc, #444]	; (8006234 <HAL_RCC_OscConfig+0x240>)
 8006078:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800607c:	6013      	str	r3, [r2, #0]
 800607e:	4b6d      	ldr	r3, [pc, #436]	; (8006234 <HAL_RCC_OscConfig+0x240>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a6c      	ldr	r2, [pc, #432]	; (8006234 <HAL_RCC_OscConfig+0x240>)
 8006084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006088:	6013      	str	r3, [r2, #0]
 800608a:	e00b      	b.n	80060a4 <HAL_RCC_OscConfig+0xb0>
 800608c:	4b69      	ldr	r3, [pc, #420]	; (8006234 <HAL_RCC_OscConfig+0x240>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a68      	ldr	r2, [pc, #416]	; (8006234 <HAL_RCC_OscConfig+0x240>)
 8006092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006096:	6013      	str	r3, [r2, #0]
 8006098:	4b66      	ldr	r3, [pc, #408]	; (8006234 <HAL_RCC_OscConfig+0x240>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a65      	ldr	r2, [pc, #404]	; (8006234 <HAL_RCC_OscConfig+0x240>)
 800609e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d013      	beq.n	80060d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060ac:	f7fc ffc2 	bl	8003034 <HAL_GetTick>
 80060b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060b2:	e008      	b.n	80060c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060b4:	f7fc ffbe 	bl	8003034 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	2b64      	cmp	r3, #100	; 0x64
 80060c0:	d901      	bls.n	80060c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e207      	b.n	80064d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060c6:	4b5b      	ldr	r3, [pc, #364]	; (8006234 <HAL_RCC_OscConfig+0x240>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d0f0      	beq.n	80060b4 <HAL_RCC_OscConfig+0xc0>
 80060d2:	e014      	b.n	80060fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060d4:	f7fc ffae 	bl	8003034 <HAL_GetTick>
 80060d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060da:	e008      	b.n	80060ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060dc:	f7fc ffaa 	bl	8003034 <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	2b64      	cmp	r3, #100	; 0x64
 80060e8:	d901      	bls.n	80060ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e1f3      	b.n	80064d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060ee:	4b51      	ldr	r3, [pc, #324]	; (8006234 <HAL_RCC_OscConfig+0x240>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1f0      	bne.n	80060dc <HAL_RCC_OscConfig+0xe8>
 80060fa:	e000      	b.n	80060fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0302 	and.w	r3, r3, #2
 8006106:	2b00      	cmp	r3, #0
 8006108:	d063      	beq.n	80061d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800610a:	4b4a      	ldr	r3, [pc, #296]	; (8006234 <HAL_RCC_OscConfig+0x240>)
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f003 030c 	and.w	r3, r3, #12
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00b      	beq.n	800612e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006116:	4b47      	ldr	r3, [pc, #284]	; (8006234 <HAL_RCC_OscConfig+0x240>)
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800611e:	2b08      	cmp	r3, #8
 8006120:	d11c      	bne.n	800615c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006122:	4b44      	ldr	r3, [pc, #272]	; (8006234 <HAL_RCC_OscConfig+0x240>)
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d116      	bne.n	800615c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800612e:	4b41      	ldr	r3, [pc, #260]	; (8006234 <HAL_RCC_OscConfig+0x240>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0302 	and.w	r3, r3, #2
 8006136:	2b00      	cmp	r3, #0
 8006138:	d005      	beq.n	8006146 <HAL_RCC_OscConfig+0x152>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	2b01      	cmp	r3, #1
 8006140:	d001      	beq.n	8006146 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e1c7      	b.n	80064d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006146:	4b3b      	ldr	r3, [pc, #236]	; (8006234 <HAL_RCC_OscConfig+0x240>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	00db      	lsls	r3, r3, #3
 8006154:	4937      	ldr	r1, [pc, #220]	; (8006234 <HAL_RCC_OscConfig+0x240>)
 8006156:	4313      	orrs	r3, r2
 8006158:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800615a:	e03a      	b.n	80061d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d020      	beq.n	80061a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006164:	4b34      	ldr	r3, [pc, #208]	; (8006238 <HAL_RCC_OscConfig+0x244>)
 8006166:	2201      	movs	r2, #1
 8006168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800616a:	f7fc ff63 	bl	8003034 <HAL_GetTick>
 800616e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006170:	e008      	b.n	8006184 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006172:	f7fc ff5f 	bl	8003034 <HAL_GetTick>
 8006176:	4602      	mov	r2, r0
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	2b02      	cmp	r3, #2
 800617e:	d901      	bls.n	8006184 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e1a8      	b.n	80064d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006184:	4b2b      	ldr	r3, [pc, #172]	; (8006234 <HAL_RCC_OscConfig+0x240>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0302 	and.w	r3, r3, #2
 800618c:	2b00      	cmp	r3, #0
 800618e:	d0f0      	beq.n	8006172 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006190:	4b28      	ldr	r3, [pc, #160]	; (8006234 <HAL_RCC_OscConfig+0x240>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	00db      	lsls	r3, r3, #3
 800619e:	4925      	ldr	r1, [pc, #148]	; (8006234 <HAL_RCC_OscConfig+0x240>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	600b      	str	r3, [r1, #0]
 80061a4:	e015      	b.n	80061d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061a6:	4b24      	ldr	r3, [pc, #144]	; (8006238 <HAL_RCC_OscConfig+0x244>)
 80061a8:	2200      	movs	r2, #0
 80061aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ac:	f7fc ff42 	bl	8003034 <HAL_GetTick>
 80061b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061b2:	e008      	b.n	80061c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061b4:	f7fc ff3e 	bl	8003034 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d901      	bls.n	80061c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e187      	b.n	80064d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061c6:	4b1b      	ldr	r3, [pc, #108]	; (8006234 <HAL_RCC_OscConfig+0x240>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0302 	and.w	r3, r3, #2
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1f0      	bne.n	80061b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0308 	and.w	r3, r3, #8
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d036      	beq.n	800624c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d016      	beq.n	8006214 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061e6:	4b15      	ldr	r3, [pc, #84]	; (800623c <HAL_RCC_OscConfig+0x248>)
 80061e8:	2201      	movs	r2, #1
 80061ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061ec:	f7fc ff22 	bl	8003034 <HAL_GetTick>
 80061f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061f2:	e008      	b.n	8006206 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061f4:	f7fc ff1e 	bl	8003034 <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d901      	bls.n	8006206 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e167      	b.n	80064d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006206:	4b0b      	ldr	r3, [pc, #44]	; (8006234 <HAL_RCC_OscConfig+0x240>)
 8006208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800620a:	f003 0302 	and.w	r3, r3, #2
 800620e:	2b00      	cmp	r3, #0
 8006210:	d0f0      	beq.n	80061f4 <HAL_RCC_OscConfig+0x200>
 8006212:	e01b      	b.n	800624c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006214:	4b09      	ldr	r3, [pc, #36]	; (800623c <HAL_RCC_OscConfig+0x248>)
 8006216:	2200      	movs	r2, #0
 8006218:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800621a:	f7fc ff0b 	bl	8003034 <HAL_GetTick>
 800621e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006220:	e00e      	b.n	8006240 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006222:	f7fc ff07 	bl	8003034 <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	2b02      	cmp	r3, #2
 800622e:	d907      	bls.n	8006240 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006230:	2303      	movs	r3, #3
 8006232:	e150      	b.n	80064d6 <HAL_RCC_OscConfig+0x4e2>
 8006234:	40023800 	.word	0x40023800
 8006238:	42470000 	.word	0x42470000
 800623c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006240:	4b88      	ldr	r3, [pc, #544]	; (8006464 <HAL_RCC_OscConfig+0x470>)
 8006242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006244:	f003 0302 	and.w	r3, r3, #2
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1ea      	bne.n	8006222 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f003 0304 	and.w	r3, r3, #4
 8006254:	2b00      	cmp	r3, #0
 8006256:	f000 8097 	beq.w	8006388 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800625a:	2300      	movs	r3, #0
 800625c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800625e:	4b81      	ldr	r3, [pc, #516]	; (8006464 <HAL_RCC_OscConfig+0x470>)
 8006260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10f      	bne.n	800628a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800626a:	2300      	movs	r3, #0
 800626c:	60bb      	str	r3, [r7, #8]
 800626e:	4b7d      	ldr	r3, [pc, #500]	; (8006464 <HAL_RCC_OscConfig+0x470>)
 8006270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006272:	4a7c      	ldr	r2, [pc, #496]	; (8006464 <HAL_RCC_OscConfig+0x470>)
 8006274:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006278:	6413      	str	r3, [r2, #64]	; 0x40
 800627a:	4b7a      	ldr	r3, [pc, #488]	; (8006464 <HAL_RCC_OscConfig+0x470>)
 800627c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006282:	60bb      	str	r3, [r7, #8]
 8006284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006286:	2301      	movs	r3, #1
 8006288:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800628a:	4b77      	ldr	r3, [pc, #476]	; (8006468 <HAL_RCC_OscConfig+0x474>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006292:	2b00      	cmp	r3, #0
 8006294:	d118      	bne.n	80062c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006296:	4b74      	ldr	r3, [pc, #464]	; (8006468 <HAL_RCC_OscConfig+0x474>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a73      	ldr	r2, [pc, #460]	; (8006468 <HAL_RCC_OscConfig+0x474>)
 800629c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80062a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80062a2:	f7fc fec7 	bl	8003034 <HAL_GetTick>
 80062a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062a8:	e008      	b.n	80062bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062aa:	f7fc fec3 	bl	8003034 <HAL_GetTick>
 80062ae:	4602      	mov	r2, r0
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	d901      	bls.n	80062bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e10c      	b.n	80064d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062bc:	4b6a      	ldr	r3, [pc, #424]	; (8006468 <HAL_RCC_OscConfig+0x474>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d0f0      	beq.n	80062aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	689b      	ldr	r3, [r3, #8]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d106      	bne.n	80062de <HAL_RCC_OscConfig+0x2ea>
 80062d0:	4b64      	ldr	r3, [pc, #400]	; (8006464 <HAL_RCC_OscConfig+0x470>)
 80062d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d4:	4a63      	ldr	r2, [pc, #396]	; (8006464 <HAL_RCC_OscConfig+0x470>)
 80062d6:	f043 0301 	orr.w	r3, r3, #1
 80062da:	6713      	str	r3, [r2, #112]	; 0x70
 80062dc:	e01c      	b.n	8006318 <HAL_RCC_OscConfig+0x324>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	2b05      	cmp	r3, #5
 80062e4:	d10c      	bne.n	8006300 <HAL_RCC_OscConfig+0x30c>
 80062e6:	4b5f      	ldr	r3, [pc, #380]	; (8006464 <HAL_RCC_OscConfig+0x470>)
 80062e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062ea:	4a5e      	ldr	r2, [pc, #376]	; (8006464 <HAL_RCC_OscConfig+0x470>)
 80062ec:	f043 0304 	orr.w	r3, r3, #4
 80062f0:	6713      	str	r3, [r2, #112]	; 0x70
 80062f2:	4b5c      	ldr	r3, [pc, #368]	; (8006464 <HAL_RCC_OscConfig+0x470>)
 80062f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f6:	4a5b      	ldr	r2, [pc, #364]	; (8006464 <HAL_RCC_OscConfig+0x470>)
 80062f8:	f043 0301 	orr.w	r3, r3, #1
 80062fc:	6713      	str	r3, [r2, #112]	; 0x70
 80062fe:	e00b      	b.n	8006318 <HAL_RCC_OscConfig+0x324>
 8006300:	4b58      	ldr	r3, [pc, #352]	; (8006464 <HAL_RCC_OscConfig+0x470>)
 8006302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006304:	4a57      	ldr	r2, [pc, #348]	; (8006464 <HAL_RCC_OscConfig+0x470>)
 8006306:	f023 0301 	bic.w	r3, r3, #1
 800630a:	6713      	str	r3, [r2, #112]	; 0x70
 800630c:	4b55      	ldr	r3, [pc, #340]	; (8006464 <HAL_RCC_OscConfig+0x470>)
 800630e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006310:	4a54      	ldr	r2, [pc, #336]	; (8006464 <HAL_RCC_OscConfig+0x470>)
 8006312:	f023 0304 	bic.w	r3, r3, #4
 8006316:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d015      	beq.n	800634c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006320:	f7fc fe88 	bl	8003034 <HAL_GetTick>
 8006324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006326:	e00a      	b.n	800633e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006328:	f7fc fe84 	bl	8003034 <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	f241 3288 	movw	r2, #5000	; 0x1388
 8006336:	4293      	cmp	r3, r2
 8006338:	d901      	bls.n	800633e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800633a:	2303      	movs	r3, #3
 800633c:	e0cb      	b.n	80064d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800633e:	4b49      	ldr	r3, [pc, #292]	; (8006464 <HAL_RCC_OscConfig+0x470>)
 8006340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006342:	f003 0302 	and.w	r3, r3, #2
 8006346:	2b00      	cmp	r3, #0
 8006348:	d0ee      	beq.n	8006328 <HAL_RCC_OscConfig+0x334>
 800634a:	e014      	b.n	8006376 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800634c:	f7fc fe72 	bl	8003034 <HAL_GetTick>
 8006350:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006352:	e00a      	b.n	800636a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006354:	f7fc fe6e 	bl	8003034 <HAL_GetTick>
 8006358:	4602      	mov	r2, r0
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	1ad3      	subs	r3, r2, r3
 800635e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006362:	4293      	cmp	r3, r2
 8006364:	d901      	bls.n	800636a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e0b5      	b.n	80064d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800636a:	4b3e      	ldr	r3, [pc, #248]	; (8006464 <HAL_RCC_OscConfig+0x470>)
 800636c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800636e:	f003 0302 	and.w	r3, r3, #2
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1ee      	bne.n	8006354 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006376:	7dfb      	ldrb	r3, [r7, #23]
 8006378:	2b01      	cmp	r3, #1
 800637a:	d105      	bne.n	8006388 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800637c:	4b39      	ldr	r3, [pc, #228]	; (8006464 <HAL_RCC_OscConfig+0x470>)
 800637e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006380:	4a38      	ldr	r2, [pc, #224]	; (8006464 <HAL_RCC_OscConfig+0x470>)
 8006382:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006386:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	2b00      	cmp	r3, #0
 800638e:	f000 80a1 	beq.w	80064d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006392:	4b34      	ldr	r3, [pc, #208]	; (8006464 <HAL_RCC_OscConfig+0x470>)
 8006394:	689b      	ldr	r3, [r3, #8]
 8006396:	f003 030c 	and.w	r3, r3, #12
 800639a:	2b08      	cmp	r3, #8
 800639c:	d05c      	beq.n	8006458 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	699b      	ldr	r3, [r3, #24]
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d141      	bne.n	800642a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063a6:	4b31      	ldr	r3, [pc, #196]	; (800646c <HAL_RCC_OscConfig+0x478>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ac:	f7fc fe42 	bl	8003034 <HAL_GetTick>
 80063b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063b2:	e008      	b.n	80063c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063b4:	f7fc fe3e 	bl	8003034 <HAL_GetTick>
 80063b8:	4602      	mov	r2, r0
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	1ad3      	subs	r3, r2, r3
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d901      	bls.n	80063c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80063c2:	2303      	movs	r3, #3
 80063c4:	e087      	b.n	80064d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063c6:	4b27      	ldr	r3, [pc, #156]	; (8006464 <HAL_RCC_OscConfig+0x470>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d1f0      	bne.n	80063b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	69da      	ldr	r2, [r3, #28]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6a1b      	ldr	r3, [r3, #32]
 80063da:	431a      	orrs	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e0:	019b      	lsls	r3, r3, #6
 80063e2:	431a      	orrs	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e8:	085b      	lsrs	r3, r3, #1
 80063ea:	3b01      	subs	r3, #1
 80063ec:	041b      	lsls	r3, r3, #16
 80063ee:	431a      	orrs	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f4:	061b      	lsls	r3, r3, #24
 80063f6:	491b      	ldr	r1, [pc, #108]	; (8006464 <HAL_RCC_OscConfig+0x470>)
 80063f8:	4313      	orrs	r3, r2
 80063fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063fc:	4b1b      	ldr	r3, [pc, #108]	; (800646c <HAL_RCC_OscConfig+0x478>)
 80063fe:	2201      	movs	r2, #1
 8006400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006402:	f7fc fe17 	bl	8003034 <HAL_GetTick>
 8006406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006408:	e008      	b.n	800641c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800640a:	f7fc fe13 	bl	8003034 <HAL_GetTick>
 800640e:	4602      	mov	r2, r0
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	2b02      	cmp	r3, #2
 8006416:	d901      	bls.n	800641c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006418:	2303      	movs	r3, #3
 800641a:	e05c      	b.n	80064d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800641c:	4b11      	ldr	r3, [pc, #68]	; (8006464 <HAL_RCC_OscConfig+0x470>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d0f0      	beq.n	800640a <HAL_RCC_OscConfig+0x416>
 8006428:	e054      	b.n	80064d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800642a:	4b10      	ldr	r3, [pc, #64]	; (800646c <HAL_RCC_OscConfig+0x478>)
 800642c:	2200      	movs	r2, #0
 800642e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006430:	f7fc fe00 	bl	8003034 <HAL_GetTick>
 8006434:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006436:	e008      	b.n	800644a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006438:	f7fc fdfc 	bl	8003034 <HAL_GetTick>
 800643c:	4602      	mov	r2, r0
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	1ad3      	subs	r3, r2, r3
 8006442:	2b02      	cmp	r3, #2
 8006444:	d901      	bls.n	800644a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006446:	2303      	movs	r3, #3
 8006448:	e045      	b.n	80064d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800644a:	4b06      	ldr	r3, [pc, #24]	; (8006464 <HAL_RCC_OscConfig+0x470>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d1f0      	bne.n	8006438 <HAL_RCC_OscConfig+0x444>
 8006456:	e03d      	b.n	80064d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d107      	bne.n	8006470 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006460:	2301      	movs	r3, #1
 8006462:	e038      	b.n	80064d6 <HAL_RCC_OscConfig+0x4e2>
 8006464:	40023800 	.word	0x40023800
 8006468:	40007000 	.word	0x40007000
 800646c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006470:	4b1b      	ldr	r3, [pc, #108]	; (80064e0 <HAL_RCC_OscConfig+0x4ec>)
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d028      	beq.n	80064d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006488:	429a      	cmp	r2, r3
 800648a:	d121      	bne.n	80064d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006496:	429a      	cmp	r2, r3
 8006498:	d11a      	bne.n	80064d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80064a0:	4013      	ands	r3, r2
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80064a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d111      	bne.n	80064d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b6:	085b      	lsrs	r3, r3, #1
 80064b8:	3b01      	subs	r3, #1
 80064ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064bc:	429a      	cmp	r2, r3
 80064be:	d107      	bne.n	80064d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d001      	beq.n	80064d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e000      	b.n	80064d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3718      	adds	r7, #24
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	40023800 	.word	0x40023800

080064e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d101      	bne.n	80064f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e0cc      	b.n	8006692 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80064f8:	4b68      	ldr	r3, [pc, #416]	; (800669c <HAL_RCC_ClockConfig+0x1b8>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 030f 	and.w	r3, r3, #15
 8006500:	683a      	ldr	r2, [r7, #0]
 8006502:	429a      	cmp	r2, r3
 8006504:	d90c      	bls.n	8006520 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006506:	4b65      	ldr	r3, [pc, #404]	; (800669c <HAL_RCC_ClockConfig+0x1b8>)
 8006508:	683a      	ldr	r2, [r7, #0]
 800650a:	b2d2      	uxtb	r2, r2
 800650c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800650e:	4b63      	ldr	r3, [pc, #396]	; (800669c <HAL_RCC_ClockConfig+0x1b8>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 030f 	and.w	r3, r3, #15
 8006516:	683a      	ldr	r2, [r7, #0]
 8006518:	429a      	cmp	r2, r3
 800651a:	d001      	beq.n	8006520 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e0b8      	b.n	8006692 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0302 	and.w	r3, r3, #2
 8006528:	2b00      	cmp	r3, #0
 800652a:	d020      	beq.n	800656e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0304 	and.w	r3, r3, #4
 8006534:	2b00      	cmp	r3, #0
 8006536:	d005      	beq.n	8006544 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006538:	4b59      	ldr	r3, [pc, #356]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	4a58      	ldr	r2, [pc, #352]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 800653e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006542:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0308 	and.w	r3, r3, #8
 800654c:	2b00      	cmp	r3, #0
 800654e:	d005      	beq.n	800655c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006550:	4b53      	ldr	r3, [pc, #332]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	4a52      	ldr	r2, [pc, #328]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006556:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800655a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800655c:	4b50      	ldr	r3, [pc, #320]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	494d      	ldr	r1, [pc, #308]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 800656a:	4313      	orrs	r3, r2
 800656c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0301 	and.w	r3, r3, #1
 8006576:	2b00      	cmp	r3, #0
 8006578:	d044      	beq.n	8006604 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d107      	bne.n	8006592 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006582:	4b47      	ldr	r3, [pc, #284]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d119      	bne.n	80065c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e07f      	b.n	8006692 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	2b02      	cmp	r3, #2
 8006598:	d003      	beq.n	80065a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800659e:	2b03      	cmp	r3, #3
 80065a0:	d107      	bne.n	80065b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065a2:	4b3f      	ldr	r3, [pc, #252]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d109      	bne.n	80065c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e06f      	b.n	8006692 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065b2:	4b3b      	ldr	r3, [pc, #236]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0302 	and.w	r3, r3, #2
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d101      	bne.n	80065c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e067      	b.n	8006692 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065c2:	4b37      	ldr	r3, [pc, #220]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f023 0203 	bic.w	r2, r3, #3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	4934      	ldr	r1, [pc, #208]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 80065d0:	4313      	orrs	r3, r2
 80065d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065d4:	f7fc fd2e 	bl	8003034 <HAL_GetTick>
 80065d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065da:	e00a      	b.n	80065f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065dc:	f7fc fd2a 	bl	8003034 <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d901      	bls.n	80065f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e04f      	b.n	8006692 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065f2:	4b2b      	ldr	r3, [pc, #172]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f003 020c 	and.w	r2, r3, #12
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	429a      	cmp	r2, r3
 8006602:	d1eb      	bne.n	80065dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006604:	4b25      	ldr	r3, [pc, #148]	; (800669c <HAL_RCC_ClockConfig+0x1b8>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 030f 	and.w	r3, r3, #15
 800660c:	683a      	ldr	r2, [r7, #0]
 800660e:	429a      	cmp	r2, r3
 8006610:	d20c      	bcs.n	800662c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006612:	4b22      	ldr	r3, [pc, #136]	; (800669c <HAL_RCC_ClockConfig+0x1b8>)
 8006614:	683a      	ldr	r2, [r7, #0]
 8006616:	b2d2      	uxtb	r2, r2
 8006618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800661a:	4b20      	ldr	r3, [pc, #128]	; (800669c <HAL_RCC_ClockConfig+0x1b8>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 030f 	and.w	r3, r3, #15
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	429a      	cmp	r2, r3
 8006626:	d001      	beq.n	800662c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e032      	b.n	8006692 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 0304 	and.w	r3, r3, #4
 8006634:	2b00      	cmp	r3, #0
 8006636:	d008      	beq.n	800664a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006638:	4b19      	ldr	r3, [pc, #100]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	4916      	ldr	r1, [pc, #88]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006646:	4313      	orrs	r3, r2
 8006648:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 0308 	and.w	r3, r3, #8
 8006652:	2b00      	cmp	r3, #0
 8006654:	d009      	beq.n	800666a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006656:	4b12      	ldr	r3, [pc, #72]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	00db      	lsls	r3, r3, #3
 8006664:	490e      	ldr	r1, [pc, #56]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006666:	4313      	orrs	r3, r2
 8006668:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800666a:	f000 f821 	bl	80066b0 <HAL_RCC_GetSysClockFreq>
 800666e:	4602      	mov	r2, r0
 8006670:	4b0b      	ldr	r3, [pc, #44]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	091b      	lsrs	r3, r3, #4
 8006676:	f003 030f 	and.w	r3, r3, #15
 800667a:	490a      	ldr	r1, [pc, #40]	; (80066a4 <HAL_RCC_ClockConfig+0x1c0>)
 800667c:	5ccb      	ldrb	r3, [r1, r3]
 800667e:	fa22 f303 	lsr.w	r3, r2, r3
 8006682:	4a09      	ldr	r2, [pc, #36]	; (80066a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006684:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006686:	4b09      	ldr	r3, [pc, #36]	; (80066ac <HAL_RCC_ClockConfig+0x1c8>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4618      	mov	r0, r3
 800668c:	f7fa ff7e 	bl	800158c <HAL_InitTick>

  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	40023c00 	.word	0x40023c00
 80066a0:	40023800 	.word	0x40023800
 80066a4:	0800a9d4 	.word	0x0800a9d4
 80066a8:	20000000 	.word	0x20000000
 80066ac:	2000005c 	.word	0x2000005c

080066b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80066b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80066b4:	b094      	sub	sp, #80	; 0x50
 80066b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80066b8:	2300      	movs	r3, #0
 80066ba:	647b      	str	r3, [r7, #68]	; 0x44
 80066bc:	2300      	movs	r3, #0
 80066be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066c0:	2300      	movs	r3, #0
 80066c2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80066c4:	2300      	movs	r3, #0
 80066c6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80066c8:	4b79      	ldr	r3, [pc, #484]	; (80068b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	f003 030c 	and.w	r3, r3, #12
 80066d0:	2b08      	cmp	r3, #8
 80066d2:	d00d      	beq.n	80066f0 <HAL_RCC_GetSysClockFreq+0x40>
 80066d4:	2b08      	cmp	r3, #8
 80066d6:	f200 80e1 	bhi.w	800689c <HAL_RCC_GetSysClockFreq+0x1ec>
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d002      	beq.n	80066e4 <HAL_RCC_GetSysClockFreq+0x34>
 80066de:	2b04      	cmp	r3, #4
 80066e0:	d003      	beq.n	80066ea <HAL_RCC_GetSysClockFreq+0x3a>
 80066e2:	e0db      	b.n	800689c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80066e4:	4b73      	ldr	r3, [pc, #460]	; (80068b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80066e6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80066e8:	e0db      	b.n	80068a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80066ea:	4b73      	ldr	r3, [pc, #460]	; (80068b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80066ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80066ee:	e0d8      	b.n	80068a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066f0:	4b6f      	ldr	r3, [pc, #444]	; (80068b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066f8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80066fa:	4b6d      	ldr	r3, [pc, #436]	; (80068b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d063      	beq.n	80067ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006706:	4b6a      	ldr	r3, [pc, #424]	; (80068b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	099b      	lsrs	r3, r3, #6
 800670c:	2200      	movs	r2, #0
 800670e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006710:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006718:	633b      	str	r3, [r7, #48]	; 0x30
 800671a:	2300      	movs	r3, #0
 800671c:	637b      	str	r3, [r7, #52]	; 0x34
 800671e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006722:	4622      	mov	r2, r4
 8006724:	462b      	mov	r3, r5
 8006726:	f04f 0000 	mov.w	r0, #0
 800672a:	f04f 0100 	mov.w	r1, #0
 800672e:	0159      	lsls	r1, r3, #5
 8006730:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006734:	0150      	lsls	r0, r2, #5
 8006736:	4602      	mov	r2, r0
 8006738:	460b      	mov	r3, r1
 800673a:	4621      	mov	r1, r4
 800673c:	1a51      	subs	r1, r2, r1
 800673e:	6139      	str	r1, [r7, #16]
 8006740:	4629      	mov	r1, r5
 8006742:	eb63 0301 	sbc.w	r3, r3, r1
 8006746:	617b      	str	r3, [r7, #20]
 8006748:	f04f 0200 	mov.w	r2, #0
 800674c:	f04f 0300 	mov.w	r3, #0
 8006750:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006754:	4659      	mov	r1, fp
 8006756:	018b      	lsls	r3, r1, #6
 8006758:	4651      	mov	r1, sl
 800675a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800675e:	4651      	mov	r1, sl
 8006760:	018a      	lsls	r2, r1, #6
 8006762:	4651      	mov	r1, sl
 8006764:	ebb2 0801 	subs.w	r8, r2, r1
 8006768:	4659      	mov	r1, fp
 800676a:	eb63 0901 	sbc.w	r9, r3, r1
 800676e:	f04f 0200 	mov.w	r2, #0
 8006772:	f04f 0300 	mov.w	r3, #0
 8006776:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800677a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800677e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006782:	4690      	mov	r8, r2
 8006784:	4699      	mov	r9, r3
 8006786:	4623      	mov	r3, r4
 8006788:	eb18 0303 	adds.w	r3, r8, r3
 800678c:	60bb      	str	r3, [r7, #8]
 800678e:	462b      	mov	r3, r5
 8006790:	eb49 0303 	adc.w	r3, r9, r3
 8006794:	60fb      	str	r3, [r7, #12]
 8006796:	f04f 0200 	mov.w	r2, #0
 800679a:	f04f 0300 	mov.w	r3, #0
 800679e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80067a2:	4629      	mov	r1, r5
 80067a4:	024b      	lsls	r3, r1, #9
 80067a6:	4621      	mov	r1, r4
 80067a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80067ac:	4621      	mov	r1, r4
 80067ae:	024a      	lsls	r2, r1, #9
 80067b0:	4610      	mov	r0, r2
 80067b2:	4619      	mov	r1, r3
 80067b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067b6:	2200      	movs	r2, #0
 80067b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80067ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80067bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80067c0:	f7f9 fd66 	bl	8000290 <__aeabi_uldivmod>
 80067c4:	4602      	mov	r2, r0
 80067c6:	460b      	mov	r3, r1
 80067c8:	4613      	mov	r3, r2
 80067ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067cc:	e058      	b.n	8006880 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067ce:	4b38      	ldr	r3, [pc, #224]	; (80068b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	099b      	lsrs	r3, r3, #6
 80067d4:	2200      	movs	r2, #0
 80067d6:	4618      	mov	r0, r3
 80067d8:	4611      	mov	r1, r2
 80067da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80067de:	623b      	str	r3, [r7, #32]
 80067e0:	2300      	movs	r3, #0
 80067e2:	627b      	str	r3, [r7, #36]	; 0x24
 80067e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80067e8:	4642      	mov	r2, r8
 80067ea:	464b      	mov	r3, r9
 80067ec:	f04f 0000 	mov.w	r0, #0
 80067f0:	f04f 0100 	mov.w	r1, #0
 80067f4:	0159      	lsls	r1, r3, #5
 80067f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067fa:	0150      	lsls	r0, r2, #5
 80067fc:	4602      	mov	r2, r0
 80067fe:	460b      	mov	r3, r1
 8006800:	4641      	mov	r1, r8
 8006802:	ebb2 0a01 	subs.w	sl, r2, r1
 8006806:	4649      	mov	r1, r9
 8006808:	eb63 0b01 	sbc.w	fp, r3, r1
 800680c:	f04f 0200 	mov.w	r2, #0
 8006810:	f04f 0300 	mov.w	r3, #0
 8006814:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006818:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800681c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006820:	ebb2 040a 	subs.w	r4, r2, sl
 8006824:	eb63 050b 	sbc.w	r5, r3, fp
 8006828:	f04f 0200 	mov.w	r2, #0
 800682c:	f04f 0300 	mov.w	r3, #0
 8006830:	00eb      	lsls	r3, r5, #3
 8006832:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006836:	00e2      	lsls	r2, r4, #3
 8006838:	4614      	mov	r4, r2
 800683a:	461d      	mov	r5, r3
 800683c:	4643      	mov	r3, r8
 800683e:	18e3      	adds	r3, r4, r3
 8006840:	603b      	str	r3, [r7, #0]
 8006842:	464b      	mov	r3, r9
 8006844:	eb45 0303 	adc.w	r3, r5, r3
 8006848:	607b      	str	r3, [r7, #4]
 800684a:	f04f 0200 	mov.w	r2, #0
 800684e:	f04f 0300 	mov.w	r3, #0
 8006852:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006856:	4629      	mov	r1, r5
 8006858:	028b      	lsls	r3, r1, #10
 800685a:	4621      	mov	r1, r4
 800685c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006860:	4621      	mov	r1, r4
 8006862:	028a      	lsls	r2, r1, #10
 8006864:	4610      	mov	r0, r2
 8006866:	4619      	mov	r1, r3
 8006868:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800686a:	2200      	movs	r2, #0
 800686c:	61bb      	str	r3, [r7, #24]
 800686e:	61fa      	str	r2, [r7, #28]
 8006870:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006874:	f7f9 fd0c 	bl	8000290 <__aeabi_uldivmod>
 8006878:	4602      	mov	r2, r0
 800687a:	460b      	mov	r3, r1
 800687c:	4613      	mov	r3, r2
 800687e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006880:	4b0b      	ldr	r3, [pc, #44]	; (80068b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	0c1b      	lsrs	r3, r3, #16
 8006886:	f003 0303 	and.w	r3, r3, #3
 800688a:	3301      	adds	r3, #1
 800688c:	005b      	lsls	r3, r3, #1
 800688e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006890:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006894:	fbb2 f3f3 	udiv	r3, r2, r3
 8006898:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800689a:	e002      	b.n	80068a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800689c:	4b05      	ldr	r3, [pc, #20]	; (80068b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800689e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80068a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3750      	adds	r7, #80	; 0x50
 80068a8:	46bd      	mov	sp, r7
 80068aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068ae:	bf00      	nop
 80068b0:	40023800 	.word	0x40023800
 80068b4:	00f42400 	.word	0x00f42400
 80068b8:	007a1200 	.word	0x007a1200

080068bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068bc:	b480      	push	{r7}
 80068be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068c0:	4b03      	ldr	r3, [pc, #12]	; (80068d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80068c2:	681b      	ldr	r3, [r3, #0]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr
 80068ce:	bf00      	nop
 80068d0:	20000000 	.word	0x20000000

080068d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80068d8:	f7ff fff0 	bl	80068bc <HAL_RCC_GetHCLKFreq>
 80068dc:	4602      	mov	r2, r0
 80068de:	4b05      	ldr	r3, [pc, #20]	; (80068f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	0a9b      	lsrs	r3, r3, #10
 80068e4:	f003 0307 	and.w	r3, r3, #7
 80068e8:	4903      	ldr	r1, [pc, #12]	; (80068f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068ea:	5ccb      	ldrb	r3, [r1, r3]
 80068ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	40023800 	.word	0x40023800
 80068f8:	0800a9e4 	.word	0x0800a9e4

080068fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006900:	f7ff ffdc 	bl	80068bc <HAL_RCC_GetHCLKFreq>
 8006904:	4602      	mov	r2, r0
 8006906:	4b05      	ldr	r3, [pc, #20]	; (800691c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	0b5b      	lsrs	r3, r3, #13
 800690c:	f003 0307 	and.w	r3, r3, #7
 8006910:	4903      	ldr	r1, [pc, #12]	; (8006920 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006912:	5ccb      	ldrb	r3, [r1, r3]
 8006914:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006918:	4618      	mov	r0, r3
 800691a:	bd80      	pop	{r7, pc}
 800691c:	40023800 	.word	0x40023800
 8006920:	0800a9e4 	.word	0x0800a9e4

08006924 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
 800692c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	220f      	movs	r2, #15
 8006932:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006934:	4b12      	ldr	r3, [pc, #72]	; (8006980 <HAL_RCC_GetClockConfig+0x5c>)
 8006936:	689b      	ldr	r3, [r3, #8]
 8006938:	f003 0203 	and.w	r2, r3, #3
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006940:	4b0f      	ldr	r3, [pc, #60]	; (8006980 <HAL_RCC_GetClockConfig+0x5c>)
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800694c:	4b0c      	ldr	r3, [pc, #48]	; (8006980 <HAL_RCC_GetClockConfig+0x5c>)
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006958:	4b09      	ldr	r3, [pc, #36]	; (8006980 <HAL_RCC_GetClockConfig+0x5c>)
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	08db      	lsrs	r3, r3, #3
 800695e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006966:	4b07      	ldr	r3, [pc, #28]	; (8006984 <HAL_RCC_GetClockConfig+0x60>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 020f 	and.w	r2, r3, #15
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	601a      	str	r2, [r3, #0]
}
 8006972:	bf00      	nop
 8006974:	370c      	adds	r7, #12
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	40023800 	.word	0x40023800
 8006984:	40023c00 	.word	0x40023c00

08006988 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b086      	sub	sp, #24
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006990:	2300      	movs	r3, #0
 8006992:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006994:	2300      	movs	r3, #0
 8006996:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f003 0301 	and.w	r3, r3, #1
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d10b      	bne.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d105      	bne.n	80069bc <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d075      	beq.n	8006aa8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80069bc:	4b91      	ldr	r3, [pc, #580]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80069be:	2200      	movs	r2, #0
 80069c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80069c2:	f7fc fb37 	bl	8003034 <HAL_GetTick>
 80069c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80069c8:	e008      	b.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80069ca:	f7fc fb33 	bl	8003034 <HAL_GetTick>
 80069ce:	4602      	mov	r2, r0
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	1ad3      	subs	r3, r2, r3
 80069d4:	2b02      	cmp	r3, #2
 80069d6:	d901      	bls.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80069d8:	2303      	movs	r3, #3
 80069da:	e189      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80069dc:	4b8a      	ldr	r3, [pc, #552]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1f0      	bne.n	80069ca <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0301 	and.w	r3, r3, #1
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d009      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	019a      	lsls	r2, r3, #6
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	071b      	lsls	r3, r3, #28
 8006a00:	4981      	ldr	r1, [pc, #516]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a02:	4313      	orrs	r3, r2
 8006a04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f003 0302 	and.w	r3, r3, #2
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d01f      	beq.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006a14:	4b7c      	ldr	r3, [pc, #496]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a1a:	0f1b      	lsrs	r3, r3, #28
 8006a1c:	f003 0307 	and.w	r3, r3, #7
 8006a20:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	019a      	lsls	r2, r3, #6
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	061b      	lsls	r3, r3, #24
 8006a2e:	431a      	orrs	r2, r3
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	071b      	lsls	r3, r3, #28
 8006a34:	4974      	ldr	r1, [pc, #464]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a36:	4313      	orrs	r3, r2
 8006a38:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006a3c:	4b72      	ldr	r3, [pc, #456]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a42:	f023 021f 	bic.w	r2, r3, #31
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	69db      	ldr	r3, [r3, #28]
 8006a4a:	3b01      	subs	r3, #1
 8006a4c:	496e      	ldr	r1, [pc, #440]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d00d      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	019a      	lsls	r2, r3, #6
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	061b      	lsls	r3, r3, #24
 8006a6c:	431a      	orrs	r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	071b      	lsls	r3, r3, #28
 8006a74:	4964      	ldr	r1, [pc, #400]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a76:	4313      	orrs	r3, r2
 8006a78:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006a7c:	4b61      	ldr	r3, [pc, #388]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006a7e:	2201      	movs	r2, #1
 8006a80:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a82:	f7fc fad7 	bl	8003034 <HAL_GetTick>
 8006a86:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a88:	e008      	b.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006a8a:	f7fc fad3 	bl	8003034 <HAL_GetTick>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d901      	bls.n	8006a9c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e129      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a9c:	4b5a      	ldr	r3, [pc, #360]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d0f0      	beq.n	8006a8a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0304 	and.w	r3, r3, #4
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d105      	bne.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d079      	beq.n	8006bb4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006ac0:	4b52      	ldr	r3, [pc, #328]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ac6:	f7fc fab5 	bl	8003034 <HAL_GetTick>
 8006aca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006acc:	e008      	b.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006ace:	f7fc fab1 	bl	8003034 <HAL_GetTick>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	1ad3      	subs	r3, r2, r3
 8006ad8:	2b02      	cmp	r3, #2
 8006ada:	d901      	bls.n	8006ae0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006adc:	2303      	movs	r3, #3
 8006ade:	e107      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006ae0:	4b49      	ldr	r3, [pc, #292]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ae8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006aec:	d0ef      	beq.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0304 	and.w	r3, r3, #4
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d020      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006afa:	4b43      	ldr	r3, [pc, #268]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b00:	0f1b      	lsrs	r3, r3, #28
 8006b02:	f003 0307 	and.w	r3, r3, #7
 8006b06:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	019a      	lsls	r2, r3, #6
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	061b      	lsls	r3, r3, #24
 8006b14:	431a      	orrs	r2, r3
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	071b      	lsls	r3, r3, #28
 8006b1a:	493b      	ldr	r1, [pc, #236]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b1c:	4313      	orrs	r3, r2
 8006b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006b22:	4b39      	ldr	r3, [pc, #228]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b28:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a1b      	ldr	r3, [r3, #32]
 8006b30:	3b01      	subs	r3, #1
 8006b32:	021b      	lsls	r3, r3, #8
 8006b34:	4934      	ldr	r1, [pc, #208]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b36:	4313      	orrs	r3, r2
 8006b38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f003 0308 	and.w	r3, r3, #8
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d01e      	beq.n	8006b86 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006b48:	4b2f      	ldr	r3, [pc, #188]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b4e:	0e1b      	lsrs	r3, r3, #24
 8006b50:	f003 030f 	and.w	r3, r3, #15
 8006b54:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	019a      	lsls	r2, r3, #6
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	061b      	lsls	r3, r3, #24
 8006b60:	431a      	orrs	r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	699b      	ldr	r3, [r3, #24]
 8006b66:	071b      	lsls	r3, r3, #28
 8006b68:	4927      	ldr	r1, [pc, #156]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006b70:	4b25      	ldr	r3, [pc, #148]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7e:	4922      	ldr	r1, [pc, #136]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006b80:	4313      	orrs	r3, r2
 8006b82:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006b86:	4b21      	ldr	r3, [pc, #132]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006b88:	2201      	movs	r2, #1
 8006b8a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006b8c:	f7fc fa52 	bl	8003034 <HAL_GetTick>
 8006b90:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006b92:	e008      	b.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8006b94:	f7fc fa4e 	bl	8003034 <HAL_GetTick>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	1ad3      	subs	r3, r2, r3
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	d901      	bls.n	8006ba6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ba2:	2303      	movs	r3, #3
 8006ba4:	e0a4      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006ba6:	4b18      	ldr	r3, [pc, #96]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006bb2:	d1ef      	bne.n	8006b94 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0320 	and.w	r3, r3, #32
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f000 808b 	beq.w	8006cd8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	60fb      	str	r3, [r7, #12]
 8006bc6:	4b10      	ldr	r3, [pc, #64]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bca:	4a0f      	ldr	r2, [pc, #60]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8006bd2:	4b0d      	ldr	r3, [pc, #52]	; (8006c08 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bda:	60fb      	str	r3, [r7, #12]
 8006bdc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006bde:	4b0c      	ldr	r3, [pc, #48]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a0b      	ldr	r2, [pc, #44]	; (8006c10 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8006be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006be8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006bea:	f7fc fa23 	bl	8003034 <HAL_GetTick>
 8006bee:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006bf0:	e010      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006bf2:	f7fc fa1f 	bl	8003034 <HAL_GetTick>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	2b02      	cmp	r3, #2
 8006bfe:	d909      	bls.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e075      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8006c04:	42470068 	.word	0x42470068
 8006c08:	40023800 	.word	0x40023800
 8006c0c:	42470070 	.word	0x42470070
 8006c10:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006c14:	4b38      	ldr	r3, [pc, #224]	; (8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d0e8      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c20:	4b36      	ldr	r3, [pc, #216]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c28:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d02f      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c38:	693a      	ldr	r2, [r7, #16]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d028      	beq.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c3e:	4b2f      	ldr	r3, [pc, #188]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c46:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c48:	4b2d      	ldr	r3, [pc, #180]	; (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c4e:	4b2c      	ldr	r3, [pc, #176]	; (8006d00 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006c50:	2200      	movs	r2, #0
 8006c52:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006c54:	4a29      	ldr	r2, [pc, #164]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006c5a:	4b28      	ldr	r3, [pc, #160]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d114      	bne.n	8006c90 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006c66:	f7fc f9e5 	bl	8003034 <HAL_GetTick>
 8006c6a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c6c:	e00a      	b.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c6e:	f7fc f9e1 	bl	8003034 <HAL_GetTick>
 8006c72:	4602      	mov	r2, r0
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d901      	bls.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006c80:	2303      	movs	r3, #3
 8006c82:	e035      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c84:	4b1d      	ldr	r3, [pc, #116]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c88:	f003 0302 	and.w	r3, r3, #2
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d0ee      	beq.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c9c:	d10d      	bne.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006c9e:	4b17      	ldr	r3, [pc, #92]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006caa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006cae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cb2:	4912      	ldr	r1, [pc, #72]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	608b      	str	r3, [r1, #8]
 8006cb8:	e005      	b.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006cba:	4b10      	ldr	r3, [pc, #64]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	4a0f      	ldr	r2, [pc, #60]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006cc0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006cc4:	6093      	str	r3, [r2, #8]
 8006cc6:	4b0d      	ldr	r3, [pc, #52]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006cc8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006cd2:	490a      	ldr	r1, [pc, #40]	; (8006cfc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0310 	and.w	r3, r3, #16
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d004      	beq.n	8006cee <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8006cea:	4b06      	ldr	r3, [pc, #24]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8006cec:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3718      	adds	r7, #24
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	40007000 	.word	0x40007000
 8006cfc:	40023800 	.word	0x40023800
 8006d00:	42470e40 	.word	0x42470e40
 8006d04:	424711e0 	.word	0x424711e0

08006d08 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d101      	bne.n	8006d1c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e025      	b.n	8006d68 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d106      	bne.n	8006d36 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f7fa fc21 	bl	8001578 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2202      	movs	r2, #2
 8006d3a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681a      	ldr	r2, [r3, #0]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	3304      	adds	r3, #4
 8006d46:	4619      	mov	r1, r3
 8006d48:	4610      	mov	r0, r2
 8006d4a:	f001 fbbd 	bl	80084c8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6818      	ldr	r0, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	461a      	mov	r2, r3
 8006d58:	6839      	ldr	r1, [r7, #0]
 8006d5a:	f001 fc12 	bl	8008582 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006d66:	2300      	movs	r3, #0
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3708      	adds	r7, #8
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006d70:	b580      	push	{r7, lr}
 8006d72:	b086      	sub	sp, #24
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006d82:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006d84:	7dfb      	ldrb	r3, [r7, #23]
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d101      	bne.n	8006d8e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8006d8a:	2302      	movs	r3, #2
 8006d8c:	e021      	b.n	8006dd2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006d8e:	7dfb      	ldrb	r3, [r7, #23]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d002      	beq.n	8006d9a <HAL_SDRAM_SendCommand+0x2a>
 8006d94:	7dfb      	ldrb	r3, [r7, #23]
 8006d96:	2b05      	cmp	r3, #5
 8006d98:	d118      	bne.n	8006dcc <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2202      	movs	r2, #2
 8006d9e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	68b9      	ldr	r1, [r7, #8]
 8006daa:	4618      	mov	r0, r3
 8006dac:	f001 fc52 	bl	8008654 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2b02      	cmp	r3, #2
 8006db6:	d104      	bne.n	8006dc2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2205      	movs	r2, #5
 8006dbc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006dc0:	e006      	b.n	8006dd0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006dca:	e001      	b.n	8006dd0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e000      	b.n	8006dd2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3718      	adds	r7, #24
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b082      	sub	sp, #8
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	6078      	str	r0, [r7, #4]
 8006de2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d101      	bne.n	8006df4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006df0:	2302      	movs	r3, #2
 8006df2:	e016      	b.n	8006e22 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d10f      	bne.n	8006e20 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2202      	movs	r2, #2
 8006e04:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	6839      	ldr	r1, [r7, #0]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f001 fc5d 	bl	80086ce <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2201      	movs	r2, #1
 8006e18:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	e000      	b.n	8006e22 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3708      	adds	r7, #8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}

08006e2a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b082      	sub	sp, #8
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d101      	bne.n	8006e3c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	e07b      	b.n	8006f34 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d108      	bne.n	8006e56 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	685b      	ldr	r3, [r3, #4]
 8006e48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e4c:	d009      	beq.n	8006e62 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2200      	movs	r2, #0
 8006e52:	61da      	str	r2, [r3, #28]
 8006e54:	e005      	b.n	8006e62 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2200      	movs	r2, #0
 8006e66:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d106      	bne.n	8006e82 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f7fa fa19 	bl	80012b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2202      	movs	r2, #2
 8006e86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e98:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	685b      	ldr	r3, [r3, #4]
 8006e9e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	689b      	ldr	r3, [r3, #8]
 8006ea6:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006eaa:	431a      	orrs	r2, r3
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006eb4:	431a      	orrs	r2, r3
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	691b      	ldr	r3, [r3, #16]
 8006eba:	f003 0302 	and.w	r3, r3, #2
 8006ebe:	431a      	orrs	r2, r3
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	695b      	ldr	r3, [r3, #20]
 8006ec4:	f003 0301 	and.w	r3, r3, #1
 8006ec8:	431a      	orrs	r2, r3
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	699b      	ldr	r3, [r3, #24]
 8006ece:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ed2:	431a      	orrs	r2, r3
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	69db      	ldr	r3, [r3, #28]
 8006ed8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006edc:	431a      	orrs	r2, r3
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a1b      	ldr	r3, [r3, #32]
 8006ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ee6:	ea42 0103 	orr.w	r1, r2, r3
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	430a      	orrs	r2, r1
 8006ef8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	0c1b      	lsrs	r3, r3, #16
 8006f00:	f003 0104 	and.w	r1, r3, #4
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f08:	f003 0210 	and.w	r2, r3, #16
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	430a      	orrs	r2, r1
 8006f12:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	69da      	ldr	r2, [r3, #28]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f22:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3708      	adds	r7, #8
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b082      	sub	sp, #8
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d101      	bne.n	8006f4e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e01a      	b.n	8006f84 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2202      	movs	r2, #2
 8006f52:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f64:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f7fa f9ec 	bl	8001344 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006f82:	2300      	movs	r3, #0
}
 8006f84:	4618      	mov	r0, r3
 8006f86:	3708      	adds	r7, #8
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}

08006f8c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b088      	sub	sp, #32
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	603b      	str	r3, [r7, #0]
 8006f98:	4613      	mov	r3, r2
 8006f9a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d101      	bne.n	8006fae <HAL_SPI_Transmit+0x22>
 8006faa:	2302      	movs	r3, #2
 8006fac:	e126      	b.n	80071fc <HAL_SPI_Transmit+0x270>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fb6:	f7fc f83d 	bl	8003034 <HAL_GetTick>
 8006fba:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006fbc:	88fb      	ldrh	r3, [r7, #6]
 8006fbe:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d002      	beq.n	8006fd2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006fcc:	2302      	movs	r3, #2
 8006fce:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006fd0:	e10b      	b.n	80071ea <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d002      	beq.n	8006fde <HAL_SPI_Transmit+0x52>
 8006fd8:	88fb      	ldrh	r3, [r7, #6]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d102      	bne.n	8006fe4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006fe2:	e102      	b.n	80071ea <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	2203      	movs	r2, #3
 8006fe8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	68ba      	ldr	r2, [r7, #8]
 8006ff6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	88fa      	ldrh	r2, [r7, #6]
 8006ffc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	88fa      	ldrh	r2, [r7, #6]
 8007002:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2200      	movs	r2, #0
 8007008:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2200      	movs	r2, #0
 8007014:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2200      	movs	r2, #0
 8007020:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	689b      	ldr	r3, [r3, #8]
 8007026:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800702a:	d10f      	bne.n	800704c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800703a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800704a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007056:	2b40      	cmp	r3, #64	; 0x40
 8007058:	d007      	beq.n	800706a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007068:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007072:	d14b      	bne.n	800710c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d002      	beq.n	8007082 <HAL_SPI_Transmit+0xf6>
 800707c:	8afb      	ldrh	r3, [r7, #22]
 800707e:	2b01      	cmp	r3, #1
 8007080:	d13e      	bne.n	8007100 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007086:	881a      	ldrh	r2, [r3, #0]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007092:	1c9a      	adds	r2, r3, #2
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800709c:	b29b      	uxth	r3, r3
 800709e:	3b01      	subs	r3, #1
 80070a0:	b29a      	uxth	r2, r3
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80070a6:	e02b      	b.n	8007100 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	f003 0302 	and.w	r3, r3, #2
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d112      	bne.n	80070dc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ba:	881a      	ldrh	r2, [r3, #0]
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c6:	1c9a      	adds	r2, r3, #2
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	3b01      	subs	r3, #1
 80070d4:	b29a      	uxth	r2, r3
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	86da      	strh	r2, [r3, #54]	; 0x36
 80070da:	e011      	b.n	8007100 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070dc:	f7fb ffaa 	bl	8003034 <HAL_GetTick>
 80070e0:	4602      	mov	r2, r0
 80070e2:	69bb      	ldr	r3, [r7, #24]
 80070e4:	1ad3      	subs	r3, r2, r3
 80070e6:	683a      	ldr	r2, [r7, #0]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d803      	bhi.n	80070f4 <HAL_SPI_Transmit+0x168>
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070f2:	d102      	bne.n	80070fa <HAL_SPI_Transmit+0x16e>
 80070f4:	683b      	ldr	r3, [r7, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d102      	bne.n	8007100 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80070fe:	e074      	b.n	80071ea <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007104:	b29b      	uxth	r3, r3
 8007106:	2b00      	cmp	r3, #0
 8007108:	d1ce      	bne.n	80070a8 <HAL_SPI_Transmit+0x11c>
 800710a:	e04c      	b.n	80071a6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d002      	beq.n	800711a <HAL_SPI_Transmit+0x18e>
 8007114:	8afb      	ldrh	r3, [r7, #22]
 8007116:	2b01      	cmp	r3, #1
 8007118:	d140      	bne.n	800719c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	330c      	adds	r3, #12
 8007124:	7812      	ldrb	r2, [r2, #0]
 8007126:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800712c:	1c5a      	adds	r2, r3, #1
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007136:	b29b      	uxth	r3, r3
 8007138:	3b01      	subs	r3, #1
 800713a:	b29a      	uxth	r2, r3
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007140:	e02c      	b.n	800719c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	f003 0302 	and.w	r3, r3, #2
 800714c:	2b02      	cmp	r3, #2
 800714e:	d113      	bne.n	8007178 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	330c      	adds	r3, #12
 800715a:	7812      	ldrb	r2, [r2, #0]
 800715c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007162:	1c5a      	adds	r2, r3, #1
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800716c:	b29b      	uxth	r3, r3
 800716e:	3b01      	subs	r3, #1
 8007170:	b29a      	uxth	r2, r3
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	86da      	strh	r2, [r3, #54]	; 0x36
 8007176:	e011      	b.n	800719c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007178:	f7fb ff5c 	bl	8003034 <HAL_GetTick>
 800717c:	4602      	mov	r2, r0
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	1ad3      	subs	r3, r2, r3
 8007182:	683a      	ldr	r2, [r7, #0]
 8007184:	429a      	cmp	r2, r3
 8007186:	d803      	bhi.n	8007190 <HAL_SPI_Transmit+0x204>
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800718e:	d102      	bne.n	8007196 <HAL_SPI_Transmit+0x20a>
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d102      	bne.n	800719c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8007196:	2303      	movs	r3, #3
 8007198:	77fb      	strb	r3, [r7, #31]
          goto error;
 800719a:	e026      	b.n	80071ea <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071a0:	b29b      	uxth	r3, r3
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d1cd      	bne.n	8007142 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071a6:	69ba      	ldr	r2, [r7, #24]
 80071a8:	6839      	ldr	r1, [r7, #0]
 80071aa:	68f8      	ldr	r0, [r7, #12]
 80071ac:	f000 fbda 	bl	8007964 <SPI_EndRxTxTransaction>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d002      	beq.n	80071bc <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2220      	movs	r2, #32
 80071ba:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d10a      	bne.n	80071da <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80071c4:	2300      	movs	r3, #0
 80071c6:	613b      	str	r3, [r7, #16]
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	613b      	str	r3, [r7, #16]
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	613b      	str	r3, [r7, #16]
 80071d8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d002      	beq.n	80071e8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	77fb      	strb	r3, [r7, #31]
 80071e6:	e000      	b.n	80071ea <HAL_SPI_Transmit+0x25e>
  }

error:
 80071e8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2201      	movs	r2, #1
 80071ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80071fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3720      	adds	r7, #32
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b088      	sub	sp, #32
 8007208:	af02      	add	r7, sp, #8
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	603b      	str	r3, [r7, #0]
 8007210:	4613      	mov	r3, r2
 8007212:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007214:	2300      	movs	r3, #0
 8007216:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007220:	d112      	bne.n	8007248 <HAL_SPI_Receive+0x44>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d10e      	bne.n	8007248 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2204      	movs	r2, #4
 800722e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007232:	88fa      	ldrh	r2, [r7, #6]
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	9300      	str	r3, [sp, #0]
 8007238:	4613      	mov	r3, r2
 800723a:	68ba      	ldr	r2, [r7, #8]
 800723c:	68b9      	ldr	r1, [r7, #8]
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	f000 f8f1 	bl	8007426 <HAL_SPI_TransmitReceive>
 8007244:	4603      	mov	r3, r0
 8007246:	e0ea      	b.n	800741e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800724e:	2b01      	cmp	r3, #1
 8007250:	d101      	bne.n	8007256 <HAL_SPI_Receive+0x52>
 8007252:	2302      	movs	r3, #2
 8007254:	e0e3      	b.n	800741e <HAL_SPI_Receive+0x21a>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2201      	movs	r2, #1
 800725a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800725e:	f7fb fee9 	bl	8003034 <HAL_GetTick>
 8007262:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800726a:	b2db      	uxtb	r3, r3
 800726c:	2b01      	cmp	r3, #1
 800726e:	d002      	beq.n	8007276 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007270:	2302      	movs	r3, #2
 8007272:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007274:	e0ca      	b.n	800740c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d002      	beq.n	8007282 <HAL_SPI_Receive+0x7e>
 800727c:	88fb      	ldrh	r3, [r7, #6]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d102      	bne.n	8007288 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007282:	2301      	movs	r3, #1
 8007284:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007286:	e0c1      	b.n	800740c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	2204      	movs	r2, #4
 800728c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2200      	movs	r2, #0
 8007294:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	68ba      	ldr	r2, [r7, #8]
 800729a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	88fa      	ldrh	r2, [r7, #6]
 80072a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	88fa      	ldrh	r2, [r7, #6]
 80072a6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2200      	movs	r2, #0
 80072ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2200      	movs	r2, #0
 80072b8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	2200      	movs	r2, #0
 80072be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072ce:	d10f      	bne.n	80072f0 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072de:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80072ee:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072fa:	2b40      	cmp	r3, #64	; 0x40
 80072fc:	d007      	beq.n	800730e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800730c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d162      	bne.n	80073dc <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007316:	e02e      	b.n	8007376 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	f003 0301 	and.w	r3, r3, #1
 8007322:	2b01      	cmp	r3, #1
 8007324:	d115      	bne.n	8007352 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f103 020c 	add.w	r2, r3, #12
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007332:	7812      	ldrb	r2, [r2, #0]
 8007334:	b2d2      	uxtb	r2, r2
 8007336:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800733c:	1c5a      	adds	r2, r3, #1
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007346:	b29b      	uxth	r3, r3
 8007348:	3b01      	subs	r3, #1
 800734a:	b29a      	uxth	r2, r3
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007350:	e011      	b.n	8007376 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007352:	f7fb fe6f 	bl	8003034 <HAL_GetTick>
 8007356:	4602      	mov	r2, r0
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	1ad3      	subs	r3, r2, r3
 800735c:	683a      	ldr	r2, [r7, #0]
 800735e:	429a      	cmp	r2, r3
 8007360:	d803      	bhi.n	800736a <HAL_SPI_Receive+0x166>
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007368:	d102      	bne.n	8007370 <HAL_SPI_Receive+0x16c>
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d102      	bne.n	8007376 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007370:	2303      	movs	r3, #3
 8007372:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007374:	e04a      	b.n	800740c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800737a:	b29b      	uxth	r3, r3
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1cb      	bne.n	8007318 <HAL_SPI_Receive+0x114>
 8007380:	e031      	b.n	80073e6 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	689b      	ldr	r3, [r3, #8]
 8007388:	f003 0301 	and.w	r3, r3, #1
 800738c:	2b01      	cmp	r3, #1
 800738e:	d113      	bne.n	80073b8 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68da      	ldr	r2, [r3, #12]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739a:	b292      	uxth	r2, r2
 800739c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a2:	1c9a      	adds	r2, r3, #2
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073ac:	b29b      	uxth	r3, r3
 80073ae:	3b01      	subs	r3, #1
 80073b0:	b29a      	uxth	r2, r3
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80073b6:	e011      	b.n	80073dc <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073b8:	f7fb fe3c 	bl	8003034 <HAL_GetTick>
 80073bc:	4602      	mov	r2, r0
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	1ad3      	subs	r3, r2, r3
 80073c2:	683a      	ldr	r2, [r7, #0]
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d803      	bhi.n	80073d0 <HAL_SPI_Receive+0x1cc>
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073ce:	d102      	bne.n	80073d6 <HAL_SPI_Receive+0x1d2>
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d102      	bne.n	80073dc <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80073d6:	2303      	movs	r3, #3
 80073d8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80073da:	e017      	b.n	800740c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1cd      	bne.n	8007382 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80073e6:	693a      	ldr	r2, [r7, #16]
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	68f8      	ldr	r0, [r7, #12]
 80073ec:	f000 fa54 	bl	8007898 <SPI_EndRxTransaction>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d002      	beq.n	80073fc <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2220      	movs	r2, #32
 80073fa:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007400:	2b00      	cmp	r3, #0
 8007402:	d002      	beq.n	800740a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8007404:	2301      	movs	r3, #1
 8007406:	75fb      	strb	r3, [r7, #23]
 8007408:	e000      	b.n	800740c <HAL_SPI_Receive+0x208>
  }

error :
 800740a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2200      	movs	r2, #0
 8007418:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800741c:	7dfb      	ldrb	r3, [r7, #23]
}
 800741e:	4618      	mov	r0, r3
 8007420:	3718      	adds	r7, #24
 8007422:	46bd      	mov	sp, r7
 8007424:	bd80      	pop	{r7, pc}

08007426 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007426:	b580      	push	{r7, lr}
 8007428:	b08c      	sub	sp, #48	; 0x30
 800742a:	af00      	add	r7, sp, #0
 800742c:	60f8      	str	r0, [r7, #12]
 800742e:	60b9      	str	r1, [r7, #8]
 8007430:	607a      	str	r2, [r7, #4]
 8007432:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007434:	2301      	movs	r3, #1
 8007436:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007438:	2300      	movs	r3, #0
 800743a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007444:	2b01      	cmp	r3, #1
 8007446:	d101      	bne.n	800744c <HAL_SPI_TransmitReceive+0x26>
 8007448:	2302      	movs	r3, #2
 800744a:	e18a      	b.n	8007762 <HAL_SPI_TransmitReceive+0x33c>
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007454:	f7fb fdee 	bl	8003034 <HAL_GetTick>
 8007458:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007460:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800746a:	887b      	ldrh	r3, [r7, #2]
 800746c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800746e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007472:	2b01      	cmp	r3, #1
 8007474:	d00f      	beq.n	8007496 <HAL_SPI_TransmitReceive+0x70>
 8007476:	69fb      	ldr	r3, [r7, #28]
 8007478:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800747c:	d107      	bne.n	800748e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d103      	bne.n	800748e <HAL_SPI_TransmitReceive+0x68>
 8007486:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800748a:	2b04      	cmp	r3, #4
 800748c:	d003      	beq.n	8007496 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800748e:	2302      	movs	r3, #2
 8007490:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007494:	e15b      	b.n	800774e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d005      	beq.n	80074a8 <HAL_SPI_TransmitReceive+0x82>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d002      	beq.n	80074a8 <HAL_SPI_TransmitReceive+0x82>
 80074a2:	887b      	ldrh	r3, [r7, #2]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d103      	bne.n	80074b0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80074ae:	e14e      	b.n	800774e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074b6:	b2db      	uxtb	r3, r3
 80074b8:	2b04      	cmp	r3, #4
 80074ba:	d003      	beq.n	80074c4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2205      	movs	r2, #5
 80074c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2200      	movs	r2, #0
 80074c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	887a      	ldrh	r2, [r7, #2]
 80074d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	887a      	ldrh	r2, [r7, #2]
 80074da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	68ba      	ldr	r2, [r7, #8]
 80074e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	887a      	ldrh	r2, [r7, #2]
 80074e6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	887a      	ldrh	r2, [r7, #2]
 80074ec:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2200      	movs	r2, #0
 80074f8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007504:	2b40      	cmp	r3, #64	; 0x40
 8007506:	d007      	beq.n	8007518 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007516:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	68db      	ldr	r3, [r3, #12]
 800751c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007520:	d178      	bne.n	8007614 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d002      	beq.n	8007530 <HAL_SPI_TransmitReceive+0x10a>
 800752a:	8b7b      	ldrh	r3, [r7, #26]
 800752c:	2b01      	cmp	r3, #1
 800752e:	d166      	bne.n	80075fe <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007534:	881a      	ldrh	r2, [r3, #0]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007540:	1c9a      	adds	r2, r3, #2
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800754a:	b29b      	uxth	r3, r3
 800754c:	3b01      	subs	r3, #1
 800754e:	b29a      	uxth	r2, r3
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007554:	e053      	b.n	80075fe <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	f003 0302 	and.w	r3, r3, #2
 8007560:	2b02      	cmp	r3, #2
 8007562:	d11b      	bne.n	800759c <HAL_SPI_TransmitReceive+0x176>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007568:	b29b      	uxth	r3, r3
 800756a:	2b00      	cmp	r3, #0
 800756c:	d016      	beq.n	800759c <HAL_SPI_TransmitReceive+0x176>
 800756e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007570:	2b01      	cmp	r3, #1
 8007572:	d113      	bne.n	800759c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007578:	881a      	ldrh	r2, [r3, #0]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007584:	1c9a      	adds	r2, r3, #2
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800758e:	b29b      	uxth	r3, r3
 8007590:	3b01      	subs	r3, #1
 8007592:	b29a      	uxth	r2, r3
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007598:	2300      	movs	r3, #0
 800759a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	f003 0301 	and.w	r3, r3, #1
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d119      	bne.n	80075de <HAL_SPI_TransmitReceive+0x1b8>
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075ae:	b29b      	uxth	r3, r3
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d014      	beq.n	80075de <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68da      	ldr	r2, [r3, #12]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075be:	b292      	uxth	r2, r2
 80075c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c6:	1c9a      	adds	r2, r3, #2
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	3b01      	subs	r3, #1
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80075da:	2301      	movs	r3, #1
 80075dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80075de:	f7fb fd29 	bl	8003034 <HAL_GetTick>
 80075e2:	4602      	mov	r2, r0
 80075e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e6:	1ad3      	subs	r3, r2, r3
 80075e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80075ea:	429a      	cmp	r2, r3
 80075ec:	d807      	bhi.n	80075fe <HAL_SPI_TransmitReceive+0x1d8>
 80075ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80075f4:	d003      	beq.n	80075fe <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80075f6:	2303      	movs	r3, #3
 80075f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80075fc:	e0a7      	b.n	800774e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007602:	b29b      	uxth	r3, r3
 8007604:	2b00      	cmp	r3, #0
 8007606:	d1a6      	bne.n	8007556 <HAL_SPI_TransmitReceive+0x130>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800760c:	b29b      	uxth	r3, r3
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1a1      	bne.n	8007556 <HAL_SPI_TransmitReceive+0x130>
 8007612:	e07c      	b.n	800770e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d002      	beq.n	8007622 <HAL_SPI_TransmitReceive+0x1fc>
 800761c:	8b7b      	ldrh	r3, [r7, #26]
 800761e:	2b01      	cmp	r3, #1
 8007620:	d16b      	bne.n	80076fa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	330c      	adds	r3, #12
 800762c:	7812      	ldrb	r2, [r2, #0]
 800762e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007634:	1c5a      	adds	r2, r3, #1
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800763e:	b29b      	uxth	r3, r3
 8007640:	3b01      	subs	r3, #1
 8007642:	b29a      	uxth	r2, r3
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007648:	e057      	b.n	80076fa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	f003 0302 	and.w	r3, r3, #2
 8007654:	2b02      	cmp	r3, #2
 8007656:	d11c      	bne.n	8007692 <HAL_SPI_TransmitReceive+0x26c>
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800765c:	b29b      	uxth	r3, r3
 800765e:	2b00      	cmp	r3, #0
 8007660:	d017      	beq.n	8007692 <HAL_SPI_TransmitReceive+0x26c>
 8007662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007664:	2b01      	cmp	r3, #1
 8007666:	d114      	bne.n	8007692 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	330c      	adds	r3, #12
 8007672:	7812      	ldrb	r2, [r2, #0]
 8007674:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800767a:	1c5a      	adds	r2, r3, #1
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007684:	b29b      	uxth	r3, r3
 8007686:	3b01      	subs	r3, #1
 8007688:	b29a      	uxth	r2, r3
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800768e:	2300      	movs	r3, #0
 8007690:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	689b      	ldr	r3, [r3, #8]
 8007698:	f003 0301 	and.w	r3, r3, #1
 800769c:	2b01      	cmp	r3, #1
 800769e:	d119      	bne.n	80076d4 <HAL_SPI_TransmitReceive+0x2ae>
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076a4:	b29b      	uxth	r3, r3
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d014      	beq.n	80076d4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68da      	ldr	r2, [r3, #12]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b4:	b2d2      	uxtb	r2, r2
 80076b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076bc:	1c5a      	adds	r2, r3, #1
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	3b01      	subs	r3, #1
 80076ca:	b29a      	uxth	r2, r3
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80076d0:	2301      	movs	r3, #1
 80076d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80076d4:	f7fb fcae 	bl	8003034 <HAL_GetTick>
 80076d8:	4602      	mov	r2, r0
 80076da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076dc:	1ad3      	subs	r3, r2, r3
 80076de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d803      	bhi.n	80076ec <HAL_SPI_TransmitReceive+0x2c6>
 80076e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80076ea:	d102      	bne.n	80076f2 <HAL_SPI_TransmitReceive+0x2cc>
 80076ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d103      	bne.n	80076fa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80076f2:	2303      	movs	r3, #3
 80076f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80076f8:	e029      	b.n	800774e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076fe:	b29b      	uxth	r3, r3
 8007700:	2b00      	cmp	r3, #0
 8007702:	d1a2      	bne.n	800764a <HAL_SPI_TransmitReceive+0x224>
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007708:	b29b      	uxth	r3, r3
 800770a:	2b00      	cmp	r3, #0
 800770c:	d19d      	bne.n	800764a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800770e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007710:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007712:	68f8      	ldr	r0, [r7, #12]
 8007714:	f000 f926 	bl	8007964 <SPI_EndRxTxTransaction>
 8007718:	4603      	mov	r3, r0
 800771a:	2b00      	cmp	r3, #0
 800771c:	d006      	beq.n	800772c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	2220      	movs	r2, #32
 8007728:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800772a:	e010      	b.n	800774e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	689b      	ldr	r3, [r3, #8]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d10b      	bne.n	800774c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007734:	2300      	movs	r3, #0
 8007736:	617b      	str	r3, [r7, #20]
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	617b      	str	r3, [r7, #20]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	689b      	ldr	r3, [r3, #8]
 8007746:	617b      	str	r3, [r7, #20]
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	e000      	b.n	800774e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800774c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2201      	movs	r2, #1
 8007752:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2200      	movs	r2, #0
 800775a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800775e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007762:	4618      	mov	r0, r3
 8007764:	3730      	adds	r7, #48	; 0x30
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800776a:	b480      	push	{r7}
 800776c:	b083      	sub	sp, #12
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007778:	b2db      	uxtb	r3, r3
}
 800777a:	4618      	mov	r0, r3
 800777c:	370c      	adds	r7, #12
 800777e:	46bd      	mov	sp, r7
 8007780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007784:	4770      	bx	lr
	...

08007788 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b088      	sub	sp, #32
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	603b      	str	r3, [r7, #0]
 8007794:	4613      	mov	r3, r2
 8007796:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007798:	f7fb fc4c 	bl	8003034 <HAL_GetTick>
 800779c:	4602      	mov	r2, r0
 800779e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a0:	1a9b      	subs	r3, r3, r2
 80077a2:	683a      	ldr	r2, [r7, #0]
 80077a4:	4413      	add	r3, r2
 80077a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80077a8:	f7fb fc44 	bl	8003034 <HAL_GetTick>
 80077ac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80077ae:	4b39      	ldr	r3, [pc, #228]	; (8007894 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	015b      	lsls	r3, r3, #5
 80077b4:	0d1b      	lsrs	r3, r3, #20
 80077b6:	69fa      	ldr	r2, [r7, #28]
 80077b8:	fb02 f303 	mul.w	r3, r2, r3
 80077bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077be:	e054      	b.n	800786a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077c6:	d050      	beq.n	800786a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80077c8:	f7fb fc34 	bl	8003034 <HAL_GetTick>
 80077cc:	4602      	mov	r2, r0
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	1ad3      	subs	r3, r2, r3
 80077d2:	69fa      	ldr	r2, [r7, #28]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d902      	bls.n	80077de <SPI_WaitFlagStateUntilTimeout+0x56>
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d13d      	bne.n	800785a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	685a      	ldr	r2, [r3, #4]
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80077ec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80077f6:	d111      	bne.n	800781c <SPI_WaitFlagStateUntilTimeout+0x94>
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	689b      	ldr	r3, [r3, #8]
 80077fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007800:	d004      	beq.n	800780c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800780a:	d107      	bne.n	800781c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800781a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007824:	d10f      	bne.n	8007846 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007834:	601a      	str	r2, [r3, #0]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007844:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2201      	movs	r2, #1
 800784a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2200      	movs	r2, #0
 8007852:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007856:	2303      	movs	r3, #3
 8007858:	e017      	b.n	800788a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d101      	bne.n	8007864 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007860:	2300      	movs	r3, #0
 8007862:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	3b01      	subs	r3, #1
 8007868:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	689a      	ldr	r2, [r3, #8]
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	4013      	ands	r3, r2
 8007874:	68ba      	ldr	r2, [r7, #8]
 8007876:	429a      	cmp	r2, r3
 8007878:	bf0c      	ite	eq
 800787a:	2301      	moveq	r3, #1
 800787c:	2300      	movne	r3, #0
 800787e:	b2db      	uxtb	r3, r3
 8007880:	461a      	mov	r2, r3
 8007882:	79fb      	ldrb	r3, [r7, #7]
 8007884:	429a      	cmp	r2, r3
 8007886:	d19b      	bne.n	80077c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007888:	2300      	movs	r3, #0
}
 800788a:	4618      	mov	r0, r3
 800788c:	3720      	adds	r7, #32
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
 8007892:	bf00      	nop
 8007894:	20000000 	.word	0x20000000

08007898 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b086      	sub	sp, #24
 800789c:	af02      	add	r7, sp, #8
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078ac:	d111      	bne.n	80078d2 <SPI_EndRxTransaction+0x3a>
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	689b      	ldr	r3, [r3, #8]
 80078b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80078b6:	d004      	beq.n	80078c2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078c0:	d107      	bne.n	80078d2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681a      	ldr	r2, [r3, #0]
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80078d0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	685b      	ldr	r3, [r3, #4]
 80078d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80078da:	d12a      	bne.n	8007932 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078e4:	d012      	beq.n	800790c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	9300      	str	r3, [sp, #0]
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	2200      	movs	r2, #0
 80078ee:	2180      	movs	r1, #128	; 0x80
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	f7ff ff49 	bl	8007788 <SPI_WaitFlagStateUntilTimeout>
 80078f6:	4603      	mov	r3, r0
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d02d      	beq.n	8007958 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007900:	f043 0220 	orr.w	r2, r3, #32
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007908:	2303      	movs	r3, #3
 800790a:	e026      	b.n	800795a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	9300      	str	r3, [sp, #0]
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	2200      	movs	r2, #0
 8007914:	2101      	movs	r1, #1
 8007916:	68f8      	ldr	r0, [r7, #12]
 8007918:	f7ff ff36 	bl	8007788 <SPI_WaitFlagStateUntilTimeout>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d01a      	beq.n	8007958 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007926:	f043 0220 	orr.w	r2, r3, #32
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800792e:	2303      	movs	r3, #3
 8007930:	e013      	b.n	800795a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	9300      	str	r3, [sp, #0]
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	2200      	movs	r2, #0
 800793a:	2101      	movs	r1, #1
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f7ff ff23 	bl	8007788 <SPI_WaitFlagStateUntilTimeout>
 8007942:	4603      	mov	r3, r0
 8007944:	2b00      	cmp	r3, #0
 8007946:	d007      	beq.n	8007958 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800794c:	f043 0220 	orr.w	r2, r3, #32
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007954:	2303      	movs	r3, #3
 8007956:	e000      	b.n	800795a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007958:	2300      	movs	r3, #0
}
 800795a:	4618      	mov	r0, r3
 800795c:	3710      	adds	r7, #16
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
	...

08007964 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b088      	sub	sp, #32
 8007968:	af02      	add	r7, sp, #8
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007970:	4b1b      	ldr	r3, [pc, #108]	; (80079e0 <SPI_EndRxTxTransaction+0x7c>)
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	4a1b      	ldr	r2, [pc, #108]	; (80079e4 <SPI_EndRxTxTransaction+0x80>)
 8007976:	fba2 2303 	umull	r2, r3, r2, r3
 800797a:	0d5b      	lsrs	r3, r3, #21
 800797c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007980:	fb02 f303 	mul.w	r3, r2, r3
 8007984:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800798e:	d112      	bne.n	80079b6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	9300      	str	r3, [sp, #0]
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	2200      	movs	r2, #0
 8007998:	2180      	movs	r1, #128	; 0x80
 800799a:	68f8      	ldr	r0, [r7, #12]
 800799c:	f7ff fef4 	bl	8007788 <SPI_WaitFlagStateUntilTimeout>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d016      	beq.n	80079d4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079aa:	f043 0220 	orr.w	r2, r3, #32
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80079b2:	2303      	movs	r3, #3
 80079b4:	e00f      	b.n	80079d6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00a      	beq.n	80079d2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	3b01      	subs	r3, #1
 80079c0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079cc:	2b80      	cmp	r3, #128	; 0x80
 80079ce:	d0f2      	beq.n	80079b6 <SPI_EndRxTxTransaction+0x52>
 80079d0:	e000      	b.n	80079d4 <SPI_EndRxTxTransaction+0x70>
        break;
 80079d2:	bf00      	nop
  }

  return HAL_OK;
 80079d4:	2300      	movs	r3, #0
}
 80079d6:	4618      	mov	r0, r3
 80079d8:	3718      	adds	r7, #24
 80079da:	46bd      	mov	sp, r7
 80079dc:	bd80      	pop	{r7, pc}
 80079de:	bf00      	nop
 80079e0:	20000000 	.word	0x20000000
 80079e4:	165e9f81 	.word	0x165e9f81

080079e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b082      	sub	sp, #8
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d101      	bne.n	80079fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e041      	b.n	8007a7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d106      	bne.n	8007a14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f7f9 fcb6 	bl	8001380 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2202      	movs	r2, #2
 8007a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	3304      	adds	r3, #4
 8007a24:	4619      	mov	r1, r3
 8007a26:	4610      	mov	r0, r2
 8007a28:	f000 f9d8 	bl	8007ddc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	2201      	movs	r2, #1
 8007a60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2201      	movs	r2, #1
 8007a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007a7c:	2300      	movs	r3, #0
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3708      	adds	r7, #8
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
	...

08007a88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a96:	b2db      	uxtb	r3, r3
 8007a98:	2b01      	cmp	r3, #1
 8007a9a:	d001      	beq.n	8007aa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e04e      	b.n	8007b3e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2202      	movs	r2, #2
 8007aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68da      	ldr	r2, [r3, #12]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f042 0201 	orr.w	r2, r2, #1
 8007ab6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	4a23      	ldr	r2, [pc, #140]	; (8007b4c <HAL_TIM_Base_Start_IT+0xc4>)
 8007abe:	4293      	cmp	r3, r2
 8007ac0:	d022      	beq.n	8007b08 <HAL_TIM_Base_Start_IT+0x80>
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007aca:	d01d      	beq.n	8007b08 <HAL_TIM_Base_Start_IT+0x80>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	4a1f      	ldr	r2, [pc, #124]	; (8007b50 <HAL_TIM_Base_Start_IT+0xc8>)
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d018      	beq.n	8007b08 <HAL_TIM_Base_Start_IT+0x80>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a1e      	ldr	r2, [pc, #120]	; (8007b54 <HAL_TIM_Base_Start_IT+0xcc>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d013      	beq.n	8007b08 <HAL_TIM_Base_Start_IT+0x80>
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	4a1c      	ldr	r2, [pc, #112]	; (8007b58 <HAL_TIM_Base_Start_IT+0xd0>)
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d00e      	beq.n	8007b08 <HAL_TIM_Base_Start_IT+0x80>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a1b      	ldr	r2, [pc, #108]	; (8007b5c <HAL_TIM_Base_Start_IT+0xd4>)
 8007af0:	4293      	cmp	r3, r2
 8007af2:	d009      	beq.n	8007b08 <HAL_TIM_Base_Start_IT+0x80>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	4a19      	ldr	r2, [pc, #100]	; (8007b60 <HAL_TIM_Base_Start_IT+0xd8>)
 8007afa:	4293      	cmp	r3, r2
 8007afc:	d004      	beq.n	8007b08 <HAL_TIM_Base_Start_IT+0x80>
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a18      	ldr	r2, [pc, #96]	; (8007b64 <HAL_TIM_Base_Start_IT+0xdc>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d111      	bne.n	8007b2c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	f003 0307 	and.w	r3, r3, #7
 8007b12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2b06      	cmp	r3, #6
 8007b18:	d010      	beq.n	8007b3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f042 0201 	orr.w	r2, r2, #1
 8007b28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b2a:	e007      	b.n	8007b3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f042 0201 	orr.w	r2, r2, #1
 8007b3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007b3c:	2300      	movs	r3, #0
}
 8007b3e:	4618      	mov	r0, r3
 8007b40:	3714      	adds	r7, #20
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	40010000 	.word	0x40010000
 8007b50:	40000400 	.word	0x40000400
 8007b54:	40000800 	.word	0x40000800
 8007b58:	40000c00 	.word	0x40000c00
 8007b5c:	40010400 	.word	0x40010400
 8007b60:	40014000 	.word	0x40014000
 8007b64:	40001800 	.word	0x40001800

08007b68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b082      	sub	sp, #8
 8007b6c:	af00      	add	r7, sp, #0
 8007b6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	f003 0302 	and.w	r3, r3, #2
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d122      	bne.n	8007bc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	f003 0302 	and.w	r3, r3, #2
 8007b88:	2b02      	cmp	r3, #2
 8007b8a:	d11b      	bne.n	8007bc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	f06f 0202 	mvn.w	r2, #2
 8007b94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2201      	movs	r2, #1
 8007b9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	699b      	ldr	r3, [r3, #24]
 8007ba2:	f003 0303 	and.w	r3, r3, #3
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d003      	beq.n	8007bb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f8f8 	bl	8007da0 <HAL_TIM_IC_CaptureCallback>
 8007bb0:	e005      	b.n	8007bbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 f8ea 	bl	8007d8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bb8:	6878      	ldr	r0, [r7, #4]
 8007bba:	f000 f8fb 	bl	8007db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	691b      	ldr	r3, [r3, #16]
 8007bca:	f003 0304 	and.w	r3, r3, #4
 8007bce:	2b04      	cmp	r3, #4
 8007bd0:	d122      	bne.n	8007c18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68db      	ldr	r3, [r3, #12]
 8007bd8:	f003 0304 	and.w	r3, r3, #4
 8007bdc:	2b04      	cmp	r3, #4
 8007bde:	d11b      	bne.n	8007c18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f06f 0204 	mvn.w	r2, #4
 8007be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2202      	movs	r2, #2
 8007bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	699b      	ldr	r3, [r3, #24]
 8007bf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d003      	beq.n	8007c06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f000 f8ce 	bl	8007da0 <HAL_TIM_IC_CaptureCallback>
 8007c04:	e005      	b.n	8007c12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c06:	6878      	ldr	r0, [r7, #4]
 8007c08:	f000 f8c0 	bl	8007d8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c0c:	6878      	ldr	r0, [r7, #4]
 8007c0e:	f000 f8d1 	bl	8007db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	2200      	movs	r2, #0
 8007c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	691b      	ldr	r3, [r3, #16]
 8007c1e:	f003 0308 	and.w	r3, r3, #8
 8007c22:	2b08      	cmp	r3, #8
 8007c24:	d122      	bne.n	8007c6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	f003 0308 	and.w	r3, r3, #8
 8007c30:	2b08      	cmp	r3, #8
 8007c32:	d11b      	bne.n	8007c6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f06f 0208 	mvn.w	r2, #8
 8007c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2204      	movs	r2, #4
 8007c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	69db      	ldr	r3, [r3, #28]
 8007c4a:	f003 0303 	and.w	r3, r3, #3
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d003      	beq.n	8007c5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 f8a4 	bl	8007da0 <HAL_TIM_IC_CaptureCallback>
 8007c58:	e005      	b.n	8007c66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f000 f896 	bl	8007d8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 f8a7 	bl	8007db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	691b      	ldr	r3, [r3, #16]
 8007c72:	f003 0310 	and.w	r3, r3, #16
 8007c76:	2b10      	cmp	r3, #16
 8007c78:	d122      	bne.n	8007cc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	68db      	ldr	r3, [r3, #12]
 8007c80:	f003 0310 	and.w	r3, r3, #16
 8007c84:	2b10      	cmp	r3, #16
 8007c86:	d11b      	bne.n	8007cc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f06f 0210 	mvn.w	r2, #16
 8007c90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2208      	movs	r2, #8
 8007c96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	69db      	ldr	r3, [r3, #28]
 8007c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d003      	beq.n	8007cae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f000 f87a 	bl	8007da0 <HAL_TIM_IC_CaptureCallback>
 8007cac:	e005      	b.n	8007cba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f000 f86c 	bl	8007d8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cb4:	6878      	ldr	r0, [r7, #4]
 8007cb6:	f000 f87d 	bl	8007db4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	691b      	ldr	r3, [r3, #16]
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	2b01      	cmp	r3, #1
 8007ccc:	d10e      	bne.n	8007cec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	68db      	ldr	r3, [r3, #12]
 8007cd4:	f003 0301 	and.w	r3, r3, #1
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d107      	bne.n	8007cec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f06f 0201 	mvn.w	r2, #1
 8007ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f000 f846 	bl	8007d78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cf6:	2b80      	cmp	r3, #128	; 0x80
 8007cf8:	d10e      	bne.n	8007d18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d04:	2b80      	cmp	r3, #128	; 0x80
 8007d06:	d107      	bne.n	8007d18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	f000 f90c 	bl	8007f30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	691b      	ldr	r3, [r3, #16]
 8007d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d22:	2b40      	cmp	r3, #64	; 0x40
 8007d24:	d10e      	bne.n	8007d44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d30:	2b40      	cmp	r3, #64	; 0x40
 8007d32:	d107      	bne.n	8007d44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 f842 	bl	8007dc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	f003 0320 	and.w	r3, r3, #32
 8007d4e:	2b20      	cmp	r3, #32
 8007d50:	d10e      	bne.n	8007d70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	68db      	ldr	r3, [r3, #12]
 8007d58:	f003 0320 	and.w	r3, r3, #32
 8007d5c:	2b20      	cmp	r3, #32
 8007d5e:	d107      	bne.n	8007d70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f06f 0220 	mvn.w	r2, #32
 8007d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 f8d6 	bl	8007f1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d70:	bf00      	nop
 8007d72:	3708      	adds	r7, #8
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007da8:	bf00      	nop
 8007daa:	370c      	adds	r7, #12
 8007dac:	46bd      	mov	sp, r7
 8007dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db2:	4770      	bx	lr

08007db4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b083      	sub	sp, #12
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007dbc:	bf00      	nop
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007dd0:	bf00      	nop
 8007dd2:	370c      	adds	r7, #12
 8007dd4:	46bd      	mov	sp, r7
 8007dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dda:	4770      	bx	lr

08007ddc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b085      	sub	sp, #20
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
 8007de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	4a40      	ldr	r2, [pc, #256]	; (8007ef0 <TIM_Base_SetConfig+0x114>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d013      	beq.n	8007e1c <TIM_Base_SetConfig+0x40>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dfa:	d00f      	beq.n	8007e1c <TIM_Base_SetConfig+0x40>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4a3d      	ldr	r2, [pc, #244]	; (8007ef4 <TIM_Base_SetConfig+0x118>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d00b      	beq.n	8007e1c <TIM_Base_SetConfig+0x40>
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	4a3c      	ldr	r2, [pc, #240]	; (8007ef8 <TIM_Base_SetConfig+0x11c>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d007      	beq.n	8007e1c <TIM_Base_SetConfig+0x40>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	4a3b      	ldr	r2, [pc, #236]	; (8007efc <TIM_Base_SetConfig+0x120>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d003      	beq.n	8007e1c <TIM_Base_SetConfig+0x40>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4a3a      	ldr	r2, [pc, #232]	; (8007f00 <TIM_Base_SetConfig+0x124>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d108      	bne.n	8007e2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	68fa      	ldr	r2, [r7, #12]
 8007e2a:	4313      	orrs	r3, r2
 8007e2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	4a2f      	ldr	r2, [pc, #188]	; (8007ef0 <TIM_Base_SetConfig+0x114>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d02b      	beq.n	8007e8e <TIM_Base_SetConfig+0xb2>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e3c:	d027      	beq.n	8007e8e <TIM_Base_SetConfig+0xb2>
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	4a2c      	ldr	r2, [pc, #176]	; (8007ef4 <TIM_Base_SetConfig+0x118>)
 8007e42:	4293      	cmp	r3, r2
 8007e44:	d023      	beq.n	8007e8e <TIM_Base_SetConfig+0xb2>
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a2b      	ldr	r2, [pc, #172]	; (8007ef8 <TIM_Base_SetConfig+0x11c>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d01f      	beq.n	8007e8e <TIM_Base_SetConfig+0xb2>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4a2a      	ldr	r2, [pc, #168]	; (8007efc <TIM_Base_SetConfig+0x120>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d01b      	beq.n	8007e8e <TIM_Base_SetConfig+0xb2>
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4a29      	ldr	r2, [pc, #164]	; (8007f00 <TIM_Base_SetConfig+0x124>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d017      	beq.n	8007e8e <TIM_Base_SetConfig+0xb2>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a28      	ldr	r2, [pc, #160]	; (8007f04 <TIM_Base_SetConfig+0x128>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d013      	beq.n	8007e8e <TIM_Base_SetConfig+0xb2>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a27      	ldr	r2, [pc, #156]	; (8007f08 <TIM_Base_SetConfig+0x12c>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d00f      	beq.n	8007e8e <TIM_Base_SetConfig+0xb2>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4a26      	ldr	r2, [pc, #152]	; (8007f0c <TIM_Base_SetConfig+0x130>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d00b      	beq.n	8007e8e <TIM_Base_SetConfig+0xb2>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	4a25      	ldr	r2, [pc, #148]	; (8007f10 <TIM_Base_SetConfig+0x134>)
 8007e7a:	4293      	cmp	r3, r2
 8007e7c:	d007      	beq.n	8007e8e <TIM_Base_SetConfig+0xb2>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	4a24      	ldr	r2, [pc, #144]	; (8007f14 <TIM_Base_SetConfig+0x138>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d003      	beq.n	8007e8e <TIM_Base_SetConfig+0xb2>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	4a23      	ldr	r2, [pc, #140]	; (8007f18 <TIM_Base_SetConfig+0x13c>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d108      	bne.n	8007ea0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	4313      	orrs	r3, r2
 8007e9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	695b      	ldr	r3, [r3, #20]
 8007eaa:	4313      	orrs	r3, r2
 8007eac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	68fa      	ldr	r2, [r7, #12]
 8007eb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	689a      	ldr	r2, [r3, #8]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	681a      	ldr	r2, [r3, #0]
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	4a0a      	ldr	r2, [pc, #40]	; (8007ef0 <TIM_Base_SetConfig+0x114>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d003      	beq.n	8007ed4 <TIM_Base_SetConfig+0xf8>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	4a0c      	ldr	r2, [pc, #48]	; (8007f00 <TIM_Base_SetConfig+0x124>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d103      	bne.n	8007edc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	691a      	ldr	r2, [r3, #16]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	615a      	str	r2, [r3, #20]
}
 8007ee2:	bf00      	nop
 8007ee4:	3714      	adds	r7, #20
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr
 8007eee:	bf00      	nop
 8007ef0:	40010000 	.word	0x40010000
 8007ef4:	40000400 	.word	0x40000400
 8007ef8:	40000800 	.word	0x40000800
 8007efc:	40000c00 	.word	0x40000c00
 8007f00:	40010400 	.word	0x40010400
 8007f04:	40014000 	.word	0x40014000
 8007f08:	40014400 	.word	0x40014400
 8007f0c:	40014800 	.word	0x40014800
 8007f10:	40001800 	.word	0x40001800
 8007f14:	40001c00 	.word	0x40001c00
 8007f18:	40002000 	.word	0x40002000

08007f1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f24:	bf00      	nop
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f38:	bf00      	nop
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007f44:	b580      	push	{r7, lr}
 8007f46:	b082      	sub	sp, #8
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d101      	bne.n	8007f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007f52:	2301      	movs	r3, #1
 8007f54:	e03f      	b.n	8007fd6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d106      	bne.n	8007f70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f7f9 fa2a 	bl	80013c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2224      	movs	r2, #36	; 0x24
 8007f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	68da      	ldr	r2, [r3, #12]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 f829 	bl	8007fe0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	691a      	ldr	r2, [r3, #16]
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	695a      	ldr	r2, [r3, #20]
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007fac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	68da      	ldr	r2, [r3, #12]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007fbc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2220      	movs	r2, #32
 8007fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2220      	movs	r2, #32
 8007fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007fd4:	2300      	movs	r3, #0
}
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	3708      	adds	r7, #8
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	bd80      	pop	{r7, pc}
	...

08007fe0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007fe0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007fe4:	b0c0      	sub	sp, #256	; 0x100
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	691b      	ldr	r3, [r3, #16]
 8007ff4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007ff8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ffc:	68d9      	ldr	r1, [r3, #12]
 8007ffe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	ea40 0301 	orr.w	r3, r0, r1
 8008008:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800800a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800800e:	689a      	ldr	r2, [r3, #8]
 8008010:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008014:	691b      	ldr	r3, [r3, #16]
 8008016:	431a      	orrs	r2, r3
 8008018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800801c:	695b      	ldr	r3, [r3, #20]
 800801e:	431a      	orrs	r2, r3
 8008020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008024:	69db      	ldr	r3, [r3, #28]
 8008026:	4313      	orrs	r3, r2
 8008028:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800802c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	68db      	ldr	r3, [r3, #12]
 8008034:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008038:	f021 010c 	bic.w	r1, r1, #12
 800803c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008040:	681a      	ldr	r2, [r3, #0]
 8008042:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008046:	430b      	orrs	r3, r1
 8008048:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800804a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	695b      	ldr	r3, [r3, #20]
 8008052:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800805a:	6999      	ldr	r1, [r3, #24]
 800805c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	ea40 0301 	orr.w	r3, r0, r1
 8008066:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	4b8f      	ldr	r3, [pc, #572]	; (80082ac <UART_SetConfig+0x2cc>)
 8008070:	429a      	cmp	r2, r3
 8008072:	d005      	beq.n	8008080 <UART_SetConfig+0xa0>
 8008074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008078:	681a      	ldr	r2, [r3, #0]
 800807a:	4b8d      	ldr	r3, [pc, #564]	; (80082b0 <UART_SetConfig+0x2d0>)
 800807c:	429a      	cmp	r2, r3
 800807e:	d104      	bne.n	800808a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008080:	f7fe fc3c 	bl	80068fc <HAL_RCC_GetPCLK2Freq>
 8008084:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008088:	e003      	b.n	8008092 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800808a:	f7fe fc23 	bl	80068d4 <HAL_RCC_GetPCLK1Freq>
 800808e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008096:	69db      	ldr	r3, [r3, #28]
 8008098:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800809c:	f040 810c 	bne.w	80082b8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80080a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80080a4:	2200      	movs	r2, #0
 80080a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80080aa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80080ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80080b2:	4622      	mov	r2, r4
 80080b4:	462b      	mov	r3, r5
 80080b6:	1891      	adds	r1, r2, r2
 80080b8:	65b9      	str	r1, [r7, #88]	; 0x58
 80080ba:	415b      	adcs	r3, r3
 80080bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80080be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80080c2:	4621      	mov	r1, r4
 80080c4:	eb12 0801 	adds.w	r8, r2, r1
 80080c8:	4629      	mov	r1, r5
 80080ca:	eb43 0901 	adc.w	r9, r3, r1
 80080ce:	f04f 0200 	mov.w	r2, #0
 80080d2:	f04f 0300 	mov.w	r3, #0
 80080d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80080da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80080de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80080e2:	4690      	mov	r8, r2
 80080e4:	4699      	mov	r9, r3
 80080e6:	4623      	mov	r3, r4
 80080e8:	eb18 0303 	adds.w	r3, r8, r3
 80080ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80080f0:	462b      	mov	r3, r5
 80080f2:	eb49 0303 	adc.w	r3, r9, r3
 80080f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80080fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80080fe:	685b      	ldr	r3, [r3, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008106:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800810a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800810e:	460b      	mov	r3, r1
 8008110:	18db      	adds	r3, r3, r3
 8008112:	653b      	str	r3, [r7, #80]	; 0x50
 8008114:	4613      	mov	r3, r2
 8008116:	eb42 0303 	adc.w	r3, r2, r3
 800811a:	657b      	str	r3, [r7, #84]	; 0x54
 800811c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008120:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008124:	f7f8 f8b4 	bl	8000290 <__aeabi_uldivmod>
 8008128:	4602      	mov	r2, r0
 800812a:	460b      	mov	r3, r1
 800812c:	4b61      	ldr	r3, [pc, #388]	; (80082b4 <UART_SetConfig+0x2d4>)
 800812e:	fba3 2302 	umull	r2, r3, r3, r2
 8008132:	095b      	lsrs	r3, r3, #5
 8008134:	011c      	lsls	r4, r3, #4
 8008136:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800813a:	2200      	movs	r2, #0
 800813c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008140:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008144:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008148:	4642      	mov	r2, r8
 800814a:	464b      	mov	r3, r9
 800814c:	1891      	adds	r1, r2, r2
 800814e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008150:	415b      	adcs	r3, r3
 8008152:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008154:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008158:	4641      	mov	r1, r8
 800815a:	eb12 0a01 	adds.w	sl, r2, r1
 800815e:	4649      	mov	r1, r9
 8008160:	eb43 0b01 	adc.w	fp, r3, r1
 8008164:	f04f 0200 	mov.w	r2, #0
 8008168:	f04f 0300 	mov.w	r3, #0
 800816c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008170:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008174:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008178:	4692      	mov	sl, r2
 800817a:	469b      	mov	fp, r3
 800817c:	4643      	mov	r3, r8
 800817e:	eb1a 0303 	adds.w	r3, sl, r3
 8008182:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008186:	464b      	mov	r3, r9
 8008188:	eb4b 0303 	adc.w	r3, fp, r3
 800818c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008190:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800819c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80081a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80081a4:	460b      	mov	r3, r1
 80081a6:	18db      	adds	r3, r3, r3
 80081a8:	643b      	str	r3, [r7, #64]	; 0x40
 80081aa:	4613      	mov	r3, r2
 80081ac:	eb42 0303 	adc.w	r3, r2, r3
 80081b0:	647b      	str	r3, [r7, #68]	; 0x44
 80081b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80081b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80081ba:	f7f8 f869 	bl	8000290 <__aeabi_uldivmod>
 80081be:	4602      	mov	r2, r0
 80081c0:	460b      	mov	r3, r1
 80081c2:	4611      	mov	r1, r2
 80081c4:	4b3b      	ldr	r3, [pc, #236]	; (80082b4 <UART_SetConfig+0x2d4>)
 80081c6:	fba3 2301 	umull	r2, r3, r3, r1
 80081ca:	095b      	lsrs	r3, r3, #5
 80081cc:	2264      	movs	r2, #100	; 0x64
 80081ce:	fb02 f303 	mul.w	r3, r2, r3
 80081d2:	1acb      	subs	r3, r1, r3
 80081d4:	00db      	lsls	r3, r3, #3
 80081d6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80081da:	4b36      	ldr	r3, [pc, #216]	; (80082b4 <UART_SetConfig+0x2d4>)
 80081dc:	fba3 2302 	umull	r2, r3, r3, r2
 80081e0:	095b      	lsrs	r3, r3, #5
 80081e2:	005b      	lsls	r3, r3, #1
 80081e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80081e8:	441c      	add	r4, r3
 80081ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081ee:	2200      	movs	r2, #0
 80081f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80081f4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80081f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80081fc:	4642      	mov	r2, r8
 80081fe:	464b      	mov	r3, r9
 8008200:	1891      	adds	r1, r2, r2
 8008202:	63b9      	str	r1, [r7, #56]	; 0x38
 8008204:	415b      	adcs	r3, r3
 8008206:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008208:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800820c:	4641      	mov	r1, r8
 800820e:	1851      	adds	r1, r2, r1
 8008210:	6339      	str	r1, [r7, #48]	; 0x30
 8008212:	4649      	mov	r1, r9
 8008214:	414b      	adcs	r3, r1
 8008216:	637b      	str	r3, [r7, #52]	; 0x34
 8008218:	f04f 0200 	mov.w	r2, #0
 800821c:	f04f 0300 	mov.w	r3, #0
 8008220:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008224:	4659      	mov	r1, fp
 8008226:	00cb      	lsls	r3, r1, #3
 8008228:	4651      	mov	r1, sl
 800822a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800822e:	4651      	mov	r1, sl
 8008230:	00ca      	lsls	r2, r1, #3
 8008232:	4610      	mov	r0, r2
 8008234:	4619      	mov	r1, r3
 8008236:	4603      	mov	r3, r0
 8008238:	4642      	mov	r2, r8
 800823a:	189b      	adds	r3, r3, r2
 800823c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008240:	464b      	mov	r3, r9
 8008242:	460a      	mov	r2, r1
 8008244:	eb42 0303 	adc.w	r3, r2, r3
 8008248:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800824c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008258:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800825c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008260:	460b      	mov	r3, r1
 8008262:	18db      	adds	r3, r3, r3
 8008264:	62bb      	str	r3, [r7, #40]	; 0x28
 8008266:	4613      	mov	r3, r2
 8008268:	eb42 0303 	adc.w	r3, r2, r3
 800826c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800826e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008272:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008276:	f7f8 f80b 	bl	8000290 <__aeabi_uldivmod>
 800827a:	4602      	mov	r2, r0
 800827c:	460b      	mov	r3, r1
 800827e:	4b0d      	ldr	r3, [pc, #52]	; (80082b4 <UART_SetConfig+0x2d4>)
 8008280:	fba3 1302 	umull	r1, r3, r3, r2
 8008284:	095b      	lsrs	r3, r3, #5
 8008286:	2164      	movs	r1, #100	; 0x64
 8008288:	fb01 f303 	mul.w	r3, r1, r3
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	00db      	lsls	r3, r3, #3
 8008290:	3332      	adds	r3, #50	; 0x32
 8008292:	4a08      	ldr	r2, [pc, #32]	; (80082b4 <UART_SetConfig+0x2d4>)
 8008294:	fba2 2303 	umull	r2, r3, r2, r3
 8008298:	095b      	lsrs	r3, r3, #5
 800829a:	f003 0207 	and.w	r2, r3, #7
 800829e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4422      	add	r2, r4
 80082a6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80082a8:	e105      	b.n	80084b6 <UART_SetConfig+0x4d6>
 80082aa:	bf00      	nop
 80082ac:	40011000 	.word	0x40011000
 80082b0:	40011400 	.word	0x40011400
 80082b4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80082b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80082bc:	2200      	movs	r2, #0
 80082be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80082c2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80082c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80082ca:	4642      	mov	r2, r8
 80082cc:	464b      	mov	r3, r9
 80082ce:	1891      	adds	r1, r2, r2
 80082d0:	6239      	str	r1, [r7, #32]
 80082d2:	415b      	adcs	r3, r3
 80082d4:	627b      	str	r3, [r7, #36]	; 0x24
 80082d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80082da:	4641      	mov	r1, r8
 80082dc:	1854      	adds	r4, r2, r1
 80082de:	4649      	mov	r1, r9
 80082e0:	eb43 0501 	adc.w	r5, r3, r1
 80082e4:	f04f 0200 	mov.w	r2, #0
 80082e8:	f04f 0300 	mov.w	r3, #0
 80082ec:	00eb      	lsls	r3, r5, #3
 80082ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80082f2:	00e2      	lsls	r2, r4, #3
 80082f4:	4614      	mov	r4, r2
 80082f6:	461d      	mov	r5, r3
 80082f8:	4643      	mov	r3, r8
 80082fa:	18e3      	adds	r3, r4, r3
 80082fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008300:	464b      	mov	r3, r9
 8008302:	eb45 0303 	adc.w	r3, r5, r3
 8008306:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800830a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008316:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800831a:	f04f 0200 	mov.w	r2, #0
 800831e:	f04f 0300 	mov.w	r3, #0
 8008322:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008326:	4629      	mov	r1, r5
 8008328:	008b      	lsls	r3, r1, #2
 800832a:	4621      	mov	r1, r4
 800832c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008330:	4621      	mov	r1, r4
 8008332:	008a      	lsls	r2, r1, #2
 8008334:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008338:	f7f7 ffaa 	bl	8000290 <__aeabi_uldivmod>
 800833c:	4602      	mov	r2, r0
 800833e:	460b      	mov	r3, r1
 8008340:	4b60      	ldr	r3, [pc, #384]	; (80084c4 <UART_SetConfig+0x4e4>)
 8008342:	fba3 2302 	umull	r2, r3, r3, r2
 8008346:	095b      	lsrs	r3, r3, #5
 8008348:	011c      	lsls	r4, r3, #4
 800834a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800834e:	2200      	movs	r2, #0
 8008350:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008354:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008358:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800835c:	4642      	mov	r2, r8
 800835e:	464b      	mov	r3, r9
 8008360:	1891      	adds	r1, r2, r2
 8008362:	61b9      	str	r1, [r7, #24]
 8008364:	415b      	adcs	r3, r3
 8008366:	61fb      	str	r3, [r7, #28]
 8008368:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800836c:	4641      	mov	r1, r8
 800836e:	1851      	adds	r1, r2, r1
 8008370:	6139      	str	r1, [r7, #16]
 8008372:	4649      	mov	r1, r9
 8008374:	414b      	adcs	r3, r1
 8008376:	617b      	str	r3, [r7, #20]
 8008378:	f04f 0200 	mov.w	r2, #0
 800837c:	f04f 0300 	mov.w	r3, #0
 8008380:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008384:	4659      	mov	r1, fp
 8008386:	00cb      	lsls	r3, r1, #3
 8008388:	4651      	mov	r1, sl
 800838a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800838e:	4651      	mov	r1, sl
 8008390:	00ca      	lsls	r2, r1, #3
 8008392:	4610      	mov	r0, r2
 8008394:	4619      	mov	r1, r3
 8008396:	4603      	mov	r3, r0
 8008398:	4642      	mov	r2, r8
 800839a:	189b      	adds	r3, r3, r2
 800839c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80083a0:	464b      	mov	r3, r9
 80083a2:	460a      	mov	r2, r1
 80083a4:	eb42 0303 	adc.w	r3, r2, r3
 80083a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80083ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	67bb      	str	r3, [r7, #120]	; 0x78
 80083b6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80083b8:	f04f 0200 	mov.w	r2, #0
 80083bc:	f04f 0300 	mov.w	r3, #0
 80083c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80083c4:	4649      	mov	r1, r9
 80083c6:	008b      	lsls	r3, r1, #2
 80083c8:	4641      	mov	r1, r8
 80083ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80083ce:	4641      	mov	r1, r8
 80083d0:	008a      	lsls	r2, r1, #2
 80083d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80083d6:	f7f7 ff5b 	bl	8000290 <__aeabi_uldivmod>
 80083da:	4602      	mov	r2, r0
 80083dc:	460b      	mov	r3, r1
 80083de:	4b39      	ldr	r3, [pc, #228]	; (80084c4 <UART_SetConfig+0x4e4>)
 80083e0:	fba3 1302 	umull	r1, r3, r3, r2
 80083e4:	095b      	lsrs	r3, r3, #5
 80083e6:	2164      	movs	r1, #100	; 0x64
 80083e8:	fb01 f303 	mul.w	r3, r1, r3
 80083ec:	1ad3      	subs	r3, r2, r3
 80083ee:	011b      	lsls	r3, r3, #4
 80083f0:	3332      	adds	r3, #50	; 0x32
 80083f2:	4a34      	ldr	r2, [pc, #208]	; (80084c4 <UART_SetConfig+0x4e4>)
 80083f4:	fba2 2303 	umull	r2, r3, r2, r3
 80083f8:	095b      	lsrs	r3, r3, #5
 80083fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80083fe:	441c      	add	r4, r3
 8008400:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008404:	2200      	movs	r2, #0
 8008406:	673b      	str	r3, [r7, #112]	; 0x70
 8008408:	677a      	str	r2, [r7, #116]	; 0x74
 800840a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800840e:	4642      	mov	r2, r8
 8008410:	464b      	mov	r3, r9
 8008412:	1891      	adds	r1, r2, r2
 8008414:	60b9      	str	r1, [r7, #8]
 8008416:	415b      	adcs	r3, r3
 8008418:	60fb      	str	r3, [r7, #12]
 800841a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800841e:	4641      	mov	r1, r8
 8008420:	1851      	adds	r1, r2, r1
 8008422:	6039      	str	r1, [r7, #0]
 8008424:	4649      	mov	r1, r9
 8008426:	414b      	adcs	r3, r1
 8008428:	607b      	str	r3, [r7, #4]
 800842a:	f04f 0200 	mov.w	r2, #0
 800842e:	f04f 0300 	mov.w	r3, #0
 8008432:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008436:	4659      	mov	r1, fp
 8008438:	00cb      	lsls	r3, r1, #3
 800843a:	4651      	mov	r1, sl
 800843c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008440:	4651      	mov	r1, sl
 8008442:	00ca      	lsls	r2, r1, #3
 8008444:	4610      	mov	r0, r2
 8008446:	4619      	mov	r1, r3
 8008448:	4603      	mov	r3, r0
 800844a:	4642      	mov	r2, r8
 800844c:	189b      	adds	r3, r3, r2
 800844e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008450:	464b      	mov	r3, r9
 8008452:	460a      	mov	r2, r1
 8008454:	eb42 0303 	adc.w	r3, r2, r3
 8008458:	66fb      	str	r3, [r7, #108]	; 0x6c
 800845a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	2200      	movs	r2, #0
 8008462:	663b      	str	r3, [r7, #96]	; 0x60
 8008464:	667a      	str	r2, [r7, #100]	; 0x64
 8008466:	f04f 0200 	mov.w	r2, #0
 800846a:	f04f 0300 	mov.w	r3, #0
 800846e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008472:	4649      	mov	r1, r9
 8008474:	008b      	lsls	r3, r1, #2
 8008476:	4641      	mov	r1, r8
 8008478:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800847c:	4641      	mov	r1, r8
 800847e:	008a      	lsls	r2, r1, #2
 8008480:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008484:	f7f7 ff04 	bl	8000290 <__aeabi_uldivmod>
 8008488:	4602      	mov	r2, r0
 800848a:	460b      	mov	r3, r1
 800848c:	4b0d      	ldr	r3, [pc, #52]	; (80084c4 <UART_SetConfig+0x4e4>)
 800848e:	fba3 1302 	umull	r1, r3, r3, r2
 8008492:	095b      	lsrs	r3, r3, #5
 8008494:	2164      	movs	r1, #100	; 0x64
 8008496:	fb01 f303 	mul.w	r3, r1, r3
 800849a:	1ad3      	subs	r3, r2, r3
 800849c:	011b      	lsls	r3, r3, #4
 800849e:	3332      	adds	r3, #50	; 0x32
 80084a0:	4a08      	ldr	r2, [pc, #32]	; (80084c4 <UART_SetConfig+0x4e4>)
 80084a2:	fba2 2303 	umull	r2, r3, r2, r3
 80084a6:	095b      	lsrs	r3, r3, #5
 80084a8:	f003 020f 	and.w	r2, r3, #15
 80084ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4422      	add	r2, r4
 80084b4:	609a      	str	r2, [r3, #8]
}
 80084b6:	bf00      	nop
 80084b8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80084bc:	46bd      	mov	sp, r7
 80084be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80084c2:	bf00      	nop
 80084c4:	51eb851f 	.word	0x51eb851f

080084c8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80084c8:	b480      	push	{r7}
 80084ca:	b083      	sub	sp, #12
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d123      	bne.n	8008522 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80084e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80084e6:	683a      	ldr	r2, [r7, #0]
 80084e8:	6851      	ldr	r1, [r2, #4]
 80084ea:	683a      	ldr	r2, [r7, #0]
 80084ec:	6892      	ldr	r2, [r2, #8]
 80084ee:	4311      	orrs	r1, r2
 80084f0:	683a      	ldr	r2, [r7, #0]
 80084f2:	68d2      	ldr	r2, [r2, #12]
 80084f4:	4311      	orrs	r1, r2
 80084f6:	683a      	ldr	r2, [r7, #0]
 80084f8:	6912      	ldr	r2, [r2, #16]
 80084fa:	4311      	orrs	r1, r2
 80084fc:	683a      	ldr	r2, [r7, #0]
 80084fe:	6952      	ldr	r2, [r2, #20]
 8008500:	4311      	orrs	r1, r2
 8008502:	683a      	ldr	r2, [r7, #0]
 8008504:	6992      	ldr	r2, [r2, #24]
 8008506:	4311      	orrs	r1, r2
 8008508:	683a      	ldr	r2, [r7, #0]
 800850a:	69d2      	ldr	r2, [r2, #28]
 800850c:	4311      	orrs	r1, r2
 800850e:	683a      	ldr	r2, [r7, #0]
 8008510:	6a12      	ldr	r2, [r2, #32]
 8008512:	4311      	orrs	r1, r2
 8008514:	683a      	ldr	r2, [r7, #0]
 8008516:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008518:	430a      	orrs	r2, r1
 800851a:	431a      	orrs	r2, r3
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	601a      	str	r2, [r3, #0]
 8008520:	e028      	b.n	8008574 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800852a:	683b      	ldr	r3, [r7, #0]
 800852c:	69d9      	ldr	r1, [r3, #28]
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	6a1b      	ldr	r3, [r3, #32]
 8008532:	4319      	orrs	r1, r3
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008538:	430b      	orrs	r3, r1
 800853a:	431a      	orrs	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	685b      	ldr	r3, [r3, #4]
 8008544:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008548:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800854c:	683a      	ldr	r2, [r7, #0]
 800854e:	6851      	ldr	r1, [r2, #4]
 8008550:	683a      	ldr	r2, [r7, #0]
 8008552:	6892      	ldr	r2, [r2, #8]
 8008554:	4311      	orrs	r1, r2
 8008556:	683a      	ldr	r2, [r7, #0]
 8008558:	68d2      	ldr	r2, [r2, #12]
 800855a:	4311      	orrs	r1, r2
 800855c:	683a      	ldr	r2, [r7, #0]
 800855e:	6912      	ldr	r2, [r2, #16]
 8008560:	4311      	orrs	r1, r2
 8008562:	683a      	ldr	r2, [r7, #0]
 8008564:	6952      	ldr	r2, [r2, #20]
 8008566:	4311      	orrs	r1, r2
 8008568:	683a      	ldr	r2, [r7, #0]
 800856a:	6992      	ldr	r2, [r2, #24]
 800856c:	430a      	orrs	r2, r1
 800856e:	431a      	orrs	r2, r3
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8008574:	2300      	movs	r3, #0
}
 8008576:	4618      	mov	r0, r3
 8008578:	370c      	adds	r7, #12
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr

08008582 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008582:	b480      	push	{r7}
 8008584:	b085      	sub	sp, #20
 8008586:	af00      	add	r7, sp, #0
 8008588:	60f8      	str	r0, [r7, #12]
 800858a:	60b9      	str	r1, [r7, #8]
 800858c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d128      	bne.n	80085e6 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	689b      	ldr	r3, [r3, #8]
 8008598:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	1e59      	subs	r1, r3, #1
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	3b01      	subs	r3, #1
 80085a8:	011b      	lsls	r3, r3, #4
 80085aa:	4319      	orrs	r1, r3
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	3b01      	subs	r3, #1
 80085b2:	021b      	lsls	r3, r3, #8
 80085b4:	4319      	orrs	r1, r3
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	3b01      	subs	r3, #1
 80085bc:	031b      	lsls	r3, r3, #12
 80085be:	4319      	orrs	r1, r3
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	691b      	ldr	r3, [r3, #16]
 80085c4:	3b01      	subs	r3, #1
 80085c6:	041b      	lsls	r3, r3, #16
 80085c8:	4319      	orrs	r1, r3
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	695b      	ldr	r3, [r3, #20]
 80085ce:	3b01      	subs	r3, #1
 80085d0:	051b      	lsls	r3, r3, #20
 80085d2:	4319      	orrs	r1, r3
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	699b      	ldr	r3, [r3, #24]
 80085d8:	3b01      	subs	r3, #1
 80085da:	061b      	lsls	r3, r3, #24
 80085dc:	430b      	orrs	r3, r1
 80085de:	431a      	orrs	r2, r3
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	609a      	str	r2, [r3, #8]
 80085e4:	e02f      	b.n	8008646 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80085ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80085f2:	68ba      	ldr	r2, [r7, #8]
 80085f4:	68d2      	ldr	r2, [r2, #12]
 80085f6:	3a01      	subs	r2, #1
 80085f8:	0311      	lsls	r1, r2, #12
 80085fa:	68ba      	ldr	r2, [r7, #8]
 80085fc:	6952      	ldr	r2, [r2, #20]
 80085fe:	3a01      	subs	r2, #1
 8008600:	0512      	lsls	r2, r2, #20
 8008602:	430a      	orrs	r2, r1
 8008604:	431a      	orrs	r2, r3
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	68db      	ldr	r3, [r3, #12]
 800860e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	1e59      	subs	r1, r3, #1
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	3b01      	subs	r3, #1
 800861e:	011b      	lsls	r3, r3, #4
 8008620:	4319      	orrs	r1, r3
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	3b01      	subs	r3, #1
 8008628:	021b      	lsls	r3, r3, #8
 800862a:	4319      	orrs	r1, r3
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	691b      	ldr	r3, [r3, #16]
 8008630:	3b01      	subs	r3, #1
 8008632:	041b      	lsls	r3, r3, #16
 8008634:	4319      	orrs	r1, r3
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	699b      	ldr	r3, [r3, #24]
 800863a:	3b01      	subs	r3, #1
 800863c:	061b      	lsls	r3, r3, #24
 800863e:	430b      	orrs	r3, r1
 8008640:	431a      	orrs	r2, r3
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8008646:	2300      	movs	r3, #0
}
 8008648:	4618      	mov	r0, r3
 800864a:	3714      	adds	r7, #20
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b086      	sub	sp, #24
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008660:	2300      	movs	r3, #0
 8008662:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	691b      	ldr	r3, [r3, #16]
 8008668:	0d9b      	lsrs	r3, r3, #22
 800866a:	059b      	lsls	r3, r3, #22
 800866c:	68ba      	ldr	r2, [r7, #8]
 800866e:	6811      	ldr	r1, [r2, #0]
 8008670:	68ba      	ldr	r2, [r7, #8]
 8008672:	6852      	ldr	r2, [r2, #4]
 8008674:	4311      	orrs	r1, r2
 8008676:	68ba      	ldr	r2, [r7, #8]
 8008678:	6892      	ldr	r2, [r2, #8]
 800867a:	3a01      	subs	r2, #1
 800867c:	0152      	lsls	r2, r2, #5
 800867e:	4311      	orrs	r1, r2
 8008680:	68ba      	ldr	r2, [r7, #8]
 8008682:	68d2      	ldr	r2, [r2, #12]
 8008684:	0252      	lsls	r2, r2, #9
 8008686:	430a      	orrs	r2, r1
 8008688:	431a      	orrs	r2, r3
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800868e:	f7fa fcd1 	bl	8003034 <HAL_GetTick>
 8008692:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008694:	e010      	b.n	80086b8 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800869c:	d00c      	beq.n	80086b8 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d007      	beq.n	80086b4 <FMC_SDRAM_SendCommand+0x60>
 80086a4:	f7fa fcc6 	bl	8003034 <HAL_GetTick>
 80086a8:	4602      	mov	r2, r0
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	1ad3      	subs	r3, r2, r3
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	429a      	cmp	r2, r3
 80086b2:	d201      	bcs.n	80086b8 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 80086b4:	2303      	movs	r3, #3
 80086b6:	e006      	b.n	80086c6 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	699b      	ldr	r3, [r3, #24]
 80086bc:	f003 0320 	and.w	r3, r3, #32
 80086c0:	2b20      	cmp	r3, #32
 80086c2:	d0e8      	beq.n	8008696 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 80086c4:	2300      	movs	r3, #0
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3718      	adds	r7, #24
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b083      	sub	sp, #12
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
 80086d6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	695b      	ldr	r3, [r3, #20]
 80086dc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80086e0:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 80086e4:	683a      	ldr	r2, [r7, #0]
 80086e6:	0052      	lsls	r2, r2, #1
 80086e8:	431a      	orrs	r2, r3
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	689b      	ldr	r3, [r3, #8]
 8008708:	f043 0201 	orr.w	r2, r3, #1
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008710:	2300      	movs	r3, #0
}
 8008712:	4618      	mov	r0, r3
 8008714:	370c      	adds	r7, #12
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr

0800871e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800871e:	b480      	push	{r7}
 8008720:	b083      	sub	sp, #12
 8008722:	af00      	add	r7, sp, #0
 8008724:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	689b      	ldr	r3, [r3, #8]
 800872a:	f023 0201 	bic.w	r2, r3, #1
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008732:	2300      	movs	r3, #0
}
 8008734:	4618      	mov	r0, r3
 8008736:	370c      	adds	r7, #12
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008740:	b480      	push	{r7}
 8008742:	b085      	sub	sp, #20
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800874a:	2300      	movs	r3, #0
 800874c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	3301      	adds	r3, #1
 8008752:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	4a13      	ldr	r2, [pc, #76]	; (80087a4 <USB_FlushTxFifo+0x64>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d901      	bls.n	8008760 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800875c:	2303      	movs	r3, #3
 800875e:	e01b      	b.n	8008798 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	691b      	ldr	r3, [r3, #16]
 8008764:	2b00      	cmp	r3, #0
 8008766:	daf2      	bge.n	800874e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008768:	2300      	movs	r3, #0
 800876a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	019b      	lsls	r3, r3, #6
 8008770:	f043 0220 	orr.w	r2, r3, #32
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	3301      	adds	r3, #1
 800877c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	4a08      	ldr	r2, [pc, #32]	; (80087a4 <USB_FlushTxFifo+0x64>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d901      	bls.n	800878a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008786:	2303      	movs	r3, #3
 8008788:	e006      	b.n	8008798 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	f003 0320 	and.w	r3, r3, #32
 8008792:	2b20      	cmp	r3, #32
 8008794:	d0f0      	beq.n	8008778 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	3714      	adds	r7, #20
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr
 80087a4:	00030d40 	.word	0x00030d40

080087a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b085      	sub	sp, #20
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80087b0:	2300      	movs	r3, #0
 80087b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	3301      	adds	r3, #1
 80087b8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	4a11      	ldr	r2, [pc, #68]	; (8008804 <USB_FlushRxFifo+0x5c>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d901      	bls.n	80087c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80087c2:	2303      	movs	r3, #3
 80087c4:	e018      	b.n	80087f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	691b      	ldr	r3, [r3, #16]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	daf2      	bge.n	80087b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80087ce:	2300      	movs	r3, #0
 80087d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2210      	movs	r2, #16
 80087d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	3301      	adds	r3, #1
 80087dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	4a08      	ldr	r2, [pc, #32]	; (8008804 <USB_FlushRxFifo+0x5c>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d901      	bls.n	80087ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80087e6:	2303      	movs	r3, #3
 80087e8:	e006      	b.n	80087f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	691b      	ldr	r3, [r3, #16]
 80087ee:	f003 0310 	and.w	r3, r3, #16
 80087f2:	2b10      	cmp	r3, #16
 80087f4:	d0f0      	beq.n	80087d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80087f6:	2300      	movs	r3, #0
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3714      	adds	r7, #20
 80087fc:	46bd      	mov	sp, r7
 80087fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008802:	4770      	bx	lr
 8008804:	00030d40 	.word	0x00030d40

08008808 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008808:	b480      	push	{r7}
 800880a:	b08b      	sub	sp, #44	; 0x2c
 800880c:	af00      	add	r7, sp, #0
 800880e:	60f8      	str	r0, [r7, #12]
 8008810:	60b9      	str	r1, [r7, #8]
 8008812:	4613      	mov	r3, r2
 8008814:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800881a:	68bb      	ldr	r3, [r7, #8]
 800881c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800881e:	88fb      	ldrh	r3, [r7, #6]
 8008820:	089b      	lsrs	r3, r3, #2
 8008822:	b29b      	uxth	r3, r3
 8008824:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008826:	88fb      	ldrh	r3, [r7, #6]
 8008828:	f003 0303 	and.w	r3, r3, #3
 800882c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800882e:	2300      	movs	r3, #0
 8008830:	623b      	str	r3, [r7, #32]
 8008832:	e014      	b.n	800885e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800883a:	681a      	ldr	r2, [r3, #0]
 800883c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008842:	3301      	adds	r3, #1
 8008844:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008848:	3301      	adds	r3, #1
 800884a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800884c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884e:	3301      	adds	r3, #1
 8008850:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008854:	3301      	adds	r3, #1
 8008856:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008858:	6a3b      	ldr	r3, [r7, #32]
 800885a:	3301      	adds	r3, #1
 800885c:	623b      	str	r3, [r7, #32]
 800885e:	6a3a      	ldr	r2, [r7, #32]
 8008860:	697b      	ldr	r3, [r7, #20]
 8008862:	429a      	cmp	r2, r3
 8008864:	d3e6      	bcc.n	8008834 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008866:	8bfb      	ldrh	r3, [r7, #30]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d01e      	beq.n	80088aa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800886c:	2300      	movs	r3, #0
 800886e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008870:	69bb      	ldr	r3, [r7, #24]
 8008872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008876:	461a      	mov	r2, r3
 8008878:	f107 0310 	add.w	r3, r7, #16
 800887c:	6812      	ldr	r2, [r2, #0]
 800887e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008880:	693a      	ldr	r2, [r7, #16]
 8008882:	6a3b      	ldr	r3, [r7, #32]
 8008884:	b2db      	uxtb	r3, r3
 8008886:	00db      	lsls	r3, r3, #3
 8008888:	fa22 f303 	lsr.w	r3, r2, r3
 800888c:	b2da      	uxtb	r2, r3
 800888e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008890:	701a      	strb	r2, [r3, #0]
      i++;
 8008892:	6a3b      	ldr	r3, [r7, #32]
 8008894:	3301      	adds	r3, #1
 8008896:	623b      	str	r3, [r7, #32]
      pDest++;
 8008898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800889a:	3301      	adds	r3, #1
 800889c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800889e:	8bfb      	ldrh	r3, [r7, #30]
 80088a0:	3b01      	subs	r3, #1
 80088a2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80088a4:	8bfb      	ldrh	r3, [r7, #30]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d1ea      	bne.n	8008880 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80088aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	372c      	adds	r7, #44	; 0x2c
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	695b      	ldr	r3, [r3, #20]
 80088c4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	699b      	ldr	r3, [r3, #24]
 80088ca:	68fa      	ldr	r2, [r7, #12]
 80088cc:	4013      	ands	r3, r2
 80088ce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80088d0:	68fb      	ldr	r3, [r7, #12]
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3714      	adds	r7, #20
 80088d6:	46bd      	mov	sp, r7
 80088d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088dc:	4770      	bx	lr

080088de <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80088de:	b480      	push	{r7}
 80088e0:	b083      	sub	sp, #12
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	695b      	ldr	r3, [r3, #20]
 80088ea:	f003 0301 	and.w	r3, r3, #1
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	370c      	adds	r7, #12
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr

080088fa <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80088fa:	b480      	push	{r7}
 80088fc:	b085      	sub	sp, #20
 80088fe:	af00      	add	r7, sp, #0
 8008900:	6078      	str	r0, [r7, #4]
 8008902:	460b      	mov	r3, r1
 8008904:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	68fa      	ldr	r2, [r7, #12]
 8008914:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008918:	f023 0303 	bic.w	r3, r3, #3
 800891c:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	78fb      	ldrb	r3, [r7, #3]
 8008928:	f003 0303 	and.w	r3, r3, #3
 800892c:	68f9      	ldr	r1, [r7, #12]
 800892e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008932:	4313      	orrs	r3, r2
 8008934:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008936:	78fb      	ldrb	r3, [r7, #3]
 8008938:	2b01      	cmp	r3, #1
 800893a:	d107      	bne.n	800894c <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008942:	461a      	mov	r2, r3
 8008944:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008948:	6053      	str	r3, [r2, #4]
 800894a:	e009      	b.n	8008960 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800894c:	78fb      	ldrb	r3, [r7, #3]
 800894e:	2b02      	cmp	r3, #2
 8008950:	d106      	bne.n	8008960 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008958:	461a      	mov	r2, r3
 800895a:	f241 7370 	movw	r3, #6000	; 0x1770
 800895e:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8008960:	2300      	movs	r3, #0
}
 8008962:	4618      	mov	r0, r3
 8008964:	3714      	adds	r7, #20
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr

0800896e <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800896e:	b480      	push	{r7}
 8008970:	b085      	sub	sp, #20
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008980:	695b      	ldr	r3, [r3, #20]
 8008982:	b29b      	uxth	r3, r3
}
 8008984:	4618      	mov	r0, r3
 8008986:	3714      	adds	r7, #20
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008990:	b480      	push	{r7}
 8008992:	b089      	sub	sp, #36	; 0x24
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	460b      	mov	r3, r1
 800899a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80089a0:	78fb      	ldrb	r3, [r7, #3]
 80089a2:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80089a4:	2300      	movs	r3, #0
 80089a6:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80089a8:	69bb      	ldr	r3, [r7, #24]
 80089aa:	015a      	lsls	r2, r3, #5
 80089ac:	69fb      	ldr	r3, [r7, #28]
 80089ae:	4413      	add	r3, r2
 80089b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	0c9b      	lsrs	r3, r3, #18
 80089b8:	f003 0303 	and.w	r3, r3, #3
 80089bc:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80089be:	69bb      	ldr	r3, [r7, #24]
 80089c0:	015a      	lsls	r2, r3, #5
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	4413      	add	r3, r2
 80089c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	0fdb      	lsrs	r3, r3, #31
 80089ce:	f003 0301 	and.w	r3, r3, #1
 80089d2:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	f003 0320 	and.w	r3, r3, #32
 80089dc:	2b20      	cmp	r3, #32
 80089de:	d104      	bne.n	80089ea <USB_HC_Halt+0x5a>
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d101      	bne.n	80089ea <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80089e6:	2300      	movs	r3, #0
 80089e8:	e0c8      	b.n	8008b7c <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80089ea:	697b      	ldr	r3, [r7, #20]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d002      	beq.n	80089f6 <USB_HC_Halt+0x66>
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	2b02      	cmp	r3, #2
 80089f4:	d163      	bne.n	8008abe <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	015a      	lsls	r2, r3, #5
 80089fa:	69fb      	ldr	r3, [r7, #28]
 80089fc:	4413      	add	r3, r2
 80089fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	69ba      	ldr	r2, [r7, #24]
 8008a06:	0151      	lsls	r1, r2, #5
 8008a08:	69fa      	ldr	r2, [r7, #28]
 8008a0a:	440a      	add	r2, r1
 8008a0c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008a14:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	689b      	ldr	r3, [r3, #8]
 8008a1a:	f003 0320 	and.w	r3, r3, #32
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	f040 80ab 	bne.w	8008b7a <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d133      	bne.n	8008a98 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008a30:	69bb      	ldr	r3, [r7, #24]
 8008a32:	015a      	lsls	r2, r3, #5
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	4413      	add	r3, r2
 8008a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	69ba      	ldr	r2, [r7, #24]
 8008a40:	0151      	lsls	r1, r2, #5
 8008a42:	69fa      	ldr	r2, [r7, #28]
 8008a44:	440a      	add	r2, r1
 8008a46:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008a4e:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008a50:	69bb      	ldr	r3, [r7, #24]
 8008a52:	015a      	lsls	r2, r3, #5
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	4413      	add	r3, r2
 8008a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	69ba      	ldr	r2, [r7, #24]
 8008a60:	0151      	lsls	r1, r2, #5
 8008a62:	69fa      	ldr	r2, [r7, #28]
 8008a64:	440a      	add	r2, r1
 8008a66:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008a6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a6e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	3301      	adds	r3, #1
 8008a74:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a7c:	d81d      	bhi.n	8008aba <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008a7e:	69bb      	ldr	r3, [r7, #24]
 8008a80:	015a      	lsls	r2, r3, #5
 8008a82:	69fb      	ldr	r3, [r7, #28]
 8008a84:	4413      	add	r3, r2
 8008a86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a94:	d0ec      	beq.n	8008a70 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008a96:	e070      	b.n	8008b7a <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	015a      	lsls	r2, r3, #5
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	4413      	add	r3, r2
 8008aa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	69ba      	ldr	r2, [r7, #24]
 8008aa8:	0151      	lsls	r1, r2, #5
 8008aaa:	69fa      	ldr	r2, [r7, #28]
 8008aac:	440a      	add	r2, r1
 8008aae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ab2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ab6:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008ab8:	e05f      	b.n	8008b7a <USB_HC_Halt+0x1ea>
            break;
 8008aba:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008abc:	e05d      	b.n	8008b7a <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	015a      	lsls	r2, r3, #5
 8008ac2:	69fb      	ldr	r3, [r7, #28]
 8008ac4:	4413      	add	r3, r2
 8008ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	69ba      	ldr	r2, [r7, #24]
 8008ace:	0151      	lsls	r1, r2, #5
 8008ad0:	69fa      	ldr	r2, [r7, #28]
 8008ad2:	440a      	add	r2, r1
 8008ad4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008ad8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008adc:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008ade:	69fb      	ldr	r3, [r7, #28]
 8008ae0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008ae4:	691b      	ldr	r3, [r3, #16]
 8008ae6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d133      	bne.n	8008b56 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	015a      	lsls	r2, r3, #5
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	4413      	add	r3, r2
 8008af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	69ba      	ldr	r2, [r7, #24]
 8008afe:	0151      	lsls	r1, r2, #5
 8008b00:	69fa      	ldr	r2, [r7, #28]
 8008b02:	440a      	add	r2, r1
 8008b04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b08:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b0c:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008b0e:	69bb      	ldr	r3, [r7, #24]
 8008b10:	015a      	lsls	r2, r3, #5
 8008b12:	69fb      	ldr	r3, [r7, #28]
 8008b14:	4413      	add	r3, r2
 8008b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	69ba      	ldr	r2, [r7, #24]
 8008b1e:	0151      	lsls	r1, r2, #5
 8008b20:	69fa      	ldr	r2, [r7, #28]
 8008b22:	440a      	add	r2, r1
 8008b24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b28:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b2c:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	3301      	adds	r3, #1
 8008b32:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b3a:	d81d      	bhi.n	8008b78 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008b3c:	69bb      	ldr	r3, [r7, #24]
 8008b3e:	015a      	lsls	r2, r3, #5
 8008b40:	69fb      	ldr	r3, [r7, #28]
 8008b42:	4413      	add	r3, r2
 8008b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008b52:	d0ec      	beq.n	8008b2e <USB_HC_Halt+0x19e>
 8008b54:	e011      	b.n	8008b7a <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008b56:	69bb      	ldr	r3, [r7, #24]
 8008b58:	015a      	lsls	r2, r3, #5
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	4413      	add	r3, r2
 8008b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	69ba      	ldr	r2, [r7, #24]
 8008b66:	0151      	lsls	r1, r2, #5
 8008b68:	69fa      	ldr	r2, [r7, #28]
 8008b6a:	440a      	add	r2, r1
 8008b6c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b74:	6013      	str	r3, [r2, #0]
 8008b76:	e000      	b.n	8008b7a <USB_HC_Halt+0x1ea>
          break;
 8008b78:	bf00      	nop
    }
  }

  return HAL_OK;
 8008b7a:	2300      	movs	r3, #0
}
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	3724      	adds	r7, #36	; 0x24
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b088      	sub	sp, #32
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008b90:	2300      	movs	r3, #0
 8008b92:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008b98:	2300      	movs	r3, #0
 8008b9a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f7ff fdbe 	bl	800871e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008ba2:	2110      	movs	r1, #16
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f7ff fdcb 	bl	8008740 <USB_FlushTxFifo>
 8008baa:	4603      	mov	r3, r0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d001      	beq.n	8008bb4 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f7ff fdf7 	bl	80087a8 <USB_FlushRxFifo>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d001      	beq.n	8008bc4 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	61bb      	str	r3, [r7, #24]
 8008bc8:	e01f      	b.n	8008c0a <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008bca:	69bb      	ldr	r3, [r7, #24]
 8008bcc:	015a      	lsls	r2, r3, #5
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	4413      	add	r3, r2
 8008bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008bda:	693b      	ldr	r3, [r7, #16]
 8008bdc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008be0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008be8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008bf0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008bf2:	69bb      	ldr	r3, [r7, #24]
 8008bf4:	015a      	lsls	r2, r3, #5
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	4413      	add	r3, r2
 8008bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bfe:	461a      	mov	r2, r3
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008c04:	69bb      	ldr	r3, [r7, #24]
 8008c06:	3301      	adds	r3, #1
 8008c08:	61bb      	str	r3, [r7, #24]
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	2b0f      	cmp	r3, #15
 8008c0e:	d9dc      	bls.n	8008bca <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008c10:	2300      	movs	r3, #0
 8008c12:	61bb      	str	r3, [r7, #24]
 8008c14:	e034      	b.n	8008c80 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008c16:	69bb      	ldr	r3, [r7, #24]
 8008c18:	015a      	lsls	r2, r3, #5
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008c26:	693b      	ldr	r3, [r7, #16]
 8008c28:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008c2c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c34:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008c3c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008c3e:	69bb      	ldr	r3, [r7, #24]
 8008c40:	015a      	lsls	r2, r3, #5
 8008c42:	697b      	ldr	r3, [r7, #20]
 8008c44:	4413      	add	r3, r2
 8008c46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c4a:	461a      	mov	r2, r3
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	3301      	adds	r3, #1
 8008c54:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c5c:	d80c      	bhi.n	8008c78 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008c5e:	69bb      	ldr	r3, [r7, #24]
 8008c60:	015a      	lsls	r2, r3, #5
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	4413      	add	r3, r2
 8008c66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c74:	d0ec      	beq.n	8008c50 <USB_StopHost+0xc8>
 8008c76:	e000      	b.n	8008c7a <USB_StopHost+0xf2>
        break;
 8008c78:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	61bb      	str	r3, [r7, #24]
 8008c80:	69bb      	ldr	r3, [r7, #24]
 8008c82:	2b0f      	cmp	r3, #15
 8008c84:	d9c7      	bls.n	8008c16 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008c86:	697b      	ldr	r3, [r7, #20]
 8008c88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008c92:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008c9a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f7ff fd2d 	bl	80086fc <USB_EnableGlobalInt>

  return ret;
 8008ca2:	7ffb      	ldrb	r3, [r7, #31]
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3720      	adds	r7, #32
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b082      	sub	sp, #8
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008cba:	1c5a      	adds	r2, r3, #1
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8008cc2:	6878      	ldr	r0, [r7, #4]
 8008cc4:	f000 f804 	bl	8008cd0 <USBH_HandleSof>
}
 8008cc8:	bf00      	nop
 8008cca:	3708      	adds	r7, #8
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	b2db      	uxtb	r3, r3
 8008cde:	2b0b      	cmp	r3, #11
 8008ce0:	d10a      	bne.n	8008cf8 <USBH_HandleSof+0x28>
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d005      	beq.n	8008cf8 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008cf2:	699b      	ldr	r3, [r3, #24]
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	4798      	blx	r3
  }
}
 8008cf8:	bf00      	nop
 8008cfa:	3708      	adds	r7, #8
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008d00:	b580      	push	{r7, lr}
 8008d02:	b082      	sub	sp, #8
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2201      	movs	r2, #1
 8008d14:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008d24:	2200      	movs	r2, #0
 8008d26:	4619      	mov	r1, r3
 8008d28:	f000 f8ae 	bl	8008e88 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008d2c:	bf00      	nop
}
 8008d2e:	3708      	adds	r7, #8
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8008d44:	bf00      	nop
}
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b082      	sub	sp, #8
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	2201      	movs	r2, #1
 8008d5c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2201      	movs	r2, #1
 8008d74:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008d84:	2200      	movs	r2, #0
 8008d86:	4619      	mov	r1, r3
 8008d88:	f000 f87e 	bl	8008e88 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008d8c:	2300      	movs	r3, #0
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3708      	adds	r7, #8
 8008d92:	46bd      	mov	sp, r7
 8008d94:	bd80      	pop	{r7, pc}

08008d96 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008d96:	b580      	push	{r7, lr}
 8008d98:	b082      	sub	sp, #8
 8008d9a:	af00      	add	r7, sp, #0
 8008d9c:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2201      	movs	r2, #1
 8008da2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2200      	movs	r2, #0
 8008daa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2200      	movs	r2, #0
 8008db2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f001 f910 	bl	8009fdc <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	791b      	ldrb	r3, [r3, #4]
 8008dc0:	4619      	mov	r1, r3
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 f830 	bl	8008e28 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	795b      	ldrb	r3, [r3, #5]
 8008dcc:	4619      	mov	r1, r3
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f000 f82a 	bl	8008e28 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2201      	movs	r2, #1
 8008dd8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008de8:	2200      	movs	r2, #0
 8008dea:	4619      	mov	r1, r3
 8008dec:	f000 f84c 	bl	8008e88 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3708      	adds	r7, #8
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}

08008dfa <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b082      	sub	sp, #8
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2201      	movs	r2, #1
 8008e06:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 8008e16:	2200      	movs	r2, #0
 8008e18:	4619      	mov	r1, r3
 8008e1a:	f000 f835 	bl	8008e88 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 8008e1e:	2300      	movs	r3, #0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3708      	adds	r7, #8
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008e28:	b480      	push	{r7}
 8008e2a:	b083      	sub	sp, #12
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	6078      	str	r0, [r7, #4]
 8008e30:	460b      	mov	r3, r1
 8008e32:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8008e34:	78fb      	ldrb	r3, [r7, #3]
 8008e36:	2b0f      	cmp	r3, #15
 8008e38:	d80d      	bhi.n	8008e56 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008e3a:	78fb      	ldrb	r3, [r7, #3]
 8008e3c:	687a      	ldr	r2, [r7, #4]
 8008e3e:	33e0      	adds	r3, #224	; 0xe0
 8008e40:	009b      	lsls	r3, r3, #2
 8008e42:	4413      	add	r3, r2
 8008e44:	685a      	ldr	r2, [r3, #4]
 8008e46:	78fb      	ldrb	r3, [r7, #3]
 8008e48:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008e4c:	6879      	ldr	r1, [r7, #4]
 8008e4e:	33e0      	adds	r3, #224	; 0xe0
 8008e50:	009b      	lsls	r3, r3, #2
 8008e52:	440b      	add	r3, r1
 8008e54:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008e56:	2300      	movs	r3, #0
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	370c      	adds	r7, #12
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e62:	4770      	bx	lr

08008e64 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b083      	sub	sp, #12
 8008e68:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e6a:	f3ef 8305 	mrs	r3, IPSR
 8008e6e:	607b      	str	r3, [r7, #4]
  return(result);
 8008e70:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	bf14      	ite	ne
 8008e76:	2301      	movne	r3, #1
 8008e78:	2300      	moveq	r3, #0
 8008e7a:	b2db      	uxtb	r3, r3
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	370c      	adds	r7, #12
 8008e80:	46bd      	mov	sp, r7
 8008e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e86:	4770      	bx	lr

08008e88 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b086      	sub	sp, #24
 8008e8c:	af00      	add	r7, sp, #0
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	60b9      	str	r1, [r7, #8]
 8008e92:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8008e94:	2300      	movs	r3, #0
 8008e96:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8008e9c:	697b      	ldr	r3, [r7, #20]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d101      	bne.n	8008ea6 <osMessagePut+0x1e>
    ticks = 1;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8008ea6:	f7ff ffdd 	bl	8008e64 <inHandlerMode>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d018      	beq.n	8008ee2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8008eb0:	f107 0210 	add.w	r2, r7, #16
 8008eb4:	f107 0108 	add.w	r1, r7, #8
 8008eb8:	2300      	movs	r3, #0
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f000 f9aa 	bl	8009214 <xQueueGenericSendFromISR>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d001      	beq.n	8008eca <osMessagePut+0x42>
      return osErrorOS;
 8008ec6:	23ff      	movs	r3, #255	; 0xff
 8008ec8:	e018      	b.n	8008efc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d014      	beq.n	8008efa <osMessagePut+0x72>
 8008ed0:	4b0c      	ldr	r3, [pc, #48]	; (8008f04 <osMessagePut+0x7c>)
 8008ed2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ed6:	601a      	str	r2, [r3, #0]
 8008ed8:	f3bf 8f4f 	dsb	sy
 8008edc:	f3bf 8f6f 	isb	sy
 8008ee0:	e00b      	b.n	8008efa <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8008ee2:	f107 0108 	add.w	r1, r7, #8
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	697a      	ldr	r2, [r7, #20]
 8008eea:	68f8      	ldr	r0, [r7, #12]
 8008eec:	f000 f894 	bl	8009018 <xQueueGenericSend>
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d001      	beq.n	8008efa <osMessagePut+0x72>
      return osErrorOS;
 8008ef6:	23ff      	movs	r3, #255	; 0xff
 8008ef8:	e000      	b.n	8008efc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8008efa:	2300      	movs	r3, #0
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3718      	adds	r7, #24
 8008f00:	46bd      	mov	sp, r7
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	e000ed04 	.word	0xe000ed04

08008f08 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b085      	sub	sp, #20
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	685b      	ldr	r3, [r3, #4]
 8008f16:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	68fa      	ldr	r2, [r7, #12]
 8008f1c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	689a      	ldr	r2, [r3, #8]
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	683a      	ldr	r2, [r7, #0]
 8008f2c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	683a      	ldr	r2, [r7, #0]
 8008f32:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	687a      	ldr	r2, [r7, #4]
 8008f38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	1c5a      	adds	r2, r3, #1
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	601a      	str	r2, [r3, #0]
}
 8008f44:	bf00      	nop
 8008f46:	3714      	adds	r7, #20
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr

08008f50 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008f50:	b480      	push	{r7}
 8008f52:	b085      	sub	sp, #20
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
 8008f58:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008f66:	d103      	bne.n	8008f70 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	691b      	ldr	r3, [r3, #16]
 8008f6c:	60fb      	str	r3, [r7, #12]
 8008f6e:	e00c      	b.n	8008f8a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	3308      	adds	r3, #8
 8008f74:	60fb      	str	r3, [r7, #12]
 8008f76:	e002      	b.n	8008f7e <vListInsert+0x2e>
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	60fb      	str	r3, [r7, #12]
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	685b      	ldr	r3, [r3, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	68ba      	ldr	r2, [r7, #8]
 8008f86:	429a      	cmp	r2, r3
 8008f88:	d2f6      	bcs.n	8008f78 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	685a      	ldr	r2, [r3, #4]
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	685b      	ldr	r3, [r3, #4]
 8008f96:	683a      	ldr	r2, [r7, #0]
 8008f98:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	68fa      	ldr	r2, [r7, #12]
 8008f9e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	683a      	ldr	r2, [r7, #0]
 8008fa4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	1c5a      	adds	r2, r3, #1
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	601a      	str	r2, [r3, #0]
}
 8008fb6:	bf00      	nop
 8008fb8:	3714      	adds	r7, #20
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc0:	4770      	bx	lr

08008fc2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008fc2:	b480      	push	{r7}
 8008fc4:	b085      	sub	sp, #20
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	691b      	ldr	r3, [r3, #16]
 8008fce:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	685b      	ldr	r3, [r3, #4]
 8008fd4:	687a      	ldr	r2, [r7, #4]
 8008fd6:	6892      	ldr	r2, [r2, #8]
 8008fd8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	6852      	ldr	r2, [r2, #4]
 8008fe2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	687a      	ldr	r2, [r7, #4]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d103      	bne.n	8008ff6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	689a      	ldr	r2, [r3, #8]
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	1e5a      	subs	r2, r3, #1
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
}
 800900a:	4618      	mov	r0, r3
 800900c:	3714      	adds	r7, #20
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr
	...

08009018 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b08e      	sub	sp, #56	; 0x38
 800901c:	af00      	add	r7, sp, #0
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	607a      	str	r2, [r7, #4]
 8009024:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009026:	2300      	movs	r3, #0
 8009028:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800902e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009030:	2b00      	cmp	r3, #0
 8009032:	d10a      	bne.n	800904a <xQueueGenericSend+0x32>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009038:	f383 8811 	msr	BASEPRI, r3
 800903c:	f3bf 8f6f 	isb	sy
 8009040:	f3bf 8f4f 	dsb	sy
 8009044:	62bb      	str	r3, [r7, #40]	; 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009046:	bf00      	nop
 8009048:	e7fe      	b.n	8009048 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d103      	bne.n	8009058 <xQueueGenericSend+0x40>
 8009050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009054:	2b00      	cmp	r3, #0
 8009056:	d101      	bne.n	800905c <xQueueGenericSend+0x44>
 8009058:	2301      	movs	r3, #1
 800905a:	e000      	b.n	800905e <xQueueGenericSend+0x46>
 800905c:	2300      	movs	r3, #0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d10a      	bne.n	8009078 <xQueueGenericSend+0x60>
	__asm volatile
 8009062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009066:	f383 8811 	msr	BASEPRI, r3
 800906a:	f3bf 8f6f 	isb	sy
 800906e:	f3bf 8f4f 	dsb	sy
 8009072:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009074:	bf00      	nop
 8009076:	e7fe      	b.n	8009076 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009078:	683b      	ldr	r3, [r7, #0]
 800907a:	2b02      	cmp	r3, #2
 800907c:	d103      	bne.n	8009086 <xQueueGenericSend+0x6e>
 800907e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009082:	2b01      	cmp	r3, #1
 8009084:	d101      	bne.n	800908a <xQueueGenericSend+0x72>
 8009086:	2301      	movs	r3, #1
 8009088:	e000      	b.n	800908c <xQueueGenericSend+0x74>
 800908a:	2300      	movs	r3, #0
 800908c:	2b00      	cmp	r3, #0
 800908e:	d10a      	bne.n	80090a6 <xQueueGenericSend+0x8e>
	__asm volatile
 8009090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009094:	f383 8811 	msr	BASEPRI, r3
 8009098:	f3bf 8f6f 	isb	sy
 800909c:	f3bf 8f4f 	dsb	sy
 80090a0:	623b      	str	r3, [r7, #32]
}
 80090a2:	bf00      	nop
 80090a4:	e7fe      	b.n	80090a4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80090a6:	f000 fd31 	bl	8009b0c <xTaskGetSchedulerState>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d102      	bne.n	80090b6 <xQueueGenericSend+0x9e>
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d101      	bne.n	80090ba <xQueueGenericSend+0xa2>
 80090b6:	2301      	movs	r3, #1
 80090b8:	e000      	b.n	80090bc <xQueueGenericSend+0xa4>
 80090ba:	2300      	movs	r3, #0
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d10a      	bne.n	80090d6 <xQueueGenericSend+0xbe>
	__asm volatile
 80090c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c4:	f383 8811 	msr	BASEPRI, r3
 80090c8:	f3bf 8f6f 	isb	sy
 80090cc:	f3bf 8f4f 	dsb	sy
 80090d0:	61fb      	str	r3, [r7, #28]
}
 80090d2:	bf00      	nop
 80090d4:	e7fe      	b.n	80090d4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80090d6:	f000 fe37 	bl	8009d48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80090da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090e2:	429a      	cmp	r2, r3
 80090e4:	d302      	bcc.n	80090ec <xQueueGenericSend+0xd4>
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	2b02      	cmp	r3, #2
 80090ea:	d129      	bne.n	8009140 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80090ec:	683a      	ldr	r2, [r7, #0]
 80090ee:	68b9      	ldr	r1, [r7, #8]
 80090f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090f2:	f000 f92a 	bl	800934a <prvCopyDataToQueue>
 80090f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d010      	beq.n	8009122 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009102:	3324      	adds	r3, #36	; 0x24
 8009104:	4618      	mov	r0, r3
 8009106:	f000 fbfb 	bl	8009900 <xTaskRemoveFromEventList>
 800910a:	4603      	mov	r3, r0
 800910c:	2b00      	cmp	r3, #0
 800910e:	d013      	beq.n	8009138 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009110:	4b3f      	ldr	r3, [pc, #252]	; (8009210 <xQueueGenericSend+0x1f8>)
 8009112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009116:	601a      	str	r2, [r3, #0]
 8009118:	f3bf 8f4f 	dsb	sy
 800911c:	f3bf 8f6f 	isb	sy
 8009120:	e00a      	b.n	8009138 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009124:	2b00      	cmp	r3, #0
 8009126:	d007      	beq.n	8009138 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009128:	4b39      	ldr	r3, [pc, #228]	; (8009210 <xQueueGenericSend+0x1f8>)
 800912a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800912e:	601a      	str	r2, [r3, #0]
 8009130:	f3bf 8f4f 	dsb	sy
 8009134:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009138:	f000 fe36 	bl	8009da8 <vPortExitCritical>
				return pdPASS;
 800913c:	2301      	movs	r3, #1
 800913e:	e063      	b.n	8009208 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d103      	bne.n	800914e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009146:	f000 fe2f 	bl	8009da8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800914a:	2300      	movs	r3, #0
 800914c:	e05c      	b.n	8009208 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800914e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009150:	2b00      	cmp	r3, #0
 8009152:	d106      	bne.n	8009162 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009154:	f107 0314 	add.w	r3, r7, #20
 8009158:	4618      	mov	r0, r3
 800915a:	f000 fc33 	bl	80099c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800915e:	2301      	movs	r3, #1
 8009160:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009162:	f000 fe21 	bl	8009da8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009166:	f000 f9c5 	bl	80094f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800916a:	f000 fded 	bl	8009d48 <vPortEnterCritical>
 800916e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009170:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009174:	b25b      	sxtb	r3, r3
 8009176:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800917a:	d103      	bne.n	8009184 <xQueueGenericSend+0x16c>
 800917c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917e:	2200      	movs	r2, #0
 8009180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009186:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800918a:	b25b      	sxtb	r3, r3
 800918c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009190:	d103      	bne.n	800919a <xQueueGenericSend+0x182>
 8009192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009194:	2200      	movs	r2, #0
 8009196:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800919a:	f000 fe05 	bl	8009da8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800919e:	1d3a      	adds	r2, r7, #4
 80091a0:	f107 0314 	add.w	r3, r7, #20
 80091a4:	4611      	mov	r1, r2
 80091a6:	4618      	mov	r0, r3
 80091a8:	f000 fc22 	bl	80099f0 <xTaskCheckForTimeOut>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d124      	bne.n	80091fc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80091b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091b4:	f000 f985 	bl	80094c2 <prvIsQueueFull>
 80091b8:	4603      	mov	r3, r0
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d018      	beq.n	80091f0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80091be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c0:	3310      	adds	r3, #16
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	4611      	mov	r1, r2
 80091c6:	4618      	mov	r0, r3
 80091c8:	f000 fb76 	bl	80098b8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80091cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091ce:	f000 f926 	bl	800941e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80091d2:	f000 f99d 	bl	8009510 <xTaskResumeAll>
 80091d6:	4603      	mov	r3, r0
 80091d8:	2b00      	cmp	r3, #0
 80091da:	f47f af7c 	bne.w	80090d6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80091de:	4b0c      	ldr	r3, [pc, #48]	; (8009210 <xQueueGenericSend+0x1f8>)
 80091e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091e4:	601a      	str	r2, [r3, #0]
 80091e6:	f3bf 8f4f 	dsb	sy
 80091ea:	f3bf 8f6f 	isb	sy
 80091ee:	e772      	b.n	80090d6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80091f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091f2:	f000 f914 	bl	800941e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80091f6:	f000 f98b 	bl	8009510 <xTaskResumeAll>
 80091fa:	e76c      	b.n	80090d6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80091fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091fe:	f000 f90e 	bl	800941e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009202:	f000 f985 	bl	8009510 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009206:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009208:	4618      	mov	r0, r3
 800920a:	3738      	adds	r7, #56	; 0x38
 800920c:	46bd      	mov	sp, r7
 800920e:	bd80      	pop	{r7, pc}
 8009210:	e000ed04 	.word	0xe000ed04

08009214 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b090      	sub	sp, #64	; 0x40
 8009218:	af00      	add	r7, sp, #0
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	607a      	str	r2, [r7, #4]
 8009220:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009228:	2b00      	cmp	r3, #0
 800922a:	d10a      	bne.n	8009242 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800922c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009230:	f383 8811 	msr	BASEPRI, r3
 8009234:	f3bf 8f6f 	isb	sy
 8009238:	f3bf 8f4f 	dsb	sy
 800923c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800923e:	bf00      	nop
 8009240:	e7fe      	b.n	8009240 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d103      	bne.n	8009250 <xQueueGenericSendFromISR+0x3c>
 8009248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800924a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800924c:	2b00      	cmp	r3, #0
 800924e:	d101      	bne.n	8009254 <xQueueGenericSendFromISR+0x40>
 8009250:	2301      	movs	r3, #1
 8009252:	e000      	b.n	8009256 <xQueueGenericSendFromISR+0x42>
 8009254:	2300      	movs	r3, #0
 8009256:	2b00      	cmp	r3, #0
 8009258:	d10a      	bne.n	8009270 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800925a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800925e:	f383 8811 	msr	BASEPRI, r3
 8009262:	f3bf 8f6f 	isb	sy
 8009266:	f3bf 8f4f 	dsb	sy
 800926a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800926c:	bf00      	nop
 800926e:	e7fe      	b.n	800926e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	2b02      	cmp	r3, #2
 8009274:	d103      	bne.n	800927e <xQueueGenericSendFromISR+0x6a>
 8009276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800927a:	2b01      	cmp	r3, #1
 800927c:	d101      	bne.n	8009282 <xQueueGenericSendFromISR+0x6e>
 800927e:	2301      	movs	r3, #1
 8009280:	e000      	b.n	8009284 <xQueueGenericSendFromISR+0x70>
 8009282:	2300      	movs	r3, #0
 8009284:	2b00      	cmp	r3, #0
 8009286:	d10a      	bne.n	800929e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800928c:	f383 8811 	msr	BASEPRI, r3
 8009290:	f3bf 8f6f 	isb	sy
 8009294:	f3bf 8f4f 	dsb	sy
 8009298:	623b      	str	r3, [r7, #32]
}
 800929a:	bf00      	nop
 800929c:	e7fe      	b.n	800929c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800929e:	f000 fe05 	bl	8009eac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80092a2:	f3ef 8211 	mrs	r2, BASEPRI
 80092a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092aa:	f383 8811 	msr	BASEPRI, r3
 80092ae:	f3bf 8f6f 	isb	sy
 80092b2:	f3bf 8f4f 	dsb	sy
 80092b6:	61fa      	str	r2, [r7, #28]
 80092b8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80092ba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80092bc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80092be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80092c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d302      	bcc.n	80092d0 <xQueueGenericSendFromISR+0xbc>
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	2b02      	cmp	r3, #2
 80092ce:	d12f      	bne.n	8009330 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80092d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092de:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80092e0:	683a      	ldr	r2, [r7, #0]
 80092e2:	68b9      	ldr	r1, [r7, #8]
 80092e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80092e6:	f000 f830 	bl	800934a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80092ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80092ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092f2:	d112      	bne.n	800931a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d016      	beq.n	800932a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092fe:	3324      	adds	r3, #36	; 0x24
 8009300:	4618      	mov	r0, r3
 8009302:	f000 fafd 	bl	8009900 <xTaskRemoveFromEventList>
 8009306:	4603      	mov	r3, r0
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00e      	beq.n	800932a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d00b      	beq.n	800932a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2201      	movs	r2, #1
 8009316:	601a      	str	r2, [r3, #0]
 8009318:	e007      	b.n	800932a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800931a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800931e:	3301      	adds	r3, #1
 8009320:	b2db      	uxtb	r3, r3
 8009322:	b25a      	sxtb	r2, r3
 8009324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009326:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800932a:	2301      	movs	r3, #1
 800932c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800932e:	e001      	b.n	8009334 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009330:	2300      	movs	r3, #0
 8009332:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009334:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009336:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800933e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009342:	4618      	mov	r0, r3
 8009344:	3740      	adds	r7, #64	; 0x40
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}

0800934a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800934a:	b580      	push	{r7, lr}
 800934c:	b086      	sub	sp, #24
 800934e:	af00      	add	r7, sp, #0
 8009350:	60f8      	str	r0, [r7, #12]
 8009352:	60b9      	str	r1, [r7, #8]
 8009354:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009356:	2300      	movs	r3, #0
 8009358:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800935e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009364:	2b00      	cmp	r3, #0
 8009366:	d10d      	bne.n	8009384 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d14d      	bne.n	800940c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	689b      	ldr	r3, [r3, #8]
 8009374:	4618      	mov	r0, r3
 8009376:	f000 fbe7 	bl	8009b48 <xTaskPriorityDisinherit>
 800937a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2200      	movs	r2, #0
 8009380:	609a      	str	r2, [r3, #8]
 8009382:	e043      	b.n	800940c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d119      	bne.n	80093be <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	6858      	ldr	r0, [r3, #4]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009392:	461a      	mov	r2, r3
 8009394:	68b9      	ldr	r1, [r7, #8]
 8009396:	f000 fe93 	bl	800a0c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	685a      	ldr	r2, [r3, #4]
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a2:	441a      	add	r2, r3
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	685a      	ldr	r2, [r3, #4]
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	689b      	ldr	r3, [r3, #8]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d32b      	bcc.n	800940c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681a      	ldr	r2, [r3, #0]
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	605a      	str	r2, [r3, #4]
 80093bc:	e026      	b.n	800940c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	68d8      	ldr	r0, [r3, #12]
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093c6:	461a      	mov	r2, r3
 80093c8:	68b9      	ldr	r1, [r7, #8]
 80093ca:	f000 fe79 	bl	800a0c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	68da      	ldr	r2, [r3, #12]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d6:	425b      	negs	r3, r3
 80093d8:	441a      	add	r2, r3
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	68da      	ldr	r2, [r3, #12]
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d207      	bcs.n	80093fa <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	689a      	ldr	r2, [r3, #8]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093f2:	425b      	negs	r3, r3
 80093f4:	441a      	add	r2, r3
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2b02      	cmp	r3, #2
 80093fe:	d105      	bne.n	800940c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d002      	beq.n	800940c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	3b01      	subs	r3, #1
 800940a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	1c5a      	adds	r2, r3, #1
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009414:	697b      	ldr	r3, [r7, #20]
}
 8009416:	4618      	mov	r0, r3
 8009418:	3718      	adds	r7, #24
 800941a:	46bd      	mov	sp, r7
 800941c:	bd80      	pop	{r7, pc}

0800941e <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800941e:	b580      	push	{r7, lr}
 8009420:	b084      	sub	sp, #16
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8009426:	f000 fc8f 	bl	8009d48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009430:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009432:	e011      	b.n	8009458 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009438:	2b00      	cmp	r3, #0
 800943a:	d012      	beq.n	8009462 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	3324      	adds	r3, #36	; 0x24
 8009440:	4618      	mov	r0, r3
 8009442:	f000 fa5d 	bl	8009900 <xTaskRemoveFromEventList>
 8009446:	4603      	mov	r3, r0
 8009448:	2b00      	cmp	r3, #0
 800944a:	d001      	beq.n	8009450 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800944c:	f000 fb32 	bl	8009ab4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009450:	7bfb      	ldrb	r3, [r7, #15]
 8009452:	3b01      	subs	r3, #1
 8009454:	b2db      	uxtb	r3, r3
 8009456:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009458:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800945c:	2b00      	cmp	r3, #0
 800945e:	dce9      	bgt.n	8009434 <prvUnlockQueue+0x16>
 8009460:	e000      	b.n	8009464 <prvUnlockQueue+0x46>
					break;
 8009462:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	22ff      	movs	r2, #255	; 0xff
 8009468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800946c:	f000 fc9c 	bl	8009da8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009470:	f000 fc6a 	bl	8009d48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800947a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800947c:	e011      	b.n	80094a2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	691b      	ldr	r3, [r3, #16]
 8009482:	2b00      	cmp	r3, #0
 8009484:	d012      	beq.n	80094ac <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	3310      	adds	r3, #16
 800948a:	4618      	mov	r0, r3
 800948c:	f000 fa38 	bl	8009900 <xTaskRemoveFromEventList>
 8009490:	4603      	mov	r3, r0
 8009492:	2b00      	cmp	r3, #0
 8009494:	d001      	beq.n	800949a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009496:	f000 fb0d 	bl	8009ab4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800949a:	7bbb      	ldrb	r3, [r7, #14]
 800949c:	3b01      	subs	r3, #1
 800949e:	b2db      	uxtb	r3, r3
 80094a0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80094a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	dce9      	bgt.n	800947e <prvUnlockQueue+0x60>
 80094aa:	e000      	b.n	80094ae <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80094ac:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	22ff      	movs	r2, #255	; 0xff
 80094b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80094b6:	f000 fc77 	bl	8009da8 <vPortExitCritical>
}
 80094ba:	bf00      	nop
 80094bc:	3710      	adds	r7, #16
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b084      	sub	sp, #16
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80094ca:	f000 fc3d 	bl	8009d48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d102      	bne.n	80094e0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80094da:	2301      	movs	r3, #1
 80094dc:	60fb      	str	r3, [r7, #12]
 80094de:	e001      	b.n	80094e4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80094e0:	2300      	movs	r3, #0
 80094e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80094e4:	f000 fc60 	bl	8009da8 <vPortExitCritical>

	return xReturn;
 80094e8:	68fb      	ldr	r3, [r7, #12]
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3710      	adds	r7, #16
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
	...

080094f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80094f4:	b480      	push	{r7}
 80094f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80094f8:	4b04      	ldr	r3, [pc, #16]	; (800950c <vTaskSuspendAll+0x18>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	3301      	adds	r3, #1
 80094fe:	4a03      	ldr	r2, [pc, #12]	; (800950c <vTaskSuspendAll+0x18>)
 8009500:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009502:	bf00      	nop
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr
 800950c:	2000067c 	.word	0x2000067c

08009510 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009516:	2300      	movs	r3, #0
 8009518:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800951a:	2300      	movs	r3, #0
 800951c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800951e:	4b41      	ldr	r3, [pc, #260]	; (8009624 <xTaskResumeAll+0x114>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d10a      	bne.n	800953c <xTaskResumeAll+0x2c>
	__asm volatile
 8009526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800952a:	f383 8811 	msr	BASEPRI, r3
 800952e:	f3bf 8f6f 	isb	sy
 8009532:	f3bf 8f4f 	dsb	sy
 8009536:	603b      	str	r3, [r7, #0]
}
 8009538:	bf00      	nop
 800953a:	e7fe      	b.n	800953a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800953c:	f000 fc04 	bl	8009d48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009540:	4b38      	ldr	r3, [pc, #224]	; (8009624 <xTaskResumeAll+0x114>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	3b01      	subs	r3, #1
 8009546:	4a37      	ldr	r2, [pc, #220]	; (8009624 <xTaskResumeAll+0x114>)
 8009548:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800954a:	4b36      	ldr	r3, [pc, #216]	; (8009624 <xTaskResumeAll+0x114>)
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d161      	bne.n	8009616 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009552:	4b35      	ldr	r3, [pc, #212]	; (8009628 <xTaskResumeAll+0x118>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d05d      	beq.n	8009616 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800955a:	e02e      	b.n	80095ba <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800955c:	4b33      	ldr	r3, [pc, #204]	; (800962c <xTaskResumeAll+0x11c>)
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	3318      	adds	r3, #24
 8009568:	4618      	mov	r0, r3
 800956a:	f7ff fd2a 	bl	8008fc2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	3304      	adds	r3, #4
 8009572:	4618      	mov	r0, r3
 8009574:	f7ff fd25 	bl	8008fc2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800957c:	2201      	movs	r2, #1
 800957e:	409a      	lsls	r2, r3
 8009580:	4b2b      	ldr	r3, [pc, #172]	; (8009630 <xTaskResumeAll+0x120>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4313      	orrs	r3, r2
 8009586:	4a2a      	ldr	r2, [pc, #168]	; (8009630 <xTaskResumeAll+0x120>)
 8009588:	6013      	str	r3, [r2, #0]
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800958e:	4613      	mov	r3, r2
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	4413      	add	r3, r2
 8009594:	009b      	lsls	r3, r3, #2
 8009596:	4a27      	ldr	r2, [pc, #156]	; (8009634 <xTaskResumeAll+0x124>)
 8009598:	441a      	add	r2, r3
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	3304      	adds	r3, #4
 800959e:	4619      	mov	r1, r3
 80095a0:	4610      	mov	r0, r2
 80095a2:	f7ff fcb1 	bl	8008f08 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095aa:	4b23      	ldr	r3, [pc, #140]	; (8009638 <xTaskResumeAll+0x128>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095b0:	429a      	cmp	r2, r3
 80095b2:	d302      	bcc.n	80095ba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80095b4:	4b21      	ldr	r3, [pc, #132]	; (800963c <xTaskResumeAll+0x12c>)
 80095b6:	2201      	movs	r2, #1
 80095b8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80095ba:	4b1c      	ldr	r3, [pc, #112]	; (800962c <xTaskResumeAll+0x11c>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d1cc      	bne.n	800955c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d001      	beq.n	80095cc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80095c8:	f000 fa80 	bl	8009acc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80095cc:	4b1c      	ldr	r3, [pc, #112]	; (8009640 <xTaskResumeAll+0x130>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d010      	beq.n	80095fa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80095d8:	f000 f836 	bl	8009648 <xTaskIncrementTick>
 80095dc:	4603      	mov	r3, r0
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d002      	beq.n	80095e8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80095e2:	4b16      	ldr	r3, [pc, #88]	; (800963c <xTaskResumeAll+0x12c>)
 80095e4:	2201      	movs	r2, #1
 80095e6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	3b01      	subs	r3, #1
 80095ec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d1f1      	bne.n	80095d8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80095f4:	4b12      	ldr	r3, [pc, #72]	; (8009640 <xTaskResumeAll+0x130>)
 80095f6:	2200      	movs	r2, #0
 80095f8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80095fa:	4b10      	ldr	r3, [pc, #64]	; (800963c <xTaskResumeAll+0x12c>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d009      	beq.n	8009616 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009602:	2301      	movs	r3, #1
 8009604:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009606:	4b0f      	ldr	r3, [pc, #60]	; (8009644 <xTaskResumeAll+0x134>)
 8009608:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800960c:	601a      	str	r2, [r3, #0]
 800960e:	f3bf 8f4f 	dsb	sy
 8009612:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009616:	f000 fbc7 	bl	8009da8 <vPortExitCritical>

	return xAlreadyYielded;
 800961a:	68bb      	ldr	r3, [r7, #8]
}
 800961c:	4618      	mov	r0, r3
 800961e:	3710      	adds	r7, #16
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}
 8009624:	2000067c 	.word	0x2000067c
 8009628:	2000065c 	.word	0x2000065c
 800962c:	20000634 	.word	0x20000634
 8009630:	20000664 	.word	0x20000664
 8009634:	200005a0 	.word	0x200005a0
 8009638:	2000059c 	.word	0x2000059c
 800963c:	20000670 	.word	0x20000670
 8009640:	2000066c 	.word	0x2000066c
 8009644:	e000ed04 	.word	0xe000ed04

08009648 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b086      	sub	sp, #24
 800964c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800964e:	2300      	movs	r3, #0
 8009650:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009652:	4b4e      	ldr	r3, [pc, #312]	; (800978c <xTaskIncrementTick+0x144>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2b00      	cmp	r3, #0
 8009658:	f040 808e 	bne.w	8009778 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800965c:	4b4c      	ldr	r3, [pc, #304]	; (8009790 <xTaskIncrementTick+0x148>)
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	3301      	adds	r3, #1
 8009662:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009664:	4a4a      	ldr	r2, [pc, #296]	; (8009790 <xTaskIncrementTick+0x148>)
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800966a:	693b      	ldr	r3, [r7, #16]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d120      	bne.n	80096b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009670:	4b48      	ldr	r3, [pc, #288]	; (8009794 <xTaskIncrementTick+0x14c>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d00a      	beq.n	8009690 <xTaskIncrementTick+0x48>
	__asm volatile
 800967a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800967e:	f383 8811 	msr	BASEPRI, r3
 8009682:	f3bf 8f6f 	isb	sy
 8009686:	f3bf 8f4f 	dsb	sy
 800968a:	603b      	str	r3, [r7, #0]
}
 800968c:	bf00      	nop
 800968e:	e7fe      	b.n	800968e <xTaskIncrementTick+0x46>
 8009690:	4b40      	ldr	r3, [pc, #256]	; (8009794 <xTaskIncrementTick+0x14c>)
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	60fb      	str	r3, [r7, #12]
 8009696:	4b40      	ldr	r3, [pc, #256]	; (8009798 <xTaskIncrementTick+0x150>)
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a3e      	ldr	r2, [pc, #248]	; (8009794 <xTaskIncrementTick+0x14c>)
 800969c:	6013      	str	r3, [r2, #0]
 800969e:	4a3e      	ldr	r2, [pc, #248]	; (8009798 <xTaskIncrementTick+0x150>)
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	6013      	str	r3, [r2, #0]
 80096a4:	4b3d      	ldr	r3, [pc, #244]	; (800979c <xTaskIncrementTick+0x154>)
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	3301      	adds	r3, #1
 80096aa:	4a3c      	ldr	r2, [pc, #240]	; (800979c <xTaskIncrementTick+0x154>)
 80096ac:	6013      	str	r3, [r2, #0]
 80096ae:	f000 fa0d 	bl	8009acc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80096b2:	4b3b      	ldr	r3, [pc, #236]	; (80097a0 <xTaskIncrementTick+0x158>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	693a      	ldr	r2, [r7, #16]
 80096b8:	429a      	cmp	r2, r3
 80096ba:	d348      	bcc.n	800974e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096bc:	4b35      	ldr	r3, [pc, #212]	; (8009794 <xTaskIncrementTick+0x14c>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d104      	bne.n	80096d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096c6:	4b36      	ldr	r3, [pc, #216]	; (80097a0 <xTaskIncrementTick+0x158>)
 80096c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80096cc:	601a      	str	r2, [r3, #0]
					break;
 80096ce:	e03e      	b.n	800974e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096d0:	4b30      	ldr	r3, [pc, #192]	; (8009794 <xTaskIncrementTick+0x14c>)
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	68db      	ldr	r3, [r3, #12]
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80096e0:	693a      	ldr	r2, [r7, #16]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	429a      	cmp	r2, r3
 80096e6:	d203      	bcs.n	80096f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80096e8:	4a2d      	ldr	r2, [pc, #180]	; (80097a0 <xTaskIncrementTick+0x158>)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80096ee:	e02e      	b.n	800974e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	3304      	adds	r3, #4
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7ff fc64 	bl	8008fc2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80096fa:	68bb      	ldr	r3, [r7, #8]
 80096fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d004      	beq.n	800970c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	3318      	adds	r3, #24
 8009706:	4618      	mov	r0, r3
 8009708:	f7ff fc5b 	bl	8008fc2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009710:	2201      	movs	r2, #1
 8009712:	409a      	lsls	r2, r3
 8009714:	4b23      	ldr	r3, [pc, #140]	; (80097a4 <xTaskIncrementTick+0x15c>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4313      	orrs	r3, r2
 800971a:	4a22      	ldr	r2, [pc, #136]	; (80097a4 <xTaskIncrementTick+0x15c>)
 800971c:	6013      	str	r3, [r2, #0]
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009722:	4613      	mov	r3, r2
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	4413      	add	r3, r2
 8009728:	009b      	lsls	r3, r3, #2
 800972a:	4a1f      	ldr	r2, [pc, #124]	; (80097a8 <xTaskIncrementTick+0x160>)
 800972c:	441a      	add	r2, r3
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	3304      	adds	r3, #4
 8009732:	4619      	mov	r1, r3
 8009734:	4610      	mov	r0, r2
 8009736:	f7ff fbe7 	bl	8008f08 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800973e:	4b1b      	ldr	r3, [pc, #108]	; (80097ac <xTaskIncrementTick+0x164>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009744:	429a      	cmp	r2, r3
 8009746:	d3b9      	bcc.n	80096bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009748:	2301      	movs	r3, #1
 800974a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800974c:	e7b6      	b.n	80096bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800974e:	4b17      	ldr	r3, [pc, #92]	; (80097ac <xTaskIncrementTick+0x164>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009754:	4914      	ldr	r1, [pc, #80]	; (80097a8 <xTaskIncrementTick+0x160>)
 8009756:	4613      	mov	r3, r2
 8009758:	009b      	lsls	r3, r3, #2
 800975a:	4413      	add	r3, r2
 800975c:	009b      	lsls	r3, r3, #2
 800975e:	440b      	add	r3, r1
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	2b01      	cmp	r3, #1
 8009764:	d901      	bls.n	800976a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8009766:	2301      	movs	r3, #1
 8009768:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800976a:	4b11      	ldr	r3, [pc, #68]	; (80097b0 <xTaskIncrementTick+0x168>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d007      	beq.n	8009782 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8009772:	2301      	movs	r3, #1
 8009774:	617b      	str	r3, [r7, #20]
 8009776:	e004      	b.n	8009782 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009778:	4b0e      	ldr	r3, [pc, #56]	; (80097b4 <xTaskIncrementTick+0x16c>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	3301      	adds	r3, #1
 800977e:	4a0d      	ldr	r2, [pc, #52]	; (80097b4 <xTaskIncrementTick+0x16c>)
 8009780:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009782:	697b      	ldr	r3, [r7, #20]
}
 8009784:	4618      	mov	r0, r3
 8009786:	3718      	adds	r7, #24
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}
 800978c:	2000067c 	.word	0x2000067c
 8009790:	20000660 	.word	0x20000660
 8009794:	2000062c 	.word	0x2000062c
 8009798:	20000630 	.word	0x20000630
 800979c:	20000674 	.word	0x20000674
 80097a0:	20000678 	.word	0x20000678
 80097a4:	20000664 	.word	0x20000664
 80097a8:	200005a0 	.word	0x200005a0
 80097ac:	2000059c 	.word	0x2000059c
 80097b0:	20000670 	.word	0x20000670
 80097b4:	2000066c 	.word	0x2000066c

080097b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b088      	sub	sp, #32
 80097bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80097be:	4b39      	ldr	r3, [pc, #228]	; (80098a4 <vTaskSwitchContext+0xec>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d003      	beq.n	80097ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80097c6:	4b38      	ldr	r3, [pc, #224]	; (80098a8 <vTaskSwitchContext+0xf0>)
 80097c8:	2201      	movs	r2, #1
 80097ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80097cc:	e066      	b.n	800989c <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 80097ce:	4b36      	ldr	r3, [pc, #216]	; (80098a8 <vTaskSwitchContext+0xf0>)
 80097d0:	2200      	movs	r2, #0
 80097d2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80097d4:	4b35      	ldr	r3, [pc, #212]	; (80098ac <vTaskSwitchContext+0xf4>)
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097da:	61fb      	str	r3, [r7, #28]
 80097dc:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80097e0:	61bb      	str	r3, [r7, #24]
 80097e2:	69fb      	ldr	r3, [r7, #28]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	69ba      	ldr	r2, [r7, #24]
 80097e8:	429a      	cmp	r2, r3
 80097ea:	d111      	bne.n	8009810 <vTaskSwitchContext+0x58>
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	3304      	adds	r3, #4
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	69ba      	ldr	r2, [r7, #24]
 80097f4:	429a      	cmp	r2, r3
 80097f6:	d10b      	bne.n	8009810 <vTaskSwitchContext+0x58>
 80097f8:	69fb      	ldr	r3, [r7, #28]
 80097fa:	3308      	adds	r3, #8
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	69ba      	ldr	r2, [r7, #24]
 8009800:	429a      	cmp	r2, r3
 8009802:	d105      	bne.n	8009810 <vTaskSwitchContext+0x58>
 8009804:	69fb      	ldr	r3, [r7, #28]
 8009806:	330c      	adds	r3, #12
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	69ba      	ldr	r2, [r7, #24]
 800980c:	429a      	cmp	r2, r3
 800980e:	d008      	beq.n	8009822 <vTaskSwitchContext+0x6a>
 8009810:	4b26      	ldr	r3, [pc, #152]	; (80098ac <vTaskSwitchContext+0xf4>)
 8009812:	681a      	ldr	r2, [r3, #0]
 8009814:	4b25      	ldr	r3, [pc, #148]	; (80098ac <vTaskSwitchContext+0xf4>)
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	3334      	adds	r3, #52	; 0x34
 800981a:	4619      	mov	r1, r3
 800981c:	4610      	mov	r0, r2
 800981e:	f7f6 feb9 	bl	8000594 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009822:	4b23      	ldr	r3, [pc, #140]	; (80098b0 <vTaskSwitchContext+0xf8>)
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	fab3 f383 	clz	r3, r3
 800982e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8009830:	7afb      	ldrb	r3, [r7, #11]
 8009832:	f1c3 031f 	rsb	r3, r3, #31
 8009836:	617b      	str	r3, [r7, #20]
 8009838:	491e      	ldr	r1, [pc, #120]	; (80098b4 <vTaskSwitchContext+0xfc>)
 800983a:	697a      	ldr	r2, [r7, #20]
 800983c:	4613      	mov	r3, r2
 800983e:	009b      	lsls	r3, r3, #2
 8009840:	4413      	add	r3, r2
 8009842:	009b      	lsls	r3, r3, #2
 8009844:	440b      	add	r3, r1
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d10a      	bne.n	8009862 <vTaskSwitchContext+0xaa>
	__asm volatile
 800984c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009850:	f383 8811 	msr	BASEPRI, r3
 8009854:	f3bf 8f6f 	isb	sy
 8009858:	f3bf 8f4f 	dsb	sy
 800985c:	607b      	str	r3, [r7, #4]
}
 800985e:	bf00      	nop
 8009860:	e7fe      	b.n	8009860 <vTaskSwitchContext+0xa8>
 8009862:	697a      	ldr	r2, [r7, #20]
 8009864:	4613      	mov	r3, r2
 8009866:	009b      	lsls	r3, r3, #2
 8009868:	4413      	add	r3, r2
 800986a:	009b      	lsls	r3, r3, #2
 800986c:	4a11      	ldr	r2, [pc, #68]	; (80098b4 <vTaskSwitchContext+0xfc>)
 800986e:	4413      	add	r3, r2
 8009870:	613b      	str	r3, [r7, #16]
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	685b      	ldr	r3, [r3, #4]
 8009876:	685a      	ldr	r2, [r3, #4]
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	605a      	str	r2, [r3, #4]
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	685a      	ldr	r2, [r3, #4]
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	3308      	adds	r3, #8
 8009884:	429a      	cmp	r2, r3
 8009886:	d104      	bne.n	8009892 <vTaskSwitchContext+0xda>
 8009888:	693b      	ldr	r3, [r7, #16]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	685a      	ldr	r2, [r3, #4]
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	605a      	str	r2, [r3, #4]
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	68db      	ldr	r3, [r3, #12]
 8009898:	4a04      	ldr	r2, [pc, #16]	; (80098ac <vTaskSwitchContext+0xf4>)
 800989a:	6013      	str	r3, [r2, #0]
}
 800989c:	bf00      	nop
 800989e:	3720      	adds	r7, #32
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}
 80098a4:	2000067c 	.word	0x2000067c
 80098a8:	20000670 	.word	0x20000670
 80098ac:	2000059c 	.word	0x2000059c
 80098b0:	20000664 	.word	0x20000664
 80098b4:	200005a0 	.word	0x200005a0

080098b8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d10a      	bne.n	80098de <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80098c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098cc:	f383 8811 	msr	BASEPRI, r3
 80098d0:	f3bf 8f6f 	isb	sy
 80098d4:	f3bf 8f4f 	dsb	sy
 80098d8:	60fb      	str	r3, [r7, #12]
}
 80098da:	bf00      	nop
 80098dc:	e7fe      	b.n	80098dc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80098de:	4b07      	ldr	r3, [pc, #28]	; (80098fc <vTaskPlaceOnEventList+0x44>)
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	3318      	adds	r3, #24
 80098e4:	4619      	mov	r1, r3
 80098e6:	6878      	ldr	r0, [r7, #4]
 80098e8:	f7ff fb32 	bl	8008f50 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80098ec:	2101      	movs	r1, #1
 80098ee:	6838      	ldr	r0, [r7, #0]
 80098f0:	f000 f9b0 	bl	8009c54 <prvAddCurrentTaskToDelayedList>
}
 80098f4:	bf00      	nop
 80098f6:	3710      	adds	r7, #16
 80098f8:	46bd      	mov	sp, r7
 80098fa:	bd80      	pop	{r7, pc}
 80098fc:	2000059c 	.word	0x2000059c

08009900 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b086      	sub	sp, #24
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	68db      	ldr	r3, [r3, #12]
 800990c:	68db      	ldr	r3, [r3, #12]
 800990e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d10a      	bne.n	800992c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991a:	f383 8811 	msr	BASEPRI, r3
 800991e:	f3bf 8f6f 	isb	sy
 8009922:	f3bf 8f4f 	dsb	sy
 8009926:	60fb      	str	r3, [r7, #12]
}
 8009928:	bf00      	nop
 800992a:	e7fe      	b.n	800992a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	3318      	adds	r3, #24
 8009930:	4618      	mov	r0, r3
 8009932:	f7ff fb46 	bl	8008fc2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009936:	4b1d      	ldr	r3, [pc, #116]	; (80099ac <xTaskRemoveFromEventList+0xac>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d11c      	bne.n	8009978 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	3304      	adds	r3, #4
 8009942:	4618      	mov	r0, r3
 8009944:	f7ff fb3d 	bl	8008fc2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800994c:	2201      	movs	r2, #1
 800994e:	409a      	lsls	r2, r3
 8009950:	4b17      	ldr	r3, [pc, #92]	; (80099b0 <xTaskRemoveFromEventList+0xb0>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	4313      	orrs	r3, r2
 8009956:	4a16      	ldr	r2, [pc, #88]	; (80099b0 <xTaskRemoveFromEventList+0xb0>)
 8009958:	6013      	str	r3, [r2, #0]
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800995e:	4613      	mov	r3, r2
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	4413      	add	r3, r2
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	4a13      	ldr	r2, [pc, #76]	; (80099b4 <xTaskRemoveFromEventList+0xb4>)
 8009968:	441a      	add	r2, r3
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	3304      	adds	r3, #4
 800996e:	4619      	mov	r1, r3
 8009970:	4610      	mov	r0, r2
 8009972:	f7ff fac9 	bl	8008f08 <vListInsertEnd>
 8009976:	e005      	b.n	8009984 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	3318      	adds	r3, #24
 800997c:	4619      	mov	r1, r3
 800997e:	480e      	ldr	r0, [pc, #56]	; (80099b8 <xTaskRemoveFromEventList+0xb8>)
 8009980:	f7ff fac2 	bl	8008f08 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009988:	4b0c      	ldr	r3, [pc, #48]	; (80099bc <xTaskRemoveFromEventList+0xbc>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800998e:	429a      	cmp	r2, r3
 8009990:	d905      	bls.n	800999e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009992:	2301      	movs	r3, #1
 8009994:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009996:	4b0a      	ldr	r3, [pc, #40]	; (80099c0 <xTaskRemoveFromEventList+0xc0>)
 8009998:	2201      	movs	r2, #1
 800999a:	601a      	str	r2, [r3, #0]
 800999c:	e001      	b.n	80099a2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800999e:	2300      	movs	r3, #0
 80099a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80099a2:	697b      	ldr	r3, [r7, #20]
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3718      	adds	r7, #24
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	2000067c 	.word	0x2000067c
 80099b0:	20000664 	.word	0x20000664
 80099b4:	200005a0 	.word	0x200005a0
 80099b8:	20000634 	.word	0x20000634
 80099bc:	2000059c 	.word	0x2000059c
 80099c0:	20000670 	.word	0x20000670

080099c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80099c4:	b480      	push	{r7}
 80099c6:	b083      	sub	sp, #12
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80099cc:	4b06      	ldr	r3, [pc, #24]	; (80099e8 <vTaskInternalSetTimeOutState+0x24>)
 80099ce:	681a      	ldr	r2, [r3, #0]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80099d4:	4b05      	ldr	r3, [pc, #20]	; (80099ec <vTaskInternalSetTimeOutState+0x28>)
 80099d6:	681a      	ldr	r2, [r3, #0]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	605a      	str	r2, [r3, #4]
}
 80099dc:	bf00      	nop
 80099de:	370c      	adds	r7, #12
 80099e0:	46bd      	mov	sp, r7
 80099e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e6:	4770      	bx	lr
 80099e8:	20000674 	.word	0x20000674
 80099ec:	20000660 	.word	0x20000660

080099f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	b088      	sub	sp, #32
 80099f4:	af00      	add	r7, sp, #0
 80099f6:	6078      	str	r0, [r7, #4]
 80099f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d10a      	bne.n	8009a16 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a04:	f383 8811 	msr	BASEPRI, r3
 8009a08:	f3bf 8f6f 	isb	sy
 8009a0c:	f3bf 8f4f 	dsb	sy
 8009a10:	613b      	str	r3, [r7, #16]
}
 8009a12:	bf00      	nop
 8009a14:	e7fe      	b.n	8009a14 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d10a      	bne.n	8009a32 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a20:	f383 8811 	msr	BASEPRI, r3
 8009a24:	f3bf 8f6f 	isb	sy
 8009a28:	f3bf 8f4f 	dsb	sy
 8009a2c:	60fb      	str	r3, [r7, #12]
}
 8009a2e:	bf00      	nop
 8009a30:	e7fe      	b.n	8009a30 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8009a32:	f000 f989 	bl	8009d48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009a36:	4b1d      	ldr	r3, [pc, #116]	; (8009aac <xTaskCheckForTimeOut+0xbc>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	685b      	ldr	r3, [r3, #4]
 8009a40:	69ba      	ldr	r2, [r7, #24]
 8009a42:	1ad3      	subs	r3, r2, r3
 8009a44:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a4e:	d102      	bne.n	8009a56 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009a50:	2300      	movs	r3, #0
 8009a52:	61fb      	str	r3, [r7, #28]
 8009a54:	e023      	b.n	8009a9e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681a      	ldr	r2, [r3, #0]
 8009a5a:	4b15      	ldr	r3, [pc, #84]	; (8009ab0 <xTaskCheckForTimeOut+0xc0>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d007      	beq.n	8009a72 <xTaskCheckForTimeOut+0x82>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	69ba      	ldr	r2, [r7, #24]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d302      	bcc.n	8009a72 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	61fb      	str	r3, [r7, #28]
 8009a70:	e015      	b.n	8009a9e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	697a      	ldr	r2, [r7, #20]
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d20b      	bcs.n	8009a94 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	681a      	ldr	r2, [r3, #0]
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	1ad2      	subs	r2, r2, r3
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f7ff ff9b 	bl	80099c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	61fb      	str	r3, [r7, #28]
 8009a92:	e004      	b.n	8009a9e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	2200      	movs	r2, #0
 8009a98:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009a9e:	f000 f983 	bl	8009da8 <vPortExitCritical>

	return xReturn;
 8009aa2:	69fb      	ldr	r3, [r7, #28]
}
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	3720      	adds	r7, #32
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}
 8009aac:	20000660 	.word	0x20000660
 8009ab0:	20000674 	.word	0x20000674

08009ab4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009ab8:	4b03      	ldr	r3, [pc, #12]	; (8009ac8 <vTaskMissedYield+0x14>)
 8009aba:	2201      	movs	r2, #1
 8009abc:	601a      	str	r2, [r3, #0]
}
 8009abe:	bf00      	nop
 8009ac0:	46bd      	mov	sp, r7
 8009ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac6:	4770      	bx	lr
 8009ac8:	20000670 	.word	0x20000670

08009acc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009acc:	b480      	push	{r7}
 8009ace:	b083      	sub	sp, #12
 8009ad0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ad2:	4b0c      	ldr	r3, [pc, #48]	; (8009b04 <prvResetNextTaskUnblockTime+0x38>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d104      	bne.n	8009ae6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009adc:	4b0a      	ldr	r3, [pc, #40]	; (8009b08 <prvResetNextTaskUnblockTime+0x3c>)
 8009ade:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009ae2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009ae4:	e008      	b.n	8009af8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ae6:	4b07      	ldr	r3, [pc, #28]	; (8009b04 <prvResetNextTaskUnblockTime+0x38>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	68db      	ldr	r3, [r3, #12]
 8009aec:	68db      	ldr	r3, [r3, #12]
 8009aee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	4a04      	ldr	r2, [pc, #16]	; (8009b08 <prvResetNextTaskUnblockTime+0x3c>)
 8009af6:	6013      	str	r3, [r2, #0]
}
 8009af8:	bf00      	nop
 8009afa:	370c      	adds	r7, #12
 8009afc:	46bd      	mov	sp, r7
 8009afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b02:	4770      	bx	lr
 8009b04:	2000062c 	.word	0x2000062c
 8009b08:	20000678 	.word	0x20000678

08009b0c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009b0c:	b480      	push	{r7}
 8009b0e:	b083      	sub	sp, #12
 8009b10:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009b12:	4b0b      	ldr	r3, [pc, #44]	; (8009b40 <xTaskGetSchedulerState+0x34>)
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d102      	bne.n	8009b20 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	607b      	str	r3, [r7, #4]
 8009b1e:	e008      	b.n	8009b32 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009b20:	4b08      	ldr	r3, [pc, #32]	; (8009b44 <xTaskGetSchedulerState+0x38>)
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d102      	bne.n	8009b2e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009b28:	2302      	movs	r3, #2
 8009b2a:	607b      	str	r3, [r7, #4]
 8009b2c:	e001      	b.n	8009b32 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009b32:	687b      	ldr	r3, [r7, #4]
	}
 8009b34:	4618      	mov	r0, r3
 8009b36:	370c      	adds	r7, #12
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr
 8009b40:	20000668 	.word	0x20000668
 8009b44:	2000067c 	.word	0x2000067c

08009b48 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b086      	sub	sp, #24
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009b54:	2300      	movs	r3, #0
 8009b56:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d06e      	beq.n	8009c3c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009b5e:	4b3a      	ldr	r3, [pc, #232]	; (8009c48 <xTaskPriorityDisinherit+0x100>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	693a      	ldr	r2, [r7, #16]
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d00a      	beq.n	8009b7e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6c:	f383 8811 	msr	BASEPRI, r3
 8009b70:	f3bf 8f6f 	isb	sy
 8009b74:	f3bf 8f4f 	dsb	sy
 8009b78:	60fb      	str	r3, [r7, #12]
}
 8009b7a:	bf00      	nop
 8009b7c:	e7fe      	b.n	8009b7c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d10a      	bne.n	8009b9c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b8a:	f383 8811 	msr	BASEPRI, r3
 8009b8e:	f3bf 8f6f 	isb	sy
 8009b92:	f3bf 8f4f 	dsb	sy
 8009b96:	60bb      	str	r3, [r7, #8]
}
 8009b98:	bf00      	nop
 8009b9a:	e7fe      	b.n	8009b9a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ba0:	1e5a      	subs	r2, r3, #1
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009baa:	693b      	ldr	r3, [r7, #16]
 8009bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d044      	beq.n	8009c3c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d140      	bne.n	8009c3c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	3304      	adds	r3, #4
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7ff f9ff 	bl	8008fc2 <uxListRemove>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d115      	bne.n	8009bf6 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bce:	491f      	ldr	r1, [pc, #124]	; (8009c4c <xTaskPriorityDisinherit+0x104>)
 8009bd0:	4613      	mov	r3, r2
 8009bd2:	009b      	lsls	r3, r3, #2
 8009bd4:	4413      	add	r3, r2
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	440b      	add	r3, r1
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d10a      	bne.n	8009bf6 <xTaskPriorityDisinherit+0xae>
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be4:	2201      	movs	r2, #1
 8009be6:	fa02 f303 	lsl.w	r3, r2, r3
 8009bea:	43da      	mvns	r2, r3
 8009bec:	4b18      	ldr	r3, [pc, #96]	; (8009c50 <xTaskPriorityDisinherit+0x108>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	4013      	ands	r3, r2
 8009bf2:	4a17      	ldr	r2, [pc, #92]	; (8009c50 <xTaskPriorityDisinherit+0x108>)
 8009bf4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009bf6:	693b      	ldr	r3, [r7, #16]
 8009bf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009bfa:	693b      	ldr	r3, [r7, #16]
 8009bfc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009bfe:	693b      	ldr	r3, [r7, #16]
 8009c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c02:	f1c3 0207 	rsb	r2, r3, #7
 8009c06:	693b      	ldr	r3, [r7, #16]
 8009c08:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c0e:	2201      	movs	r2, #1
 8009c10:	409a      	lsls	r2, r3
 8009c12:	4b0f      	ldr	r3, [pc, #60]	; (8009c50 <xTaskPriorityDisinherit+0x108>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4313      	orrs	r3, r2
 8009c18:	4a0d      	ldr	r2, [pc, #52]	; (8009c50 <xTaskPriorityDisinherit+0x108>)
 8009c1a:	6013      	str	r3, [r2, #0]
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c20:	4613      	mov	r3, r2
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	4413      	add	r3, r2
 8009c26:	009b      	lsls	r3, r3, #2
 8009c28:	4a08      	ldr	r2, [pc, #32]	; (8009c4c <xTaskPriorityDisinherit+0x104>)
 8009c2a:	441a      	add	r2, r3
 8009c2c:	693b      	ldr	r3, [r7, #16]
 8009c2e:	3304      	adds	r3, #4
 8009c30:	4619      	mov	r1, r3
 8009c32:	4610      	mov	r0, r2
 8009c34:	f7ff f968 	bl	8008f08 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009c38:	2301      	movs	r3, #1
 8009c3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009c3c:	697b      	ldr	r3, [r7, #20]
	}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3718      	adds	r7, #24
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bd80      	pop	{r7, pc}
 8009c46:	bf00      	nop
 8009c48:	2000059c 	.word	0x2000059c
 8009c4c:	200005a0 	.word	0x200005a0
 8009c50:	20000664 	.word	0x20000664

08009c54 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
 8009c5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009c5e:	4b29      	ldr	r3, [pc, #164]	; (8009d04 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c64:	4b28      	ldr	r3, [pc, #160]	; (8009d08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	3304      	adds	r3, #4
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f7ff f9a9 	bl	8008fc2 <uxListRemove>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d10b      	bne.n	8009c8e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8009c76:	4b24      	ldr	r3, [pc, #144]	; (8009d08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c7c:	2201      	movs	r2, #1
 8009c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c82:	43da      	mvns	r2, r3
 8009c84:	4b21      	ldr	r3, [pc, #132]	; (8009d0c <prvAddCurrentTaskToDelayedList+0xb8>)
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4013      	ands	r3, r2
 8009c8a:	4a20      	ldr	r2, [pc, #128]	; (8009d0c <prvAddCurrentTaskToDelayedList+0xb8>)
 8009c8c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c94:	d10a      	bne.n	8009cac <prvAddCurrentTaskToDelayedList+0x58>
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d007      	beq.n	8009cac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009c9c:	4b1a      	ldr	r3, [pc, #104]	; (8009d08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	3304      	adds	r3, #4
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	481a      	ldr	r0, [pc, #104]	; (8009d10 <prvAddCurrentTaskToDelayedList+0xbc>)
 8009ca6:	f7ff f92f 	bl	8008f08 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009caa:	e026      	b.n	8009cfa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009cac:	68fa      	ldr	r2, [r7, #12]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	4413      	add	r3, r2
 8009cb2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009cb4:	4b14      	ldr	r3, [pc, #80]	; (8009d08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	68ba      	ldr	r2, [r7, #8]
 8009cba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009cbc:	68ba      	ldr	r2, [r7, #8]
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d209      	bcs.n	8009cd8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009cc4:	4b13      	ldr	r3, [pc, #76]	; (8009d14 <prvAddCurrentTaskToDelayedList+0xc0>)
 8009cc6:	681a      	ldr	r2, [r3, #0]
 8009cc8:	4b0f      	ldr	r3, [pc, #60]	; (8009d08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	3304      	adds	r3, #4
 8009cce:	4619      	mov	r1, r3
 8009cd0:	4610      	mov	r0, r2
 8009cd2:	f7ff f93d 	bl	8008f50 <vListInsert>
}
 8009cd6:	e010      	b.n	8009cfa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009cd8:	4b0f      	ldr	r3, [pc, #60]	; (8009d18 <prvAddCurrentTaskToDelayedList+0xc4>)
 8009cda:	681a      	ldr	r2, [r3, #0]
 8009cdc:	4b0a      	ldr	r3, [pc, #40]	; (8009d08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	3304      	adds	r3, #4
 8009ce2:	4619      	mov	r1, r3
 8009ce4:	4610      	mov	r0, r2
 8009ce6:	f7ff f933 	bl	8008f50 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009cea:	4b0c      	ldr	r3, [pc, #48]	; (8009d1c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	68ba      	ldr	r2, [r7, #8]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d202      	bcs.n	8009cfa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009cf4:	4a09      	ldr	r2, [pc, #36]	; (8009d1c <prvAddCurrentTaskToDelayedList+0xc8>)
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	6013      	str	r3, [r2, #0]
}
 8009cfa:	bf00      	nop
 8009cfc:	3710      	adds	r7, #16
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
 8009d02:	bf00      	nop
 8009d04:	20000660 	.word	0x20000660
 8009d08:	2000059c 	.word	0x2000059c
 8009d0c:	20000664 	.word	0x20000664
 8009d10:	20000648 	.word	0x20000648
 8009d14:	20000630 	.word	0x20000630
 8009d18:	2000062c 	.word	0x2000062c
 8009d1c:	20000678 	.word	0x20000678

08009d20 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009d20:	4b07      	ldr	r3, [pc, #28]	; (8009d40 <pxCurrentTCBConst2>)
 8009d22:	6819      	ldr	r1, [r3, #0]
 8009d24:	6808      	ldr	r0, [r1, #0]
 8009d26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d2a:	f380 8809 	msr	PSP, r0
 8009d2e:	f3bf 8f6f 	isb	sy
 8009d32:	f04f 0000 	mov.w	r0, #0
 8009d36:	f380 8811 	msr	BASEPRI, r0
 8009d3a:	4770      	bx	lr
 8009d3c:	f3af 8000 	nop.w

08009d40 <pxCurrentTCBConst2>:
 8009d40:	2000059c 	.word	0x2000059c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009d44:	bf00      	nop
 8009d46:	bf00      	nop

08009d48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009d48:	b480      	push	{r7}
 8009d4a:	b083      	sub	sp, #12
 8009d4c:	af00      	add	r7, sp, #0
	__asm volatile
 8009d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d52:	f383 8811 	msr	BASEPRI, r3
 8009d56:	f3bf 8f6f 	isb	sy
 8009d5a:	f3bf 8f4f 	dsb	sy
 8009d5e:	607b      	str	r3, [r7, #4]
}
 8009d60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009d62:	4b0f      	ldr	r3, [pc, #60]	; (8009da0 <vPortEnterCritical+0x58>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	3301      	adds	r3, #1
 8009d68:	4a0d      	ldr	r2, [pc, #52]	; (8009da0 <vPortEnterCritical+0x58>)
 8009d6a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009d6c:	4b0c      	ldr	r3, [pc, #48]	; (8009da0 <vPortEnterCritical+0x58>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d10f      	bne.n	8009d94 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009d74:	4b0b      	ldr	r3, [pc, #44]	; (8009da4 <vPortEnterCritical+0x5c>)
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d00a      	beq.n	8009d94 <vPortEnterCritical+0x4c>
	__asm volatile
 8009d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d82:	f383 8811 	msr	BASEPRI, r3
 8009d86:	f3bf 8f6f 	isb	sy
 8009d8a:	f3bf 8f4f 	dsb	sy
 8009d8e:	603b      	str	r3, [r7, #0]
}
 8009d90:	bf00      	nop
 8009d92:	e7fe      	b.n	8009d92 <vPortEnterCritical+0x4a>
	}
}
 8009d94:	bf00      	nop
 8009d96:	370c      	adds	r7, #12
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9e:	4770      	bx	lr
 8009da0:	20000064 	.word	0x20000064
 8009da4:	e000ed04 	.word	0xe000ed04

08009da8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009da8:	b480      	push	{r7}
 8009daa:	b083      	sub	sp, #12
 8009dac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009dae:	4b12      	ldr	r3, [pc, #72]	; (8009df8 <vPortExitCritical+0x50>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d10a      	bne.n	8009dcc <vPortExitCritical+0x24>
	__asm volatile
 8009db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dba:	f383 8811 	msr	BASEPRI, r3
 8009dbe:	f3bf 8f6f 	isb	sy
 8009dc2:	f3bf 8f4f 	dsb	sy
 8009dc6:	607b      	str	r3, [r7, #4]
}
 8009dc8:	bf00      	nop
 8009dca:	e7fe      	b.n	8009dca <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009dcc:	4b0a      	ldr	r3, [pc, #40]	; (8009df8 <vPortExitCritical+0x50>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	3b01      	subs	r3, #1
 8009dd2:	4a09      	ldr	r2, [pc, #36]	; (8009df8 <vPortExitCritical+0x50>)
 8009dd4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009dd6:	4b08      	ldr	r3, [pc, #32]	; (8009df8 <vPortExitCritical+0x50>)
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d105      	bne.n	8009dea <vPortExitCritical+0x42>
 8009dde:	2300      	movs	r3, #0
 8009de0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	f383 8811 	msr	BASEPRI, r3
}
 8009de8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009dea:	bf00      	nop
 8009dec:	370c      	adds	r7, #12
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr
 8009df6:	bf00      	nop
 8009df8:	20000064 	.word	0x20000064
 8009dfc:	00000000 	.word	0x00000000

08009e00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009e00:	f3ef 8009 	mrs	r0, PSP
 8009e04:	f3bf 8f6f 	isb	sy
 8009e08:	4b15      	ldr	r3, [pc, #84]	; (8009e60 <pxCurrentTCBConst>)
 8009e0a:	681a      	ldr	r2, [r3, #0]
 8009e0c:	f01e 0f10 	tst.w	lr, #16
 8009e10:	bf08      	it	eq
 8009e12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009e16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e1a:	6010      	str	r0, [r2, #0]
 8009e1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009e20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009e24:	f380 8811 	msr	BASEPRI, r0
 8009e28:	f3bf 8f4f 	dsb	sy
 8009e2c:	f3bf 8f6f 	isb	sy
 8009e30:	f7ff fcc2 	bl	80097b8 <vTaskSwitchContext>
 8009e34:	f04f 0000 	mov.w	r0, #0
 8009e38:	f380 8811 	msr	BASEPRI, r0
 8009e3c:	bc09      	pop	{r0, r3}
 8009e3e:	6819      	ldr	r1, [r3, #0]
 8009e40:	6808      	ldr	r0, [r1, #0]
 8009e42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e46:	f01e 0f10 	tst.w	lr, #16
 8009e4a:	bf08      	it	eq
 8009e4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009e50:	f380 8809 	msr	PSP, r0
 8009e54:	f3bf 8f6f 	isb	sy
 8009e58:	4770      	bx	lr
 8009e5a:	bf00      	nop
 8009e5c:	f3af 8000 	nop.w

08009e60 <pxCurrentTCBConst>:
 8009e60:	2000059c 	.word	0x2000059c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009e64:	bf00      	nop
 8009e66:	bf00      	nop

08009e68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
	__asm volatile
 8009e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e72:	f383 8811 	msr	BASEPRI, r3
 8009e76:	f3bf 8f6f 	isb	sy
 8009e7a:	f3bf 8f4f 	dsb	sy
 8009e7e:	607b      	str	r3, [r7, #4]
}
 8009e80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009e82:	f7ff fbe1 	bl	8009648 <xTaskIncrementTick>
 8009e86:	4603      	mov	r3, r0
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d003      	beq.n	8009e94 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009e8c:	4b06      	ldr	r3, [pc, #24]	; (8009ea8 <SysTick_Handler+0x40>)
 8009e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e92:	601a      	str	r2, [r3, #0]
 8009e94:	2300      	movs	r3, #0
 8009e96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	f383 8811 	msr	BASEPRI, r3
}
 8009e9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009ea0:	bf00      	nop
 8009ea2:	3708      	adds	r7, #8
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}
 8009ea8:	e000ed04 	.word	0xe000ed04

08009eac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009eac:	b480      	push	{r7}
 8009eae:	b085      	sub	sp, #20
 8009eb0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009eb2:	f3ef 8305 	mrs	r3, IPSR
 8009eb6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	2b0f      	cmp	r3, #15
 8009ebc:	d914      	bls.n	8009ee8 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009ebe:	4a17      	ldr	r2, [pc, #92]	; (8009f1c <vPortValidateInterruptPriority+0x70>)
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	4413      	add	r3, r2
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009ec8:	4b15      	ldr	r3, [pc, #84]	; (8009f20 <vPortValidateInterruptPriority+0x74>)
 8009eca:	781b      	ldrb	r3, [r3, #0]
 8009ecc:	7afa      	ldrb	r2, [r7, #11]
 8009ece:	429a      	cmp	r2, r3
 8009ed0:	d20a      	bcs.n	8009ee8 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed6:	f383 8811 	msr	BASEPRI, r3
 8009eda:	f3bf 8f6f 	isb	sy
 8009ede:	f3bf 8f4f 	dsb	sy
 8009ee2:	607b      	str	r3, [r7, #4]
}
 8009ee4:	bf00      	nop
 8009ee6:	e7fe      	b.n	8009ee6 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009ee8:	4b0e      	ldr	r3, [pc, #56]	; (8009f24 <vPortValidateInterruptPriority+0x78>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009ef0:	4b0d      	ldr	r3, [pc, #52]	; (8009f28 <vPortValidateInterruptPriority+0x7c>)
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d90a      	bls.n	8009f0e <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efc:	f383 8811 	msr	BASEPRI, r3
 8009f00:	f3bf 8f6f 	isb	sy
 8009f04:	f3bf 8f4f 	dsb	sy
 8009f08:	603b      	str	r3, [r7, #0]
}
 8009f0a:	bf00      	nop
 8009f0c:	e7fe      	b.n	8009f0c <vPortValidateInterruptPriority+0x60>
	}
 8009f0e:	bf00      	nop
 8009f10:	3714      	adds	r7, #20
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr
 8009f1a:	bf00      	nop
 8009f1c:	e000e3f0 	.word	0xe000e3f0
 8009f20:	20000680 	.word	0x20000680
 8009f24:	e000ed0c 	.word	0xe000ed0c
 8009f28:	20000684 	.word	0x20000684

08009f2c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b082      	sub	sp, #8
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	f7fe feb6 	bl	8008cac <USBH_LL_IncTimer>
}
 8009f40:	bf00      	nop
 8009f42:	3708      	adds	r7, #8
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7fe fefa 	bl	8008d50 <USBH_LL_Connect>
}
 8009f5c:	bf00      	nop
 8009f5e:	3708      	adds	r7, #8
 8009f60:	46bd      	mov	sp, r7
 8009f62:	bd80      	pop	{r7, pc}

08009f64 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7fe ff0f 	bl	8008d96 <USBH_LL_Disconnect>
}
 8009f78:	bf00      	nop
 8009f7a:	3708      	adds	r7, #8
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd80      	pop	{r7, pc}

08009f80 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b082      	sub	sp, #8
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	460b      	mov	r3, r1
 8009f8a:	70fb      	strb	r3, [r7, #3]
 8009f8c:	4613      	mov	r3, r2
 8009f8e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009f96:	4618      	mov	r0, r3
 8009f98:	f7fe ff2f 	bl	8008dfa <USBH_LL_NotifyURBChange>
#endif
}
 8009f9c:	bf00      	nop
 8009f9e:	3708      	adds	r7, #8
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}

08009fa4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b082      	sub	sp, #8
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	f7fe fea4 	bl	8008d00 <USBH_LL_PortEnabled>
}
 8009fb8:	bf00      	nop
 8009fba:	3708      	adds	r7, #8
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b082      	sub	sp, #8
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f7fe feb0 	bl	8008d34 <USBH_LL_PortDisabled>
}
 8009fd4:	bf00      	nop
 8009fd6:	3708      	adds	r7, #8
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b084      	sub	sp, #16
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f7fa fa66 	bl	80044c4 <HAL_HCD_Stop>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009ffc:	7bfb      	ldrb	r3, [r7, #15]
 8009ffe:	4618      	mov	r0, r3
 800a000:	f000 f808 	bl	800a014 <USBH_Get_USB_Status>
 800a004:	4603      	mov	r3, r0
 800a006:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a008:	7bbb      	ldrb	r3, [r7, #14]
}
 800a00a:	4618      	mov	r0, r3
 800a00c:	3710      	adds	r7, #16
 800a00e:	46bd      	mov	sp, r7
 800a010:	bd80      	pop	{r7, pc}
	...

0800a014 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a014:	b480      	push	{r7}
 800a016:	b085      	sub	sp, #20
 800a018:	af00      	add	r7, sp, #0
 800a01a:	4603      	mov	r3, r0
 800a01c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a01e:	2300      	movs	r3, #0
 800a020:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a022:	79fb      	ldrb	r3, [r7, #7]
 800a024:	2b03      	cmp	r3, #3
 800a026:	d817      	bhi.n	800a058 <USBH_Get_USB_Status+0x44>
 800a028:	a201      	add	r2, pc, #4	; (adr r2, 800a030 <USBH_Get_USB_Status+0x1c>)
 800a02a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a02e:	bf00      	nop
 800a030:	0800a041 	.word	0x0800a041
 800a034:	0800a047 	.word	0x0800a047
 800a038:	0800a04d 	.word	0x0800a04d
 800a03c:	0800a053 	.word	0x0800a053
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a040:	2300      	movs	r3, #0
 800a042:	73fb      	strb	r3, [r7, #15]
    break;
 800a044:	e00b      	b.n	800a05e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a046:	2302      	movs	r3, #2
 800a048:	73fb      	strb	r3, [r7, #15]
    break;
 800a04a:	e008      	b.n	800a05e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a04c:	2301      	movs	r3, #1
 800a04e:	73fb      	strb	r3, [r7, #15]
    break;
 800a050:	e005      	b.n	800a05e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a052:	2302      	movs	r3, #2
 800a054:	73fb      	strb	r3, [r7, #15]
    break;
 800a056:	e002      	b.n	800a05e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a058:	2302      	movs	r3, #2
 800a05a:	73fb      	strb	r3, [r7, #15]
    break;
 800a05c:	bf00      	nop
  }
  return usb_status;
 800a05e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a060:	4618      	mov	r0, r3
 800a062:	3714      	adds	r7, #20
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr

0800a06c <__errno>:
 800a06c:	4b01      	ldr	r3, [pc, #4]	; (800a074 <__errno+0x8>)
 800a06e:	6818      	ldr	r0, [r3, #0]
 800a070:	4770      	bx	lr
 800a072:	bf00      	nop
 800a074:	20000068 	.word	0x20000068

0800a078 <__libc_init_array>:
 800a078:	b570      	push	{r4, r5, r6, lr}
 800a07a:	4d0d      	ldr	r5, [pc, #52]	; (800a0b0 <__libc_init_array+0x38>)
 800a07c:	4c0d      	ldr	r4, [pc, #52]	; (800a0b4 <__libc_init_array+0x3c>)
 800a07e:	1b64      	subs	r4, r4, r5
 800a080:	10a4      	asrs	r4, r4, #2
 800a082:	2600      	movs	r6, #0
 800a084:	42a6      	cmp	r6, r4
 800a086:	d109      	bne.n	800a09c <__libc_init_array+0x24>
 800a088:	4d0b      	ldr	r5, [pc, #44]	; (800a0b8 <__libc_init_array+0x40>)
 800a08a:	4c0c      	ldr	r4, [pc, #48]	; (800a0bc <__libc_init_array+0x44>)
 800a08c:	f000 fc8e 	bl	800a9ac <_init>
 800a090:	1b64      	subs	r4, r4, r5
 800a092:	10a4      	asrs	r4, r4, #2
 800a094:	2600      	movs	r6, #0
 800a096:	42a6      	cmp	r6, r4
 800a098:	d105      	bne.n	800a0a6 <__libc_init_array+0x2e>
 800a09a:	bd70      	pop	{r4, r5, r6, pc}
 800a09c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0a0:	4798      	blx	r3
 800a0a2:	3601      	adds	r6, #1
 800a0a4:	e7ee      	b.n	800a084 <__libc_init_array+0xc>
 800a0a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a0aa:	4798      	blx	r3
 800a0ac:	3601      	adds	r6, #1
 800a0ae:	e7f2      	b.n	800a096 <__libc_init_array+0x1e>
 800a0b0:	0800d834 	.word	0x0800d834
 800a0b4:	0800d834 	.word	0x0800d834
 800a0b8:	0800d834 	.word	0x0800d834
 800a0bc:	0800d838 	.word	0x0800d838

0800a0c0 <memcpy>:
 800a0c0:	440a      	add	r2, r1
 800a0c2:	4291      	cmp	r1, r2
 800a0c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a0c8:	d100      	bne.n	800a0cc <memcpy+0xc>
 800a0ca:	4770      	bx	lr
 800a0cc:	b510      	push	{r4, lr}
 800a0ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a0d6:	4291      	cmp	r1, r2
 800a0d8:	d1f9      	bne.n	800a0ce <memcpy+0xe>
 800a0da:	bd10      	pop	{r4, pc}

0800a0dc <memset>:
 800a0dc:	4402      	add	r2, r0
 800a0de:	4603      	mov	r3, r0
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d100      	bne.n	800a0e6 <memset+0xa>
 800a0e4:	4770      	bx	lr
 800a0e6:	f803 1b01 	strb.w	r1, [r3], #1
 800a0ea:	e7f9      	b.n	800a0e0 <memset+0x4>

0800a0ec <_free_r>:
 800a0ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0ee:	2900      	cmp	r1, #0
 800a0f0:	d044      	beq.n	800a17c <_free_r+0x90>
 800a0f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0f6:	9001      	str	r0, [sp, #4]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	f1a1 0404 	sub.w	r4, r1, #4
 800a0fe:	bfb8      	it	lt
 800a100:	18e4      	addlt	r4, r4, r3
 800a102:	f000 f903 	bl	800a30c <__malloc_lock>
 800a106:	4a1e      	ldr	r2, [pc, #120]	; (800a180 <_free_r+0x94>)
 800a108:	9801      	ldr	r0, [sp, #4]
 800a10a:	6813      	ldr	r3, [r2, #0]
 800a10c:	b933      	cbnz	r3, 800a11c <_free_r+0x30>
 800a10e:	6063      	str	r3, [r4, #4]
 800a110:	6014      	str	r4, [r2, #0]
 800a112:	b003      	add	sp, #12
 800a114:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a118:	f000 b8fe 	b.w	800a318 <__malloc_unlock>
 800a11c:	42a3      	cmp	r3, r4
 800a11e:	d908      	bls.n	800a132 <_free_r+0x46>
 800a120:	6825      	ldr	r5, [r4, #0]
 800a122:	1961      	adds	r1, r4, r5
 800a124:	428b      	cmp	r3, r1
 800a126:	bf01      	itttt	eq
 800a128:	6819      	ldreq	r1, [r3, #0]
 800a12a:	685b      	ldreq	r3, [r3, #4]
 800a12c:	1949      	addeq	r1, r1, r5
 800a12e:	6021      	streq	r1, [r4, #0]
 800a130:	e7ed      	b.n	800a10e <_free_r+0x22>
 800a132:	461a      	mov	r2, r3
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	b10b      	cbz	r3, 800a13c <_free_r+0x50>
 800a138:	42a3      	cmp	r3, r4
 800a13a:	d9fa      	bls.n	800a132 <_free_r+0x46>
 800a13c:	6811      	ldr	r1, [r2, #0]
 800a13e:	1855      	adds	r5, r2, r1
 800a140:	42a5      	cmp	r5, r4
 800a142:	d10b      	bne.n	800a15c <_free_r+0x70>
 800a144:	6824      	ldr	r4, [r4, #0]
 800a146:	4421      	add	r1, r4
 800a148:	1854      	adds	r4, r2, r1
 800a14a:	42a3      	cmp	r3, r4
 800a14c:	6011      	str	r1, [r2, #0]
 800a14e:	d1e0      	bne.n	800a112 <_free_r+0x26>
 800a150:	681c      	ldr	r4, [r3, #0]
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	6053      	str	r3, [r2, #4]
 800a156:	4421      	add	r1, r4
 800a158:	6011      	str	r1, [r2, #0]
 800a15a:	e7da      	b.n	800a112 <_free_r+0x26>
 800a15c:	d902      	bls.n	800a164 <_free_r+0x78>
 800a15e:	230c      	movs	r3, #12
 800a160:	6003      	str	r3, [r0, #0]
 800a162:	e7d6      	b.n	800a112 <_free_r+0x26>
 800a164:	6825      	ldr	r5, [r4, #0]
 800a166:	1961      	adds	r1, r4, r5
 800a168:	428b      	cmp	r3, r1
 800a16a:	bf04      	itt	eq
 800a16c:	6819      	ldreq	r1, [r3, #0]
 800a16e:	685b      	ldreq	r3, [r3, #4]
 800a170:	6063      	str	r3, [r4, #4]
 800a172:	bf04      	itt	eq
 800a174:	1949      	addeq	r1, r1, r5
 800a176:	6021      	streq	r1, [r4, #0]
 800a178:	6054      	str	r4, [r2, #4]
 800a17a:	e7ca      	b.n	800a112 <_free_r+0x26>
 800a17c:	b003      	add	sp, #12
 800a17e:	bd30      	pop	{r4, r5, pc}
 800a180:	2000098c 	.word	0x2000098c

0800a184 <sbrk_aligned>:
 800a184:	b570      	push	{r4, r5, r6, lr}
 800a186:	4e0e      	ldr	r6, [pc, #56]	; (800a1c0 <sbrk_aligned+0x3c>)
 800a188:	460c      	mov	r4, r1
 800a18a:	6831      	ldr	r1, [r6, #0]
 800a18c:	4605      	mov	r5, r0
 800a18e:	b911      	cbnz	r1, 800a196 <sbrk_aligned+0x12>
 800a190:	f000 f88c 	bl	800a2ac <_sbrk_r>
 800a194:	6030      	str	r0, [r6, #0]
 800a196:	4621      	mov	r1, r4
 800a198:	4628      	mov	r0, r5
 800a19a:	f000 f887 	bl	800a2ac <_sbrk_r>
 800a19e:	1c43      	adds	r3, r0, #1
 800a1a0:	d00a      	beq.n	800a1b8 <sbrk_aligned+0x34>
 800a1a2:	1cc4      	adds	r4, r0, #3
 800a1a4:	f024 0403 	bic.w	r4, r4, #3
 800a1a8:	42a0      	cmp	r0, r4
 800a1aa:	d007      	beq.n	800a1bc <sbrk_aligned+0x38>
 800a1ac:	1a21      	subs	r1, r4, r0
 800a1ae:	4628      	mov	r0, r5
 800a1b0:	f000 f87c 	bl	800a2ac <_sbrk_r>
 800a1b4:	3001      	adds	r0, #1
 800a1b6:	d101      	bne.n	800a1bc <sbrk_aligned+0x38>
 800a1b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a1bc:	4620      	mov	r0, r4
 800a1be:	bd70      	pop	{r4, r5, r6, pc}
 800a1c0:	20000990 	.word	0x20000990

0800a1c4 <_malloc_r>:
 800a1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1c8:	1ccd      	adds	r5, r1, #3
 800a1ca:	f025 0503 	bic.w	r5, r5, #3
 800a1ce:	3508      	adds	r5, #8
 800a1d0:	2d0c      	cmp	r5, #12
 800a1d2:	bf38      	it	cc
 800a1d4:	250c      	movcc	r5, #12
 800a1d6:	2d00      	cmp	r5, #0
 800a1d8:	4607      	mov	r7, r0
 800a1da:	db01      	blt.n	800a1e0 <_malloc_r+0x1c>
 800a1dc:	42a9      	cmp	r1, r5
 800a1de:	d905      	bls.n	800a1ec <_malloc_r+0x28>
 800a1e0:	230c      	movs	r3, #12
 800a1e2:	603b      	str	r3, [r7, #0]
 800a1e4:	2600      	movs	r6, #0
 800a1e6:	4630      	mov	r0, r6
 800a1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1ec:	4e2e      	ldr	r6, [pc, #184]	; (800a2a8 <_malloc_r+0xe4>)
 800a1ee:	f000 f88d 	bl	800a30c <__malloc_lock>
 800a1f2:	6833      	ldr	r3, [r6, #0]
 800a1f4:	461c      	mov	r4, r3
 800a1f6:	bb34      	cbnz	r4, 800a246 <_malloc_r+0x82>
 800a1f8:	4629      	mov	r1, r5
 800a1fa:	4638      	mov	r0, r7
 800a1fc:	f7ff ffc2 	bl	800a184 <sbrk_aligned>
 800a200:	1c43      	adds	r3, r0, #1
 800a202:	4604      	mov	r4, r0
 800a204:	d14d      	bne.n	800a2a2 <_malloc_r+0xde>
 800a206:	6834      	ldr	r4, [r6, #0]
 800a208:	4626      	mov	r6, r4
 800a20a:	2e00      	cmp	r6, #0
 800a20c:	d140      	bne.n	800a290 <_malloc_r+0xcc>
 800a20e:	6823      	ldr	r3, [r4, #0]
 800a210:	4631      	mov	r1, r6
 800a212:	4638      	mov	r0, r7
 800a214:	eb04 0803 	add.w	r8, r4, r3
 800a218:	f000 f848 	bl	800a2ac <_sbrk_r>
 800a21c:	4580      	cmp	r8, r0
 800a21e:	d13a      	bne.n	800a296 <_malloc_r+0xd2>
 800a220:	6821      	ldr	r1, [r4, #0]
 800a222:	3503      	adds	r5, #3
 800a224:	1a6d      	subs	r5, r5, r1
 800a226:	f025 0503 	bic.w	r5, r5, #3
 800a22a:	3508      	adds	r5, #8
 800a22c:	2d0c      	cmp	r5, #12
 800a22e:	bf38      	it	cc
 800a230:	250c      	movcc	r5, #12
 800a232:	4629      	mov	r1, r5
 800a234:	4638      	mov	r0, r7
 800a236:	f7ff ffa5 	bl	800a184 <sbrk_aligned>
 800a23a:	3001      	adds	r0, #1
 800a23c:	d02b      	beq.n	800a296 <_malloc_r+0xd2>
 800a23e:	6823      	ldr	r3, [r4, #0]
 800a240:	442b      	add	r3, r5
 800a242:	6023      	str	r3, [r4, #0]
 800a244:	e00e      	b.n	800a264 <_malloc_r+0xa0>
 800a246:	6822      	ldr	r2, [r4, #0]
 800a248:	1b52      	subs	r2, r2, r5
 800a24a:	d41e      	bmi.n	800a28a <_malloc_r+0xc6>
 800a24c:	2a0b      	cmp	r2, #11
 800a24e:	d916      	bls.n	800a27e <_malloc_r+0xba>
 800a250:	1961      	adds	r1, r4, r5
 800a252:	42a3      	cmp	r3, r4
 800a254:	6025      	str	r5, [r4, #0]
 800a256:	bf18      	it	ne
 800a258:	6059      	strne	r1, [r3, #4]
 800a25a:	6863      	ldr	r3, [r4, #4]
 800a25c:	bf08      	it	eq
 800a25e:	6031      	streq	r1, [r6, #0]
 800a260:	5162      	str	r2, [r4, r5]
 800a262:	604b      	str	r3, [r1, #4]
 800a264:	4638      	mov	r0, r7
 800a266:	f104 060b 	add.w	r6, r4, #11
 800a26a:	f000 f855 	bl	800a318 <__malloc_unlock>
 800a26e:	f026 0607 	bic.w	r6, r6, #7
 800a272:	1d23      	adds	r3, r4, #4
 800a274:	1af2      	subs	r2, r6, r3
 800a276:	d0b6      	beq.n	800a1e6 <_malloc_r+0x22>
 800a278:	1b9b      	subs	r3, r3, r6
 800a27a:	50a3      	str	r3, [r4, r2]
 800a27c:	e7b3      	b.n	800a1e6 <_malloc_r+0x22>
 800a27e:	6862      	ldr	r2, [r4, #4]
 800a280:	42a3      	cmp	r3, r4
 800a282:	bf0c      	ite	eq
 800a284:	6032      	streq	r2, [r6, #0]
 800a286:	605a      	strne	r2, [r3, #4]
 800a288:	e7ec      	b.n	800a264 <_malloc_r+0xa0>
 800a28a:	4623      	mov	r3, r4
 800a28c:	6864      	ldr	r4, [r4, #4]
 800a28e:	e7b2      	b.n	800a1f6 <_malloc_r+0x32>
 800a290:	4634      	mov	r4, r6
 800a292:	6876      	ldr	r6, [r6, #4]
 800a294:	e7b9      	b.n	800a20a <_malloc_r+0x46>
 800a296:	230c      	movs	r3, #12
 800a298:	603b      	str	r3, [r7, #0]
 800a29a:	4638      	mov	r0, r7
 800a29c:	f000 f83c 	bl	800a318 <__malloc_unlock>
 800a2a0:	e7a1      	b.n	800a1e6 <_malloc_r+0x22>
 800a2a2:	6025      	str	r5, [r4, #0]
 800a2a4:	e7de      	b.n	800a264 <_malloc_r+0xa0>
 800a2a6:	bf00      	nop
 800a2a8:	2000098c 	.word	0x2000098c

0800a2ac <_sbrk_r>:
 800a2ac:	b538      	push	{r3, r4, r5, lr}
 800a2ae:	4d06      	ldr	r5, [pc, #24]	; (800a2c8 <_sbrk_r+0x1c>)
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	4604      	mov	r4, r0
 800a2b4:	4608      	mov	r0, r1
 800a2b6:	602b      	str	r3, [r5, #0]
 800a2b8:	f7f7 fa22 	bl	8001700 <_sbrk>
 800a2bc:	1c43      	adds	r3, r0, #1
 800a2be:	d102      	bne.n	800a2c6 <_sbrk_r+0x1a>
 800a2c0:	682b      	ldr	r3, [r5, #0]
 800a2c2:	b103      	cbz	r3, 800a2c6 <_sbrk_r+0x1a>
 800a2c4:	6023      	str	r3, [r4, #0]
 800a2c6:	bd38      	pop	{r3, r4, r5, pc}
 800a2c8:	20000994 	.word	0x20000994

0800a2cc <siprintf>:
 800a2cc:	b40e      	push	{r1, r2, r3}
 800a2ce:	b500      	push	{lr}
 800a2d0:	b09c      	sub	sp, #112	; 0x70
 800a2d2:	ab1d      	add	r3, sp, #116	; 0x74
 800a2d4:	9002      	str	r0, [sp, #8]
 800a2d6:	9006      	str	r0, [sp, #24]
 800a2d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a2dc:	4809      	ldr	r0, [pc, #36]	; (800a304 <siprintf+0x38>)
 800a2de:	9107      	str	r1, [sp, #28]
 800a2e0:	9104      	str	r1, [sp, #16]
 800a2e2:	4909      	ldr	r1, [pc, #36]	; (800a308 <siprintf+0x3c>)
 800a2e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2e8:	9105      	str	r1, [sp, #20]
 800a2ea:	6800      	ldr	r0, [r0, #0]
 800a2ec:	9301      	str	r3, [sp, #4]
 800a2ee:	a902      	add	r1, sp, #8
 800a2f0:	f000 f874 	bl	800a3dc <_svfiprintf_r>
 800a2f4:	9b02      	ldr	r3, [sp, #8]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	701a      	strb	r2, [r3, #0]
 800a2fa:	b01c      	add	sp, #112	; 0x70
 800a2fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a300:	b003      	add	sp, #12
 800a302:	4770      	bx	lr
 800a304:	20000068 	.word	0x20000068
 800a308:	ffff0208 	.word	0xffff0208

0800a30c <__malloc_lock>:
 800a30c:	4801      	ldr	r0, [pc, #4]	; (800a314 <__malloc_lock+0x8>)
 800a30e:	f000 baf9 	b.w	800a904 <__retarget_lock_acquire_recursive>
 800a312:	bf00      	nop
 800a314:	20000998 	.word	0x20000998

0800a318 <__malloc_unlock>:
 800a318:	4801      	ldr	r0, [pc, #4]	; (800a320 <__malloc_unlock+0x8>)
 800a31a:	f000 baf4 	b.w	800a906 <__retarget_lock_release_recursive>
 800a31e:	bf00      	nop
 800a320:	20000998 	.word	0x20000998

0800a324 <__ssputs_r>:
 800a324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a328:	688e      	ldr	r6, [r1, #8]
 800a32a:	429e      	cmp	r6, r3
 800a32c:	4682      	mov	sl, r0
 800a32e:	460c      	mov	r4, r1
 800a330:	4690      	mov	r8, r2
 800a332:	461f      	mov	r7, r3
 800a334:	d838      	bhi.n	800a3a8 <__ssputs_r+0x84>
 800a336:	898a      	ldrh	r2, [r1, #12]
 800a338:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a33c:	d032      	beq.n	800a3a4 <__ssputs_r+0x80>
 800a33e:	6825      	ldr	r5, [r4, #0]
 800a340:	6909      	ldr	r1, [r1, #16]
 800a342:	eba5 0901 	sub.w	r9, r5, r1
 800a346:	6965      	ldr	r5, [r4, #20]
 800a348:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a34c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a350:	3301      	adds	r3, #1
 800a352:	444b      	add	r3, r9
 800a354:	106d      	asrs	r5, r5, #1
 800a356:	429d      	cmp	r5, r3
 800a358:	bf38      	it	cc
 800a35a:	461d      	movcc	r5, r3
 800a35c:	0553      	lsls	r3, r2, #21
 800a35e:	d531      	bpl.n	800a3c4 <__ssputs_r+0xa0>
 800a360:	4629      	mov	r1, r5
 800a362:	f7ff ff2f 	bl	800a1c4 <_malloc_r>
 800a366:	4606      	mov	r6, r0
 800a368:	b950      	cbnz	r0, 800a380 <__ssputs_r+0x5c>
 800a36a:	230c      	movs	r3, #12
 800a36c:	f8ca 3000 	str.w	r3, [sl]
 800a370:	89a3      	ldrh	r3, [r4, #12]
 800a372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a376:	81a3      	strh	r3, [r4, #12]
 800a378:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a37c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a380:	6921      	ldr	r1, [r4, #16]
 800a382:	464a      	mov	r2, r9
 800a384:	f7ff fe9c 	bl	800a0c0 <memcpy>
 800a388:	89a3      	ldrh	r3, [r4, #12]
 800a38a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a38e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a392:	81a3      	strh	r3, [r4, #12]
 800a394:	6126      	str	r6, [r4, #16]
 800a396:	6165      	str	r5, [r4, #20]
 800a398:	444e      	add	r6, r9
 800a39a:	eba5 0509 	sub.w	r5, r5, r9
 800a39e:	6026      	str	r6, [r4, #0]
 800a3a0:	60a5      	str	r5, [r4, #8]
 800a3a2:	463e      	mov	r6, r7
 800a3a4:	42be      	cmp	r6, r7
 800a3a6:	d900      	bls.n	800a3aa <__ssputs_r+0x86>
 800a3a8:	463e      	mov	r6, r7
 800a3aa:	6820      	ldr	r0, [r4, #0]
 800a3ac:	4632      	mov	r2, r6
 800a3ae:	4641      	mov	r1, r8
 800a3b0:	f000 faaa 	bl	800a908 <memmove>
 800a3b4:	68a3      	ldr	r3, [r4, #8]
 800a3b6:	1b9b      	subs	r3, r3, r6
 800a3b8:	60a3      	str	r3, [r4, #8]
 800a3ba:	6823      	ldr	r3, [r4, #0]
 800a3bc:	4433      	add	r3, r6
 800a3be:	6023      	str	r3, [r4, #0]
 800a3c0:	2000      	movs	r0, #0
 800a3c2:	e7db      	b.n	800a37c <__ssputs_r+0x58>
 800a3c4:	462a      	mov	r2, r5
 800a3c6:	f000 fab9 	bl	800a93c <_realloc_r>
 800a3ca:	4606      	mov	r6, r0
 800a3cc:	2800      	cmp	r0, #0
 800a3ce:	d1e1      	bne.n	800a394 <__ssputs_r+0x70>
 800a3d0:	6921      	ldr	r1, [r4, #16]
 800a3d2:	4650      	mov	r0, sl
 800a3d4:	f7ff fe8a 	bl	800a0ec <_free_r>
 800a3d8:	e7c7      	b.n	800a36a <__ssputs_r+0x46>
	...

0800a3dc <_svfiprintf_r>:
 800a3dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e0:	4698      	mov	r8, r3
 800a3e2:	898b      	ldrh	r3, [r1, #12]
 800a3e4:	061b      	lsls	r3, r3, #24
 800a3e6:	b09d      	sub	sp, #116	; 0x74
 800a3e8:	4607      	mov	r7, r0
 800a3ea:	460d      	mov	r5, r1
 800a3ec:	4614      	mov	r4, r2
 800a3ee:	d50e      	bpl.n	800a40e <_svfiprintf_r+0x32>
 800a3f0:	690b      	ldr	r3, [r1, #16]
 800a3f2:	b963      	cbnz	r3, 800a40e <_svfiprintf_r+0x32>
 800a3f4:	2140      	movs	r1, #64	; 0x40
 800a3f6:	f7ff fee5 	bl	800a1c4 <_malloc_r>
 800a3fa:	6028      	str	r0, [r5, #0]
 800a3fc:	6128      	str	r0, [r5, #16]
 800a3fe:	b920      	cbnz	r0, 800a40a <_svfiprintf_r+0x2e>
 800a400:	230c      	movs	r3, #12
 800a402:	603b      	str	r3, [r7, #0]
 800a404:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a408:	e0d1      	b.n	800a5ae <_svfiprintf_r+0x1d2>
 800a40a:	2340      	movs	r3, #64	; 0x40
 800a40c:	616b      	str	r3, [r5, #20]
 800a40e:	2300      	movs	r3, #0
 800a410:	9309      	str	r3, [sp, #36]	; 0x24
 800a412:	2320      	movs	r3, #32
 800a414:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a418:	f8cd 800c 	str.w	r8, [sp, #12]
 800a41c:	2330      	movs	r3, #48	; 0x30
 800a41e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a5c8 <_svfiprintf_r+0x1ec>
 800a422:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a426:	f04f 0901 	mov.w	r9, #1
 800a42a:	4623      	mov	r3, r4
 800a42c:	469a      	mov	sl, r3
 800a42e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a432:	b10a      	cbz	r2, 800a438 <_svfiprintf_r+0x5c>
 800a434:	2a25      	cmp	r2, #37	; 0x25
 800a436:	d1f9      	bne.n	800a42c <_svfiprintf_r+0x50>
 800a438:	ebba 0b04 	subs.w	fp, sl, r4
 800a43c:	d00b      	beq.n	800a456 <_svfiprintf_r+0x7a>
 800a43e:	465b      	mov	r3, fp
 800a440:	4622      	mov	r2, r4
 800a442:	4629      	mov	r1, r5
 800a444:	4638      	mov	r0, r7
 800a446:	f7ff ff6d 	bl	800a324 <__ssputs_r>
 800a44a:	3001      	adds	r0, #1
 800a44c:	f000 80aa 	beq.w	800a5a4 <_svfiprintf_r+0x1c8>
 800a450:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a452:	445a      	add	r2, fp
 800a454:	9209      	str	r2, [sp, #36]	; 0x24
 800a456:	f89a 3000 	ldrb.w	r3, [sl]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	f000 80a2 	beq.w	800a5a4 <_svfiprintf_r+0x1c8>
 800a460:	2300      	movs	r3, #0
 800a462:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a466:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a46a:	f10a 0a01 	add.w	sl, sl, #1
 800a46e:	9304      	str	r3, [sp, #16]
 800a470:	9307      	str	r3, [sp, #28]
 800a472:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a476:	931a      	str	r3, [sp, #104]	; 0x68
 800a478:	4654      	mov	r4, sl
 800a47a:	2205      	movs	r2, #5
 800a47c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a480:	4851      	ldr	r0, [pc, #324]	; (800a5c8 <_svfiprintf_r+0x1ec>)
 800a482:	f7f5 feb5 	bl	80001f0 <memchr>
 800a486:	9a04      	ldr	r2, [sp, #16]
 800a488:	b9d8      	cbnz	r0, 800a4c2 <_svfiprintf_r+0xe6>
 800a48a:	06d0      	lsls	r0, r2, #27
 800a48c:	bf44      	itt	mi
 800a48e:	2320      	movmi	r3, #32
 800a490:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a494:	0711      	lsls	r1, r2, #28
 800a496:	bf44      	itt	mi
 800a498:	232b      	movmi	r3, #43	; 0x2b
 800a49a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a49e:	f89a 3000 	ldrb.w	r3, [sl]
 800a4a2:	2b2a      	cmp	r3, #42	; 0x2a
 800a4a4:	d015      	beq.n	800a4d2 <_svfiprintf_r+0xf6>
 800a4a6:	9a07      	ldr	r2, [sp, #28]
 800a4a8:	4654      	mov	r4, sl
 800a4aa:	2000      	movs	r0, #0
 800a4ac:	f04f 0c0a 	mov.w	ip, #10
 800a4b0:	4621      	mov	r1, r4
 800a4b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a4b6:	3b30      	subs	r3, #48	; 0x30
 800a4b8:	2b09      	cmp	r3, #9
 800a4ba:	d94e      	bls.n	800a55a <_svfiprintf_r+0x17e>
 800a4bc:	b1b0      	cbz	r0, 800a4ec <_svfiprintf_r+0x110>
 800a4be:	9207      	str	r2, [sp, #28]
 800a4c0:	e014      	b.n	800a4ec <_svfiprintf_r+0x110>
 800a4c2:	eba0 0308 	sub.w	r3, r0, r8
 800a4c6:	fa09 f303 	lsl.w	r3, r9, r3
 800a4ca:	4313      	orrs	r3, r2
 800a4cc:	9304      	str	r3, [sp, #16]
 800a4ce:	46a2      	mov	sl, r4
 800a4d0:	e7d2      	b.n	800a478 <_svfiprintf_r+0x9c>
 800a4d2:	9b03      	ldr	r3, [sp, #12]
 800a4d4:	1d19      	adds	r1, r3, #4
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	9103      	str	r1, [sp, #12]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	bfbb      	ittet	lt
 800a4de:	425b      	neglt	r3, r3
 800a4e0:	f042 0202 	orrlt.w	r2, r2, #2
 800a4e4:	9307      	strge	r3, [sp, #28]
 800a4e6:	9307      	strlt	r3, [sp, #28]
 800a4e8:	bfb8      	it	lt
 800a4ea:	9204      	strlt	r2, [sp, #16]
 800a4ec:	7823      	ldrb	r3, [r4, #0]
 800a4ee:	2b2e      	cmp	r3, #46	; 0x2e
 800a4f0:	d10c      	bne.n	800a50c <_svfiprintf_r+0x130>
 800a4f2:	7863      	ldrb	r3, [r4, #1]
 800a4f4:	2b2a      	cmp	r3, #42	; 0x2a
 800a4f6:	d135      	bne.n	800a564 <_svfiprintf_r+0x188>
 800a4f8:	9b03      	ldr	r3, [sp, #12]
 800a4fa:	1d1a      	adds	r2, r3, #4
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	9203      	str	r2, [sp, #12]
 800a500:	2b00      	cmp	r3, #0
 800a502:	bfb8      	it	lt
 800a504:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a508:	3402      	adds	r4, #2
 800a50a:	9305      	str	r3, [sp, #20]
 800a50c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a5d8 <_svfiprintf_r+0x1fc>
 800a510:	7821      	ldrb	r1, [r4, #0]
 800a512:	2203      	movs	r2, #3
 800a514:	4650      	mov	r0, sl
 800a516:	f7f5 fe6b 	bl	80001f0 <memchr>
 800a51a:	b140      	cbz	r0, 800a52e <_svfiprintf_r+0x152>
 800a51c:	2340      	movs	r3, #64	; 0x40
 800a51e:	eba0 000a 	sub.w	r0, r0, sl
 800a522:	fa03 f000 	lsl.w	r0, r3, r0
 800a526:	9b04      	ldr	r3, [sp, #16]
 800a528:	4303      	orrs	r3, r0
 800a52a:	3401      	adds	r4, #1
 800a52c:	9304      	str	r3, [sp, #16]
 800a52e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a532:	4826      	ldr	r0, [pc, #152]	; (800a5cc <_svfiprintf_r+0x1f0>)
 800a534:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a538:	2206      	movs	r2, #6
 800a53a:	f7f5 fe59 	bl	80001f0 <memchr>
 800a53e:	2800      	cmp	r0, #0
 800a540:	d038      	beq.n	800a5b4 <_svfiprintf_r+0x1d8>
 800a542:	4b23      	ldr	r3, [pc, #140]	; (800a5d0 <_svfiprintf_r+0x1f4>)
 800a544:	bb1b      	cbnz	r3, 800a58e <_svfiprintf_r+0x1b2>
 800a546:	9b03      	ldr	r3, [sp, #12]
 800a548:	3307      	adds	r3, #7
 800a54a:	f023 0307 	bic.w	r3, r3, #7
 800a54e:	3308      	adds	r3, #8
 800a550:	9303      	str	r3, [sp, #12]
 800a552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a554:	4433      	add	r3, r6
 800a556:	9309      	str	r3, [sp, #36]	; 0x24
 800a558:	e767      	b.n	800a42a <_svfiprintf_r+0x4e>
 800a55a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a55e:	460c      	mov	r4, r1
 800a560:	2001      	movs	r0, #1
 800a562:	e7a5      	b.n	800a4b0 <_svfiprintf_r+0xd4>
 800a564:	2300      	movs	r3, #0
 800a566:	3401      	adds	r4, #1
 800a568:	9305      	str	r3, [sp, #20]
 800a56a:	4619      	mov	r1, r3
 800a56c:	f04f 0c0a 	mov.w	ip, #10
 800a570:	4620      	mov	r0, r4
 800a572:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a576:	3a30      	subs	r2, #48	; 0x30
 800a578:	2a09      	cmp	r2, #9
 800a57a:	d903      	bls.n	800a584 <_svfiprintf_r+0x1a8>
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d0c5      	beq.n	800a50c <_svfiprintf_r+0x130>
 800a580:	9105      	str	r1, [sp, #20]
 800a582:	e7c3      	b.n	800a50c <_svfiprintf_r+0x130>
 800a584:	fb0c 2101 	mla	r1, ip, r1, r2
 800a588:	4604      	mov	r4, r0
 800a58a:	2301      	movs	r3, #1
 800a58c:	e7f0      	b.n	800a570 <_svfiprintf_r+0x194>
 800a58e:	ab03      	add	r3, sp, #12
 800a590:	9300      	str	r3, [sp, #0]
 800a592:	462a      	mov	r2, r5
 800a594:	4b0f      	ldr	r3, [pc, #60]	; (800a5d4 <_svfiprintf_r+0x1f8>)
 800a596:	a904      	add	r1, sp, #16
 800a598:	4638      	mov	r0, r7
 800a59a:	f3af 8000 	nop.w
 800a59e:	1c42      	adds	r2, r0, #1
 800a5a0:	4606      	mov	r6, r0
 800a5a2:	d1d6      	bne.n	800a552 <_svfiprintf_r+0x176>
 800a5a4:	89ab      	ldrh	r3, [r5, #12]
 800a5a6:	065b      	lsls	r3, r3, #25
 800a5a8:	f53f af2c 	bmi.w	800a404 <_svfiprintf_r+0x28>
 800a5ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a5ae:	b01d      	add	sp, #116	; 0x74
 800a5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5b4:	ab03      	add	r3, sp, #12
 800a5b6:	9300      	str	r3, [sp, #0]
 800a5b8:	462a      	mov	r2, r5
 800a5ba:	4b06      	ldr	r3, [pc, #24]	; (800a5d4 <_svfiprintf_r+0x1f8>)
 800a5bc:	a904      	add	r1, sp, #16
 800a5be:	4638      	mov	r0, r7
 800a5c0:	f000 f87a 	bl	800a6b8 <_printf_i>
 800a5c4:	e7eb      	b.n	800a59e <_svfiprintf_r+0x1c2>
 800a5c6:	bf00      	nop
 800a5c8:	0800d7f8 	.word	0x0800d7f8
 800a5cc:	0800d802 	.word	0x0800d802
 800a5d0:	00000000 	.word	0x00000000
 800a5d4:	0800a325 	.word	0x0800a325
 800a5d8:	0800d7fe 	.word	0x0800d7fe

0800a5dc <_printf_common>:
 800a5dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5e0:	4616      	mov	r6, r2
 800a5e2:	4699      	mov	r9, r3
 800a5e4:	688a      	ldr	r2, [r1, #8]
 800a5e6:	690b      	ldr	r3, [r1, #16]
 800a5e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	bfb8      	it	lt
 800a5f0:	4613      	movlt	r3, r2
 800a5f2:	6033      	str	r3, [r6, #0]
 800a5f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a5f8:	4607      	mov	r7, r0
 800a5fa:	460c      	mov	r4, r1
 800a5fc:	b10a      	cbz	r2, 800a602 <_printf_common+0x26>
 800a5fe:	3301      	adds	r3, #1
 800a600:	6033      	str	r3, [r6, #0]
 800a602:	6823      	ldr	r3, [r4, #0]
 800a604:	0699      	lsls	r1, r3, #26
 800a606:	bf42      	ittt	mi
 800a608:	6833      	ldrmi	r3, [r6, #0]
 800a60a:	3302      	addmi	r3, #2
 800a60c:	6033      	strmi	r3, [r6, #0]
 800a60e:	6825      	ldr	r5, [r4, #0]
 800a610:	f015 0506 	ands.w	r5, r5, #6
 800a614:	d106      	bne.n	800a624 <_printf_common+0x48>
 800a616:	f104 0a19 	add.w	sl, r4, #25
 800a61a:	68e3      	ldr	r3, [r4, #12]
 800a61c:	6832      	ldr	r2, [r6, #0]
 800a61e:	1a9b      	subs	r3, r3, r2
 800a620:	42ab      	cmp	r3, r5
 800a622:	dc26      	bgt.n	800a672 <_printf_common+0x96>
 800a624:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a628:	1e13      	subs	r3, r2, #0
 800a62a:	6822      	ldr	r2, [r4, #0]
 800a62c:	bf18      	it	ne
 800a62e:	2301      	movne	r3, #1
 800a630:	0692      	lsls	r2, r2, #26
 800a632:	d42b      	bmi.n	800a68c <_printf_common+0xb0>
 800a634:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a638:	4649      	mov	r1, r9
 800a63a:	4638      	mov	r0, r7
 800a63c:	47c0      	blx	r8
 800a63e:	3001      	adds	r0, #1
 800a640:	d01e      	beq.n	800a680 <_printf_common+0xa4>
 800a642:	6823      	ldr	r3, [r4, #0]
 800a644:	68e5      	ldr	r5, [r4, #12]
 800a646:	6832      	ldr	r2, [r6, #0]
 800a648:	f003 0306 	and.w	r3, r3, #6
 800a64c:	2b04      	cmp	r3, #4
 800a64e:	bf08      	it	eq
 800a650:	1aad      	subeq	r5, r5, r2
 800a652:	68a3      	ldr	r3, [r4, #8]
 800a654:	6922      	ldr	r2, [r4, #16]
 800a656:	bf0c      	ite	eq
 800a658:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a65c:	2500      	movne	r5, #0
 800a65e:	4293      	cmp	r3, r2
 800a660:	bfc4      	itt	gt
 800a662:	1a9b      	subgt	r3, r3, r2
 800a664:	18ed      	addgt	r5, r5, r3
 800a666:	2600      	movs	r6, #0
 800a668:	341a      	adds	r4, #26
 800a66a:	42b5      	cmp	r5, r6
 800a66c:	d11a      	bne.n	800a6a4 <_printf_common+0xc8>
 800a66e:	2000      	movs	r0, #0
 800a670:	e008      	b.n	800a684 <_printf_common+0xa8>
 800a672:	2301      	movs	r3, #1
 800a674:	4652      	mov	r2, sl
 800a676:	4649      	mov	r1, r9
 800a678:	4638      	mov	r0, r7
 800a67a:	47c0      	blx	r8
 800a67c:	3001      	adds	r0, #1
 800a67e:	d103      	bne.n	800a688 <_printf_common+0xac>
 800a680:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a688:	3501      	adds	r5, #1
 800a68a:	e7c6      	b.n	800a61a <_printf_common+0x3e>
 800a68c:	18e1      	adds	r1, r4, r3
 800a68e:	1c5a      	adds	r2, r3, #1
 800a690:	2030      	movs	r0, #48	; 0x30
 800a692:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a696:	4422      	add	r2, r4
 800a698:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a69c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a6a0:	3302      	adds	r3, #2
 800a6a2:	e7c7      	b.n	800a634 <_printf_common+0x58>
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	4622      	mov	r2, r4
 800a6a8:	4649      	mov	r1, r9
 800a6aa:	4638      	mov	r0, r7
 800a6ac:	47c0      	blx	r8
 800a6ae:	3001      	adds	r0, #1
 800a6b0:	d0e6      	beq.n	800a680 <_printf_common+0xa4>
 800a6b2:	3601      	adds	r6, #1
 800a6b4:	e7d9      	b.n	800a66a <_printf_common+0x8e>
	...

0800a6b8 <_printf_i>:
 800a6b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a6bc:	7e0f      	ldrb	r7, [r1, #24]
 800a6be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a6c0:	2f78      	cmp	r7, #120	; 0x78
 800a6c2:	4691      	mov	r9, r2
 800a6c4:	4680      	mov	r8, r0
 800a6c6:	460c      	mov	r4, r1
 800a6c8:	469a      	mov	sl, r3
 800a6ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a6ce:	d807      	bhi.n	800a6e0 <_printf_i+0x28>
 800a6d0:	2f62      	cmp	r7, #98	; 0x62
 800a6d2:	d80a      	bhi.n	800a6ea <_printf_i+0x32>
 800a6d4:	2f00      	cmp	r7, #0
 800a6d6:	f000 80d8 	beq.w	800a88a <_printf_i+0x1d2>
 800a6da:	2f58      	cmp	r7, #88	; 0x58
 800a6dc:	f000 80a3 	beq.w	800a826 <_printf_i+0x16e>
 800a6e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a6e8:	e03a      	b.n	800a760 <_printf_i+0xa8>
 800a6ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a6ee:	2b15      	cmp	r3, #21
 800a6f0:	d8f6      	bhi.n	800a6e0 <_printf_i+0x28>
 800a6f2:	a101      	add	r1, pc, #4	; (adr r1, 800a6f8 <_printf_i+0x40>)
 800a6f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a6f8:	0800a751 	.word	0x0800a751
 800a6fc:	0800a765 	.word	0x0800a765
 800a700:	0800a6e1 	.word	0x0800a6e1
 800a704:	0800a6e1 	.word	0x0800a6e1
 800a708:	0800a6e1 	.word	0x0800a6e1
 800a70c:	0800a6e1 	.word	0x0800a6e1
 800a710:	0800a765 	.word	0x0800a765
 800a714:	0800a6e1 	.word	0x0800a6e1
 800a718:	0800a6e1 	.word	0x0800a6e1
 800a71c:	0800a6e1 	.word	0x0800a6e1
 800a720:	0800a6e1 	.word	0x0800a6e1
 800a724:	0800a871 	.word	0x0800a871
 800a728:	0800a795 	.word	0x0800a795
 800a72c:	0800a853 	.word	0x0800a853
 800a730:	0800a6e1 	.word	0x0800a6e1
 800a734:	0800a6e1 	.word	0x0800a6e1
 800a738:	0800a893 	.word	0x0800a893
 800a73c:	0800a6e1 	.word	0x0800a6e1
 800a740:	0800a795 	.word	0x0800a795
 800a744:	0800a6e1 	.word	0x0800a6e1
 800a748:	0800a6e1 	.word	0x0800a6e1
 800a74c:	0800a85b 	.word	0x0800a85b
 800a750:	682b      	ldr	r3, [r5, #0]
 800a752:	1d1a      	adds	r2, r3, #4
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	602a      	str	r2, [r5, #0]
 800a758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a75c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a760:	2301      	movs	r3, #1
 800a762:	e0a3      	b.n	800a8ac <_printf_i+0x1f4>
 800a764:	6820      	ldr	r0, [r4, #0]
 800a766:	6829      	ldr	r1, [r5, #0]
 800a768:	0606      	lsls	r6, r0, #24
 800a76a:	f101 0304 	add.w	r3, r1, #4
 800a76e:	d50a      	bpl.n	800a786 <_printf_i+0xce>
 800a770:	680e      	ldr	r6, [r1, #0]
 800a772:	602b      	str	r3, [r5, #0]
 800a774:	2e00      	cmp	r6, #0
 800a776:	da03      	bge.n	800a780 <_printf_i+0xc8>
 800a778:	232d      	movs	r3, #45	; 0x2d
 800a77a:	4276      	negs	r6, r6
 800a77c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a780:	485e      	ldr	r0, [pc, #376]	; (800a8fc <_printf_i+0x244>)
 800a782:	230a      	movs	r3, #10
 800a784:	e019      	b.n	800a7ba <_printf_i+0x102>
 800a786:	680e      	ldr	r6, [r1, #0]
 800a788:	602b      	str	r3, [r5, #0]
 800a78a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a78e:	bf18      	it	ne
 800a790:	b236      	sxthne	r6, r6
 800a792:	e7ef      	b.n	800a774 <_printf_i+0xbc>
 800a794:	682b      	ldr	r3, [r5, #0]
 800a796:	6820      	ldr	r0, [r4, #0]
 800a798:	1d19      	adds	r1, r3, #4
 800a79a:	6029      	str	r1, [r5, #0]
 800a79c:	0601      	lsls	r1, r0, #24
 800a79e:	d501      	bpl.n	800a7a4 <_printf_i+0xec>
 800a7a0:	681e      	ldr	r6, [r3, #0]
 800a7a2:	e002      	b.n	800a7aa <_printf_i+0xf2>
 800a7a4:	0646      	lsls	r6, r0, #25
 800a7a6:	d5fb      	bpl.n	800a7a0 <_printf_i+0xe8>
 800a7a8:	881e      	ldrh	r6, [r3, #0]
 800a7aa:	4854      	ldr	r0, [pc, #336]	; (800a8fc <_printf_i+0x244>)
 800a7ac:	2f6f      	cmp	r7, #111	; 0x6f
 800a7ae:	bf0c      	ite	eq
 800a7b0:	2308      	moveq	r3, #8
 800a7b2:	230a      	movne	r3, #10
 800a7b4:	2100      	movs	r1, #0
 800a7b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a7ba:	6865      	ldr	r5, [r4, #4]
 800a7bc:	60a5      	str	r5, [r4, #8]
 800a7be:	2d00      	cmp	r5, #0
 800a7c0:	bfa2      	ittt	ge
 800a7c2:	6821      	ldrge	r1, [r4, #0]
 800a7c4:	f021 0104 	bicge.w	r1, r1, #4
 800a7c8:	6021      	strge	r1, [r4, #0]
 800a7ca:	b90e      	cbnz	r6, 800a7d0 <_printf_i+0x118>
 800a7cc:	2d00      	cmp	r5, #0
 800a7ce:	d04d      	beq.n	800a86c <_printf_i+0x1b4>
 800a7d0:	4615      	mov	r5, r2
 800a7d2:	fbb6 f1f3 	udiv	r1, r6, r3
 800a7d6:	fb03 6711 	mls	r7, r3, r1, r6
 800a7da:	5dc7      	ldrb	r7, [r0, r7]
 800a7dc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a7e0:	4637      	mov	r7, r6
 800a7e2:	42bb      	cmp	r3, r7
 800a7e4:	460e      	mov	r6, r1
 800a7e6:	d9f4      	bls.n	800a7d2 <_printf_i+0x11a>
 800a7e8:	2b08      	cmp	r3, #8
 800a7ea:	d10b      	bne.n	800a804 <_printf_i+0x14c>
 800a7ec:	6823      	ldr	r3, [r4, #0]
 800a7ee:	07de      	lsls	r6, r3, #31
 800a7f0:	d508      	bpl.n	800a804 <_printf_i+0x14c>
 800a7f2:	6923      	ldr	r3, [r4, #16]
 800a7f4:	6861      	ldr	r1, [r4, #4]
 800a7f6:	4299      	cmp	r1, r3
 800a7f8:	bfde      	ittt	le
 800a7fa:	2330      	movle	r3, #48	; 0x30
 800a7fc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a800:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800a804:	1b52      	subs	r2, r2, r5
 800a806:	6122      	str	r2, [r4, #16]
 800a808:	f8cd a000 	str.w	sl, [sp]
 800a80c:	464b      	mov	r3, r9
 800a80e:	aa03      	add	r2, sp, #12
 800a810:	4621      	mov	r1, r4
 800a812:	4640      	mov	r0, r8
 800a814:	f7ff fee2 	bl	800a5dc <_printf_common>
 800a818:	3001      	adds	r0, #1
 800a81a:	d14c      	bne.n	800a8b6 <_printf_i+0x1fe>
 800a81c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a820:	b004      	add	sp, #16
 800a822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a826:	4835      	ldr	r0, [pc, #212]	; (800a8fc <_printf_i+0x244>)
 800a828:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a82c:	6829      	ldr	r1, [r5, #0]
 800a82e:	6823      	ldr	r3, [r4, #0]
 800a830:	f851 6b04 	ldr.w	r6, [r1], #4
 800a834:	6029      	str	r1, [r5, #0]
 800a836:	061d      	lsls	r5, r3, #24
 800a838:	d514      	bpl.n	800a864 <_printf_i+0x1ac>
 800a83a:	07df      	lsls	r7, r3, #31
 800a83c:	bf44      	itt	mi
 800a83e:	f043 0320 	orrmi.w	r3, r3, #32
 800a842:	6023      	strmi	r3, [r4, #0]
 800a844:	b91e      	cbnz	r6, 800a84e <_printf_i+0x196>
 800a846:	6823      	ldr	r3, [r4, #0]
 800a848:	f023 0320 	bic.w	r3, r3, #32
 800a84c:	6023      	str	r3, [r4, #0]
 800a84e:	2310      	movs	r3, #16
 800a850:	e7b0      	b.n	800a7b4 <_printf_i+0xfc>
 800a852:	6823      	ldr	r3, [r4, #0]
 800a854:	f043 0320 	orr.w	r3, r3, #32
 800a858:	6023      	str	r3, [r4, #0]
 800a85a:	2378      	movs	r3, #120	; 0x78
 800a85c:	4828      	ldr	r0, [pc, #160]	; (800a900 <_printf_i+0x248>)
 800a85e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a862:	e7e3      	b.n	800a82c <_printf_i+0x174>
 800a864:	0659      	lsls	r1, r3, #25
 800a866:	bf48      	it	mi
 800a868:	b2b6      	uxthmi	r6, r6
 800a86a:	e7e6      	b.n	800a83a <_printf_i+0x182>
 800a86c:	4615      	mov	r5, r2
 800a86e:	e7bb      	b.n	800a7e8 <_printf_i+0x130>
 800a870:	682b      	ldr	r3, [r5, #0]
 800a872:	6826      	ldr	r6, [r4, #0]
 800a874:	6961      	ldr	r1, [r4, #20]
 800a876:	1d18      	adds	r0, r3, #4
 800a878:	6028      	str	r0, [r5, #0]
 800a87a:	0635      	lsls	r5, r6, #24
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	d501      	bpl.n	800a884 <_printf_i+0x1cc>
 800a880:	6019      	str	r1, [r3, #0]
 800a882:	e002      	b.n	800a88a <_printf_i+0x1d2>
 800a884:	0670      	lsls	r0, r6, #25
 800a886:	d5fb      	bpl.n	800a880 <_printf_i+0x1c8>
 800a888:	8019      	strh	r1, [r3, #0]
 800a88a:	2300      	movs	r3, #0
 800a88c:	6123      	str	r3, [r4, #16]
 800a88e:	4615      	mov	r5, r2
 800a890:	e7ba      	b.n	800a808 <_printf_i+0x150>
 800a892:	682b      	ldr	r3, [r5, #0]
 800a894:	1d1a      	adds	r2, r3, #4
 800a896:	602a      	str	r2, [r5, #0]
 800a898:	681d      	ldr	r5, [r3, #0]
 800a89a:	6862      	ldr	r2, [r4, #4]
 800a89c:	2100      	movs	r1, #0
 800a89e:	4628      	mov	r0, r5
 800a8a0:	f7f5 fca6 	bl	80001f0 <memchr>
 800a8a4:	b108      	cbz	r0, 800a8aa <_printf_i+0x1f2>
 800a8a6:	1b40      	subs	r0, r0, r5
 800a8a8:	6060      	str	r0, [r4, #4]
 800a8aa:	6863      	ldr	r3, [r4, #4]
 800a8ac:	6123      	str	r3, [r4, #16]
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a8b4:	e7a8      	b.n	800a808 <_printf_i+0x150>
 800a8b6:	6923      	ldr	r3, [r4, #16]
 800a8b8:	462a      	mov	r2, r5
 800a8ba:	4649      	mov	r1, r9
 800a8bc:	4640      	mov	r0, r8
 800a8be:	47d0      	blx	sl
 800a8c0:	3001      	adds	r0, #1
 800a8c2:	d0ab      	beq.n	800a81c <_printf_i+0x164>
 800a8c4:	6823      	ldr	r3, [r4, #0]
 800a8c6:	079b      	lsls	r3, r3, #30
 800a8c8:	d413      	bmi.n	800a8f2 <_printf_i+0x23a>
 800a8ca:	68e0      	ldr	r0, [r4, #12]
 800a8cc:	9b03      	ldr	r3, [sp, #12]
 800a8ce:	4298      	cmp	r0, r3
 800a8d0:	bfb8      	it	lt
 800a8d2:	4618      	movlt	r0, r3
 800a8d4:	e7a4      	b.n	800a820 <_printf_i+0x168>
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	4632      	mov	r2, r6
 800a8da:	4649      	mov	r1, r9
 800a8dc:	4640      	mov	r0, r8
 800a8de:	47d0      	blx	sl
 800a8e0:	3001      	adds	r0, #1
 800a8e2:	d09b      	beq.n	800a81c <_printf_i+0x164>
 800a8e4:	3501      	adds	r5, #1
 800a8e6:	68e3      	ldr	r3, [r4, #12]
 800a8e8:	9903      	ldr	r1, [sp, #12]
 800a8ea:	1a5b      	subs	r3, r3, r1
 800a8ec:	42ab      	cmp	r3, r5
 800a8ee:	dcf2      	bgt.n	800a8d6 <_printf_i+0x21e>
 800a8f0:	e7eb      	b.n	800a8ca <_printf_i+0x212>
 800a8f2:	2500      	movs	r5, #0
 800a8f4:	f104 0619 	add.w	r6, r4, #25
 800a8f8:	e7f5      	b.n	800a8e6 <_printf_i+0x22e>
 800a8fa:	bf00      	nop
 800a8fc:	0800d809 	.word	0x0800d809
 800a900:	0800d81a 	.word	0x0800d81a

0800a904 <__retarget_lock_acquire_recursive>:
 800a904:	4770      	bx	lr

0800a906 <__retarget_lock_release_recursive>:
 800a906:	4770      	bx	lr

0800a908 <memmove>:
 800a908:	4288      	cmp	r0, r1
 800a90a:	b510      	push	{r4, lr}
 800a90c:	eb01 0402 	add.w	r4, r1, r2
 800a910:	d902      	bls.n	800a918 <memmove+0x10>
 800a912:	4284      	cmp	r4, r0
 800a914:	4623      	mov	r3, r4
 800a916:	d807      	bhi.n	800a928 <memmove+0x20>
 800a918:	1e43      	subs	r3, r0, #1
 800a91a:	42a1      	cmp	r1, r4
 800a91c:	d008      	beq.n	800a930 <memmove+0x28>
 800a91e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a922:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a926:	e7f8      	b.n	800a91a <memmove+0x12>
 800a928:	4402      	add	r2, r0
 800a92a:	4601      	mov	r1, r0
 800a92c:	428a      	cmp	r2, r1
 800a92e:	d100      	bne.n	800a932 <memmove+0x2a>
 800a930:	bd10      	pop	{r4, pc}
 800a932:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a936:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a93a:	e7f7      	b.n	800a92c <memmove+0x24>

0800a93c <_realloc_r>:
 800a93c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a940:	4680      	mov	r8, r0
 800a942:	4614      	mov	r4, r2
 800a944:	460e      	mov	r6, r1
 800a946:	b921      	cbnz	r1, 800a952 <_realloc_r+0x16>
 800a948:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a94c:	4611      	mov	r1, r2
 800a94e:	f7ff bc39 	b.w	800a1c4 <_malloc_r>
 800a952:	b92a      	cbnz	r2, 800a960 <_realloc_r+0x24>
 800a954:	f7ff fbca 	bl	800a0ec <_free_r>
 800a958:	4625      	mov	r5, r4
 800a95a:	4628      	mov	r0, r5
 800a95c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a960:	f000 f81b 	bl	800a99a <_malloc_usable_size_r>
 800a964:	4284      	cmp	r4, r0
 800a966:	4607      	mov	r7, r0
 800a968:	d802      	bhi.n	800a970 <_realloc_r+0x34>
 800a96a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a96e:	d812      	bhi.n	800a996 <_realloc_r+0x5a>
 800a970:	4621      	mov	r1, r4
 800a972:	4640      	mov	r0, r8
 800a974:	f7ff fc26 	bl	800a1c4 <_malloc_r>
 800a978:	4605      	mov	r5, r0
 800a97a:	2800      	cmp	r0, #0
 800a97c:	d0ed      	beq.n	800a95a <_realloc_r+0x1e>
 800a97e:	42bc      	cmp	r4, r7
 800a980:	4622      	mov	r2, r4
 800a982:	4631      	mov	r1, r6
 800a984:	bf28      	it	cs
 800a986:	463a      	movcs	r2, r7
 800a988:	f7ff fb9a 	bl	800a0c0 <memcpy>
 800a98c:	4631      	mov	r1, r6
 800a98e:	4640      	mov	r0, r8
 800a990:	f7ff fbac 	bl	800a0ec <_free_r>
 800a994:	e7e1      	b.n	800a95a <_realloc_r+0x1e>
 800a996:	4635      	mov	r5, r6
 800a998:	e7df      	b.n	800a95a <_realloc_r+0x1e>

0800a99a <_malloc_usable_size_r>:
 800a99a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a99e:	1f18      	subs	r0, r3, #4
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	bfbc      	itt	lt
 800a9a4:	580b      	ldrlt	r3, [r1, r0]
 800a9a6:	18c0      	addlt	r0, r0, r3
 800a9a8:	4770      	bx	lr
	...

0800a9ac <_init>:
 800a9ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ae:	bf00      	nop
 800a9b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9b2:	bc08      	pop	{r3}
 800a9b4:	469e      	mov	lr, r3
 800a9b6:	4770      	bx	lr

0800a9b8 <_fini>:
 800a9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9ba:	bf00      	nop
 800a9bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9be:	bc08      	pop	{r3}
 800a9c0:	469e      	mov	lr, r3
 800a9c2:	4770      	bx	lr
