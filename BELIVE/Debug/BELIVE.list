
BELIVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060b0  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002e98  0800625c  0800625c  0001625c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090f4  080090f4  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  080090f4  080090f4  000190f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090fc  080090fc  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090fc  080090fc  000190fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009100  08009100  00019100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08009104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          00000484  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004f0  200004f0  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018992  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031b8  00000000  00000000  00038a2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001478  00000000  00000000  0003bbe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001348  00000000  00000000  0003d060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000252df  00000000  00000000  0003e3a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000177e8  00000000  00000000  00063687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc8bc  00000000  00000000  0007ae6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0015772b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000561c  00000000  00000000  0015777c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000006c 	.word	0x2000006c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006244 	.word	0x08006244

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000070 	.word	0x20000070
 80001e8:	08006244 	.word	0x08006244

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b974 	b.w	80004ec <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468e      	mov	lr, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14d      	bne.n	80002c6 <__udivmoddi4+0xaa>
 800022a:	428a      	cmp	r2, r1
 800022c:	4694      	mov	ip, r2
 800022e:	d969      	bls.n	8000304 <__udivmoddi4+0xe8>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b152      	cbz	r2, 800024c <__udivmoddi4+0x30>
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	f1c2 0120 	rsb	r1, r2, #32
 800023e:	fa20 f101 	lsr.w	r1, r0, r1
 8000242:	fa0c fc02 	lsl.w	ip, ip, r2
 8000246:	ea41 0e03 	orr.w	lr, r1, r3
 800024a:	4094      	lsls	r4, r2
 800024c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000250:	0c21      	lsrs	r1, r4, #16
 8000252:	fbbe f6f8 	udiv	r6, lr, r8
 8000256:	fa1f f78c 	uxth.w	r7, ip
 800025a:	fb08 e316 	mls	r3, r8, r6, lr
 800025e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000262:	fb06 f107 	mul.w	r1, r6, r7
 8000266:	4299      	cmp	r1, r3
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x64>
 800026a:	eb1c 0303 	adds.w	r3, ip, r3
 800026e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000272:	f080 811f 	bcs.w	80004b4 <__udivmoddi4+0x298>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 811c 	bls.w	80004b4 <__udivmoddi4+0x298>
 800027c:	3e02      	subs	r6, #2
 800027e:	4463      	add	r3, ip
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0f8 	udiv	r0, r3, r8
 8000288:	fb08 3310 	mls	r3, r8, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 f707 	mul.w	r7, r0, r7
 8000294:	42a7      	cmp	r7, r4
 8000296:	d90a      	bls.n	80002ae <__udivmoddi4+0x92>
 8000298:	eb1c 0404 	adds.w	r4, ip, r4
 800029c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002a0:	f080 810a 	bcs.w	80004b8 <__udivmoddi4+0x29c>
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	f240 8107 	bls.w	80004b8 <__udivmoddi4+0x29c>
 80002aa:	4464      	add	r4, ip
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b2:	1be4      	subs	r4, r4, r7
 80002b4:	2600      	movs	r6, #0
 80002b6:	b11d      	cbz	r5, 80002c0 <__udivmoddi4+0xa4>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c5 4300 	strd	r4, r3, [r5]
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xc2>
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	f000 80ef 	beq.w	80004ae <__udivmoddi4+0x292>
 80002d0:	2600      	movs	r6, #0
 80002d2:	e9c5 0100 	strd	r0, r1, [r5]
 80002d6:	4630      	mov	r0, r6
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f683 	clz	r6, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d14a      	bne.n	800037c <__udivmoddi4+0x160>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd4>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80f9 	bhi.w	80004e2 <__udivmoddi4+0x2c6>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	469e      	mov	lr, r3
 80002fa:	2d00      	cmp	r5, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa4>
 80002fe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa4>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xec>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 8092 	bne.w	8000436 <__udivmoddi4+0x21a>
 8000312:	eba1 010c 	sub.w	r1, r1, ip
 8000316:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031a:	fa1f fe8c 	uxth.w	lr, ip
 800031e:	2601      	movs	r6, #1
 8000320:	0c20      	lsrs	r0, r4, #16
 8000322:	fbb1 f3f7 	udiv	r3, r1, r7
 8000326:	fb07 1113 	mls	r1, r7, r3, r1
 800032a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032e:	fb0e f003 	mul.w	r0, lr, r3
 8000332:	4288      	cmp	r0, r1
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x12c>
 8000336:	eb1c 0101 	adds.w	r1, ip, r1
 800033a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x12a>
 8000340:	4288      	cmp	r0, r1
 8000342:	f200 80cb 	bhi.w	80004dc <__udivmoddi4+0x2c0>
 8000346:	4643      	mov	r3, r8
 8000348:	1a09      	subs	r1, r1, r0
 800034a:	b2a4      	uxth	r4, r4
 800034c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000350:	fb07 1110 	mls	r1, r7, r0, r1
 8000354:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000358:	fb0e fe00 	mul.w	lr, lr, r0
 800035c:	45a6      	cmp	lr, r4
 800035e:	d908      	bls.n	8000372 <__udivmoddi4+0x156>
 8000360:	eb1c 0404 	adds.w	r4, ip, r4
 8000364:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000368:	d202      	bcs.n	8000370 <__udivmoddi4+0x154>
 800036a:	45a6      	cmp	lr, r4
 800036c:	f200 80bb 	bhi.w	80004e6 <__udivmoddi4+0x2ca>
 8000370:	4608      	mov	r0, r1
 8000372:	eba4 040e 	sub.w	r4, r4, lr
 8000376:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037a:	e79c      	b.n	80002b6 <__udivmoddi4+0x9a>
 800037c:	f1c6 0720 	rsb	r7, r6, #32
 8000380:	40b3      	lsls	r3, r6
 8000382:	fa22 fc07 	lsr.w	ip, r2, r7
 8000386:	ea4c 0c03 	orr.w	ip, ip, r3
 800038a:	fa20 f407 	lsr.w	r4, r0, r7
 800038e:	fa01 f306 	lsl.w	r3, r1, r6
 8000392:	431c      	orrs	r4, r3
 8000394:	40f9      	lsrs	r1, r7
 8000396:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039a:	fa00 f306 	lsl.w	r3, r0, r6
 800039e:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a2:	0c20      	lsrs	r0, r4, #16
 80003a4:	fa1f fe8c 	uxth.w	lr, ip
 80003a8:	fb09 1118 	mls	r1, r9, r8, r1
 80003ac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b0:	fb08 f00e 	mul.w	r0, r8, lr
 80003b4:	4288      	cmp	r0, r1
 80003b6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ba:	d90b      	bls.n	80003d4 <__udivmoddi4+0x1b8>
 80003bc:	eb1c 0101 	adds.w	r1, ip, r1
 80003c0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003c4:	f080 8088 	bcs.w	80004d8 <__udivmoddi4+0x2bc>
 80003c8:	4288      	cmp	r0, r1
 80003ca:	f240 8085 	bls.w	80004d8 <__udivmoddi4+0x2bc>
 80003ce:	f1a8 0802 	sub.w	r8, r8, #2
 80003d2:	4461      	add	r1, ip
 80003d4:	1a09      	subs	r1, r1, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003dc:	fb09 1110 	mls	r1, r9, r0, r1
 80003e0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e8:	458e      	cmp	lr, r1
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x1e2>
 80003ec:	eb1c 0101 	adds.w	r1, ip, r1
 80003f0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003f4:	d26c      	bcs.n	80004d0 <__udivmoddi4+0x2b4>
 80003f6:	458e      	cmp	lr, r1
 80003f8:	d96a      	bls.n	80004d0 <__udivmoddi4+0x2b4>
 80003fa:	3802      	subs	r0, #2
 80003fc:	4461      	add	r1, ip
 80003fe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000402:	fba0 9402 	umull	r9, r4, r0, r2
 8000406:	eba1 010e 	sub.w	r1, r1, lr
 800040a:	42a1      	cmp	r1, r4
 800040c:	46c8      	mov	r8, r9
 800040e:	46a6      	mov	lr, r4
 8000410:	d356      	bcc.n	80004c0 <__udivmoddi4+0x2a4>
 8000412:	d053      	beq.n	80004bc <__udivmoddi4+0x2a0>
 8000414:	b15d      	cbz	r5, 800042e <__udivmoddi4+0x212>
 8000416:	ebb3 0208 	subs.w	r2, r3, r8
 800041a:	eb61 010e 	sbc.w	r1, r1, lr
 800041e:	fa01 f707 	lsl.w	r7, r1, r7
 8000422:	fa22 f306 	lsr.w	r3, r2, r6
 8000426:	40f1      	lsrs	r1, r6
 8000428:	431f      	orrs	r7, r3
 800042a:	e9c5 7100 	strd	r7, r1, [r5]
 800042e:	2600      	movs	r6, #0
 8000430:	4631      	mov	r1, r6
 8000432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000436:	f1c2 0320 	rsb	r3, r2, #32
 800043a:	40d8      	lsrs	r0, r3
 800043c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000440:	fa21 f303 	lsr.w	r3, r1, r3
 8000444:	4091      	lsls	r1, r2
 8000446:	4301      	orrs	r1, r0
 8000448:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800044c:	fa1f fe8c 	uxth.w	lr, ip
 8000450:	fbb3 f0f7 	udiv	r0, r3, r7
 8000454:	fb07 3610 	mls	r6, r7, r0, r3
 8000458:	0c0b      	lsrs	r3, r1, #16
 800045a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045e:	fb00 f60e 	mul.w	r6, r0, lr
 8000462:	429e      	cmp	r6, r3
 8000464:	fa04 f402 	lsl.w	r4, r4, r2
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0x260>
 800046a:	eb1c 0303 	adds.w	r3, ip, r3
 800046e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000472:	d22f      	bcs.n	80004d4 <__udivmoddi4+0x2b8>
 8000474:	429e      	cmp	r6, r3
 8000476:	d92d      	bls.n	80004d4 <__udivmoddi4+0x2b8>
 8000478:	3802      	subs	r0, #2
 800047a:	4463      	add	r3, ip
 800047c:	1b9b      	subs	r3, r3, r6
 800047e:	b289      	uxth	r1, r1
 8000480:	fbb3 f6f7 	udiv	r6, r3, r7
 8000484:	fb07 3316 	mls	r3, r7, r6, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb06 f30e 	mul.w	r3, r6, lr
 8000490:	428b      	cmp	r3, r1
 8000492:	d908      	bls.n	80004a6 <__udivmoddi4+0x28a>
 8000494:	eb1c 0101 	adds.w	r1, ip, r1
 8000498:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800049c:	d216      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d914      	bls.n	80004cc <__udivmoddi4+0x2b0>
 80004a2:	3e02      	subs	r6, #2
 80004a4:	4461      	add	r1, ip
 80004a6:	1ac9      	subs	r1, r1, r3
 80004a8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004ac:	e738      	b.n	8000320 <__udivmoddi4+0x104>
 80004ae:	462e      	mov	r6, r5
 80004b0:	4628      	mov	r0, r5
 80004b2:	e705      	b.n	80002c0 <__udivmoddi4+0xa4>
 80004b4:	4606      	mov	r6, r0
 80004b6:	e6e3      	b.n	8000280 <__udivmoddi4+0x64>
 80004b8:	4618      	mov	r0, r3
 80004ba:	e6f8      	b.n	80002ae <__udivmoddi4+0x92>
 80004bc:	454b      	cmp	r3, r9
 80004be:	d2a9      	bcs.n	8000414 <__udivmoddi4+0x1f8>
 80004c0:	ebb9 0802 	subs.w	r8, r9, r2
 80004c4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c8:	3801      	subs	r0, #1
 80004ca:	e7a3      	b.n	8000414 <__udivmoddi4+0x1f8>
 80004cc:	4646      	mov	r6, r8
 80004ce:	e7ea      	b.n	80004a6 <__udivmoddi4+0x28a>
 80004d0:	4620      	mov	r0, r4
 80004d2:	e794      	b.n	80003fe <__udivmoddi4+0x1e2>
 80004d4:	4640      	mov	r0, r8
 80004d6:	e7d1      	b.n	800047c <__udivmoddi4+0x260>
 80004d8:	46d0      	mov	r8, sl
 80004da:	e77b      	b.n	80003d4 <__udivmoddi4+0x1b8>
 80004dc:	3b02      	subs	r3, #2
 80004de:	4461      	add	r1, ip
 80004e0:	e732      	b.n	8000348 <__udivmoddi4+0x12c>
 80004e2:	4630      	mov	r0, r6
 80004e4:	e709      	b.n	80002fa <__udivmoddi4+0xde>
 80004e6:	4464      	add	r4, ip
 80004e8:	3802      	subs	r0, #2
 80004ea:	e742      	b.n	8000372 <__udivmoddi4+0x156>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f4:	f002 f85c 	bl	80025b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f8:	f000 f816 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004fc:	f000 fad6 	bl	8000aac <MX_GPIO_Init>
  MX_DMA2D_Init();
 8000500:	f000 f884 	bl	800060c <MX_DMA2D_Init>
  MX_FMC_Init();
 8000504:	f000 fa84 	bl	8000a10 <MX_FMC_Init>
  MX_I2C3_Init();
 8000508:	f000 f8b2 	bl	8000670 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 800050c:	f000 fa56 	bl	80009bc <MX_USART1_UART_Init>
  MX_LTDC_Init();
 8000510:	f000 f96c 	bl	80007ec <MX_LTDC_Init>
  MX_SPI5_Init();
 8000514:	f000 fa1c 	bl	8000950 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000518:	f001 fa30 	bl	800197c <BSP_LCD_Init>
  /* USER CODE END 2 */

  Display_DemoDescription();
 800051c:	f000 f8e8 	bl	80006f0 <Display_DemoDescription>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Display_DemoDescription();
 8000520:	f000 f8e6 	bl	80006f0 <Display_DemoDescription>
 8000524:	e7fc      	b.n	8000520 <main+0x30>
	...

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b094      	sub	sp, #80	; 0x50
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0320 	add.w	r3, r7, #32
 8000532:	2230      	movs	r2, #48	; 0x30
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f005 fe7c 	bl	8006234 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	f107 030c 	add.w	r3, r7, #12
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]
 800054a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800054c:	2300      	movs	r3, #0
 800054e:	60bb      	str	r3, [r7, #8]
 8000550:	4b2c      	ldr	r3, [pc, #176]	; (8000604 <SystemClock_Config+0xdc>)
 8000552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000554:	4a2b      	ldr	r2, [pc, #172]	; (8000604 <SystemClock_Config+0xdc>)
 8000556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800055a:	6413      	str	r3, [r2, #64]	; 0x40
 800055c:	4b29      	ldr	r3, [pc, #164]	; (8000604 <SystemClock_Config+0xdc>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000564:	60bb      	str	r3, [r7, #8]
 8000566:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000568:	2300      	movs	r3, #0
 800056a:	607b      	str	r3, [r7, #4]
 800056c:	4b26      	ldr	r3, [pc, #152]	; (8000608 <SystemClock_Config+0xe0>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a25      	ldr	r2, [pc, #148]	; (8000608 <SystemClock_Config+0xe0>)
 8000572:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000576:	6013      	str	r3, [r2, #0]
 8000578:	4b23      	ldr	r3, [pc, #140]	; (8000608 <SystemClock_Config+0xe0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000584:	2301      	movs	r3, #1
 8000586:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000588:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800058c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800058e:	2302      	movs	r3, #2
 8000590:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000592:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000596:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000598:	2308      	movs	r3, #8
 800059a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 800059c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80005a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005a6:	2303      	movs	r3, #3
 80005a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	4618      	mov	r0, r3
 80005b0:	f003 fd78 	bl	80040a4 <HAL_RCC_OscConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005ba:	f000 faf3 	bl	8000ba4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005be:	f003 fd21 	bl	8004004 <HAL_PWREx_EnableOverDrive>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80005c8:	f000 faec 	bl	8000ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005cc:	230f      	movs	r3, #15
 80005ce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d0:	2302      	movs	r3, #2
 80005d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005e2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005e4:	f107 030c 	add.w	r3, r7, #12
 80005e8:	2105      	movs	r1, #5
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 ffd2 	bl	8004594 <HAL_RCC_ClockConfig>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80005f6:	f000 fad5 	bl	8000ba4 <Error_Handler>
  }
}
 80005fa:	bf00      	nop
 80005fc:	3750      	adds	r7, #80	; 0x50
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40023800 	.word	0x40023800
 8000608:	40007000 	.word	0x40007000

0800060c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000610:	4b15      	ldr	r3, [pc, #84]	; (8000668 <MX_DMA2D_Init+0x5c>)
 8000612:	4a16      	ldr	r2, [pc, #88]	; (800066c <MX_DMA2D_Init+0x60>)
 8000614:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000616:	4b14      	ldr	r3, [pc, #80]	; (8000668 <MX_DMA2D_Init+0x5c>)
 8000618:	2200      	movs	r2, #0
 800061a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_RGB565;
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <MX_DMA2D_Init+0x5c>)
 800061e:	2202      	movs	r2, #2
 8000620:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000622:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_DMA2D_Init+0x5c>)
 8000624:	2200      	movs	r2, #0
 8000626:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000628:	4b0f      	ldr	r3, [pc, #60]	; (8000668 <MX_DMA2D_Init+0x5c>)
 800062a:	2200      	movs	r2, #0
 800062c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 800062e:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_DMA2D_Init+0x5c>)
 8000630:	2202      	movs	r2, #2
 8000632:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000634:	4b0c      	ldr	r3, [pc, #48]	; (8000668 <MX_DMA2D_Init+0x5c>)
 8000636:	2200      	movs	r2, #0
 8000638:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800063a:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <MX_DMA2D_Init+0x5c>)
 800063c:	2200      	movs	r2, #0
 800063e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000640:	4809      	ldr	r0, [pc, #36]	; (8000668 <MX_DMA2D_Init+0x5c>)
 8000642:	f002 fb1b 	bl	8002c7c <HAL_DMA2D_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800064c:	f000 faaa 	bl	8000ba4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000650:	2101      	movs	r1, #1
 8000652:	4805      	ldr	r0, [pc, #20]	; (8000668 <MX_DMA2D_Init+0x5c>)
 8000654:	f002 fc70 	bl	8002f38 <HAL_DMA2D_ConfigLayer>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800065e:	f000 faa1 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000088 	.word	0x20000088
 800066c:	4002b000 	.word	0x4002b000

08000670 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000674:	4b1b      	ldr	r3, [pc, #108]	; (80006e4 <MX_I2C3_Init+0x74>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <MX_I2C3_Init+0x78>)
 8000678:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800067a:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <MX_I2C3_Init+0x74>)
 800067c:	4a1b      	ldr	r2, [pc, #108]	; (80006ec <MX_I2C3_Init+0x7c>)
 800067e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000680:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <MX_I2C3_Init+0x74>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000686:	4b17      	ldr	r3, [pc, #92]	; (80006e4 <MX_I2C3_Init+0x74>)
 8000688:	2200      	movs	r2, #0
 800068a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800068c:	4b15      	ldr	r3, [pc, #84]	; (80006e4 <MX_I2C3_Init+0x74>)
 800068e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000692:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000694:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <MX_I2C3_Init+0x74>)
 8000696:	2200      	movs	r2, #0
 8000698:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800069a:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <MX_I2C3_Init+0x74>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a0:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <MX_I2C3_Init+0x74>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a6:	4b0f      	ldr	r3, [pc, #60]	; (80006e4 <MX_I2C3_Init+0x74>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80006ac:	480d      	ldr	r0, [pc, #52]	; (80006e4 <MX_I2C3_Init+0x74>)
 80006ae:	f003 f843 	bl	8003738 <HAL_I2C_Init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80006b8:	f000 fa74 	bl	8000ba4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006bc:	2100      	movs	r1, #0
 80006be:	4809      	ldr	r0, [pc, #36]	; (80006e4 <MX_I2C3_Init+0x74>)
 80006c0:	f003 f97e 	bl	80039c0 <HAL_I2CEx_ConfigAnalogFilter>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80006ca:	f000 fa6b 	bl	8000ba4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80006ce:	2100      	movs	r1, #0
 80006d0:	4804      	ldr	r0, [pc, #16]	; (80006e4 <MX_I2C3_Init+0x74>)
 80006d2:	f003 f9b1 	bl	8003a38 <HAL_I2CEx_ConfigDigitalFilter>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80006dc:	f000 fa62 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	200000c8 	.word	0x200000c8
 80006e8:	40005c00 	.word	0x40005c00
 80006ec:	000186a0 	.word	0x000186a0

080006f0 <Display_DemoDescription>:
static void Display_DemoDescription(void)
{
 80006f0:	b590      	push	{r4, r7, lr}
 80006f2:	b08f      	sub	sp, #60	; 0x3c
 80006f4:	af00      	add	r7, sp, #0
  uint8_t desc[50];

  /* Set LCD Foreground Layer  */
  BSP_LCD_SelectLayer(1);
 80006f6:	2001      	movs	r0, #1
 80006f8:	f001 f9c2 	bl	8001a80 <BSP_LCD_SelectLayer>

  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80006fc:	4831      	ldr	r0, [pc, #196]	; (80007c4 <Display_DemoDescription+0xd4>)
 80006fe:	f001 fa01 	bl	8001b04 <BSP_LCD_SetFont>

  /* Clear the LCD */
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000702:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000706:	f001 f9e3 	bl	8001ad0 <BSP_LCD_SetBackColor>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800070a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800070e:	f001 fa13 	bl	8001b38 <BSP_LCD_Clear>

  /* Set the LCD Text Color */
  BSP_LCD_SetTextColor(LCD_COLOR_DARKBLUE);
 8000712:	482d      	ldr	r0, [pc, #180]	; (80007c8 <Display_DemoDescription+0xd8>)
 8000714:	f001 f9c4 	bl	8001aa0 <BSP_LCD_SetTextColor>

  /* Display LCD messages */
  BSP_LCD_DisplayStringAt(0, 10, (uint8_t*)"Chuje kurwa co to ma byc", CENTER_MODE);
 8000718:	2301      	movs	r3, #1
 800071a:	4a2c      	ldr	r2, [pc, #176]	; (80007cc <Display_DemoDescription+0xdc>)
 800071c:	210a      	movs	r1, #10
 800071e:	2000      	movs	r0, #0
 8000720:	f001 fa76 	bl	8001c10 <BSP_LCD_DisplayStringAt>
  BSP_LCD_SetFont(&Font16);
 8000724:	482a      	ldr	r0, [pc, #168]	; (80007d0 <Display_DemoDescription+0xe0>)
 8000726:	f001 f9ed 	bl	8001b04 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, 35, (uint8_t*)"Drivers examples", CENTER_MODE);
 800072a:	2301      	movs	r3, #1
 800072c:	4a29      	ldr	r2, [pc, #164]	; (80007d4 <Display_DemoDescription+0xe4>)
 800072e:	2123      	movs	r1, #35	; 0x23
 8000730:	2000      	movs	r0, #0
 8000732:	f001 fa6d 	bl	8001c10 <BSP_LCD_DisplayStringAt>

  /* Draw Bitmap */

  BSP_LCD_SetFont(&Font8);
 8000736:	4828      	ldr	r0, [pc, #160]	; (80007d8 <Display_DemoDescription+0xe8>)
 8000738:	f001 f9e4 	bl	8001b04 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 20, (uint8_t*)"Copyright (c) STMicroelectronics 2017", CENTER_MODE);
 800073c:	f001 f994 	bl	8001a68 <BSP_LCD_GetYSize>
 8000740:	4603      	mov	r3, r0
 8000742:	b29b      	uxth	r3, r3
 8000744:	3b14      	subs	r3, #20
 8000746:	b299      	uxth	r1, r3
 8000748:	2301      	movs	r3, #1
 800074a:	4a24      	ldr	r2, [pc, #144]	; (80007dc <Display_DemoDescription+0xec>)
 800074c:	2000      	movs	r0, #0
 800074e:	f001 fa5f 	bl	8001c10 <BSP_LCD_DisplayStringAt>

  BSP_LCD_SetFont(&Font12);
 8000752:	4823      	ldr	r0, [pc, #140]	; (80007e0 <Display_DemoDescription+0xf0>)
 8000754:	f001 f9d6 	bl	8001b04 <BSP_LCD_SetFont>
  BSP_LCD_SetTextColor(LCD_COLOR_BLUE);
 8000758:	4822      	ldr	r0, [pc, #136]	; (80007e4 <Display_DemoDescription+0xf4>)
 800075a:	f001 f9a1 	bl	8001aa0 <BSP_LCD_SetTextColor>
  BSP_LCD_FillRect(0, BSP_LCD_GetYSize()/2 + 15, BSP_LCD_GetXSize(), 60);
 800075e:	f001 f983 	bl	8001a68 <BSP_LCD_GetYSize>
 8000762:	4603      	mov	r3, r0
 8000764:	085b      	lsrs	r3, r3, #1
 8000766:	b29b      	uxth	r3, r3
 8000768:	330f      	adds	r3, #15
 800076a:	b29c      	uxth	r4, r3
 800076c:	f001 f970 	bl	8001a50 <BSP_LCD_GetXSize>
 8000770:	4603      	mov	r3, r0
 8000772:	b29a      	uxth	r2, r3
 8000774:	233c      	movs	r3, #60	; 0x3c
 8000776:	4621      	mov	r1, r4
 8000778:	2000      	movs	r0, #0
 800077a:	f001 fb07 	bl	8001d8c <BSP_LCD_FillRect>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800077e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000782:	f001 f98d 	bl	8001aa0 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_BLUE);
 8000786:	4817      	ldr	r0, [pc, #92]	; (80007e4 <Display_DemoDescription+0xf4>)
 8000788:	f001 f9a2 	bl	8001ad0 <BSP_LCD_SetBackColor>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 30, (uint8_t*)"Press USER Button to start:", CENTER_MODE);
 800078c:	f001 f96c 	bl	8001a68 <BSP_LCD_GetYSize>
 8000790:	4603      	mov	r3, r0
 8000792:	085b      	lsrs	r3, r3, #1
 8000794:	b29b      	uxth	r3, r3
 8000796:	331e      	adds	r3, #30
 8000798:	b299      	uxth	r1, r3
 800079a:	2301      	movs	r3, #1
 800079c:	4a12      	ldr	r2, [pc, #72]	; (80007e8 <Display_DemoDescription+0xf8>)
 800079e:	2000      	movs	r0, #0
 80007a0:	f001 fa36 	bl	8001c10 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 45, (uint8_t *)desc, CENTER_MODE);
 80007a4:	f001 f960 	bl	8001a68 <BSP_LCD_GetYSize>
 80007a8:	4603      	mov	r3, r0
 80007aa:	085b      	lsrs	r3, r3, #1
 80007ac:	b29b      	uxth	r3, r3
 80007ae:	332d      	adds	r3, #45	; 0x2d
 80007b0:	b299      	uxth	r1, r3
 80007b2:	1d3a      	adds	r2, r7, #4
 80007b4:	2301      	movs	r3, #1
 80007b6:	2000      	movs	r0, #0
 80007b8:	f001 fa2a 	bl	8001c10 <BSP_LCD_DisplayStringAt>
}
 80007bc:	bf00      	nop
 80007be:	373c      	adds	r7, #60	; 0x3c
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd90      	pop	{r4, r7, pc}
 80007c4:	20000040 	.word	0x20000040
 80007c8:	ff000080 	.word	0xff000080
 80007cc:	0800625c 	.word	0x0800625c
 80007d0:	20000048 	.word	0x20000048
 80007d4:	08006278 	.word	0x08006278
 80007d8:	20000058 	.word	0x20000058
 80007dc:	0800628c 	.word	0x0800628c
 80007e0:	20000050 	.word	0x20000050
 80007e4:	ff0000ff 	.word	0xff0000ff
 80007e8:	080062b4 	.word	0x080062b4

080007ec <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b09a      	sub	sp, #104	; 0x68
 80007f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80007f2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80007f6:	2234      	movs	r2, #52	; 0x34
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f005 fd1a 	bl	8006234 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000800:	463b      	mov	r3, r7
 8000802:	2234      	movs	r2, #52	; 0x34
 8000804:	2100      	movs	r1, #0
 8000806:	4618      	mov	r0, r3
 8000808:	f005 fd14 	bl	8006234 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800080c:	4b4e      	ldr	r3, [pc, #312]	; (8000948 <MX_LTDC_Init+0x15c>)
 800080e:	4a4f      	ldr	r2, [pc, #316]	; (800094c <MX_LTDC_Init+0x160>)
 8000810:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000812:	4b4d      	ldr	r3, [pc, #308]	; (8000948 <MX_LTDC_Init+0x15c>)
 8000814:	2200      	movs	r2, #0
 8000816:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000818:	4b4b      	ldr	r3, [pc, #300]	; (8000948 <MX_LTDC_Init+0x15c>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800081e:	4b4a      	ldr	r3, [pc, #296]	; (8000948 <MX_LTDC_Init+0x15c>)
 8000820:	2200      	movs	r2, #0
 8000822:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000824:	4b48      	ldr	r3, [pc, #288]	; (8000948 <MX_LTDC_Init+0x15c>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 800082a:	4b47      	ldr	r3, [pc, #284]	; (8000948 <MX_LTDC_Init+0x15c>)
 800082c:	2207      	movs	r2, #7
 800082e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000830:	4b45      	ldr	r3, [pc, #276]	; (8000948 <MX_LTDC_Init+0x15c>)
 8000832:	2203      	movs	r2, #3
 8000834:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000836:	4b44      	ldr	r3, [pc, #272]	; (8000948 <MX_LTDC_Init+0x15c>)
 8000838:	220e      	movs	r2, #14
 800083a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 800083c:	4b42      	ldr	r3, [pc, #264]	; (8000948 <MX_LTDC_Init+0x15c>)
 800083e:	2205      	movs	r2, #5
 8000840:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000842:	4b41      	ldr	r3, [pc, #260]	; (8000948 <MX_LTDC_Init+0x15c>)
 8000844:	f240 228e 	movw	r2, #654	; 0x28e
 8000848:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 800084a:	4b3f      	ldr	r3, [pc, #252]	; (8000948 <MX_LTDC_Init+0x15c>)
 800084c:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000850:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8000852:	4b3d      	ldr	r3, [pc, #244]	; (8000948 <MX_LTDC_Init+0x15c>)
 8000854:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000858:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 800085a:	4b3b      	ldr	r3, [pc, #236]	; (8000948 <MX_LTDC_Init+0x15c>)
 800085c:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000860:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000862:	4b39      	ldr	r3, [pc, #228]	; (8000948 <MX_LTDC_Init+0x15c>)
 8000864:	2200      	movs	r2, #0
 8000866:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 800086a:	4b37      	ldr	r3, [pc, #220]	; (8000948 <MX_LTDC_Init+0x15c>)
 800086c:	2200      	movs	r2, #0
 800086e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000872:	4b35      	ldr	r3, [pc, #212]	; (8000948 <MX_LTDC_Init+0x15c>)
 8000874:	2200      	movs	r2, #0
 8000876:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 800087a:	4833      	ldr	r0, [pc, #204]	; (8000948 <MX_LTDC_Init+0x15c>)
 800087c:	f003 f91c 	bl	8003ab8 <HAL_LTDC_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000886:	f000 f98d 	bl	8000ba4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 800089a:	2300      	movs	r3, #0
 800089c:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 80008a2:	2300      	movs	r3, #0
 80008a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 80008a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008aa:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 80008ac:	2305      	movs	r3, #5
 80008ae:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 80008b4:	2300      	movs	r3, #0
 80008b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 80008c2:	2300      	movs	r3, #0
 80008c4:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80008ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80008d2:	2200      	movs	r2, #0
 80008d4:	4619      	mov	r1, r3
 80008d6:	481c      	ldr	r0, [pc, #112]	; (8000948 <MX_LTDC_Init+0x15c>)
 80008d8:	f003 f9be 	bl	8003c58 <HAL_LTDC_ConfigLayer>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 80008e2:	f000 f95f 	bl	8000ba4 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000902:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000906:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000908:	2305      	movs	r3, #5
 800090a:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000924:	2300      	movs	r3, #0
 8000926:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 800092a:	463b      	mov	r3, r7
 800092c:	2201      	movs	r2, #1
 800092e:	4619      	mov	r1, r3
 8000930:	4805      	ldr	r0, [pc, #20]	; (8000948 <MX_LTDC_Init+0x15c>)
 8000932:	f003 f991 	bl	8003c58 <HAL_LTDC_ConfigLayer>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 800093c:	f000 f932 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000940:	bf00      	nop
 8000942:	3768      	adds	r7, #104	; 0x68
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	2000011c 	.word	0x2000011c
 800094c:	40016800 	.word	0x40016800

08000950 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000954:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <MX_SPI5_Init+0x64>)
 8000956:	4a18      	ldr	r2, [pc, #96]	; (80009b8 <MX_SPI5_Init+0x68>)
 8000958:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800095a:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <MX_SPI5_Init+0x64>)
 800095c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000960:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_SPI5_Init+0x64>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000968:	4b12      	ldr	r3, [pc, #72]	; (80009b4 <MX_SPI5_Init+0x64>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800096e:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <MX_SPI5_Init+0x64>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <MX_SPI5_Init+0x64>)
 8000976:	2200      	movs	r2, #0
 8000978:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <MX_SPI5_Init+0x64>)
 800097c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000980:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000982:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <MX_SPI5_Init+0x64>)
 8000984:	2200      	movs	r2, #0
 8000986:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000988:	4b0a      	ldr	r3, [pc, #40]	; (80009b4 <MX_SPI5_Init+0x64>)
 800098a:	2200      	movs	r2, #0
 800098c:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800098e:	4b09      	ldr	r3, [pc, #36]	; (80009b4 <MX_SPI5_Init+0x64>)
 8000990:	2200      	movs	r2, #0
 8000992:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000994:	4b07      	ldr	r3, [pc, #28]	; (80009b4 <MX_SPI5_Init+0x64>)
 8000996:	2200      	movs	r2, #0
 8000998:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <MX_SPI5_Init+0x64>)
 800099c:	220a      	movs	r2, #10
 800099e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80009a0:	4804      	ldr	r0, [pc, #16]	; (80009b4 <MX_SPI5_Init+0x64>)
 80009a2:	f004 fa68 	bl	8004e76 <HAL_SPI_Init>
 80009a6:	4603      	mov	r3, r0
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80009ac:	f000 f8fa 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80009b0:	bf00      	nop
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	200001c4 	.word	0x200001c4
 80009b8:	40015000 	.word	0x40015000

080009bc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009c0:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009c2:	4a12      	ldr	r2, [pc, #72]	; (8000a0c <MX_USART1_UART_Init+0x50>)
 80009c4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009cc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009ce:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009d4:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009e0:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009e2:	220c      	movs	r2, #12
 80009e4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e6:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009ec:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <MX_USART1_UART_Init+0x4c>)
 80009f4:	f005 f81e 	bl	8005a34 <HAL_UART_Init>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009fe:	f000 f8d1 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	2000021c 	.word	0x2000021c
 8000a0c:	40011000 	.word	0x40011000

08000a10 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b088      	sub	sp, #32
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	2200      	movs	r2, #0
 8000a1a:	601a      	str	r2, [r3, #0]
 8000a1c:	605a      	str	r2, [r3, #4]
 8000a1e:	609a      	str	r2, [r3, #8]
 8000a20:	60da      	str	r2, [r3, #12]
 8000a22:	611a      	str	r2, [r3, #16]
 8000a24:	615a      	str	r2, [r3, #20]
 8000a26:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a28:	4b1e      	ldr	r3, [pc, #120]	; (8000aa4 <MX_FMC_Init+0x94>)
 8000a2a:	4a1f      	ldr	r2, [pc, #124]	; (8000aa8 <MX_FMC_Init+0x98>)
 8000a2c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000a2e:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <MX_FMC_Init+0x94>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a34:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <MX_FMC_Init+0x94>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000a3a:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <MX_FMC_Init+0x94>)
 8000a3c:	2204      	movs	r2, #4
 8000a3e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a40:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <MX_FMC_Init+0x94>)
 8000a42:	2210      	movs	r2, #16
 8000a44:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a46:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <MX_FMC_Init+0x94>)
 8000a48:	2240      	movs	r2, #64	; 0x40
 8000a4a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000a4c:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <MX_FMC_Init+0x94>)
 8000a4e:	2280      	movs	r2, #128	; 0x80
 8000a50:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a52:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <MX_FMC_Init+0x94>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <MX_FMC_Init+0x94>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <MX_FMC_Init+0x94>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <MX_FMC_Init+0x94>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000a6a:	2310      	movs	r3, #16
 8000a6c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000a6e:	2310      	movs	r3, #16
 8000a70:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8000a72:	2310      	movs	r3, #16
 8000a74:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8000a76:	2310      	movs	r3, #16
 8000a78:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000a7a:	2310      	movs	r3, #16
 8000a7c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000a7e:	2310      	movs	r3, #16
 8000a80:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8000a82:	2310      	movs	r3, #16
 8000a84:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4806      	ldr	r0, [pc, #24]	; (8000aa4 <MX_FMC_Init+0x94>)
 8000a8c:	f004 f962 	bl	8004d54 <HAL_SDRAM_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8000a96:	f000 f885 	bl	8000ba4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3720      	adds	r7, #32
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000260 	.word	0x20000260
 8000aa8:	a0000140 	.word	0xa0000140

08000aac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b089      	sub	sp, #36	; 0x24
 8000ab0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
 8000ab6:	4b3a      	ldr	r3, [pc, #232]	; (8000ba0 <MX_GPIO_Init+0xf4>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	4a39      	ldr	r2, [pc, #228]	; (8000ba0 <MX_GPIO_Init+0xf4>)
 8000abc:	f043 0320 	orr.w	r3, r3, #32
 8000ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac2:	4b37      	ldr	r3, [pc, #220]	; (8000ba0 <MX_GPIO_Init+0xf4>)
 8000ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac6:	f003 0320 	and.w	r3, r3, #32
 8000aca:	61fb      	str	r3, [r7, #28]
 8000acc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61bb      	str	r3, [r7, #24]
 8000ad2:	4b33      	ldr	r3, [pc, #204]	; (8000ba0 <MX_GPIO_Init+0xf4>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a32      	ldr	r2, [pc, #200]	; (8000ba0 <MX_GPIO_Init+0xf4>)
 8000ad8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b30      	ldr	r3, [pc, #192]	; (8000ba0 <MX_GPIO_Init+0xf4>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ae6:	61bb      	str	r3, [r7, #24]
 8000ae8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	617b      	str	r3, [r7, #20]
 8000aee:	4b2c      	ldr	r3, [pc, #176]	; (8000ba0 <MX_GPIO_Init+0xf4>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a2b      	ldr	r2, [pc, #172]	; (8000ba0 <MX_GPIO_Init+0xf4>)
 8000af4:	f043 0304 	orr.w	r3, r3, #4
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b29      	ldr	r3, [pc, #164]	; (8000ba0 <MX_GPIO_Init+0xf4>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0304 	and.w	r3, r3, #4
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	4b25      	ldr	r3, [pc, #148]	; (8000ba0 <MX_GPIO_Init+0xf4>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a24      	ldr	r2, [pc, #144]	; (8000ba0 <MX_GPIO_Init+0xf4>)
 8000b10:	f043 0301 	orr.w	r3, r3, #1
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b22      	ldr	r3, [pc, #136]	; (8000ba0 <MX_GPIO_Init+0xf4>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0301 	and.w	r3, r3, #1
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	4b1e      	ldr	r3, [pc, #120]	; (8000ba0 <MX_GPIO_Init+0xf4>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a1d      	ldr	r2, [pc, #116]	; (8000ba0 <MX_GPIO_Init+0xf4>)
 8000b2c:	f043 0302 	orr.w	r3, r3, #2
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b1b      	ldr	r3, [pc, #108]	; (8000ba0 <MX_GPIO_Init+0xf4>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0302 	and.w	r3, r3, #2
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	4b17      	ldr	r3, [pc, #92]	; (8000ba0 <MX_GPIO_Init+0xf4>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a16      	ldr	r2, [pc, #88]	; (8000ba0 <MX_GPIO_Init+0xf4>)
 8000b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b14      	ldr	r3, [pc, #80]	; (8000ba0 <MX_GPIO_Init+0xf4>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	4b10      	ldr	r3, [pc, #64]	; (8000ba0 <MX_GPIO_Init+0xf4>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a0f      	ldr	r2, [pc, #60]	; (8000ba0 <MX_GPIO_Init+0xf4>)
 8000b64:	f043 0310 	orr.w	r3, r3, #16
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ba0 <MX_GPIO_Init+0xf4>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0310 	and.w	r3, r3, #16
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	603b      	str	r3, [r7, #0]
 8000b7a:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <MX_GPIO_Init+0xf4>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a08      	ldr	r2, [pc, #32]	; (8000ba0 <MX_GPIO_Init+0xf4>)
 8000b80:	f043 0308 	orr.w	r3, r3, #8
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b06      	ldr	r3, [pc, #24]	; (8000ba0 <MX_GPIO_Init+0xf4>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0308 	and.w	r3, r3, #8
 8000b8e:	603b      	str	r3, [r7, #0]
 8000b90:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b92:	bf00      	nop
 8000b94:	3724      	adds	r7, #36	; 0x24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	40023800 	.word	0x40023800

08000ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba8:	b672      	cpsid	i
}
 8000baa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bac:	e7fe      	b.n	8000bac <Error_Handler+0x8>
	...

08000bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <HAL_MspInit+0x4c>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bbe:	4a0f      	ldr	r2, [pc, #60]	; (8000bfc <HAL_MspInit+0x4c>)
 8000bc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc4:	6453      	str	r3, [r2, #68]	; 0x44
 8000bc6:	4b0d      	ldr	r3, [pc, #52]	; (8000bfc <HAL_MspInit+0x4c>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <HAL_MspInit+0x4c>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bda:	4a08      	ldr	r2, [pc, #32]	; (8000bfc <HAL_MspInit+0x4c>)
 8000bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be0:	6413      	str	r3, [r2, #64]	; 0x40
 8000be2:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_MspInit+0x4c>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	40023800 	.word	0x40023800

08000c00 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	4a0b      	ldr	r2, [pc, #44]	; (8000c3c <HAL_DMA2D_MspInit+0x3c>)
 8000c0e:	4293      	cmp	r3, r2
 8000c10:	d10d      	bne.n	8000c2e <HAL_DMA2D_MspInit+0x2e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <HAL_DMA2D_MspInit+0x40>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a09      	ldr	r2, [pc, #36]	; (8000c40 <HAL_DMA2D_MspInit+0x40>)
 8000c1c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b07      	ldr	r3, [pc, #28]	; (8000c40 <HAL_DMA2D_MspInit+0x40>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000c2a:	60fb      	str	r3, [r7, #12]
 8000c2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000c2e:	bf00      	nop
 8000c30:	3714      	adds	r7, #20
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	4002b000 	.word	0x4002b000
 8000c40:	40023800 	.word	0x40023800

08000c44 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b08a      	sub	sp, #40	; 0x28
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0314 	add.w	r3, r7, #20
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a29      	ldr	r2, [pc, #164]	; (8000d08 <HAL_I2C_MspInit+0xc4>)
 8000c62:	4293      	cmp	r3, r2
 8000c64:	d14b      	bne.n	8000cfe <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	4b28      	ldr	r3, [pc, #160]	; (8000d0c <HAL_I2C_MspInit+0xc8>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a27      	ldr	r2, [pc, #156]	; (8000d0c <HAL_I2C_MspInit+0xc8>)
 8000c70:	f043 0304 	orr.w	r3, r3, #4
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b25      	ldr	r3, [pc, #148]	; (8000d0c <HAL_I2C_MspInit+0xc8>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0304 	and.w	r3, r3, #4
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	4b21      	ldr	r3, [pc, #132]	; (8000d0c <HAL_I2C_MspInit+0xc8>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a20      	ldr	r2, [pc, #128]	; (8000d0c <HAL_I2C_MspInit+0xc8>)
 8000c8c:	f043 0301 	orr.w	r3, r3, #1
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b1e      	ldr	r3, [pc, #120]	; (8000d0c <HAL_I2C_MspInit+0xc8>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0301 	and.w	r3, r3, #1
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ca2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ca4:	2312      	movs	r3, #18
 8000ca6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cac:	2303      	movs	r3, #3
 8000cae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000cb0:	2304      	movs	r3, #4
 8000cb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4815      	ldr	r0, [pc, #84]	; (8000d10 <HAL_I2C_MspInit+0xcc>)
 8000cbc:	f002 fa6a 	bl	8003194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cc0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cc6:	2312      	movs	r3, #18
 8000cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000cd2:	2304      	movs	r3, #4
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	4619      	mov	r1, r3
 8000cdc:	480d      	ldr	r0, [pc, #52]	; (8000d14 <HAL_I2C_MspInit+0xd0>)
 8000cde:	f002 fa59 	bl	8003194 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <HAL_I2C_MspInit+0xc8>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	4a08      	ldr	r2, [pc, #32]	; (8000d0c <HAL_I2C_MspInit+0xc8>)
 8000cec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_I2C_MspInit+0xc8>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8000cfe:	bf00      	nop
 8000d00:	3728      	adds	r7, #40	; 0x28
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40005c00 	.word	0x40005c00
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40020800 	.word	0x40020800
 8000d14:	40020000 	.word	0x40020000

08000d18 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b09a      	sub	sp, #104	; 0x68
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d20:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d24:	2200      	movs	r2, #0
 8000d26:	601a      	str	r2, [r3, #0]
 8000d28:	605a      	str	r2, [r3, #4]
 8000d2a:	609a      	str	r2, [r3, #8]
 8000d2c:	60da      	str	r2, [r3, #12]
 8000d2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d34:	2230      	movs	r2, #48	; 0x30
 8000d36:	2100      	movs	r1, #0
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f005 fa7b 	bl	8006234 <memset>
  if(hltdc->Instance==LTDC)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a81      	ldr	r2, [pc, #516]	; (8000f48 <HAL_LTDC_MspInit+0x230>)
 8000d44:	4293      	cmp	r3, r2
 8000d46:	f040 80fb 	bne.w	8000f40 <HAL_LTDC_MspInit+0x228>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000d4a:	2308      	movs	r3, #8
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 432;
 8000d4e:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000d52:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000d54:	2302      	movs	r3, #2
 8000d56:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d60:	4618      	mov	r0, r3
 8000d62:	f003 fe37 	bl	80049d4 <HAL_RCCEx_PeriphCLKConfig>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <HAL_LTDC_MspInit+0x58>
    {
      Error_Handler();
 8000d6c:	f7ff ff1a 	bl	8000ba4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000d70:	2300      	movs	r3, #0
 8000d72:	623b      	str	r3, [r7, #32]
 8000d74:	4b75      	ldr	r3, [pc, #468]	; (8000f4c <HAL_LTDC_MspInit+0x234>)
 8000d76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d78:	4a74      	ldr	r2, [pc, #464]	; (8000f4c <HAL_LTDC_MspInit+0x234>)
 8000d7a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d7e:	6453      	str	r3, [r2, #68]	; 0x44
 8000d80:	4b72      	ldr	r3, [pc, #456]	; (8000f4c <HAL_LTDC_MspInit+0x234>)
 8000d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d84:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d88:	623b      	str	r3, [r7, #32]
 8000d8a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61fb      	str	r3, [r7, #28]
 8000d90:	4b6e      	ldr	r3, [pc, #440]	; (8000f4c <HAL_LTDC_MspInit+0x234>)
 8000d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d94:	4a6d      	ldr	r2, [pc, #436]	; (8000f4c <HAL_LTDC_MspInit+0x234>)
 8000d96:	f043 0320 	orr.w	r3, r3, #32
 8000d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9c:	4b6b      	ldr	r3, [pc, #428]	; (8000f4c <HAL_LTDC_MspInit+0x234>)
 8000d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da0:	f003 0320 	and.w	r3, r3, #32
 8000da4:	61fb      	str	r3, [r7, #28]
 8000da6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da8:	2300      	movs	r3, #0
 8000daa:	61bb      	str	r3, [r7, #24]
 8000dac:	4b67      	ldr	r3, [pc, #412]	; (8000f4c <HAL_LTDC_MspInit+0x234>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db0:	4a66      	ldr	r2, [pc, #408]	; (8000f4c <HAL_LTDC_MspInit+0x234>)
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	6313      	str	r3, [r2, #48]	; 0x30
 8000db8:	4b64      	ldr	r3, [pc, #400]	; (8000f4c <HAL_LTDC_MspInit+0x234>)
 8000dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbc:	f003 0301 	and.w	r3, r3, #1
 8000dc0:	61bb      	str	r3, [r7, #24]
 8000dc2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
 8000dc8:	4b60      	ldr	r3, [pc, #384]	; (8000f4c <HAL_LTDC_MspInit+0x234>)
 8000dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dcc:	4a5f      	ldr	r2, [pc, #380]	; (8000f4c <HAL_LTDC_MspInit+0x234>)
 8000dce:	f043 0302 	orr.w	r3, r3, #2
 8000dd2:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd4:	4b5d      	ldr	r3, [pc, #372]	; (8000f4c <HAL_LTDC_MspInit+0x234>)
 8000dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd8:	f003 0302 	and.w	r3, r3, #2
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000de0:	2300      	movs	r3, #0
 8000de2:	613b      	str	r3, [r7, #16]
 8000de4:	4b59      	ldr	r3, [pc, #356]	; (8000f4c <HAL_LTDC_MspInit+0x234>)
 8000de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de8:	4a58      	ldr	r2, [pc, #352]	; (8000f4c <HAL_LTDC_MspInit+0x234>)
 8000dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dee:	6313      	str	r3, [r2, #48]	; 0x30
 8000df0:	4b56      	ldr	r3, [pc, #344]	; (8000f4c <HAL_LTDC_MspInit+0x234>)
 8000df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000df8:	613b      	str	r3, [r7, #16]
 8000dfa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	4b52      	ldr	r3, [pc, #328]	; (8000f4c <HAL_LTDC_MspInit+0x234>)
 8000e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e04:	4a51      	ldr	r2, [pc, #324]	; (8000f4c <HAL_LTDC_MspInit+0x234>)
 8000e06:	f043 0304 	orr.w	r3, r3, #4
 8000e0a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0c:	4b4f      	ldr	r3, [pc, #316]	; (8000f4c <HAL_LTDC_MspInit+0x234>)
 8000e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e10:	f003 0304 	and.w	r3, r3, #4
 8000e14:	60fb      	str	r3, [r7, #12]
 8000e16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	4b4b      	ldr	r3, [pc, #300]	; (8000f4c <HAL_LTDC_MspInit+0x234>)
 8000e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e20:	4a4a      	ldr	r2, [pc, #296]	; (8000f4c <HAL_LTDC_MspInit+0x234>)
 8000e22:	f043 0308 	orr.w	r3, r3, #8
 8000e26:	6313      	str	r3, [r2, #48]	; 0x30
 8000e28:	4b48      	ldr	r3, [pc, #288]	; (8000f4c <HAL_LTDC_MspInit+0x234>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2c:	f003 0308 	and.w	r3, r3, #8
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e38:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e46:	230e      	movs	r3, #14
 8000e48:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e4a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e4e:	4619      	mov	r1, r3
 8000e50:	483f      	ldr	r0, [pc, #252]	; (8000f50 <HAL_LTDC_MspInit+0x238>)
 8000e52:	f002 f99f 	bl	8003194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_11
 8000e56:	f641 0358 	movw	r3, #6232	; 0x1858
 8000e5a:	657b      	str	r3, [r7, #84]	; 0x54
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e68:	230e      	movs	r3, #14
 8000e6a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e70:	4619      	mov	r1, r3
 8000e72:	4838      	ldr	r0, [pc, #224]	; (8000f54 <HAL_LTDC_MspInit+0x23c>)
 8000e74:	f002 f98e 	bl	8003194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7c:	2302      	movs	r3, #2
 8000e7e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000e88:	2309      	movs	r3, #9
 8000e8a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e8c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e90:	4619      	mov	r1, r3
 8000e92:	4831      	ldr	r0, [pc, #196]	; (8000f58 <HAL_LTDC_MspInit+0x240>)
 8000e94:	f002 f97e 	bl	8003194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_8|GPIO_PIN_9;
 8000e98:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000e9c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000eaa:	230e      	movs	r3, #14
 8000eac:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eae:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4828      	ldr	r0, [pc, #160]	; (8000f58 <HAL_LTDC_MspInit+0x240>)
 8000eb6:	f002 f96d 	bl	8003194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_11;
 8000eba:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8000ebe:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ecc:	230e      	movs	r3, #14
 8000ece:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ed0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4821      	ldr	r0, [pc, #132]	; (8000f5c <HAL_LTDC_MspInit+0x244>)
 8000ed8:	f002 f95c 	bl	8003194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 8000edc:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8000ee0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2300      	movs	r3, #0
 8000eec:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000eee:	230e      	movs	r3, #14
 8000ef0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4819      	ldr	r0, [pc, #100]	; (8000f60 <HAL_LTDC_MspInit+0x248>)
 8000efa:	f002 f94b 	bl	8003194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_6;
 8000efe:	2348      	movs	r3, #72	; 0x48
 8000f00:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f0e:	230e      	movs	r3, #14
 8000f10:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f12:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f16:	4619      	mov	r1, r3
 8000f18:	4812      	ldr	r0, [pc, #72]	; (8000f64 <HAL_LTDC_MspInit+0x24c>)
 8000f1a:	f002 f93b 	bl	8003194 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8000f1e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f22:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f24:	2302      	movs	r3, #2
 8000f26:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000f30:	2309      	movs	r3, #9
 8000f32:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f34:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4808      	ldr	r0, [pc, #32]	; (8000f5c <HAL_LTDC_MspInit+0x244>)
 8000f3c:	f002 f92a 	bl	8003194 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8000f40:	bf00      	nop
 8000f42:	3768      	adds	r7, #104	; 0x68
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}
 8000f48:	40016800 	.word	0x40016800
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40021400 	.word	0x40021400
 8000f54:	40020000 	.word	0x40020000
 8000f58:	40020400 	.word	0x40020400
 8000f5c:	40021800 	.word	0x40021800
 8000f60:	40020800 	.word	0x40020800
 8000f64:	40020c00 	.word	0x40020c00

08000f68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08a      	sub	sp, #40	; 0x28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	2200      	movs	r2, #0
 8000f76:	601a      	str	r2, [r3, #0]
 8000f78:	605a      	str	r2, [r3, #4]
 8000f7a:	609a      	str	r2, [r3, #8]
 8000f7c:	60da      	str	r2, [r3, #12]
 8000f7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a19      	ldr	r2, [pc, #100]	; (8000fec <HAL_SPI_MspInit+0x84>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d12c      	bne.n	8000fe4 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	613b      	str	r3, [r7, #16]
 8000f8e:	4b18      	ldr	r3, [pc, #96]	; (8000ff0 <HAL_SPI_MspInit+0x88>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	4a17      	ldr	r2, [pc, #92]	; (8000ff0 <HAL_SPI_MspInit+0x88>)
 8000f94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000f98:	6453      	str	r3, [r2, #68]	; 0x44
 8000f9a:	4b15      	ldr	r3, [pc, #84]	; (8000ff0 <HAL_SPI_MspInit+0x88>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	4b11      	ldr	r3, [pc, #68]	; (8000ff0 <HAL_SPI_MspInit+0x88>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	4a10      	ldr	r2, [pc, #64]	; (8000ff0 <HAL_SPI_MspInit+0x88>)
 8000fb0:	f043 0320 	orr.w	r3, r3, #32
 8000fb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ff0 <HAL_SPI_MspInit+0x88>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	f003 0320 	and.w	r3, r3, #32
 8000fbe:	60fb      	str	r3, [r7, #12]
 8000fc0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000fc2:	f44f 7360 	mov.w	r3, #896	; 0x380
 8000fc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000fd4:	2305      	movs	r3, #5
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <HAL_SPI_MspInit+0x8c>)
 8000fe0:	f002 f8d8 	bl	8003194 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 8000fe4:	bf00      	nop
 8000fe6:	3728      	adds	r7, #40	; 0x28
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40015000 	.word	0x40015000
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40021400 	.word	0x40021400

08000ff8 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a08      	ldr	r2, [pc, #32]	; (8001028 <HAL_SPI_MspDeInit+0x30>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d10a      	bne.n	8001020 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800100a:	4b08      	ldr	r3, [pc, #32]	; (800102c <HAL_SPI_MspDeInit+0x34>)
 800100c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100e:	4a07      	ldr	r2, [pc, #28]	; (800102c <HAL_SPI_MspDeInit+0x34>)
 8001010:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001014:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 8001016:	f44f 7160 	mov.w	r1, #896	; 0x380
 800101a:	4805      	ldr	r0, [pc, #20]	; (8001030 <HAL_SPI_MspDeInit+0x38>)
 800101c:	f002 fa66 	bl	80034ec <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40015000 	.word	0x40015000
 800102c:	40023800 	.word	0x40023800
 8001030:	40021400 	.word	0x40021400

08001034 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08a      	sub	sp, #40	; 0x28
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 0314 	add.w	r3, r7, #20
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a19      	ldr	r2, [pc, #100]	; (80010b8 <HAL_UART_MspInit+0x84>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d12c      	bne.n	80010b0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
 800105a:	4b18      	ldr	r3, [pc, #96]	; (80010bc <HAL_UART_MspInit+0x88>)
 800105c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105e:	4a17      	ldr	r2, [pc, #92]	; (80010bc <HAL_UART_MspInit+0x88>)
 8001060:	f043 0310 	orr.w	r3, r3, #16
 8001064:	6453      	str	r3, [r2, #68]	; 0x44
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <HAL_UART_MspInit+0x88>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106a:	f003 0310 	and.w	r3, r3, #16
 800106e:	613b      	str	r3, [r7, #16]
 8001070:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <HAL_UART_MspInit+0x88>)
 8001078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107a:	4a10      	ldr	r2, [pc, #64]	; (80010bc <HAL_UART_MspInit+0x88>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6313      	str	r3, [r2, #48]	; 0x30
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <HAL_UART_MspInit+0x88>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800108e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001092:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001094:	2302      	movs	r3, #2
 8001096:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	2300      	movs	r3, #0
 800109a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800109c:	2303      	movs	r3, #3
 800109e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010a0:	2307      	movs	r3, #7
 80010a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	4619      	mov	r1, r3
 80010aa:	4805      	ldr	r0, [pc, #20]	; (80010c0 <HAL_UART_MspInit+0x8c>)
 80010ac:	f002 f872 	bl	8003194 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010b0:	bf00      	nop
 80010b2:	3728      	adds	r7, #40	; 0x28
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40011000 	.word	0x40011000
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40020000 	.word	0x40020000

080010c4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80010d8:	4b3b      	ldr	r3, [pc, #236]	; (80011c8 <HAL_FMC_MspInit+0x104>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d16f      	bne.n	80011c0 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80010e0:	4b39      	ldr	r3, [pc, #228]	; (80011c8 <HAL_FMC_MspInit+0x104>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	603b      	str	r3, [r7, #0]
 80010ea:	4b38      	ldr	r3, [pc, #224]	; (80011cc <HAL_FMC_MspInit+0x108>)
 80010ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010ee:	4a37      	ldr	r2, [pc, #220]	; (80011cc <HAL_FMC_MspInit+0x108>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6393      	str	r3, [r2, #56]	; 0x38
 80010f6:	4b35      	ldr	r3, [pc, #212]	; (80011cc <HAL_FMC_MspInit+0x108>)
 80010f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	603b      	str	r3, [r7, #0]
 8001100:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001102:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8001106:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001108:	2302      	movs	r3, #2
 800110a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001110:	2303      	movs	r3, #3
 8001112:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001114:	230c      	movs	r3, #12
 8001116:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001118:	1d3b      	adds	r3, r7, #4
 800111a:	4619      	mov	r1, r3
 800111c:	482c      	ldr	r0, [pc, #176]	; (80011d0 <HAL_FMC_MspInit+0x10c>)
 800111e:	f002 f839 	bl	8003194 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001122:	2301      	movs	r3, #1
 8001124:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112e:	2303      	movs	r3, #3
 8001130:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001132:	230c      	movs	r3, #12
 8001134:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001136:	1d3b      	adds	r3, r7, #4
 8001138:	4619      	mov	r1, r3
 800113a:	4826      	ldr	r0, [pc, #152]	; (80011d4 <HAL_FMC_MspInit+0x110>)
 800113c:	f002 f82a 	bl	8003194 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8001140:	f248 1333 	movw	r3, #33075	; 0x8133
 8001144:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001146:	2302      	movs	r3, #2
 8001148:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114e:	2303      	movs	r3, #3
 8001150:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001152:	230c      	movs	r3, #12
 8001154:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	4619      	mov	r1, r3
 800115a:	481f      	ldr	r0, [pc, #124]	; (80011d8 <HAL_FMC_MspInit+0x114>)
 800115c:	f002 f81a 	bl	8003194 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001160:	f64f 7383 	movw	r3, #65411	; 0xff83
 8001164:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116e:	2303      	movs	r3, #3
 8001170:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001172:	230c      	movs	r3, #12
 8001174:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001176:	1d3b      	adds	r3, r7, #4
 8001178:	4619      	mov	r1, r3
 800117a:	4818      	ldr	r0, [pc, #96]	; (80011dc <HAL_FMC_MspInit+0x118>)
 800117c:	f002 f80a 	bl	8003194 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8001180:	f24c 7303 	movw	r3, #50947	; 0xc703
 8001184:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001186:	2302      	movs	r3, #2
 8001188:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118e:	2303      	movs	r3, #3
 8001190:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001192:	230c      	movs	r3, #12
 8001194:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	4619      	mov	r1, r3
 800119a:	4811      	ldr	r0, [pc, #68]	; (80011e0 <HAL_FMC_MspInit+0x11c>)
 800119c:	f001 fffa 	bl	8003194 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80011a0:	2360      	movs	r3, #96	; 0x60
 80011a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a4:	2302      	movs	r3, #2
 80011a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ac:	2303      	movs	r3, #3
 80011ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011b0:	230c      	movs	r3, #12
 80011b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	4619      	mov	r1, r3
 80011b8:	480a      	ldr	r0, [pc, #40]	; (80011e4 <HAL_FMC_MspInit+0x120>)
 80011ba:	f001 ffeb 	bl	8003194 <HAL_GPIO_Init>
 80011be:	e000      	b.n	80011c2 <HAL_FMC_MspInit+0xfe>
    return;
 80011c0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000294 	.word	0x20000294
 80011cc:	40023800 	.word	0x40023800
 80011d0:	40021400 	.word	0x40021400
 80011d4:	40020800 	.word	0x40020800
 80011d8:	40021800 	.word	0x40021800
 80011dc:	40021000 	.word	0x40021000
 80011e0:	40020c00 	.word	0x40020c00
 80011e4:	40020400 	.word	0x40020400

080011e8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80011f0:	f7ff ff68 	bl	80010c4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80011f4:	bf00      	nop
 80011f6:	3708      	adds	r7, #8
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001200:	e7fe      	b.n	8001200 <NMI_Handler+0x4>

08001202 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001206:	e7fe      	b.n	8001206 <HardFault_Handler+0x4>

08001208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800120c:	e7fe      	b.n	800120c <MemManage_Handler+0x4>

0800120e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001212:	e7fe      	b.n	8001212 <BusFault_Handler+0x4>

08001214 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001218:	e7fe      	b.n	8001218 <UsageFault_Handler+0x4>

0800121a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001248:	f001 fa04 	bl	8002654 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}

08001250 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <SystemInit+0x20>)
 8001256:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800125a:	4a05      	ldr	r2, [pc, #20]	; (8001270 <SystemInit+0x20>)
 800125c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001260:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001274:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012ac <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001278:	480d      	ldr	r0, [pc, #52]	; (80012b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800127a:	490e      	ldr	r1, [pc, #56]	; (80012b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800127c:	4a0e      	ldr	r2, [pc, #56]	; (80012b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800127e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001280:	e002      	b.n	8001288 <LoopCopyDataInit>

08001282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001286:	3304      	adds	r3, #4

08001288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800128a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800128c:	d3f9      	bcc.n	8001282 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800128e:	4a0b      	ldr	r2, [pc, #44]	; (80012bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001290:	4c0b      	ldr	r4, [pc, #44]	; (80012c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001294:	e001      	b.n	800129a <LoopFillZerobss>

08001296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001298:	3204      	adds	r2, #4

0800129a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800129a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800129c:	d3fb      	bcc.n	8001296 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800129e:	f7ff ffd7 	bl	8001250 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012a2:	f004 ffa3 	bl	80061ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012a6:	f7ff f923 	bl	80004f0 <main>
  bx  lr    
 80012aa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80012ac:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80012b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80012b8:	08009104 	.word	0x08009104
  ldr r2, =_sbss
 80012bc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80012c0:	200004f0 	.word	0x200004f0

080012c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012c4:	e7fe      	b.n	80012c4 <ADC_IRQHandler>

080012c6 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80012ca:	f000 fa5d 	bl	8001788 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80012ce:	20ca      	movs	r0, #202	; 0xca
 80012d0:	f000 f95d 	bl	800158e <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80012d4:	20c3      	movs	r0, #195	; 0xc3
 80012d6:	f000 f967 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80012da:	2008      	movs	r0, #8
 80012dc:	f000 f964 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80012e0:	2050      	movs	r0, #80	; 0x50
 80012e2:	f000 f961 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80012e6:	20cf      	movs	r0, #207	; 0xcf
 80012e8:	f000 f951 	bl	800158e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80012ec:	2000      	movs	r0, #0
 80012ee:	f000 f95b 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80012f2:	20c1      	movs	r0, #193	; 0xc1
 80012f4:	f000 f958 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80012f8:	2030      	movs	r0, #48	; 0x30
 80012fa:	f000 f955 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80012fe:	20ed      	movs	r0, #237	; 0xed
 8001300:	f000 f945 	bl	800158e <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 8001304:	2064      	movs	r0, #100	; 0x64
 8001306:	f000 f94f 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 800130a:	2003      	movs	r0, #3
 800130c:	f000 f94c 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 8001310:	2012      	movs	r0, #18
 8001312:	f000 f949 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 8001316:	2081      	movs	r0, #129	; 0x81
 8001318:	f000 f946 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 800131c:	20e8      	movs	r0, #232	; 0xe8
 800131e:	f000 f936 	bl	800158e <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001322:	2085      	movs	r0, #133	; 0x85
 8001324:	f000 f940 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001328:	2000      	movs	r0, #0
 800132a:	f000 f93d 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800132e:	2078      	movs	r0, #120	; 0x78
 8001330:	f000 f93a 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001334:	20cb      	movs	r0, #203	; 0xcb
 8001336:	f000 f92a 	bl	800158e <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800133a:	2039      	movs	r0, #57	; 0x39
 800133c:	f000 f934 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001340:	202c      	movs	r0, #44	; 0x2c
 8001342:	f000 f931 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001346:	2000      	movs	r0, #0
 8001348:	f000 f92e 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 800134c:	2034      	movs	r0, #52	; 0x34
 800134e:	f000 f92b 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001352:	2002      	movs	r0, #2
 8001354:	f000 f928 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 8001358:	20f7      	movs	r0, #247	; 0xf7
 800135a:	f000 f918 	bl	800158e <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 800135e:	2020      	movs	r0, #32
 8001360:	f000 f922 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001364:	20ea      	movs	r0, #234	; 0xea
 8001366:	f000 f912 	bl	800158e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800136a:	2000      	movs	r0, #0
 800136c:	f000 f91c 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001370:	2000      	movs	r0, #0
 8001372:	f000 f919 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001376:	20b1      	movs	r0, #177	; 0xb1
 8001378:	f000 f909 	bl	800158e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800137c:	2000      	movs	r0, #0
 800137e:	f000 f913 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001382:	201b      	movs	r0, #27
 8001384:	f000 f910 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001388:	20b6      	movs	r0, #182	; 0xb6
 800138a:	f000 f900 	bl	800158e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800138e:	200a      	movs	r0, #10
 8001390:	f000 f90a 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001394:	20a2      	movs	r0, #162	; 0xa2
 8001396:	f000 f907 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800139a:	20c0      	movs	r0, #192	; 0xc0
 800139c:	f000 f8f7 	bl	800158e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80013a0:	2010      	movs	r0, #16
 80013a2:	f000 f901 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 80013a6:	20c1      	movs	r0, #193	; 0xc1
 80013a8:	f000 f8f1 	bl	800158e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 80013ac:	2010      	movs	r0, #16
 80013ae:	f000 f8fb 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 80013b2:	20c5      	movs	r0, #197	; 0xc5
 80013b4:	f000 f8eb 	bl	800158e <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 80013b8:	2045      	movs	r0, #69	; 0x45
 80013ba:	f000 f8f5 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80013be:	2015      	movs	r0, #21
 80013c0:	f000 f8f2 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80013c4:	20c7      	movs	r0, #199	; 0xc7
 80013c6:	f000 f8e2 	bl	800158e <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80013ca:	2090      	movs	r0, #144	; 0x90
 80013cc:	f000 f8ec 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80013d0:	2036      	movs	r0, #54	; 0x36
 80013d2:	f000 f8dc 	bl	800158e <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80013d6:	20c8      	movs	r0, #200	; 0xc8
 80013d8:	f000 f8e6 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80013dc:	20f2      	movs	r0, #242	; 0xf2
 80013de:	f000 f8d6 	bl	800158e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80013e2:	2000      	movs	r0, #0
 80013e4:	f000 f8e0 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80013e8:	20b0      	movs	r0, #176	; 0xb0
 80013ea:	f000 f8d0 	bl	800158e <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80013ee:	20c2      	movs	r0, #194	; 0xc2
 80013f0:	f000 f8da 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80013f4:	20b6      	movs	r0, #182	; 0xb6
 80013f6:	f000 f8ca 	bl	800158e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80013fa:	200a      	movs	r0, #10
 80013fc:	f000 f8d4 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 8001400:	20a7      	movs	r0, #167	; 0xa7
 8001402:	f000 f8d1 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 8001406:	2027      	movs	r0, #39	; 0x27
 8001408:	f000 f8ce 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 800140c:	2004      	movs	r0, #4
 800140e:	f000 f8cb 	bl	80015a8 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 8001412:	202a      	movs	r0, #42	; 0x2a
 8001414:	f000 f8bb 	bl	800158e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001418:	2000      	movs	r0, #0
 800141a:	f000 f8c5 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800141e:	2000      	movs	r0, #0
 8001420:	f000 f8c2 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001424:	2000      	movs	r0, #0
 8001426:	f000 f8bf 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 800142a:	20ef      	movs	r0, #239	; 0xef
 800142c:	f000 f8bc 	bl	80015a8 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001430:	202b      	movs	r0, #43	; 0x2b
 8001432:	f000 f8ac 	bl	800158e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001436:	2000      	movs	r0, #0
 8001438:	f000 f8b6 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800143c:	2000      	movs	r0, #0
 800143e:	f000 f8b3 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001442:	2001      	movs	r0, #1
 8001444:	f000 f8b0 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001448:	203f      	movs	r0, #63	; 0x3f
 800144a:	f000 f8ad 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 800144e:	20f6      	movs	r0, #246	; 0xf6
 8001450:	f000 f89d 	bl	800158e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001454:	2001      	movs	r0, #1
 8001456:	f000 f8a7 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800145a:	2000      	movs	r0, #0
 800145c:	f000 f8a4 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001460:	2006      	movs	r0, #6
 8001462:	f000 f8a1 	bl	80015a8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001466:	202c      	movs	r0, #44	; 0x2c
 8001468:	f000 f891 	bl	800158e <ili9341_WriteReg>
  LCD_Delay(200);
 800146c:	20c8      	movs	r0, #200	; 0xc8
 800146e:	f000 fa79 	bl	8001964 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001472:	2026      	movs	r0, #38	; 0x26
 8001474:	f000 f88b 	bl	800158e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001478:	2001      	movs	r0, #1
 800147a:	f000 f895 	bl	80015a8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800147e:	20e0      	movs	r0, #224	; 0xe0
 8001480:	f000 f885 	bl	800158e <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001484:	200f      	movs	r0, #15
 8001486:	f000 f88f 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800148a:	2029      	movs	r0, #41	; 0x29
 800148c:	f000 f88c 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001490:	2024      	movs	r0, #36	; 0x24
 8001492:	f000 f889 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001496:	200c      	movs	r0, #12
 8001498:	f000 f886 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 800149c:	200e      	movs	r0, #14
 800149e:	f000 f883 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80014a2:	2009      	movs	r0, #9
 80014a4:	f000 f880 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 80014a8:	204e      	movs	r0, #78	; 0x4e
 80014aa:	f000 f87d 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80014ae:	2078      	movs	r0, #120	; 0x78
 80014b0:	f000 f87a 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 80014b4:	203c      	movs	r0, #60	; 0x3c
 80014b6:	f000 f877 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 80014ba:	2009      	movs	r0, #9
 80014bc:	f000 f874 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 80014c0:	2013      	movs	r0, #19
 80014c2:	f000 f871 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80014c6:	2005      	movs	r0, #5
 80014c8:	f000 f86e 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 80014cc:	2017      	movs	r0, #23
 80014ce:	f000 f86b 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80014d2:	2011      	movs	r0, #17
 80014d4:	f000 f868 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80014d8:	2000      	movs	r0, #0
 80014da:	f000 f865 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 80014de:	20e1      	movs	r0, #225	; 0xe1
 80014e0:	f000 f855 	bl	800158e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80014e4:	2000      	movs	r0, #0
 80014e6:	f000 f85f 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 80014ea:	2016      	movs	r0, #22
 80014ec:	f000 f85c 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 80014f0:	201b      	movs	r0, #27
 80014f2:	f000 f859 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80014f6:	2004      	movs	r0, #4
 80014f8:	f000 f856 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 80014fc:	2011      	movs	r0, #17
 80014fe:	f000 f853 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001502:	2007      	movs	r0, #7
 8001504:	f000 f850 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001508:	2031      	movs	r0, #49	; 0x31
 800150a:	f000 f84d 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 800150e:	2033      	movs	r0, #51	; 0x33
 8001510:	f000 f84a 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001514:	2042      	movs	r0, #66	; 0x42
 8001516:	f000 f847 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 800151a:	2005      	movs	r0, #5
 800151c:	f000 f844 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001520:	200c      	movs	r0, #12
 8001522:	f000 f841 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001526:	200a      	movs	r0, #10
 8001528:	f000 f83e 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 800152c:	2028      	movs	r0, #40	; 0x28
 800152e:	f000 f83b 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001532:	202f      	movs	r0, #47	; 0x2f
 8001534:	f000 f838 	bl	80015a8 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001538:	200f      	movs	r0, #15
 800153a:	f000 f835 	bl	80015a8 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 800153e:	2011      	movs	r0, #17
 8001540:	f000 f825 	bl	800158e <ili9341_WriteReg>
  LCD_Delay(200);
 8001544:	20c8      	movs	r0, #200	; 0xc8
 8001546:	f000 fa0d 	bl	8001964 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 800154a:	2029      	movs	r0, #41	; 0x29
 800154c:	f000 f81f 	bl	800158e <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001550:	202c      	movs	r0, #44	; 0x2c
 8001552:	f000 f81c 	bl	800158e <ili9341_WriteReg>
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}

0800155a <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 800155e:	f000 f913 	bl	8001788 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001562:	2103      	movs	r1, #3
 8001564:	20d3      	movs	r0, #211	; 0xd3
 8001566:	f000 f82c 	bl	80015c2 <ili9341_ReadData>
 800156a:	4603      	mov	r3, r0
 800156c:	b29b      	uxth	r3, r3
}
 800156e:	4618      	mov	r0, r3
 8001570:	bd80      	pop	{r7, pc}

08001572 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001576:	2029      	movs	r0, #41	; 0x29
 8001578:	f000 f809 	bl	800158e <ili9341_WriteReg>
}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}

08001580 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001584:	2028      	movs	r0, #40	; 0x28
 8001586:	f000 f802 	bl	800158e <ili9341_WriteReg>
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}

0800158e <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
 8001594:	4603      	mov	r3, r0
 8001596:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	4618      	mov	r0, r3
 800159c:	f000 f98e 	bl	80018bc <LCD_IO_WriteReg>
}
 80015a0:	bf00      	nop
 80015a2:	3708      	adds	r7, #8
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80015b2:	88fb      	ldrh	r3, [r7, #6]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f000 f95f 	bl	8001878 <LCD_IO_WriteData>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	4603      	mov	r3, r0
 80015ca:	460a      	mov	r2, r1
 80015cc:	80fb      	strh	r3, [r7, #6]
 80015ce:	4613      	mov	r3, r2
 80015d0:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80015d2:	797a      	ldrb	r2, [r7, #5]
 80015d4:	88fb      	ldrh	r3, [r7, #6]
 80015d6:	4611      	mov	r1, r2
 80015d8:	4618      	mov	r0, r3
 80015da:	f000 f991 	bl	8001900 <LCD_IO_ReadData>
 80015de:	4603      	mov	r3, r0
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3708      	adds	r7, #8
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}

080015e8 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 80015ec:	23f0      	movs	r3, #240	; 0xf0
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 80015fc:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001600:	4618      	mov	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
	...

0800160c <SPIx_Init>:
/******************************* SPI Routines *********************************/

/**
 * @brief  SPIx Bus initialization
 */
static void SPIx_Init(void) {
 800160c:	b580      	push	{r7, lr}
 800160e:	af00      	add	r7, sp, #0
	if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET) {
 8001610:	4819      	ldr	r0, [pc, #100]	; (8001678 <SPIx_Init+0x6c>)
 8001612:	f004 f8d0 	bl	80057b6 <HAL_SPI_GetState>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d12b      	bne.n	8001674 <SPIx_Init+0x68>
		/* SPI configuration -----------------------------------------------------*/
		SpiHandle.Instance = DISCOVERY_SPIx;
 800161c:	4b16      	ldr	r3, [pc, #88]	; (8001678 <SPIx_Init+0x6c>)
 800161e:	4a17      	ldr	r2, [pc, #92]	; (800167c <SPIx_Init+0x70>)
 8001620:	601a      	str	r2, [r3, #0]
		 to verify these constraints:
		 - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
		 - l3gd20 SPI interface max baudrate is 10MHz for write/read
		 - PCLK2 frequency is set to 90 MHz 
		 */
		SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001622:	4b15      	ldr	r3, [pc, #84]	; (8001678 <SPIx_Init+0x6c>)
 8001624:	2218      	movs	r2, #24
 8001626:	61da      	str	r2, [r3, #28]

		/* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
		/* for LCD and GYRO (SPI_DIRECTION_2LINES) */
		/* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
		SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 8001628:	4b13      	ldr	r3, [pc, #76]	; (8001678 <SPIx_Init+0x6c>)
 800162a:	2200      	movs	r2, #0
 800162c:	609a      	str	r2, [r3, #8]
		SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 800162e:	4b12      	ldr	r3, [pc, #72]	; (8001678 <SPIx_Init+0x6c>)
 8001630:	2200      	movs	r2, #0
 8001632:	615a      	str	r2, [r3, #20]
		SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001634:	4b10      	ldr	r3, [pc, #64]	; (8001678 <SPIx_Init+0x6c>)
 8001636:	2200      	movs	r2, #0
 8001638:	611a      	str	r2, [r3, #16]
		SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800163a:	4b0f      	ldr	r3, [pc, #60]	; (8001678 <SPIx_Init+0x6c>)
 800163c:	2200      	movs	r2, #0
 800163e:	629a      	str	r2, [r3, #40]	; 0x28
		SpiHandle.Init.CRCPolynomial = 7;
 8001640:	4b0d      	ldr	r3, [pc, #52]	; (8001678 <SPIx_Init+0x6c>)
 8001642:	2207      	movs	r2, #7
 8001644:	62da      	str	r2, [r3, #44]	; 0x2c
		SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8001646:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <SPIx_Init+0x6c>)
 8001648:	2200      	movs	r2, #0
 800164a:	60da      	str	r2, [r3, #12]
		SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800164c:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <SPIx_Init+0x6c>)
 800164e:	2200      	movs	r2, #0
 8001650:	621a      	str	r2, [r3, #32]
		SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8001652:	4b09      	ldr	r3, [pc, #36]	; (8001678 <SPIx_Init+0x6c>)
 8001654:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001658:	619a      	str	r2, [r3, #24]
		SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 800165a:	4b07      	ldr	r3, [pc, #28]	; (8001678 <SPIx_Init+0x6c>)
 800165c:	2200      	movs	r2, #0
 800165e:	625a      	str	r2, [r3, #36]	; 0x24
		SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8001660:	4b05      	ldr	r3, [pc, #20]	; (8001678 <SPIx_Init+0x6c>)
 8001662:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001666:	605a      	str	r2, [r3, #4]

		SPIx_MspInit(&SpiHandle);
 8001668:	4803      	ldr	r0, [pc, #12]	; (8001678 <SPIx_Init+0x6c>)
 800166a:	f000 f853 	bl	8001714 <SPIx_MspInit>
		HAL_SPI_Init(&SpiHandle);
 800166e:	4802      	ldr	r0, [pc, #8]	; (8001678 <SPIx_Init+0x6c>)
 8001670:	f003 fc01 	bl	8004e76 <HAL_SPI_Init>
	}
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	20000298 	.word	0x20000298
 800167c:	40015000 	.word	0x40015000

08001680 <SPIx_Read>:
/**
 * @brief  Reads 4 bytes from device.
 * @param  ReadSize: Number of bytes to read (max 4 bytes)
 * @retval Value read on the SPI
 */
static uint32_t SPIx_Read(uint8_t ReadSize) {
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = HAL_OK;
 800168a:	2300      	movs	r3, #0
 800168c:	73fb      	strb	r3, [r7, #15]
	uint32_t readvalue;

	status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize,
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	b29a      	uxth	r2, r3
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <SPIx_Read+0x38>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f107 0108 	add.w	r1, r7, #8
 800169a:	4808      	ldr	r0, [pc, #32]	; (80016bc <SPIx_Read+0x3c>)
 800169c:	f003 fdd8 	bl	8005250 <HAL_SPI_Receive>
 80016a0:	4603      	mov	r3, r0
 80016a2:	73fb      	strb	r3, [r7, #15]
			SpixTimeout);

	/* Check the communication status */
	if (status != HAL_OK) {
 80016a4:	7bfb      	ldrb	r3, [r7, #15]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <SPIx_Read+0x2e>
		/* Re-Initialize the BUS */
		SPIx_Error();
 80016aa:	f000 f827 	bl	80016fc <SPIx_Error>
	}

	return readvalue;
 80016ae:	68bb      	ldr	r3, [r7, #8]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	2000003c 	.word	0x2000003c
 80016bc:	20000298 	.word	0x20000298

080016c0 <SPIx_Write>:

/**
 * @brief  Writes a byte to device.
 * @param  Value: value to be written
 */
static void SPIx_Write(uint16_t Value) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_OK;
 80016ca:	2300      	movs	r3, #0
 80016cc:	73fb      	strb	r3, [r7, #15]

	status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <SPIx_Write+0x34>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	1db9      	adds	r1, r7, #6
 80016d4:	2201      	movs	r2, #1
 80016d6:	4808      	ldr	r0, [pc, #32]	; (80016f8 <SPIx_Write+0x38>)
 80016d8:	f003 fc7e 	bl	8004fd8 <HAL_SPI_Transmit>
 80016dc:	4603      	mov	r3, r0
 80016de:	73fb      	strb	r3, [r7, #15]

	/* Check the communication status */
	if (status != HAL_OK) {
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <SPIx_Write+0x2a>
		/* Re-Initialize the BUS */
		SPIx_Error();
 80016e6:	f000 f809 	bl	80016fc <SPIx_Error>
	}
}
 80016ea:	bf00      	nop
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	2000003c 	.word	0x2000003c
 80016f8:	20000298 	.word	0x20000298

080016fc <SPIx_Error>:
}

/**
 * @brief  SPIx error treatment function.
 */
static void SPIx_Error(void) {
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
	/* De-initialize the SPI communication BUS */
	HAL_SPI_DeInit(&SpiHandle);
 8001700:	4803      	ldr	r0, [pc, #12]	; (8001710 <SPIx_Error+0x14>)
 8001702:	f003 fc41 	bl	8004f88 <HAL_SPI_DeInit>

	/* Re- Initialize the SPI communication BUS */
	SPIx_Init();
 8001706:	f7ff ff81 	bl	800160c <SPIx_Init>
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000298 	.word	0x20000298

08001714 <SPIx_MspInit>:

/**
 * @brief  SPI MSP Init.
 * @param  hspi: SPI handle
 */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	; 0x28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable SPIx clock */
	DISCOVERY_SPIx_CLK_ENABLE();
 800171c:	2300      	movs	r3, #0
 800171e:	613b      	str	r3, [r7, #16]
 8001720:	4b17      	ldr	r3, [pc, #92]	; (8001780 <SPIx_MspInit+0x6c>)
 8001722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001724:	4a16      	ldr	r2, [pc, #88]	; (8001780 <SPIx_MspInit+0x6c>)
 8001726:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800172a:	6453      	str	r3, [r2, #68]	; 0x44
 800172c:	4b14      	ldr	r3, [pc, #80]	; (8001780 <SPIx_MspInit+0x6c>)
 800172e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001730:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001734:	613b      	str	r3, [r7, #16]
 8001736:	693b      	ldr	r3, [r7, #16]

	/* Enable DISCOVERY_SPI GPIO clock */
	DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001738:	2300      	movs	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	4b10      	ldr	r3, [pc, #64]	; (8001780 <SPIx_MspInit+0x6c>)
 800173e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001740:	4a0f      	ldr	r2, [pc, #60]	; (8001780 <SPIx_MspInit+0x6c>)
 8001742:	f043 0320 	orr.w	r3, r3, #32
 8001746:	6313      	str	r3, [r2, #48]	; 0x30
 8001748:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <SPIx_MspInit+0x6c>)
 800174a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174c:	f003 0320 	and.w	r3, r3, #32
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	68fb      	ldr	r3, [r7, #12]

	/* configure SPI SCK, MOSI and MISO */
	GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN
 8001754:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001758:	617b      	str	r3, [r7, #20]
			| DISCOVERY_SPIx_MISO_PIN);
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800175a:	2302      	movs	r3, #2
 800175c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 800175e:	2302      	movs	r3, #2
 8001760:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8001762:	2301      	movs	r3, #1
 8001764:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001766:	2305      	movs	r3, #5
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 800176a:	f107 0314 	add.w	r3, r7, #20
 800176e:	4619      	mov	r1, r3
 8001770:	4804      	ldr	r0, [pc, #16]	; (8001784 <SPIx_MspInit+0x70>)
 8001772:	f001 fd0f 	bl	8003194 <HAL_GPIO_Init>
}
 8001776:	bf00      	nop
 8001778:	3728      	adds	r7, #40	; 0x28
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800
 8001784:	40021400 	.word	0x40021400

08001788 <LCD_IO_Init>:
/********************************* LINK LCD ***********************************/

/**
 * @brief  Configures the LCD_SPI interface.
 */
void LCD_IO_Init(void) {
 8001788:	b580      	push	{r7, lr}
 800178a:	b088      	sub	sp, #32
 800178c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	if (Is_LCD_IO_Initialized == 0) {
 800178e:	4b36      	ldr	r3, [pc, #216]	; (8001868 <LCD_IO_Init+0xe0>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d164      	bne.n	8001860 <LCD_IO_Init+0xd8>
		Is_LCD_IO_Initialized = 1;
 8001796:	4b34      	ldr	r3, [pc, #208]	; (8001868 <LCD_IO_Init+0xe0>)
 8001798:	2201      	movs	r2, #1
 800179a:	701a      	strb	r2, [r3, #0]

		/* Configure NCS in Output Push-Pull mode */
		LCD_WRX_GPIO_CLK_ENABLE();
 800179c:	2300      	movs	r3, #0
 800179e:	60bb      	str	r3, [r7, #8]
 80017a0:	4b32      	ldr	r3, [pc, #200]	; (800186c <LCD_IO_Init+0xe4>)
 80017a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a4:	4a31      	ldr	r2, [pc, #196]	; (800186c <LCD_IO_Init+0xe4>)
 80017a6:	f043 0308 	orr.w	r3, r3, #8
 80017aa:	6313      	str	r3, [r2, #48]	; 0x30
 80017ac:	4b2f      	ldr	r3, [pc, #188]	; (800186c <LCD_IO_Init+0xe4>)
 80017ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b0:	f003 0308 	and.w	r3, r3, #8
 80017b4:	60bb      	str	r3, [r7, #8]
 80017b6:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStructure.Pin = LCD_WRX_PIN;
 80017b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017bc:	60fb      	str	r3, [r7, #12]
		GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80017be:	2301      	movs	r3, #1
 80017c0:	613b      	str	r3, [r7, #16]
		GPIO_InitStructure.Pull = GPIO_NOPULL;
 80017c2:	2300      	movs	r3, #0
 80017c4:	617b      	str	r3, [r7, #20]
		GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80017c6:	2302      	movs	r3, #2
 80017c8:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 80017ca:	f107 030c 	add.w	r3, r7, #12
 80017ce:	4619      	mov	r1, r3
 80017d0:	4827      	ldr	r0, [pc, #156]	; (8001870 <LCD_IO_Init+0xe8>)
 80017d2:	f001 fcdf 	bl	8003194 <HAL_GPIO_Init>

		LCD_RDX_GPIO_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	4b24      	ldr	r3, [pc, #144]	; (800186c <LCD_IO_Init+0xe4>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a23      	ldr	r2, [pc, #140]	; (800186c <LCD_IO_Init+0xe4>)
 80017e0:	f043 0308 	orr.w	r3, r3, #8
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b21      	ldr	r3, [pc, #132]	; (800186c <LCD_IO_Init+0xe4>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0308 	and.w	r3, r3, #8
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
		GPIO_InitStructure.Pin = LCD_RDX_PIN;
 80017f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017f6:	60fb      	str	r3, [r7, #12]
		GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 80017f8:	2301      	movs	r3, #1
 80017fa:	613b      	str	r3, [r7, #16]
		GPIO_InitStructure.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
		GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001800:	2302      	movs	r3, #2
 8001802:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001804:	f107 030c 	add.w	r3, r7, #12
 8001808:	4619      	mov	r1, r3
 800180a:	4819      	ldr	r0, [pc, #100]	; (8001870 <LCD_IO_Init+0xe8>)
 800180c:	f001 fcc2 	bl	8003194 <HAL_GPIO_Init>

		/* Configure the LCD Control pins ----------------------------------------*/
		LCD_NCS_GPIO_CLK_ENABLE();
 8001810:	2300      	movs	r3, #0
 8001812:	603b      	str	r3, [r7, #0]
 8001814:	4b15      	ldr	r3, [pc, #84]	; (800186c <LCD_IO_Init+0xe4>)
 8001816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001818:	4a14      	ldr	r2, [pc, #80]	; (800186c <LCD_IO_Init+0xe4>)
 800181a:	f043 0304 	orr.w	r3, r3, #4
 800181e:	6313      	str	r3, [r2, #48]	; 0x30
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <LCD_IO_Init+0xe4>)
 8001822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	603b      	str	r3, [r7, #0]
 800182a:	683b      	ldr	r3, [r7, #0]

		/* Configure NCS in Output Push-Pull mode */
		GPIO_InitStructure.Pin = LCD_NCS_PIN;
 800182c:	2304      	movs	r3, #4
 800182e:	60fb      	str	r3, [r7, #12]
		GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001830:	2301      	movs	r3, #1
 8001832:	613b      	str	r3, [r7, #16]
		GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
		GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001838:	2302      	movs	r3, #2
 800183a:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 800183c:	f107 030c 	add.w	r3, r7, #12
 8001840:	4619      	mov	r1, r3
 8001842:	480c      	ldr	r0, [pc, #48]	; (8001874 <LCD_IO_Init+0xec>)
 8001844:	f001 fca6 	bl	8003194 <HAL_GPIO_Init>

		/* Set or Reset the control line */
		LCD_CS_LOW();
 8001848:	2200      	movs	r2, #0
 800184a:	2104      	movs	r1, #4
 800184c:	4809      	ldr	r0, [pc, #36]	; (8001874 <LCD_IO_Init+0xec>)
 800184e:	f001 ff59 	bl	8003704 <HAL_GPIO_WritePin>
		LCD_CS_HIGH();
 8001852:	2201      	movs	r2, #1
 8001854:	2104      	movs	r1, #4
 8001856:	4807      	ldr	r0, [pc, #28]	; (8001874 <LCD_IO_Init+0xec>)
 8001858:	f001 ff54 	bl	8003704 <HAL_GPIO_WritePin>

		SPIx_Init();
 800185c:	f7ff fed6 	bl	800160c <SPIx_Init>
	}
}
 8001860:	bf00      	nop
 8001862:	3720      	adds	r7, #32
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	200002f0 	.word	0x200002f0
 800186c:	40023800 	.word	0x40023800
 8001870:	40020c00 	.word	0x40020c00
 8001874:	40020800 	.word	0x40020800

08001878 <LCD_IO_WriteData>:

/**
 * @brief  Writes register value.
 */
void LCD_IO_WriteData(uint16_t RegValue) {
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	80fb      	strh	r3, [r7, #6]
	/* Set WRX to send data */
	LCD_WRX_HIGH();
 8001882:	2201      	movs	r2, #1
 8001884:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001888:	480a      	ldr	r0, [pc, #40]	; (80018b4 <LCD_IO_WriteData+0x3c>)
 800188a:	f001 ff3b 	bl	8003704 <HAL_GPIO_WritePin>

	/* Reset LCD control line(/CS) and Send data */
	LCD_CS_LOW();
 800188e:	2200      	movs	r2, #0
 8001890:	2104      	movs	r1, #4
 8001892:	4809      	ldr	r0, [pc, #36]	; (80018b8 <LCD_IO_WriteData+0x40>)
 8001894:	f001 ff36 	bl	8003704 <HAL_GPIO_WritePin>
	SPIx_Write(RegValue);
 8001898:	88fb      	ldrh	r3, [r7, #6]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff ff10 	bl	80016c0 <SPIx_Write>

	/* Deselect: Chip Select high */
	LCD_CS_HIGH();
 80018a0:	2201      	movs	r2, #1
 80018a2:	2104      	movs	r1, #4
 80018a4:	4804      	ldr	r0, [pc, #16]	; (80018b8 <LCD_IO_WriteData+0x40>)
 80018a6:	f001 ff2d 	bl	8003704 <HAL_GPIO_WritePin>
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	40020c00 	.word	0x40020c00
 80018b8:	40020800 	.word	0x40020800

080018bc <LCD_IO_WriteReg>:

/**
 * @brief  Writes register address.
 */
void LCD_IO_WriteReg(uint8_t Reg) {
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	4603      	mov	r3, r0
 80018c4:	71fb      	strb	r3, [r7, #7]
	/* Reset WRX to send command */
	LCD_WRX_LOW();
 80018c6:	2200      	movs	r2, #0
 80018c8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018cc:	480a      	ldr	r0, [pc, #40]	; (80018f8 <LCD_IO_WriteReg+0x3c>)
 80018ce:	f001 ff19 	bl	8003704 <HAL_GPIO_WritePin>

	/* Reset LCD control line(/CS) and Send command */
	LCD_CS_LOW();
 80018d2:	2200      	movs	r2, #0
 80018d4:	2104      	movs	r1, #4
 80018d6:	4809      	ldr	r0, [pc, #36]	; (80018fc <LCD_IO_WriteReg+0x40>)
 80018d8:	f001 ff14 	bl	8003704 <HAL_GPIO_WritePin>
	SPIx_Write(Reg);
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff feed 	bl	80016c0 <SPIx_Write>

	/* Deselect: Chip Select high */
	LCD_CS_HIGH();
 80018e6:	2201      	movs	r2, #1
 80018e8:	2104      	movs	r1, #4
 80018ea:	4804      	ldr	r0, [pc, #16]	; (80018fc <LCD_IO_WriteReg+0x40>)
 80018ec:	f001 ff0a 	bl	8003704 <HAL_GPIO_WritePin>
}
 80018f0:	bf00      	nop
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40020c00 	.word	0x40020c00
 80018fc:	40020800 	.word	0x40020800

08001900 <LCD_IO_ReadData>:
 * @brief  Reads register value.
 * @param  RegValue Address of the register to read
 * @param  ReadSize Number of bytes to read
 * @retval Content of the register value
 */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) {
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	460a      	mov	r2, r1
 800190a:	80fb      	strh	r3, [r7, #6]
 800190c:	4613      	mov	r3, r2
 800190e:	717b      	strb	r3, [r7, #5]
	uint32_t readvalue = 0;
 8001910:	2300      	movs	r3, #0
 8001912:	60fb      	str	r3, [r7, #12]

	/* Select: Chip Select low */
	LCD_CS_LOW();
 8001914:	2200      	movs	r2, #0
 8001916:	2104      	movs	r1, #4
 8001918:	4810      	ldr	r0, [pc, #64]	; (800195c <LCD_IO_ReadData+0x5c>)
 800191a:	f001 fef3 	bl	8003704 <HAL_GPIO_WritePin>

	/* Reset WRX to send command */
	LCD_WRX_LOW();
 800191e:	2200      	movs	r2, #0
 8001920:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001924:	480e      	ldr	r0, [pc, #56]	; (8001960 <LCD_IO_ReadData+0x60>)
 8001926:	f001 feed 	bl	8003704 <HAL_GPIO_WritePin>

	SPIx_Write(RegValue);
 800192a:	88fb      	ldrh	r3, [r7, #6]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fec7 	bl	80016c0 <SPIx_Write>

	readvalue = SPIx_Read(ReadSize);
 8001932:	797b      	ldrb	r3, [r7, #5]
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff fea3 	bl	8001680 <SPIx_Read>
 800193a:	60f8      	str	r0, [r7, #12]

	/* Set WRX to send data */
	LCD_WRX_HIGH();
 800193c:	2201      	movs	r2, #1
 800193e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001942:	4807      	ldr	r0, [pc, #28]	; (8001960 <LCD_IO_ReadData+0x60>)
 8001944:	f001 fede 	bl	8003704 <HAL_GPIO_WritePin>

	/* Deselect: Chip Select high */
	LCD_CS_HIGH();
 8001948:	2201      	movs	r2, #1
 800194a:	2104      	movs	r1, #4
 800194c:	4803      	ldr	r0, [pc, #12]	; (800195c <LCD_IO_ReadData+0x5c>)
 800194e:	f001 fed9 	bl	8003704 <HAL_GPIO_WritePin>

	return readvalue;
 8001952:	68fb      	ldr	r3, [r7, #12]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40020800 	.word	0x40020800
 8001960:	40020c00 	.word	0x40020c00

08001964 <LCD_Delay>:

/**
 * @brief  Wait for loop in ms.
 * @param  Delay in ms.
 */
void LCD_Delay(uint32_t Delay) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
	HAL_Delay(Delay);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 fe91 	bl	8002694 <HAL_Delay>
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
	...

0800197c <BSP_LCD_Init>:

/**
 * @brief  Initializes the LCD.
 * @retval LCD state
 */
uint8_t BSP_LCD_Init(void) {
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
	/* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
	/* In this case, ReadID function is bypassed.*/
	/*if(ili9341_drv.ReadID() == ILI9341_ID)*/

	/* LTDC Configuration ----------------------------------------------------*/
	LtdcHandler.Instance = LTDC;
 8001980:	4b2d      	ldr	r3, [pc, #180]	; (8001a38 <BSP_LCD_Init+0xbc>)
 8001982:	4a2e      	ldr	r2, [pc, #184]	; (8001a3c <BSP_LCD_Init+0xc0>)
 8001984:	601a      	str	r2, [r3, #0]
	 ActiveH=320 (323-2-2+1)
	 VFP=4 (327-320-2-2+1)
	 */

	/* Configure horizontal synchronization width */
	LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8001986:	4b2c      	ldr	r3, [pc, #176]	; (8001a38 <BSP_LCD_Init+0xbc>)
 8001988:	2209      	movs	r2, #9
 800198a:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 800198c:	4b2a      	ldr	r3, [pc, #168]	; (8001a38 <BSP_LCD_Init+0xbc>)
 800198e:	2201      	movs	r2, #1
 8001990:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8001992:	4b29      	ldr	r3, [pc, #164]	; (8001a38 <BSP_LCD_Init+0xbc>)
 8001994:	221d      	movs	r2, #29
 8001996:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8001998:	4b27      	ldr	r3, [pc, #156]	; (8001a38 <BSP_LCD_Init+0xbc>)
 800199a:	2203      	movs	r2, #3
 800199c:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	LtdcHandler.Init.AccumulatedActiveW = 269;
 800199e:	4b26      	ldr	r3, [pc, #152]	; (8001a38 <BSP_LCD_Init+0xbc>)
 80019a0:	f240 120d 	movw	r2, #269	; 0x10d
 80019a4:	625a      	str	r2, [r3, #36]	; 0x24
	/* Configure accumulated active height */
	LtdcHandler.Init.AccumulatedActiveH = 323;
 80019a6:	4b24      	ldr	r3, [pc, #144]	; (8001a38 <BSP_LCD_Init+0xbc>)
 80019a8:	f240 1243 	movw	r2, #323	; 0x143
 80019ac:	629a      	str	r2, [r3, #40]	; 0x28
	/* Configure total width */
	LtdcHandler.Init.TotalWidth = 279;
 80019ae:	4b22      	ldr	r3, [pc, #136]	; (8001a38 <BSP_LCD_Init+0xbc>)
 80019b0:	f240 1217 	movw	r2, #279	; 0x117
 80019b4:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Configure total height */
	LtdcHandler.Init.TotalHeigh = 327;
 80019b6:	4b20      	ldr	r3, [pc, #128]	; (8001a38 <BSP_LCD_Init+0xbc>)
 80019b8:	f240 1247 	movw	r2, #327	; 0x147
 80019bc:	631a      	str	r2, [r3, #48]	; 0x30

	/* Configure R,G,B component values for LCD background color */
	LtdcHandler.Init.Backcolor.Red = 0;
 80019be:	4b1e      	ldr	r3, [pc, #120]	; (8001a38 <BSP_LCD_Init+0xbc>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	LtdcHandler.Init.Backcolor.Blue = 0;
 80019c6:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <BSP_LCD_Init+0xbc>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	LtdcHandler.Init.Backcolor.Green = 0;
 80019ce:	4b1a      	ldr	r3, [pc, #104]	; (8001a38 <BSP_LCD_Init+0xbc>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	/* LCD clock configuration */
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80019d6:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <BSP_LCD_Init+0xc4>)
 80019d8:	2208      	movs	r2, #8
 80019da:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 80019dc:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <BSP_LCD_Init+0xc4>)
 80019de:	22c0      	movs	r2, #192	; 0xc0
 80019e0:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 80019e2:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <BSP_LCD_Init+0xc4>)
 80019e4:	2204      	movs	r2, #4
 80019e6:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80019e8:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <BSP_LCD_Init+0xc4>)
 80019ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019ee:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 80019f0:	4813      	ldr	r0, [pc, #76]	; (8001a40 <BSP_LCD_Init+0xc4>)
 80019f2:	f002 ffef 	bl	80049d4 <HAL_RCCEx_PeriphCLKConfig>

	/* Polarity */
	LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80019f6:	4b10      	ldr	r3, [pc, #64]	; (8001a38 <BSP_LCD_Init+0xbc>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	605a      	str	r2, [r3, #4]
	LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80019fc:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <BSP_LCD_Init+0xbc>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
	LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001a02:	4b0d      	ldr	r3, [pc, #52]	; (8001a38 <BSP_LCD_Init+0xbc>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	60da      	str	r2, [r3, #12]
	LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001a08:	4b0b      	ldr	r3, [pc, #44]	; (8001a38 <BSP_LCD_Init+0xbc>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	611a      	str	r2, [r3, #16]

	BSP_LCD_MspInit();
 8001a0e:	f000 fa17 	bl	8001e40 <BSP_LCD_MspInit>
	HAL_LTDC_Init(&LtdcHandler);
 8001a12:	4809      	ldr	r0, [pc, #36]	; (8001a38 <BSP_LCD_Init+0xbc>)
 8001a14:	f002 f850 	bl	8003ab8 <HAL_LTDC_Init>

	/* Select the device */
	LcdDrv = &ili9341_drv;
 8001a18:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <BSP_LCD_Init+0xc8>)
 8001a1a:	4a0b      	ldr	r2, [pc, #44]	; (8001a48 <BSP_LCD_Init+0xcc>)
 8001a1c:	601a      	str	r2, [r3, #0]

	/* LCD Init */
	LcdDrv->Init();
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <BSP_LCD_Init+0xc8>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4798      	blx	r3

	/* Initialize the SDRAM */
	BSP_SDRAM_Init();
 8001a26:	f000 fbf9 	bl	800221c <BSP_SDRAM_Init>

	/* Initialize the font */
	BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001a2a:	4808      	ldr	r0, [pc, #32]	; (8001a4c <BSP_LCD_Init+0xd0>)
 8001a2c:	f000 f86a 	bl	8001b04 <BSP_LCD_SetFont>

	return LCD_OK;
 8001a30:	2300      	movs	r3, #0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	200002f4 	.word	0x200002f4
 8001a3c:	40016800 	.word	0x40016800
 8001a40:	200003dc 	.word	0x200003dc
 8001a44:	20000428 	.word	0x20000428
 8001a48:	20000004 	.word	0x20000004
 8001a4c:	20000040 	.word	0x20000040

08001a50 <BSP_LCD_GetXSize>:

/**
 * @brief  Gets the LCD X size.  
 * @retval The used LCD X size
 */
uint32_t BSP_LCD_GetXSize(void) {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
	return LcdDrv->GetLcdPixelWidth();
 8001a54:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <BSP_LCD_GetXSize+0x14>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a5a:	4798      	blx	r3
 8001a5c:	4603      	mov	r3, r0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000428 	.word	0x20000428

08001a68 <BSP_LCD_GetYSize>:

/**
 * @brief  Gets the LCD Y size.  
 * @retval The used LCD Y size
 */
uint32_t BSP_LCD_GetYSize(void) {
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
	return LcdDrv->GetLcdPixelHeight();
 8001a6c:	4b03      	ldr	r3, [pc, #12]	; (8001a7c <BSP_LCD_GetYSize+0x14>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a72:	4798      	blx	r3
 8001a74:	4603      	mov	r3, r0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	20000428 	.word	0x20000428

08001a80 <BSP_LCD_SelectLayer>:

/**
 * @brief  Selects the LCD Layer.
 * @param  LayerIndex: the Layer foreground or background.
 */
void BSP_LCD_SelectLayer(uint32_t LayerIndex) {
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	ActiveLayer = LayerIndex;
 8001a88:	4a04      	ldr	r2, [pc, #16]	; (8001a9c <BSP_LCD_SelectLayer+0x1c>)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6013      	str	r3, [r2, #0]
}
 8001a8e:	bf00      	nop
 8001a90:	370c      	adds	r7, #12
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
 8001a9a:	bf00      	nop
 8001a9c:	2000040c 	.word	0x2000040c

08001aa0 <BSP_LCD_SetTextColor>:

/**
 * @brief  Sets the Text color.
 * @param  Color: the Text color code ARGB(8-8-8-8)
 */
void BSP_LCD_SetTextColor(uint32_t Color) {
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
	DrawProp[ActiveLayer].TextColor = Color;
 8001aa8:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <BSP_LCD_SetTextColor+0x28>)
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	4907      	ldr	r1, [pc, #28]	; (8001acc <BSP_LCD_SetTextColor+0x2c>)
 8001aae:	4613      	mov	r3, r2
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	4413      	add	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	440b      	add	r3, r1
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	601a      	str	r2, [r3, #0]
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr
 8001ac8:	2000040c 	.word	0x2000040c
 8001acc:	20000410 	.word	0x20000410

08001ad0 <BSP_LCD_SetBackColor>:

/**
 * @brief  Sets the Background color.
 * @param  Color: the layer Background color code ARGB(8-8-8-8)
 */
void BSP_LCD_SetBackColor(uint32_t Color) {
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
	DrawProp[ActiveLayer].BackColor = Color;
 8001ad8:	4b08      	ldr	r3, [pc, #32]	; (8001afc <BSP_LCD_SetBackColor+0x2c>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	4908      	ldr	r1, [pc, #32]	; (8001b00 <BSP_LCD_SetBackColor+0x30>)
 8001ade:	4613      	mov	r3, r2
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4413      	add	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	440b      	add	r3, r1
 8001ae8:	3304      	adds	r3, #4
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	601a      	str	r2, [r3, #0]
}
 8001aee:	bf00      	nop
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	2000040c 	.word	0x2000040c
 8001b00:	20000410 	.word	0x20000410

08001b04 <BSP_LCD_SetFont>:

/**
 * @brief  Sets the Text Font.
 * @param  pFonts: the layer font to be used
 */
void BSP_LCD_SetFont(sFONT *pFonts) {
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
	DrawProp[ActiveLayer].pFont = pFonts;
 8001b0c:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <BSP_LCD_SetFont+0x2c>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4908      	ldr	r1, [pc, #32]	; (8001b34 <BSP_LCD_SetFont+0x30>)
 8001b12:	4613      	mov	r3, r2
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	4413      	add	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	3308      	adds	r3, #8
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	601a      	str	r2, [r3, #0]
}
 8001b22:	bf00      	nop
 8001b24:	370c      	adds	r7, #12
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	2000040c 	.word	0x2000040c
 8001b34:	20000410 	.word	0x20000410

08001b38 <BSP_LCD_Clear>:

/**
 * @brief  Clears the hole LCD.
 * @param  Color: the color of the background
 */
void BSP_LCD_Clear(uint32_t Color) {
 8001b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af02      	add	r7, sp, #8
 8001b3e:	6078      	str	r0, [r7, #4]
	/* Clear the LCD */
	FillBuffer(ActiveLayer,
 8001b40:	4b0f      	ldr	r3, [pc, #60]	; (8001b80 <BSP_LCD_Clear+0x48>)
 8001b42:	681c      	ldr	r4, [r3, #0]
			(uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress),
 8001b44:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <BSP_LCD_Clear+0x48>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0e      	ldr	r2, [pc, #56]	; (8001b84 <BSP_LCD_Clear+0x4c>)
 8001b4a:	2134      	movs	r1, #52	; 0x34
 8001b4c:	fb01 f303 	mul.w	r3, r1, r3
 8001b50:	4413      	add	r3, r2
 8001b52:	335c      	adds	r3, #92	; 0x5c
 8001b54:	681b      	ldr	r3, [r3, #0]
	FillBuffer(ActiveLayer,
 8001b56:	461e      	mov	r6, r3
 8001b58:	f7ff ff7a 	bl	8001a50 <BSP_LCD_GetXSize>
 8001b5c:	4605      	mov	r5, r0
 8001b5e:	f7ff ff83 	bl	8001a68 <BSP_LCD_GetYSize>
 8001b62:	4602      	mov	r2, r0
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	9301      	str	r3, [sp, #4]
 8001b68:	2300      	movs	r3, #0
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	462a      	mov	r2, r5
 8001b70:	4631      	mov	r1, r6
 8001b72:	4620      	mov	r0, r4
 8001b74:	f000 fb1a 	bl	80021ac <FillBuffer>
			BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
}
 8001b78:	bf00      	nop
 8001b7a:	370c      	adds	r7, #12
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b80:	2000040c 	.word	0x2000040c
 8001b84:	200002f4 	.word	0x200002f4

08001b88 <BSP_LCD_DisplayChar>:
 * @brief  Displays one character.
 * @param  Xpos: start column address
 * @param  Ypos: the Line where to display the character shape
 * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
 */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii) {
 8001b88:	b590      	push	{r4, r7, lr}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	80fb      	strh	r3, [r7, #6]
 8001b92:	460b      	mov	r3, r1
 8001b94:	80bb      	strh	r3, [r7, #4]
 8001b96:	4613      	mov	r3, r2
 8001b98:	70fb      	strb	r3, [r7, #3]
	DrawChar(Xpos, Ypos,
			&DrawProp[ActiveLayer].pFont->table[(Ascii - ' ')
 8001b9a:	4b1b      	ldr	r3, [pc, #108]	; (8001c08 <BSP_LCD_DisplayChar+0x80>)
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	491b      	ldr	r1, [pc, #108]	; (8001c0c <BSP_LCD_DisplayChar+0x84>)
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	4413      	add	r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	440b      	add	r3, r1
 8001baa:	3308      	adds	r3, #8
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	6819      	ldr	r1, [r3, #0]
 8001bb0:	78fb      	ldrb	r3, [r7, #3]
 8001bb2:	f1a3 0020 	sub.w	r0, r3, #32
					*\
 DrawProp[ActiveLayer].pFont->Height
 8001bb6:	4b14      	ldr	r3, [pc, #80]	; (8001c08 <BSP_LCD_DisplayChar+0x80>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	4c14      	ldr	r4, [pc, #80]	; (8001c0c <BSP_LCD_DisplayChar+0x84>)
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	4413      	add	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4423      	add	r3, r4
 8001bc6:	3308      	adds	r3, #8
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	88db      	ldrh	r3, [r3, #6]
					*\
 8001bcc:	fb03 f000 	mul.w	r0, r3, r0
					* ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8001bd0:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <BSP_LCD_DisplayChar+0x80>)
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	4c0d      	ldr	r4, [pc, #52]	; (8001c0c <BSP_LCD_DisplayChar+0x84>)
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	4413      	add	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	4423      	add	r3, r4
 8001be0:	3308      	adds	r3, #8
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	889b      	ldrh	r3, [r3, #4]
 8001be6:	3307      	adds	r3, #7
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	da00      	bge.n	8001bee <BSP_LCD_DisplayChar+0x66>
 8001bec:	3307      	adds	r3, #7
 8001bee:	10db      	asrs	r3, r3, #3
 8001bf0:	fb00 f303 	mul.w	r3, r0, r3
	DrawChar(Xpos, Ypos,
 8001bf4:	18ca      	adds	r2, r1, r3
 8001bf6:	88b9      	ldrh	r1, [r7, #4]
 8001bf8:	88fb      	ldrh	r3, [r7, #6]
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	f000 fa1c 	bl	8002038 <DrawChar>
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd90      	pop	{r4, r7, pc}
 8001c08:	2000040c 	.word	0x2000040c
 8001c0c:	20000410 	.word	0x20000410

08001c10 <BSP_LCD_DisplayStringAt>:
 *                @arg CENTER_MODE 
 *                @arg RIGHT_MODE
 *                @arg LEFT_MODE   
 */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText,
		Text_AlignModeTypdef mode) {
 8001c10:	b5b0      	push	{r4, r5, r7, lr}
 8001c12:	b088      	sub	sp, #32
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60ba      	str	r2, [r7, #8]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	81fb      	strh	r3, [r7, #14]
 8001c1e:	460b      	mov	r3, r1
 8001c20:	81bb      	strh	r3, [r7, #12]
 8001c22:	4613      	mov	r3, r2
 8001c24:	71fb      	strb	r3, [r7, #7]
	uint16_t refcolumn = 1, i = 0;
 8001c26:	2301      	movs	r3, #1
 8001c28:	83fb      	strh	r3, [r7, #30]
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	83bb      	strh	r3, [r7, #28]
	uint32_t size = 0, xsize = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
 8001c32:	2300      	movs	r3, #0
 8001c34:	613b      	str	r3, [r7, #16]
	uint8_t *ptr = pText;
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	617b      	str	r3, [r7, #20]

	/* Get the text size */
	while (*ptr++)
 8001c3a:	e002      	b.n	8001c42 <BSP_LCD_DisplayStringAt+0x32>
		size++;
 8001c3c:	69bb      	ldr	r3, [r7, #24]
 8001c3e:	3301      	adds	r3, #1
 8001c40:	61bb      	str	r3, [r7, #24]
	while (*ptr++)
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	1c5a      	adds	r2, r3, #1
 8001c46:	617a      	str	r2, [r7, #20]
 8001c48:	781b      	ldrb	r3, [r3, #0]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d1f6      	bne.n	8001c3c <BSP_LCD_DisplayStringAt+0x2c>

	/* Characters number per line */
	xsize = (BSP_LCD_GetXSize() / DrawProp[ActiveLayer].pFont->Width);
 8001c4e:	f7ff feff 	bl	8001a50 <BSP_LCD_GetXSize>
 8001c52:	4601      	mov	r1, r0
 8001c54:	4b4b      	ldr	r3, [pc, #300]	; (8001d84 <BSP_LCD_DisplayStringAt+0x174>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	484b      	ldr	r0, [pc, #300]	; (8001d88 <BSP_LCD_DisplayStringAt+0x178>)
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4403      	add	r3, r0
 8001c64:	3308      	adds	r3, #8
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	889b      	ldrh	r3, [r3, #4]
 8001c6a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001c6e:	613b      	str	r3, [r7, #16]

	switch (mode) {
 8001c70:	79fb      	ldrb	r3, [r7, #7]
 8001c72:	2b03      	cmp	r3, #3
 8001c74:	d01c      	beq.n	8001cb0 <BSP_LCD_DisplayStringAt+0xa0>
 8001c76:	2b03      	cmp	r3, #3
 8001c78:	dc33      	bgt.n	8001ce2 <BSP_LCD_DisplayStringAt+0xd2>
 8001c7a:	2b01      	cmp	r3, #1
 8001c7c:	d002      	beq.n	8001c84 <BSP_LCD_DisplayStringAt+0x74>
 8001c7e:	2b02      	cmp	r3, #2
 8001c80:	d019      	beq.n	8001cb6 <BSP_LCD_DisplayStringAt+0xa6>
 8001c82:	e02e      	b.n	8001ce2 <BSP_LCD_DisplayStringAt+0xd2>
	case CENTER_MODE: {
		refcolumn = X
				+ ((xsize - size) * DrawProp[ActiveLayer].pFont->Width) / 2;
 8001c84:	693a      	ldr	r2, [r7, #16]
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	1ad1      	subs	r1, r2, r3
 8001c8a:	4b3e      	ldr	r3, [pc, #248]	; (8001d84 <BSP_LCD_DisplayStringAt+0x174>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	483e      	ldr	r0, [pc, #248]	; (8001d88 <BSP_LCD_DisplayStringAt+0x178>)
 8001c90:	4613      	mov	r3, r2
 8001c92:	005b      	lsls	r3, r3, #1
 8001c94:	4413      	add	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4403      	add	r3, r0
 8001c9a:	3308      	adds	r3, #8
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	889b      	ldrh	r3, [r3, #4]
 8001ca0:	fb01 f303 	mul.w	r3, r1, r3
 8001ca4:	085b      	lsrs	r3, r3, #1
 8001ca6:	b29a      	uxth	r2, r3
		refcolumn = X
 8001ca8:	89fb      	ldrh	r3, [r7, #14]
 8001caa:	4413      	add	r3, r2
 8001cac:	83fb      	strh	r3, [r7, #30]
		break;
 8001cae:	e01b      	b.n	8001ce8 <BSP_LCD_DisplayStringAt+0xd8>
	}
	case LEFT_MODE: {
		refcolumn = X;
 8001cb0:	89fb      	ldrh	r3, [r7, #14]
 8001cb2:	83fb      	strh	r3, [r7, #30]
		break;
 8001cb4:	e018      	b.n	8001ce8 <BSP_LCD_DisplayStringAt+0xd8>
	}
	case RIGHT_MODE: {
		refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width);
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	b299      	uxth	r1, r3
 8001cbe:	4b31      	ldr	r3, [pc, #196]	; (8001d84 <BSP_LCD_DisplayStringAt+0x174>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	4831      	ldr	r0, [pc, #196]	; (8001d88 <BSP_LCD_DisplayStringAt+0x178>)
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	4413      	add	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4403      	add	r3, r0
 8001cce:	3308      	adds	r3, #8
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	889b      	ldrh	r3, [r3, #4]
 8001cd4:	fb11 f303 	smulbb	r3, r1, r3
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	89fb      	ldrh	r3, [r7, #14]
 8001cdc:	4413      	add	r3, r2
 8001cde:	83fb      	strh	r3, [r7, #30]
		break;
 8001ce0:	e002      	b.n	8001ce8 <BSP_LCD_DisplayStringAt+0xd8>
	}
	default: {
		refcolumn = X;
 8001ce2:	89fb      	ldrh	r3, [r7, #14]
 8001ce4:	83fb      	strh	r3, [r7, #30]
		break;
 8001ce6:	bf00      	nop
	}
	}

	/* Send the string character by character on LCD */
	while ((*pText != 0)
 8001ce8:	e01a      	b.n	8001d20 <BSP_LCD_DisplayStringAt+0x110>
			& (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width))
					& 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width)) {
		/* Display one character on LCD */
		BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	781a      	ldrb	r2, [r3, #0]
 8001cee:	89b9      	ldrh	r1, [r7, #12]
 8001cf0:	8bfb      	ldrh	r3, [r7, #30]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff ff48 	bl	8001b88 <BSP_LCD_DisplayChar>
		/* Decrement the column position by 16 */
		refcolumn += DrawProp[ActiveLayer].pFont->Width;
 8001cf8:	4b22      	ldr	r3, [pc, #136]	; (8001d84 <BSP_LCD_DisplayStringAt+0x174>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4922      	ldr	r1, [pc, #136]	; (8001d88 <BSP_LCD_DisplayStringAt+0x178>)
 8001cfe:	4613      	mov	r3, r2
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	4413      	add	r3, r2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	440b      	add	r3, r1
 8001d08:	3308      	adds	r3, #8
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	889a      	ldrh	r2, [r3, #4]
 8001d0e:	8bfb      	ldrh	r3, [r7, #30]
 8001d10:	4413      	add	r3, r2
 8001d12:	83fb      	strh	r3, [r7, #30]
		/* Point on the next character */
		pText++;
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	3301      	adds	r3, #1
 8001d18:	60bb      	str	r3, [r7, #8]
		i++;
 8001d1a:	8bbb      	ldrh	r3, [r7, #28]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	83bb      	strh	r3, [r7, #28]
	while ((*pText != 0)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	781b      	ldrb	r3, [r3, #0]
			& (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width))
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	bf14      	ite	ne
 8001d28:	2301      	movne	r3, #1
 8001d2a:	2300      	moveq	r3, #0
 8001d2c:	b2dc      	uxtb	r4, r3
 8001d2e:	f7ff fe8f 	bl	8001a50 <BSP_LCD_GetXSize>
 8001d32:	8bb9      	ldrh	r1, [r7, #28]
 8001d34:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <BSP_LCD_DisplayStringAt+0x174>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4d13      	ldr	r5, [pc, #76]	; (8001d88 <BSP_LCD_DisplayStringAt+0x178>)
 8001d3a:	4613      	mov	r3, r2
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	4413      	add	r3, r2
 8001d40:	009b      	lsls	r3, r3, #2
 8001d42:	442b      	add	r3, r5
 8001d44:	3308      	adds	r3, #8
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	889b      	ldrh	r3, [r3, #4]
 8001d4a:	fb01 f303 	mul.w	r3, r1, r3
 8001d4e:	1ac3      	subs	r3, r0, r3
					& 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width)) {
 8001d50:	b299      	uxth	r1, r3
 8001d52:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <BSP_LCD_DisplayStringAt+0x174>)
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	480c      	ldr	r0, [pc, #48]	; (8001d88 <BSP_LCD_DisplayStringAt+0x178>)
 8001d58:	4613      	mov	r3, r2
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	4413      	add	r3, r2
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4403      	add	r3, r0
 8001d62:	3308      	adds	r3, #8
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	889b      	ldrh	r3, [r3, #4]
			& (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width))
 8001d68:	4299      	cmp	r1, r3
 8001d6a:	bf2c      	ite	cs
 8001d6c:	2301      	movcs	r3, #1
 8001d6e:	2300      	movcc	r3, #0
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	4023      	ands	r3, r4
 8001d74:	b2db      	uxtb	r3, r3
	while ((*pText != 0)
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1b7      	bne.n	8001cea <BSP_LCD_DisplayStringAt+0xda>
	}
}
 8001d7a:	bf00      	nop
 8001d7c:	bf00      	nop
 8001d7e:	3720      	adds	r7, #32
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bdb0      	pop	{r4, r5, r7, pc}
 8001d84:	2000040c 	.word	0x2000040c
 8001d88:	20000410 	.word	0x20000410

08001d8c <BSP_LCD_FillRect>:
 * @param  Ypos: the Y position
 * @param  Height: rectangle height
 * @param  Width: rectangle width
 */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width,
		uint16_t Height) {
 8001d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d90:	b086      	sub	sp, #24
 8001d92:	af02      	add	r7, sp, #8
 8001d94:	4604      	mov	r4, r0
 8001d96:	4608      	mov	r0, r1
 8001d98:	4611      	mov	r1, r2
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	4623      	mov	r3, r4
 8001d9e:	80fb      	strh	r3, [r7, #6]
 8001da0:	4603      	mov	r3, r0
 8001da2:	80bb      	strh	r3, [r7, #4]
 8001da4:	460b      	mov	r3, r1
 8001da6:	807b      	strh	r3, [r7, #2]
 8001da8:	4613      	mov	r3, r2
 8001daa:	803b      	strh	r3, [r7, #0]
	uint32_t xaddress = 0;
 8001dac:	2300      	movs	r3, #0
 8001dae:	60fb      	str	r3, [r7, #12]

	/* Set the text color */
	BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8001db0:	4b20      	ldr	r3, [pc, #128]	; (8001e34 <BSP_LCD_FillRect+0xa8>)
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	4920      	ldr	r1, [pc, #128]	; (8001e38 <BSP_LCD_FillRect+0xac>)
 8001db6:	4613      	mov	r3, r2
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	4413      	add	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	440b      	add	r3, r1
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff fe6c 	bl	8001aa0 <BSP_LCD_SetTextColor>

	/* Get the rectangle start address */
	xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress)
 8001dc8:	4b1a      	ldr	r3, [pc, #104]	; (8001e34 <BSP_LCD_FillRect+0xa8>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a1b      	ldr	r2, [pc, #108]	; (8001e3c <BSP_LCD_FillRect+0xb0>)
 8001dce:	2134      	movs	r1, #52	; 0x34
 8001dd0:	fb01 f303 	mul.w	r3, r1, r3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	335c      	adds	r3, #92	; 0x5c
 8001dd8:	681c      	ldr	r4, [r3, #0]
			+ 4 * (BSP_LCD_GetXSize() * Ypos + Xpos);
 8001dda:	f7ff fe39 	bl	8001a50 <BSP_LCD_GetXSize>
 8001dde:	4602      	mov	r2, r0
 8001de0:	88bb      	ldrh	r3, [r7, #4]
 8001de2:	fb03 f202 	mul.w	r2, r3, r2
 8001de6:	88fb      	ldrh	r3, [r7, #6]
 8001de8:	4413      	add	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
	xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress)
 8001dec:	4423      	add	r3, r4
 8001dee:	60fb      	str	r3, [r7, #12]

	/* Fill the rectangle */
	FillBuffer(ActiveLayer, (uint32_t*) xaddress, Width, Height,
 8001df0:	4b10      	ldr	r3, [pc, #64]	; (8001e34 <BSP_LCD_FillRect+0xa8>)
 8001df2:	681c      	ldr	r4, [r3, #0]
 8001df4:	68fd      	ldr	r5, [r7, #12]
 8001df6:	887e      	ldrh	r6, [r7, #2]
 8001df8:	f8b7 8000 	ldrh.w	r8, [r7]
			(BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8001dfc:	f7ff fe28 	bl	8001a50 <BSP_LCD_GetXSize>
 8001e00:	4602      	mov	r2, r0
	FillBuffer(ActiveLayer, (uint32_t*) xaddress, Width, Height,
 8001e02:	887b      	ldrh	r3, [r7, #2]
 8001e04:	1ad1      	subs	r1, r2, r3
 8001e06:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <BSP_LCD_FillRect+0xa8>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	480b      	ldr	r0, [pc, #44]	; (8001e38 <BSP_LCD_FillRect+0xac>)
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	4413      	add	r3, r2
 8001e12:	009b      	lsls	r3, r3, #2
 8001e14:	4403      	add	r3, r0
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	9301      	str	r3, [sp, #4]
 8001e1a:	9100      	str	r1, [sp, #0]
 8001e1c:	4643      	mov	r3, r8
 8001e1e:	4632      	mov	r2, r6
 8001e20:	4629      	mov	r1, r5
 8001e22:	4620      	mov	r0, r4
 8001e24:	f000 f9c2 	bl	80021ac <FillBuffer>
}
 8001e28:	bf00      	nop
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e32:	bf00      	nop
 8001e34:	2000040c 	.word	0x2000040c
 8001e38:	20000410 	.word	0x20000410
 8001e3c:	200002f4 	.word	0x200002f4

08001e40 <BSP_LCD_MspInit>:
 *******************************************************************************/

/**
 * @brief  Initializes the LTDC MSP.
 */
__weak void BSP_LCD_MspInit(void) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b08e      	sub	sp, #56	; 0x38
 8001e44:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable the LTDC and DMA2D Clock */
	__HAL_RCC_LTDC_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	623b      	str	r3, [r7, #32]
 8001e4a:	4b61      	ldr	r3, [pc, #388]	; (8001fd0 <BSP_LCD_MspInit+0x190>)
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4e:	4a60      	ldr	r2, [pc, #384]	; (8001fd0 <BSP_LCD_MspInit+0x190>)
 8001e50:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001e54:	6453      	str	r3, [r2, #68]	; 0x44
 8001e56:	4b5e      	ldr	r3, [pc, #376]	; (8001fd0 <BSP_LCD_MspInit+0x190>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e5e:	623b      	str	r3, [r7, #32]
 8001e60:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_DMA2D_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	61fb      	str	r3, [r7, #28]
 8001e66:	4b5a      	ldr	r3, [pc, #360]	; (8001fd0 <BSP_LCD_MspInit+0x190>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	4a59      	ldr	r2, [pc, #356]	; (8001fd0 <BSP_LCD_MspInit+0x190>)
 8001e6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e70:	6313      	str	r3, [r2, #48]	; 0x30
 8001e72:	4b57      	ldr	r3, [pc, #348]	; (8001fd0 <BSP_LCD_MspInit+0x190>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e7a:	61fb      	str	r3, [r7, #28]
 8001e7c:	69fb      	ldr	r3, [r7, #28]

	/* Enable GPIOs clock */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61bb      	str	r3, [r7, #24]
 8001e82:	4b53      	ldr	r3, [pc, #332]	; (8001fd0 <BSP_LCD_MspInit+0x190>)
 8001e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e86:	4a52      	ldr	r2, [pc, #328]	; (8001fd0 <BSP_LCD_MspInit+0x190>)
 8001e88:	f043 0301 	orr.w	r3, r3, #1
 8001e8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8e:	4b50      	ldr	r3, [pc, #320]	; (8001fd0 <BSP_LCD_MspInit+0x190>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	f003 0301 	and.w	r3, r3, #1
 8001e96:	61bb      	str	r3, [r7, #24]
 8001e98:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	617b      	str	r3, [r7, #20]
 8001e9e:	4b4c      	ldr	r3, [pc, #304]	; (8001fd0 <BSP_LCD_MspInit+0x190>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	4a4b      	ldr	r2, [pc, #300]	; (8001fd0 <BSP_LCD_MspInit+0x190>)
 8001ea4:	f043 0302 	orr.w	r3, r3, #2
 8001ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eaa:	4b49      	ldr	r3, [pc, #292]	; (8001fd0 <BSP_LCD_MspInit+0x190>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	613b      	str	r3, [r7, #16]
 8001eba:	4b45      	ldr	r3, [pc, #276]	; (8001fd0 <BSP_LCD_MspInit+0x190>)
 8001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebe:	4a44      	ldr	r2, [pc, #272]	; (8001fd0 <BSP_LCD_MspInit+0x190>)
 8001ec0:	f043 0304 	orr.w	r3, r3, #4
 8001ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec6:	4b42      	ldr	r3, [pc, #264]	; (8001fd0 <BSP_LCD_MspInit+0x190>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	f003 0304 	and.w	r3, r3, #4
 8001ece:	613b      	str	r3, [r7, #16]
 8001ed0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	4b3e      	ldr	r3, [pc, #248]	; (8001fd0 <BSP_LCD_MspInit+0x190>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	4a3d      	ldr	r2, [pc, #244]	; (8001fd0 <BSP_LCD_MspInit+0x190>)
 8001edc:	f043 0308 	orr.w	r3, r3, #8
 8001ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee2:	4b3b      	ldr	r3, [pc, #236]	; (8001fd0 <BSP_LCD_MspInit+0x190>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	4b37      	ldr	r3, [pc, #220]	; (8001fd0 <BSP_LCD_MspInit+0x190>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	4a36      	ldr	r2, [pc, #216]	; (8001fd0 <BSP_LCD_MspInit+0x190>)
 8001ef8:	f043 0320 	orr.w	r3, r3, #32
 8001efc:	6313      	str	r3, [r2, #48]	; 0x30
 8001efe:	4b34      	ldr	r3, [pc, #208]	; (8001fd0 <BSP_LCD_MspInit+0x190>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	f003 0320 	and.w	r3, r3, #32
 8001f06:	60bb      	str	r3, [r7, #8]
 8001f08:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	607b      	str	r3, [r7, #4]
 8001f0e:	4b30      	ldr	r3, [pc, #192]	; (8001fd0 <BSP_LCD_MspInit+0x190>)
 8001f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f12:	4a2f      	ldr	r2, [pc, #188]	; (8001fd0 <BSP_LCD_MspInit+0x190>)
 8001f14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f18:	6313      	str	r3, [r2, #48]	; 0x30
 8001f1a:	4b2d      	ldr	r3, [pc, #180]	; (8001fd0 <BSP_LCD_MspInit+0x190>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f22:	607b      	str	r3, [r7, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
	 |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
	 -----------------------------------------------------
	 */

	/* GPIOA configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8001f26:	f641 0358 	movw	r3, #6232	; 0x1858
 8001f2a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_PIN_11 | GPIO_PIN_12;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001f30:	2300      	movs	r3, #0
 8001f32:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001f34:	2302      	movs	r3, #2
 8001f36:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStructure.Alternate = GPIO_AF14_LTDC;
 8001f38:	230e      	movs	r3, #14
 8001f3a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001f3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f40:	4619      	mov	r1, r3
 8001f42:	4824      	ldr	r0, [pc, #144]	; (8001fd4 <BSP_LCD_MspInit+0x194>)
 8001f44:	f001 f926 	bl	8003194 <HAL_GPIO_Init>

	/* GPIOB configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_8 |
 8001f48:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001f4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f52:	4619      	mov	r1, r3
 8001f54:	4820      	ldr	r0, [pc, #128]	; (8001fd8 <BSP_LCD_MspInit+0x198>)
 8001f56:	f001 f91d 	bl	8003194 <HAL_GPIO_Init>

	/* GPIOC configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8001f5a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001f60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f64:	4619      	mov	r1, r3
 8001f66:	481d      	ldr	r0, [pc, #116]	; (8001fdc <BSP_LCD_MspInit+0x19c>)
 8001f68:	f001 f914 	bl	8003194 <HAL_GPIO_Init>

	/* GPIOD configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8001f6c:	2348      	movs	r3, #72	; 0x48
 8001f6e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8001f70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f74:	4619      	mov	r1, r3
 8001f76:	481a      	ldr	r0, [pc, #104]	; (8001fe0 <BSP_LCD_MspInit+0x1a0>)
 8001f78:	f001 f90c 	bl	8003194 <HAL_GPIO_Init>

	/* GPIOF configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_10;
 8001f7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8001f82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f86:	4619      	mov	r1, r3
 8001f88:	4816      	ldr	r0, [pc, #88]	; (8001fe4 <BSP_LCD_MspInit+0x1a4>)
 8001f8a:	f001 f903 	bl	8003194 <HAL_GPIO_Init>

	/* GPIOG configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 |
 8001f8e:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_PIN_11;
	HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001f94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f98:	4619      	mov	r1, r3
 8001f9a:	4813      	ldr	r0, [pc, #76]	; (8001fe8 <BSP_LCD_MspInit+0x1a8>)
 8001f9c:	f001 f8fa 	bl	8003194 <HAL_GPIO_Init>

	/* GPIOB configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStructure.Alternate = GPIO_AF9_LTDC;
 8001fa4:	2309      	movs	r3, #9
 8001fa6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001fa8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fac:	4619      	mov	r1, r3
 8001fae:	480a      	ldr	r0, [pc, #40]	; (8001fd8 <BSP_LCD_MspInit+0x198>)
 8001fb0:	f001 f8f0 	bl	8003194 <HAL_GPIO_Init>

	/* GPIOG configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8001fb4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8001fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4809      	ldr	r0, [pc, #36]	; (8001fe8 <BSP_LCD_MspInit+0x1a8>)
 8001fc2:	f001 f8e7 	bl	8003194 <HAL_GPIO_Init>
}
 8001fc6:	bf00      	nop
 8001fc8:	3738      	adds	r7, #56	; 0x38
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40020000 	.word	0x40020000
 8001fd8:	40020400 	.word	0x40020400
 8001fdc:	40020800 	.word	0x40020800
 8001fe0:	40020c00 	.word	0x40020c00
 8001fe4:	40021400 	.word	0x40021400
 8001fe8:	40021800 	.word	0x40021800

08001fec <BSP_LCD_DrawPixel>:
 * @brief  Writes Pixel.
 * @param  Xpos: the X position
 * @param  Ypos: the Y position
 * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)  
 */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code) {
 8001fec:	b5b0      	push	{r4, r5, r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	603a      	str	r2, [r7, #0]
 8001ff6:	80fb      	strh	r3, [r7, #6]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	80bb      	strh	r3, [r7, #4]
	/* Write data value to all SDRAM memory */
	*(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <BSP_LCD_DrawPixel+0x44>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a0c      	ldr	r2, [pc, #48]	; (8002034 <BSP_LCD_DrawPixel+0x48>)
 8002002:	2134      	movs	r1, #52	; 0x34
 8002004:	fb01 f303 	mul.w	r3, r1, r3
 8002008:	4413      	add	r3, r2
 800200a:	335c      	adds	r3, #92	; 0x5c
 800200c:	681c      	ldr	r4, [r3, #0]
			+ (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 800200e:	88bd      	ldrh	r5, [r7, #4]
 8002010:	f7ff fd1e 	bl	8001a50 <BSP_LCD_GetXSize>
 8002014:	4603      	mov	r3, r0
 8002016:	fb03 f205 	mul.w	r2, r3, r5
 800201a:	88fb      	ldrh	r3, [r7, #6]
 800201c:	4413      	add	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	4423      	add	r3, r4
	*(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress
 8002022:	461a      	mov	r2, r3
			+ (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	6013      	str	r3, [r2, #0]
}
 8002028:	bf00      	nop
 800202a:	3708      	adds	r7, #8
 800202c:	46bd      	mov	sp, r7
 800202e:	bdb0      	pop	{r4, r5, r7, pc}
 8002030:	2000040c 	.word	0x2000040c
 8002034:	200002f4 	.word	0x200002f4

08002038 <DrawChar>:
 * @brief  Draws a character on LCD.
 * @param  Xpos: the Line where to display the character shape
 * @param  Ypos: start column address
 * @param  c: pointer to the character data
 */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c) {
 8002038:	b580      	push	{r7, lr}
 800203a:	b088      	sub	sp, #32
 800203c:	af00      	add	r7, sp, #0
 800203e:	4603      	mov	r3, r0
 8002040:	603a      	str	r2, [r7, #0]
 8002042:	80fb      	strh	r3, [r7, #6]
 8002044:	460b      	mov	r3, r1
 8002046:	80bb      	strh	r3, [r7, #4]
	uint32_t i = 0, j = 0;
 8002048:	2300      	movs	r3, #0
 800204a:	61fb      	str	r3, [r7, #28]
 800204c:	2300      	movs	r3, #0
 800204e:	61bb      	str	r3, [r7, #24]
	uint16_t height, width;
	uint8_t offset;
	uint8_t *pchar;
	uint32_t line = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	617b      	str	r3, [r7, #20]

	height = DrawProp[ActiveLayer].pFont->Height;
 8002054:	4b53      	ldr	r3, [pc, #332]	; (80021a4 <DrawChar+0x16c>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	4953      	ldr	r1, [pc, #332]	; (80021a8 <DrawChar+0x170>)
 800205a:	4613      	mov	r3, r2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	4413      	add	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	440b      	add	r3, r1
 8002064:	3308      	adds	r3, #8
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	88db      	ldrh	r3, [r3, #6]
 800206a:	827b      	strh	r3, [r7, #18]
	width = DrawProp[ActiveLayer].pFont->Width;
 800206c:	4b4d      	ldr	r3, [pc, #308]	; (80021a4 <DrawChar+0x16c>)
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	494d      	ldr	r1, [pc, #308]	; (80021a8 <DrawChar+0x170>)
 8002072:	4613      	mov	r3, r2
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	4413      	add	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	440b      	add	r3, r1
 800207c:	3308      	adds	r3, #8
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	889b      	ldrh	r3, [r3, #4]
 8002082:	823b      	strh	r3, [r7, #16]

	offset = 8 * ((width + 7) / 8) - width;
 8002084:	8a3b      	ldrh	r3, [r7, #16]
 8002086:	3307      	adds	r3, #7
 8002088:	2b00      	cmp	r3, #0
 800208a:	da00      	bge.n	800208e <DrawChar+0x56>
 800208c:	3307      	adds	r3, #7
 800208e:	10db      	asrs	r3, r3, #3
 8002090:	b2db      	uxtb	r3, r3
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	b2da      	uxtb	r2, r3
 8002096:	8a3b      	ldrh	r3, [r7, #16]
 8002098:	b2db      	uxtb	r3, r3
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	73fb      	strb	r3, [r7, #15]

	for (i = 0; i < height; i++) {
 800209e:	2300      	movs	r3, #0
 80020a0:	61fb      	str	r3, [r7, #28]
 80020a2:	e076      	b.n	8002192 <DrawChar+0x15a>
		pchar = ((uint8_t*) c + (width + 7) / 8 * i);
 80020a4:	8a3b      	ldrh	r3, [r7, #16]
 80020a6:	3307      	adds	r3, #7
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	da00      	bge.n	80020ae <DrawChar+0x76>
 80020ac:	3307      	adds	r3, #7
 80020ae:	10db      	asrs	r3, r3, #3
 80020b0:	461a      	mov	r2, r3
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	fb02 f303 	mul.w	r3, r2, r3
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	4413      	add	r3, r2
 80020bc:	60bb      	str	r3, [r7, #8]

		switch (((width + 7) / 8)) {
 80020be:	8a3b      	ldrh	r3, [r7, #16]
 80020c0:	3307      	adds	r3, #7
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	da00      	bge.n	80020c8 <DrawChar+0x90>
 80020c6:	3307      	adds	r3, #7
 80020c8:	10db      	asrs	r3, r3, #3
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d002      	beq.n	80020d4 <DrawChar+0x9c>
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d004      	beq.n	80020dc <DrawChar+0xa4>
 80020d2:	e00c      	b.n	80020ee <DrawChar+0xb6>
		case 1:
			line = pchar[0];
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	617b      	str	r3, [r7, #20]
			break;
 80020da:	e016      	b.n	800210a <DrawChar+0xd2>

		case 2:
			line = (pchar[0] << 8) | pchar[1];
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	021b      	lsls	r3, r3, #8
 80020e2:	68ba      	ldr	r2, [r7, #8]
 80020e4:	3201      	adds	r2, #1
 80020e6:	7812      	ldrb	r2, [r2, #0]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	617b      	str	r3, [r7, #20]
			break;
 80020ec:	e00d      	b.n	800210a <DrawChar+0xd2>

		case 3:
		default:
			line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	041a      	lsls	r2, r3, #16
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	3301      	adds	r3, #1
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	021b      	lsls	r3, r3, #8
 80020fc:	4313      	orrs	r3, r2
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	3202      	adds	r2, #2
 8002102:	7812      	ldrb	r2, [r2, #0]
 8002104:	4313      	orrs	r3, r2
 8002106:	617b      	str	r3, [r7, #20]
			break;
 8002108:	bf00      	nop
		}

		for (j = 0; j < width; j++) {
 800210a:	2300      	movs	r3, #0
 800210c:	61bb      	str	r3, [r7, #24]
 800210e:	e036      	b.n	800217e <DrawChar+0x146>
			if (line & (1 << (width - j + offset - 1))) {
 8002110:	8a3a      	ldrh	r2, [r7, #16]
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	1ad2      	subs	r2, r2, r3
 8002116:	7bfb      	ldrb	r3, [r7, #15]
 8002118:	4413      	add	r3, r2
 800211a:	3b01      	subs	r3, #1
 800211c:	2201      	movs	r2, #1
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	461a      	mov	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	4013      	ands	r3, r2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d012      	beq.n	8002152 <DrawChar+0x11a>
				BSP_LCD_DrawPixel((Xpos + j), Ypos,
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	b29a      	uxth	r2, r3
 8002130:	88fb      	ldrh	r3, [r7, #6]
 8002132:	4413      	add	r3, r2
 8002134:	b298      	uxth	r0, r3
 8002136:	4b1b      	ldr	r3, [pc, #108]	; (80021a4 <DrawChar+0x16c>)
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	491b      	ldr	r1, [pc, #108]	; (80021a8 <DrawChar+0x170>)
 800213c:	4613      	mov	r3, r2
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	4413      	add	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	440b      	add	r3, r1
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	88bb      	ldrh	r3, [r7, #4]
 800214a:	4619      	mov	r1, r3
 800214c:	f7ff ff4e 	bl	8001fec <BSP_LCD_DrawPixel>
 8002150:	e012      	b.n	8002178 <DrawChar+0x140>
						DrawProp[ActiveLayer].TextColor);
			} else {
				BSP_LCD_DrawPixel((Xpos + j), Ypos,
 8002152:	69bb      	ldr	r3, [r7, #24]
 8002154:	b29a      	uxth	r2, r3
 8002156:	88fb      	ldrh	r3, [r7, #6]
 8002158:	4413      	add	r3, r2
 800215a:	b298      	uxth	r0, r3
 800215c:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <DrawChar+0x16c>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4911      	ldr	r1, [pc, #68]	; (80021a8 <DrawChar+0x170>)
 8002162:	4613      	mov	r3, r2
 8002164:	005b      	lsls	r3, r3, #1
 8002166:	4413      	add	r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	440b      	add	r3, r1
 800216c:	3304      	adds	r3, #4
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	88bb      	ldrh	r3, [r7, #4]
 8002172:	4619      	mov	r1, r3
 8002174:	f7ff ff3a 	bl	8001fec <BSP_LCD_DrawPixel>
		for (j = 0; j < width; j++) {
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	3301      	adds	r3, #1
 800217c:	61bb      	str	r3, [r7, #24]
 800217e:	8a3b      	ldrh	r3, [r7, #16]
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	429a      	cmp	r2, r3
 8002184:	d3c4      	bcc.n	8002110 <DrawChar+0xd8>
						DrawProp[ActiveLayer].BackColor);
			}
		}
		Ypos++;
 8002186:	88bb      	ldrh	r3, [r7, #4]
 8002188:	3301      	adds	r3, #1
 800218a:	80bb      	strh	r3, [r7, #4]
	for (i = 0; i < height; i++) {
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	3301      	adds	r3, #1
 8002190:	61fb      	str	r3, [r7, #28]
 8002192:	8a7b      	ldrh	r3, [r7, #18]
 8002194:	69fa      	ldr	r2, [r7, #28]
 8002196:	429a      	cmp	r2, r3
 8002198:	d384      	bcc.n	80020a4 <DrawChar+0x6c>
	}
}
 800219a:	bf00      	nop
 800219c:	bf00      	nop
 800219e:	3720      	adds	r7, #32
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	2000040c 	.word	0x2000040c
 80021a8:	20000410 	.word	0x20000410

080021ac <FillBuffer>:
 * @param  ySize: buffer height
 * @param  OffLine: offset
 * @param  ColorIndex: color Index  
 */
static void FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize,
		uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af02      	add	r7, sp, #8
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	60b9      	str	r1, [r7, #8]
 80021b6:	607a      	str	r2, [r7, #4]
 80021b8:	603b      	str	r3, [r7, #0]

	/* Register to memory mode with ARGB8888 as color Mode */
	Dma2dHandler.Init.Mode = DMA2D_R2M;
 80021ba:	4b16      	ldr	r3, [pc, #88]	; (8002214 <FillBuffer+0x68>)
 80021bc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80021c0:	605a      	str	r2, [r3, #4]
	Dma2dHandler.Init.ColorMode = DMA2D_ARGB8888;
 80021c2:	4b14      	ldr	r3, [pc, #80]	; (8002214 <FillBuffer+0x68>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	609a      	str	r2, [r3, #8]
	Dma2dHandler.Init.OutputOffset = OffLine;
 80021c8:	4a12      	ldr	r2, [pc, #72]	; (8002214 <FillBuffer+0x68>)
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	60d3      	str	r3, [r2, #12]

	Dma2dHandler.Instance = DMA2D;
 80021ce:	4b11      	ldr	r3, [pc, #68]	; (8002214 <FillBuffer+0x68>)
 80021d0:	4a11      	ldr	r2, [pc, #68]	; (8002218 <FillBuffer+0x6c>)
 80021d2:	601a      	str	r2, [r3, #0]

	/* DMA2D Initialization */
	if (HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) {
 80021d4:	480f      	ldr	r0, [pc, #60]	; (8002214 <FillBuffer+0x68>)
 80021d6:	f000 fd51 	bl	8002c7c <HAL_DMA2D_Init>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d115      	bne.n	800220c <FillBuffer+0x60>
		if (HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) {
 80021e0:	68f9      	ldr	r1, [r7, #12]
 80021e2:	480c      	ldr	r0, [pc, #48]	; (8002214 <FillBuffer+0x68>)
 80021e4:	f000 fea8 	bl	8002f38 <HAL_DMA2D_ConfigLayer>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d10e      	bne.n	800220c <FillBuffer+0x60>
			if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t) pDst,
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	69f9      	ldr	r1, [r7, #28]
 80021f8:	4806      	ldr	r0, [pc, #24]	; (8002214 <FillBuffer+0x68>)
 80021fa:	f000 fd88 	bl	8002d0e <HAL_DMA2D_Start>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d103      	bne.n	800220c <FillBuffer+0x60>
					xSize, ySize) == HAL_OK) {
				/* Polling For DMA transfer */
				HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002204:	210a      	movs	r1, #10
 8002206:	4803      	ldr	r0, [pc, #12]	; (8002214 <FillBuffer+0x68>)
 8002208:	f000 fdac 	bl	8002d64 <HAL_DMA2D_PollForTransfer>
			}
		}
	}
}
 800220c:	bf00      	nop
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	2000039c 	.word	0x2000039c
 8002218:	4002b000 	.word	0x4002b000

0800221c <BSP_SDRAM_Init>:
 */

/**
 * @brief  Initializes the SDRAM device.
 */
uint8_t BSP_SDRAM_Init(void) {
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
	static uint8_t sdramstatus = SDRAM_ERROR;

	/* SDRAM device configuration */
	SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002220:	4b29      	ldr	r3, [pc, #164]	; (80022c8 <BSP_SDRAM_Init+0xac>)
 8002222:	4a2a      	ldr	r2, [pc, #168]	; (80022cc <BSP_SDRAM_Init+0xb0>)
 8002224:	601a      	str	r2, [r3, #0]

	/* FMC Configuration -------------------------------------------------------*/
	/* FMC SDRAM Bank configuration */
	/* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
	/* TMRD: 2 Clock cycles */
	Timing.LoadToActiveDelay = 2;
 8002226:	4b2a      	ldr	r3, [pc, #168]	; (80022d0 <BSP_SDRAM_Init+0xb4>)
 8002228:	2202      	movs	r2, #2
 800222a:	601a      	str	r2, [r3, #0]
	/* TXSR: min=70ns (7x11.11ns) */
	Timing.ExitSelfRefreshDelay = 7;
 800222c:	4b28      	ldr	r3, [pc, #160]	; (80022d0 <BSP_SDRAM_Init+0xb4>)
 800222e:	2207      	movs	r2, #7
 8002230:	605a      	str	r2, [r3, #4]
	/* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
	Timing.SelfRefreshTime = 4;
 8002232:	4b27      	ldr	r3, [pc, #156]	; (80022d0 <BSP_SDRAM_Init+0xb4>)
 8002234:	2204      	movs	r2, #4
 8002236:	609a      	str	r2, [r3, #8]
	/* TRC:  min=70 (7x11.11ns) */
	Timing.RowCycleDelay = 7;
 8002238:	4b25      	ldr	r3, [pc, #148]	; (80022d0 <BSP_SDRAM_Init+0xb4>)
 800223a:	2207      	movs	r2, #7
 800223c:	60da      	str	r2, [r3, #12]
	/* TWR:  min=1+ 7ns (1+1x11.11ns) */
	Timing.WriteRecoveryTime = 2;
 800223e:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <BSP_SDRAM_Init+0xb4>)
 8002240:	2202      	movs	r2, #2
 8002242:	611a      	str	r2, [r3, #16]
	/* TRP:  20ns => 2x11.11ns*/
	Timing.RPDelay = 2;
 8002244:	4b22      	ldr	r3, [pc, #136]	; (80022d0 <BSP_SDRAM_Init+0xb4>)
 8002246:	2202      	movs	r2, #2
 8002248:	615a      	str	r2, [r3, #20]
	/* TRCD: 20ns => 2x11.11ns */
	Timing.RCDDelay = 2;
 800224a:	4b21      	ldr	r3, [pc, #132]	; (80022d0 <BSP_SDRAM_Init+0xb4>)
 800224c:	2202      	movs	r2, #2
 800224e:	619a      	str	r2, [r3, #24]

	/* FMC SDRAM control configuration */
	SdramHandle.Init.SDBank = FMC_SDRAM_BANK2;
 8002250:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <BSP_SDRAM_Init+0xac>)
 8002252:	2201      	movs	r2, #1
 8002254:	605a      	str	r2, [r3, #4]
	/* Row addressing: [7:0] */
	SdramHandle.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002256:	4b1c      	ldr	r3, [pc, #112]	; (80022c8 <BSP_SDRAM_Init+0xac>)
 8002258:	2200      	movs	r2, #0
 800225a:	609a      	str	r2, [r3, #8]
	/* Column addressing: [11:0] */
	SdramHandle.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800225c:	4b1a      	ldr	r3, [pc, #104]	; (80022c8 <BSP_SDRAM_Init+0xac>)
 800225e:	2204      	movs	r2, #4
 8002260:	60da      	str	r2, [r3, #12]
	SdramHandle.Init.MemoryDataWidth = SDRAM_MEMORY_WIDTH;
 8002262:	4b19      	ldr	r3, [pc, #100]	; (80022c8 <BSP_SDRAM_Init+0xac>)
 8002264:	2210      	movs	r2, #16
 8002266:	611a      	str	r2, [r3, #16]
	SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002268:	4b17      	ldr	r3, [pc, #92]	; (80022c8 <BSP_SDRAM_Init+0xac>)
 800226a:	2240      	movs	r2, #64	; 0x40
 800226c:	615a      	str	r2, [r3, #20]
	SdramHandle.Init.CASLatency = SDRAM_CAS_LATENCY;
 800226e:	4b16      	ldr	r3, [pc, #88]	; (80022c8 <BSP_SDRAM_Init+0xac>)
 8002270:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8002274:	619a      	str	r2, [r3, #24]
	SdramHandle.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002276:	4b14      	ldr	r3, [pc, #80]	; (80022c8 <BSP_SDRAM_Init+0xac>)
 8002278:	2200      	movs	r2, #0
 800227a:	61da      	str	r2, [r3, #28]
	SdramHandle.Init.SDClockPeriod = SDCLOCK_PERIOD;
 800227c:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <BSP_SDRAM_Init+0xac>)
 800227e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002282:	621a      	str	r2, [r3, #32]
	SdramHandle.Init.ReadBurst = SDRAM_READBURST;
 8002284:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <BSP_SDRAM_Init+0xac>)
 8002286:	2200      	movs	r2, #0
 8002288:	625a      	str	r2, [r3, #36]	; 0x24
	SdramHandle.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 800228a:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <BSP_SDRAM_Init+0xac>)
 800228c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002290:	629a      	str	r2, [r3, #40]	; 0x28

	/* SDRAM controller initialization */
	/* __weak function can be surcharged by the application code */
	BSP_SDRAM_MspInit(&SdramHandle, (void*) NULL);
 8002292:	2100      	movs	r1, #0
 8002294:	480c      	ldr	r0, [pc, #48]	; (80022c8 <BSP_SDRAM_Init+0xac>)
 8002296:	f000 f87f 	bl	8002398 <BSP_SDRAM_MspInit>
	if (HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK) {
 800229a:	490d      	ldr	r1, [pc, #52]	; (80022d0 <BSP_SDRAM_Init+0xb4>)
 800229c:	480a      	ldr	r0, [pc, #40]	; (80022c8 <BSP_SDRAM_Init+0xac>)
 800229e:	f002 fd59 	bl	8004d54 <HAL_SDRAM_Init>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <BSP_SDRAM_Init+0x94>
		sdramstatus = SDRAM_ERROR;
 80022a8:	4b0a      	ldr	r3, [pc, #40]	; (80022d4 <BSP_SDRAM_Init+0xb8>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	701a      	strb	r2, [r3, #0]
 80022ae:	e002      	b.n	80022b6 <BSP_SDRAM_Init+0x9a>
	} else {
		sdramstatus = SDRAM_OK;
 80022b0:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <BSP_SDRAM_Init+0xb8>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	701a      	strb	r2, [r3, #0]
	}

	/* SDRAM initialization sequence */
	BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80022b6:	f240 506a 	movw	r0, #1386	; 0x56a
 80022ba:	f000 f80d 	bl	80022d8 <BSP_SDRAM_Initialization_sequence>

	return sdramstatus;
 80022be:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <BSP_SDRAM_Init+0xb8>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	2000042c 	.word	0x2000042c
 80022cc:	a0000140 	.word	0xa0000140
 80022d0:	20000460 	.word	0x20000460
 80022d4:	20000060 	.word	0x20000060

080022d8 <BSP_SDRAM_Initialization_sequence>:

/**
 * @brief  Programs the SDRAM device.
 * @param  RefreshCount: SDRAM refresh counter value 
 */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount) {
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
	__IO uint32_t tmpmrd = 0;
 80022e0:	2300      	movs	r3, #0
 80022e2:	60fb      	str	r3, [r7, #12]

	/* Step 1:  Configure a clock configuration enable command */
	Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80022e4:	4b2a      	ldr	r3, [pc, #168]	; (8002390 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022e6:	2201      	movs	r2, #1
 80022e8:	601a      	str	r2, [r3, #0]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 80022ea:	4b29      	ldr	r3, [pc, #164]	; (8002390 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022ec:	2208      	movs	r2, #8
 80022ee:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber = 1;
 80022f0:	4b27      	ldr	r3, [pc, #156]	; (8002390 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition = 0;
 80022f6:	4b26      	ldr	r3, [pc, #152]	; (8002390 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	60da      	str	r2, [r3, #12]

	/* Send the command */
	HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80022fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002300:	4923      	ldr	r1, [pc, #140]	; (8002390 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002302:	4824      	ldr	r0, [pc, #144]	; (8002394 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002304:	f002 fd5a 	bl	8004dbc <HAL_SDRAM_SendCommand>

	/* Step 2: Insert 100 us minimum delay */
	/* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
	HAL_Delay(1);
 8002308:	2001      	movs	r0, #1
 800230a:	f000 f9c3 	bl	8002694 <HAL_Delay>

	/* Step 3: Configure a PALL (precharge all) command */
	Command.CommandMode = FMC_SDRAM_CMD_PALL;
 800230e:	4b20      	ldr	r3, [pc, #128]	; (8002390 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002310:	2202      	movs	r2, #2
 8002312:	601a      	str	r2, [r3, #0]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8002314:	4b1e      	ldr	r3, [pc, #120]	; (8002390 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002316:	2208      	movs	r2, #8
 8002318:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber = 1;
 800231a:	4b1d      	ldr	r3, [pc, #116]	; (8002390 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800231c:	2201      	movs	r2, #1
 800231e:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition = 0;
 8002320:	4b1b      	ldr	r3, [pc, #108]	; (8002390 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002322:	2200      	movs	r2, #0
 8002324:	60da      	str	r2, [r3, #12]

	/* Send the command */
	HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002326:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800232a:	4919      	ldr	r1, [pc, #100]	; (8002390 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800232c:	4819      	ldr	r0, [pc, #100]	; (8002394 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800232e:	f002 fd45 	bl	8004dbc <HAL_SDRAM_SendCommand>

	/* Step 4: Configure an Auto Refresh command */
	Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002332:	4b17      	ldr	r3, [pc, #92]	; (8002390 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002334:	2203      	movs	r2, #3
 8002336:	601a      	str	r2, [r3, #0]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8002338:	4b15      	ldr	r3, [pc, #84]	; (8002390 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800233a:	2208      	movs	r2, #8
 800233c:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber = 4;
 800233e:	4b14      	ldr	r3, [pc, #80]	; (8002390 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002340:	2204      	movs	r2, #4
 8002342:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition = 0;
 8002344:	4b12      	ldr	r3, [pc, #72]	; (8002390 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002346:	2200      	movs	r2, #0
 8002348:	60da      	str	r2, [r3, #12]

	/* Send the command */
	HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800234a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800234e:	4910      	ldr	r1, [pc, #64]	; (8002390 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002350:	4810      	ldr	r0, [pc, #64]	; (8002394 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002352:	f002 fd33 	bl	8004dbc <HAL_SDRAM_SendCommand>

	/* Step 5: Program the external memory mode register */
	tmpmrd = (uint32_t) SDRAM_MODEREG_BURST_LENGTH_1 |
 8002356:	f44f 730c 	mov.w	r3, #560	; 0x230
 800235a:	60fb      	str	r3, [r7, #12]
	SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL |
	SDRAM_MODEREG_CAS_LATENCY_3 |
	SDRAM_MODEREG_OPERATING_MODE_STANDARD |
	SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

	Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 800235c:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800235e:	2204      	movs	r2, #4
 8002360:	601a      	str	r2, [r3, #0]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8002362:	4b0b      	ldr	r3, [pc, #44]	; (8002390 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002364:	2208      	movs	r2, #8
 8002366:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber = 1;
 8002368:	4b09      	ldr	r3, [pc, #36]	; (8002390 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800236a:	2201      	movs	r2, #1
 800236c:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition = tmpmrd;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	4a07      	ldr	r2, [pc, #28]	; (8002390 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002372:	60d3      	str	r3, [r2, #12]

	/* Send the command */
	HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002374:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002378:	4905      	ldr	r1, [pc, #20]	; (8002390 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800237a:	4806      	ldr	r0, [pc, #24]	; (8002394 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800237c:	f002 fd1e 	bl	8004dbc <HAL_SDRAM_SendCommand>

	/* Step 6: Set the refresh rate counter */
	/* Set the device refresh rate */
	HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount);
 8002380:	6879      	ldr	r1, [r7, #4]
 8002382:	4804      	ldr	r0, [pc, #16]	; (8002394 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002384:	f002 fd4f 	bl	8004e26 <HAL_SDRAM_ProgramRefreshRate>
}
 8002388:	bf00      	nop
 800238a:	3710      	adds	r7, #16
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	2000047c 	.word	0x2000047c
 8002394:	2000042c 	.word	0x2000042c

08002398 <BSP_SDRAM_MspInit>:
 * @brief  Initializes SDRAM MSP.
 * @note   This function can be surcharged by application code.
 * @param  hsdram: pointer on SDRAM handle
 * @param  Params: pointer on additional configuration parameters, can be NULL.
 */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram, void *Params) {
 8002398:	b580      	push	{r7, lr}
 800239a:	b090      	sub	sp, #64	; 0x40
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
 80023a0:	6039      	str	r1, [r7, #0]
	static DMA_HandleTypeDef dmaHandle;
	GPIO_InitTypeDef GPIO_InitStructure;

	if (hsdram != (SDRAM_HandleTypeDef*) NULL) {
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 80ec 	beq.w	8002582 <BSP_SDRAM_MspInit+0x1ea>
		/* Enable FMC clock */
		__HAL_RCC_FMC_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80023ae:	4b77      	ldr	r3, [pc, #476]	; (800258c <BSP_SDRAM_MspInit+0x1f4>)
 80023b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b2:	4a76      	ldr	r2, [pc, #472]	; (800258c <BSP_SDRAM_MspInit+0x1f4>)
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	6393      	str	r3, [r2, #56]	; 0x38
 80023ba:	4b74      	ldr	r3, [pc, #464]	; (800258c <BSP_SDRAM_MspInit+0x1f4>)
 80023bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80023c4:	6abb      	ldr	r3, [r7, #40]	; 0x28

		/* Enable chosen DMAx clock */
		__DMAx_CLK_ENABLE()
 80023c6:	2300      	movs	r3, #0
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
 80023ca:	4b70      	ldr	r3, [pc, #448]	; (800258c <BSP_SDRAM_MspInit+0x1f4>)
 80023cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ce:	4a6f      	ldr	r2, [pc, #444]	; (800258c <BSP_SDRAM_MspInit+0x1f4>)
 80023d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023d4:	6313      	str	r3, [r2, #48]	; 0x30
 80023d6:	4b6d      	ldr	r3, [pc, #436]	; (800258c <BSP_SDRAM_MspInit+0x1f4>)
 80023d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023de:	627b      	str	r3, [r7, #36]	; 0x24
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		;

		/* Enable GPIOs clock */
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	623b      	str	r3, [r7, #32]
 80023e6:	4b69      	ldr	r3, [pc, #420]	; (800258c <BSP_SDRAM_MspInit+0x1f4>)
 80023e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ea:	4a68      	ldr	r2, [pc, #416]	; (800258c <BSP_SDRAM_MspInit+0x1f4>)
 80023ec:	f043 0302 	orr.w	r3, r3, #2
 80023f0:	6313      	str	r3, [r2, #48]	; 0x30
 80023f2:	4b66      	ldr	r3, [pc, #408]	; (800258c <BSP_SDRAM_MspInit+0x1f4>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	623b      	str	r3, [r7, #32]
 80023fc:	6a3b      	ldr	r3, [r7, #32]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	61fb      	str	r3, [r7, #28]
 8002402:	4b62      	ldr	r3, [pc, #392]	; (800258c <BSP_SDRAM_MspInit+0x1f4>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	4a61      	ldr	r2, [pc, #388]	; (800258c <BSP_SDRAM_MspInit+0x1f4>)
 8002408:	f043 0304 	orr.w	r3, r3, #4
 800240c:	6313      	str	r3, [r2, #48]	; 0x30
 800240e:	4b5f      	ldr	r3, [pc, #380]	; (800258c <BSP_SDRAM_MspInit+0x1f4>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	f003 0304 	and.w	r3, r3, #4
 8002416:	61fb      	str	r3, [r7, #28]
 8002418:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 800241a:	2300      	movs	r3, #0
 800241c:	61bb      	str	r3, [r7, #24]
 800241e:	4b5b      	ldr	r3, [pc, #364]	; (800258c <BSP_SDRAM_MspInit+0x1f4>)
 8002420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002422:	4a5a      	ldr	r2, [pc, #360]	; (800258c <BSP_SDRAM_MspInit+0x1f4>)
 8002424:	f043 0308 	orr.w	r3, r3, #8
 8002428:	6313      	str	r3, [r2, #48]	; 0x30
 800242a:	4b58      	ldr	r3, [pc, #352]	; (800258c <BSP_SDRAM_MspInit+0x1f4>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	f003 0308 	and.w	r3, r3, #8
 8002432:	61bb      	str	r3, [r7, #24]
 8002434:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_GPIOE_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
 800243a:	4b54      	ldr	r3, [pc, #336]	; (800258c <BSP_SDRAM_MspInit+0x1f4>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243e:	4a53      	ldr	r2, [pc, #332]	; (800258c <BSP_SDRAM_MspInit+0x1f4>)
 8002440:	f043 0310 	orr.w	r3, r3, #16
 8002444:	6313      	str	r3, [r2, #48]	; 0x30
 8002446:	4b51      	ldr	r3, [pc, #324]	; (800258c <BSP_SDRAM_MspInit+0x1f4>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	f003 0310 	and.w	r3, r3, #16
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_GPIOF_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	613b      	str	r3, [r7, #16]
 8002456:	4b4d      	ldr	r3, [pc, #308]	; (800258c <BSP_SDRAM_MspInit+0x1f4>)
 8002458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245a:	4a4c      	ldr	r2, [pc, #304]	; (800258c <BSP_SDRAM_MspInit+0x1f4>)
 800245c:	f043 0320 	orr.w	r3, r3, #32
 8002460:	6313      	str	r3, [r2, #48]	; 0x30
 8002462:	4b4a      	ldr	r3, [pc, #296]	; (800258c <BSP_SDRAM_MspInit+0x1f4>)
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	f003 0320 	and.w	r3, r3, #32
 800246a:	613b      	str	r3, [r7, #16]
 800246c:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOG_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	4b46      	ldr	r3, [pc, #280]	; (800258c <BSP_SDRAM_MspInit+0x1f4>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002476:	4a45      	ldr	r2, [pc, #276]	; (800258c <BSP_SDRAM_MspInit+0x1f4>)
 8002478:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800247c:	6313      	str	r3, [r2, #48]	; 0x30
 800247e:	4b43      	ldr	r3, [pc, #268]	; (800258c <BSP_SDRAM_MspInit+0x1f4>)
 8002480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002482:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]
		 +-------------------+  
		 
		 */

		/* Common GPIO configuration */
		GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 800248a:	2302      	movs	r3, #2
 800248c:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800248e:	2302      	movs	r3, #2
 8002490:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002492:	2300      	movs	r3, #0
 8002494:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8002496:	230c      	movs	r3, #12
 8002498:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* GPIOB configuration */
		GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800249a:	2360      	movs	r3, #96	; 0x60
 800249c:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800249e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024a2:	4619      	mov	r1, r3
 80024a4:	483a      	ldr	r0, [pc, #232]	; (8002590 <BSP_SDRAM_MspInit+0x1f8>)
 80024a6:	f000 fe75 	bl	8003194 <HAL_GPIO_Init>

		/* GPIOC configuration */
		GPIO_InitStructure.Pin = GPIO_PIN_0;
 80024aa:	2301      	movs	r3, #1
 80024ac:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80024ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024b2:	4619      	mov	r1, r3
 80024b4:	4837      	ldr	r0, [pc, #220]	; (8002594 <BSP_SDRAM_MspInit+0x1fc>)
 80024b6:	f000 fe6d 	bl	8003194 <HAL_GPIO_Init>

		/* GPIOD configuration */
		GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 |
 80024ba:	f24c 7303 	movw	r3, #50947	; 0xc703
 80024be:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
		GPIO_PIN_15;
		HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80024c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024c4:	4619      	mov	r1, r3
 80024c6:	4834      	ldr	r0, [pc, #208]	; (8002598 <BSP_SDRAM_MspInit+0x200>)
 80024c8:	f000 fe64 	bl	8003194 <HAL_GPIO_Init>

		/* GPIOE configuration */
		GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7 |
 80024cc:	f64f 7383 	movw	r3, #65411	; 0xff83
 80024d0:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 |
		GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
		GPIO_PIN_14 | GPIO_PIN_15;
		HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80024d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024d6:	4619      	mov	r1, r3
 80024d8:	4830      	ldr	r0, [pc, #192]	; (800259c <BSP_SDRAM_MspInit+0x204>)
 80024da:	f000 fe5b 	bl	8003194 <HAL_GPIO_Init>

		/* GPIOF configuration */
		GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 |
 80024de:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80024e2:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 |
		GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
		GPIO_PIN_14 | GPIO_PIN_15;
		HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80024e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024e8:	4619      	mov	r1, r3
 80024ea:	482d      	ldr	r0, [pc, #180]	; (80025a0 <BSP_SDRAM_MspInit+0x208>)
 80024ec:	f000 fe52 	bl	8003194 <HAL_GPIO_Init>

		/* GPIOG configuration */
		GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80024f0:	f248 1333 	movw	r3, #33075	; 0x8133
 80024f4:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
		HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80024f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024fa:	4619      	mov	r1, r3
 80024fc:	4829      	ldr	r0, [pc, #164]	; (80025a4 <BSP_SDRAM_MspInit+0x20c>)
 80024fe:	f000 fe49 	bl	8003194 <HAL_GPIO_Init>

		/* Configure common DMA parameters */
		dmaHandle.Init.Channel = SDRAM_DMAx_CHANNEL;
 8002502:	4b29      	ldr	r3, [pc, #164]	; (80025a8 <BSP_SDRAM_MspInit+0x210>)
 8002504:	2200      	movs	r2, #0
 8002506:	605a      	str	r2, [r3, #4]
		dmaHandle.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8002508:	4b27      	ldr	r3, [pc, #156]	; (80025a8 <BSP_SDRAM_MspInit+0x210>)
 800250a:	2280      	movs	r2, #128	; 0x80
 800250c:	609a      	str	r2, [r3, #8]
		dmaHandle.Init.PeriphInc = DMA_PINC_ENABLE;
 800250e:	4b26      	ldr	r3, [pc, #152]	; (80025a8 <BSP_SDRAM_MspInit+0x210>)
 8002510:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002514:	60da      	str	r2, [r3, #12]
		dmaHandle.Init.MemInc = DMA_MINC_ENABLE;
 8002516:	4b24      	ldr	r3, [pc, #144]	; (80025a8 <BSP_SDRAM_MspInit+0x210>)
 8002518:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800251c:	611a      	str	r2, [r3, #16]
		dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800251e:	4b22      	ldr	r3, [pc, #136]	; (80025a8 <BSP_SDRAM_MspInit+0x210>)
 8002520:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002524:	615a      	str	r2, [r3, #20]
		dmaHandle.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002526:	4b20      	ldr	r3, [pc, #128]	; (80025a8 <BSP_SDRAM_MspInit+0x210>)
 8002528:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800252c:	619a      	str	r2, [r3, #24]
		dmaHandle.Init.Mode = DMA_NORMAL;
 800252e:	4b1e      	ldr	r3, [pc, #120]	; (80025a8 <BSP_SDRAM_MspInit+0x210>)
 8002530:	2200      	movs	r2, #0
 8002532:	61da      	str	r2, [r3, #28]
		dmaHandle.Init.Priority = DMA_PRIORITY_HIGH;
 8002534:	4b1c      	ldr	r3, [pc, #112]	; (80025a8 <BSP_SDRAM_MspInit+0x210>)
 8002536:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800253a:	621a      	str	r2, [r3, #32]
		dmaHandle.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800253c:	4b1a      	ldr	r3, [pc, #104]	; (80025a8 <BSP_SDRAM_MspInit+0x210>)
 800253e:	2200      	movs	r2, #0
 8002540:	625a      	str	r2, [r3, #36]	; 0x24
		dmaHandle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002542:	4b19      	ldr	r3, [pc, #100]	; (80025a8 <BSP_SDRAM_MspInit+0x210>)
 8002544:	2203      	movs	r2, #3
 8002546:	629a      	str	r2, [r3, #40]	; 0x28
		dmaHandle.Init.MemBurst = DMA_MBURST_SINGLE;
 8002548:	4b17      	ldr	r3, [pc, #92]	; (80025a8 <BSP_SDRAM_MspInit+0x210>)
 800254a:	2200      	movs	r2, #0
 800254c:	62da      	str	r2, [r3, #44]	; 0x2c
		dmaHandle.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800254e:	4b16      	ldr	r3, [pc, #88]	; (80025a8 <BSP_SDRAM_MspInit+0x210>)
 8002550:	2200      	movs	r2, #0
 8002552:	631a      	str	r2, [r3, #48]	; 0x30

		dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002554:	4b14      	ldr	r3, [pc, #80]	; (80025a8 <BSP_SDRAM_MspInit+0x210>)
 8002556:	4a15      	ldr	r2, [pc, #84]	; (80025ac <BSP_SDRAM_MspInit+0x214>)
 8002558:	601a      	str	r2, [r3, #0]

		/* Associate the DMA handle */
		__HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a12      	ldr	r2, [pc, #72]	; (80025a8 <BSP_SDRAM_MspInit+0x210>)
 800255e:	631a      	str	r2, [r3, #48]	; 0x30
 8002560:	4a11      	ldr	r2, [pc, #68]	; (80025a8 <BSP_SDRAM_MspInit+0x210>)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6393      	str	r3, [r2, #56]	; 0x38

		/* Deinitialize the stream for new transfer */
		HAL_DMA_DeInit(&dmaHandle);
 8002566:	4810      	ldr	r0, [pc, #64]	; (80025a8 <BSP_SDRAM_MspInit+0x210>)
 8002568:	f000 fa78 	bl	8002a5c <HAL_DMA_DeInit>

		/* Configure the DMA stream */
		HAL_DMA_Init(&dmaHandle);
 800256c:	480e      	ldr	r0, [pc, #56]	; (80025a8 <BSP_SDRAM_MspInit+0x210>)
 800256e:	f000 f9c7 	bl	8002900 <HAL_DMA_Init>

		/* NVIC configuration for DMA transfer complete interrupt */
		HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002572:	2200      	movs	r2, #0
 8002574:	210f      	movs	r1, #15
 8002576:	2038      	movs	r0, #56	; 0x38
 8002578:	f000 f98b 	bl	8002892 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800257c:	2038      	movs	r0, #56	; 0x38
 800257e:	f000 f9a4 	bl	80028ca <HAL_NVIC_EnableIRQ>
	} /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8002582:	bf00      	nop
 8002584:	3740      	adds	r7, #64	; 0x40
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40023800 	.word	0x40023800
 8002590:	40020400 	.word	0x40020400
 8002594:	40020800 	.word	0x40020800
 8002598:	40020c00 	.word	0x40020c00
 800259c:	40021000 	.word	0x40021000
 80025a0:	40021400 	.word	0x40021400
 80025a4:	40021800 	.word	0x40021800
 80025a8:	2000048c 	.word	0x2000048c
 80025ac:	40026410 	.word	0x40026410

080025b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025b4:	4b0e      	ldr	r3, [pc, #56]	; (80025f0 <HAL_Init+0x40>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a0d      	ldr	r2, [pc, #52]	; (80025f0 <HAL_Init+0x40>)
 80025ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025c0:	4b0b      	ldr	r3, [pc, #44]	; (80025f0 <HAL_Init+0x40>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a0a      	ldr	r2, [pc, #40]	; (80025f0 <HAL_Init+0x40>)
 80025c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025cc:	4b08      	ldr	r3, [pc, #32]	; (80025f0 <HAL_Init+0x40>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a07      	ldr	r2, [pc, #28]	; (80025f0 <HAL_Init+0x40>)
 80025d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025d8:	2003      	movs	r0, #3
 80025da:	f000 f94f 	bl	800287c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025de:	200f      	movs	r0, #15
 80025e0:	f000 f808 	bl	80025f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025e4:	f7fe fae4 	bl	8000bb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40023c00 	.word	0x40023c00

080025f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025fc:	4b12      	ldr	r3, [pc, #72]	; (8002648 <HAL_InitTick+0x54>)
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	4b12      	ldr	r3, [pc, #72]	; (800264c <HAL_InitTick+0x58>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	4619      	mov	r1, r3
 8002606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800260a:	fbb3 f3f1 	udiv	r3, r3, r1
 800260e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002612:	4618      	mov	r0, r3
 8002614:	f000 f967 	bl	80028e6 <HAL_SYSTICK_Config>
 8002618:	4603      	mov	r3, r0
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e00e      	b.n	8002640 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b0f      	cmp	r3, #15
 8002626:	d80a      	bhi.n	800263e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002628:	2200      	movs	r2, #0
 800262a:	6879      	ldr	r1, [r7, #4]
 800262c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002630:	f000 f92f 	bl	8002892 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002634:	4a06      	ldr	r2, [pc, #24]	; (8002650 <HAL_InitTick+0x5c>)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800263a:	2300      	movs	r3, #0
 800263c:	e000      	b.n	8002640 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
}
 8002640:	4618      	mov	r0, r3
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}
 8002648:	20000000 	.word	0x20000000
 800264c:	20000068 	.word	0x20000068
 8002650:	20000064 	.word	0x20000064

08002654 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <HAL_IncTick+0x20>)
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	461a      	mov	r2, r3
 800265e:	4b06      	ldr	r3, [pc, #24]	; (8002678 <HAL_IncTick+0x24>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4413      	add	r3, r2
 8002664:	4a04      	ldr	r2, [pc, #16]	; (8002678 <HAL_IncTick+0x24>)
 8002666:	6013      	str	r3, [r2, #0]
}
 8002668:	bf00      	nop
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	20000068 	.word	0x20000068
 8002678:	200004ec 	.word	0x200004ec

0800267c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  return uwTick;
 8002680:	4b03      	ldr	r3, [pc, #12]	; (8002690 <HAL_GetTick+0x14>)
 8002682:	681b      	ldr	r3, [r3, #0]
}
 8002684:	4618      	mov	r0, r3
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
 800268e:	bf00      	nop
 8002690:	200004ec 	.word	0x200004ec

08002694 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800269c:	f7ff ffee 	bl	800267c <HAL_GetTick>
 80026a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026ac:	d005      	beq.n	80026ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026ae:	4b0a      	ldr	r3, [pc, #40]	; (80026d8 <HAL_Delay+0x44>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	461a      	mov	r2, r3
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	4413      	add	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026ba:	bf00      	nop
 80026bc:	f7ff ffde 	bl	800267c <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d8f7      	bhi.n	80026bc <HAL_Delay+0x28>
  {
  }
}
 80026cc:	bf00      	nop
 80026ce:	bf00      	nop
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20000068 	.word	0x20000068

080026dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026ec:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <__NVIC_SetPriorityGrouping+0x44>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026f8:	4013      	ands	r3, r2
 80026fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002704:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800270c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800270e:	4a04      	ldr	r2, [pc, #16]	; (8002720 <__NVIC_SetPriorityGrouping+0x44>)
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	60d3      	str	r3, [r2, #12]
}
 8002714:	bf00      	nop
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002728:	4b04      	ldr	r3, [pc, #16]	; (800273c <__NVIC_GetPriorityGrouping+0x18>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	0a1b      	lsrs	r3, r3, #8
 800272e:	f003 0307 	and.w	r3, r3, #7
}
 8002732:	4618      	mov	r0, r3
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	e000ed00 	.word	0xe000ed00

08002740 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800274a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800274e:	2b00      	cmp	r3, #0
 8002750:	db0b      	blt.n	800276a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002752:	79fb      	ldrb	r3, [r7, #7]
 8002754:	f003 021f 	and.w	r2, r3, #31
 8002758:	4907      	ldr	r1, [pc, #28]	; (8002778 <__NVIC_EnableIRQ+0x38>)
 800275a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275e:	095b      	lsrs	r3, r3, #5
 8002760:	2001      	movs	r0, #1
 8002762:	fa00 f202 	lsl.w	r2, r0, r2
 8002766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	e000e100 	.word	0xe000e100

0800277c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	6039      	str	r1, [r7, #0]
 8002786:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002788:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800278c:	2b00      	cmp	r3, #0
 800278e:	db0a      	blt.n	80027a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	b2da      	uxtb	r2, r3
 8002794:	490c      	ldr	r1, [pc, #48]	; (80027c8 <__NVIC_SetPriority+0x4c>)
 8002796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800279a:	0112      	lsls	r2, r2, #4
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	440b      	add	r3, r1
 80027a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80027a4:	e00a      	b.n	80027bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	4908      	ldr	r1, [pc, #32]	; (80027cc <__NVIC_SetPriority+0x50>)
 80027ac:	79fb      	ldrb	r3, [r7, #7]
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	3b04      	subs	r3, #4
 80027b4:	0112      	lsls	r2, r2, #4
 80027b6:	b2d2      	uxtb	r2, r2
 80027b8:	440b      	add	r3, r1
 80027ba:	761a      	strb	r2, [r3, #24]
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	e000e100 	.word	0xe000e100
 80027cc:	e000ed00 	.word	0xe000ed00

080027d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b089      	sub	sp, #36	; 0x24
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f1c3 0307 	rsb	r3, r3, #7
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	bf28      	it	cs
 80027ee:	2304      	movcs	r3, #4
 80027f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	3304      	adds	r3, #4
 80027f6:	2b06      	cmp	r3, #6
 80027f8:	d902      	bls.n	8002800 <NVIC_EncodePriority+0x30>
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	3b03      	subs	r3, #3
 80027fe:	e000      	b.n	8002802 <NVIC_EncodePriority+0x32>
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002804:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	43da      	mvns	r2, r3
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	401a      	ands	r2, r3
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002818:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	fa01 f303 	lsl.w	r3, r1, r3
 8002822:	43d9      	mvns	r1, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002828:	4313      	orrs	r3, r2
         );
}
 800282a:	4618      	mov	r0, r3
 800282c:	3724      	adds	r7, #36	; 0x24
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
	...

08002838 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	3b01      	subs	r3, #1
 8002844:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002848:	d301      	bcc.n	800284e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800284a:	2301      	movs	r3, #1
 800284c:	e00f      	b.n	800286e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800284e:	4a0a      	ldr	r2, [pc, #40]	; (8002878 <SysTick_Config+0x40>)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	3b01      	subs	r3, #1
 8002854:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002856:	210f      	movs	r1, #15
 8002858:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800285c:	f7ff ff8e 	bl	800277c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002860:	4b05      	ldr	r3, [pc, #20]	; (8002878 <SysTick_Config+0x40>)
 8002862:	2200      	movs	r2, #0
 8002864:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002866:	4b04      	ldr	r3, [pc, #16]	; (8002878 <SysTick_Config+0x40>)
 8002868:	2207      	movs	r2, #7
 800286a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	e000e010 	.word	0xe000e010

0800287c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f7ff ff29 	bl	80026dc <__NVIC_SetPriorityGrouping>
}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002892:	b580      	push	{r7, lr}
 8002894:	b086      	sub	sp, #24
 8002896:	af00      	add	r7, sp, #0
 8002898:	4603      	mov	r3, r0
 800289a:	60b9      	str	r1, [r7, #8]
 800289c:	607a      	str	r2, [r7, #4]
 800289e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80028a4:	f7ff ff3e 	bl	8002724 <__NVIC_GetPriorityGrouping>
 80028a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	68b9      	ldr	r1, [r7, #8]
 80028ae:	6978      	ldr	r0, [r7, #20]
 80028b0:	f7ff ff8e 	bl	80027d0 <NVIC_EncodePriority>
 80028b4:	4602      	mov	r2, r0
 80028b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028ba:	4611      	mov	r1, r2
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff ff5d 	bl	800277c <__NVIC_SetPriority>
}
 80028c2:	bf00      	nop
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}

080028ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028ca:	b580      	push	{r7, lr}
 80028cc:	b082      	sub	sp, #8
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	4603      	mov	r3, r0
 80028d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff ff31 	bl	8002740 <__NVIC_EnableIRQ>
}
 80028de:	bf00      	nop
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b082      	sub	sp, #8
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7ff ffa2 	bl	8002838 <SysTick_Config>
 80028f4:	4603      	mov	r3, r0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3708      	adds	r7, #8
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
	...

08002900 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800290c:	f7ff feb6 	bl	800267c <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e099      	b.n	8002a50 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2202      	movs	r2, #2
 8002920:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 0201 	bic.w	r2, r2, #1
 800293a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800293c:	e00f      	b.n	800295e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800293e:	f7ff fe9d 	bl	800267c <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b05      	cmp	r3, #5
 800294a:	d908      	bls.n	800295e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2220      	movs	r2, #32
 8002950:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2203      	movs	r2, #3
 8002956:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e078      	b.n	8002a50 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0301 	and.w	r3, r3, #1
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1e8      	bne.n	800293e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002974:	697a      	ldr	r2, [r7, #20]
 8002976:	4b38      	ldr	r3, [pc, #224]	; (8002a58 <HAL_DMA_Init+0x158>)
 8002978:	4013      	ands	r3, r2
 800297a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800298a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002996:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a1b      	ldr	r3, [r3, #32]
 80029a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b4:	2b04      	cmp	r3, #4
 80029b6:	d107      	bne.n	80029c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c0:	4313      	orrs	r3, r2
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	f023 0307 	bic.w	r3, r3, #7
 80029de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d117      	bne.n	8002a22 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f6:	697a      	ldr	r2, [r7, #20]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00e      	beq.n	8002a22 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f000 f8bd 	bl	8002b84 <DMA_CheckFifoParam>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d008      	beq.n	8002a22 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2240      	movs	r2, #64	; 0x40
 8002a14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e016      	b.n	8002a50 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f874 	bl	8002b18 <DMA_CalcBaseAndBitshift>
 8002a30:	4603      	mov	r3, r0
 8002a32:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a38:	223f      	movs	r2, #63	; 0x3f
 8002a3a:	409a      	lsls	r2, r3
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	f010803f 	.word	0xf010803f

08002a5c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e050      	b.n	8002b10 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b02      	cmp	r3, #2
 8002a78:	d101      	bne.n	8002a7e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	e048      	b.n	8002b10 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0201 	bic.w	r2, r2, #1
 8002a8c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2200      	movs	r2, #0
 8002a94:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2221      	movs	r2, #33	; 0x21
 8002abc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f82a 	bl	8002b18 <DMA_CalcBaseAndBitshift>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af0:	223f      	movs	r2, #63	; 0x3f
 8002af2:	409a      	lsls	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3710      	adds	r7, #16
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	3b10      	subs	r3, #16
 8002b28:	4a14      	ldr	r2, [pc, #80]	; (8002b7c <DMA_CalcBaseAndBitshift+0x64>)
 8002b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2e:	091b      	lsrs	r3, r3, #4
 8002b30:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b32:	4a13      	ldr	r2, [pc, #76]	; (8002b80 <DMA_CalcBaseAndBitshift+0x68>)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4413      	add	r3, r2
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2b03      	cmp	r3, #3
 8002b44:	d909      	bls.n	8002b5a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b4e:	f023 0303 	bic.w	r3, r3, #3
 8002b52:	1d1a      	adds	r2, r3, #4
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	659a      	str	r2, [r3, #88]	; 0x58
 8002b58:	e007      	b.n	8002b6a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b62:	f023 0303 	bic.w	r3, r3, #3
 8002b66:	687a      	ldr	r2, [r7, #4]
 8002b68:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3714      	adds	r7, #20
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	aaaaaaab 	.word	0xaaaaaaab
 8002b80:	080090ec 	.word	0x080090ec

08002b84 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b94:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d11f      	bne.n	8002bde <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	2b03      	cmp	r3, #3
 8002ba2:	d856      	bhi.n	8002c52 <DMA_CheckFifoParam+0xce>
 8002ba4:	a201      	add	r2, pc, #4	; (adr r2, 8002bac <DMA_CheckFifoParam+0x28>)
 8002ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002baa:	bf00      	nop
 8002bac:	08002bbd 	.word	0x08002bbd
 8002bb0:	08002bcf 	.word	0x08002bcf
 8002bb4:	08002bbd 	.word	0x08002bbd
 8002bb8:	08002c53 	.word	0x08002c53
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d046      	beq.n	8002c56 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bcc:	e043      	b.n	8002c56 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bd6:	d140      	bne.n	8002c5a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bdc:	e03d      	b.n	8002c5a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002be6:	d121      	bne.n	8002c2c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2b03      	cmp	r3, #3
 8002bec:	d837      	bhi.n	8002c5e <DMA_CheckFifoParam+0xda>
 8002bee:	a201      	add	r2, pc, #4	; (adr r2, 8002bf4 <DMA_CheckFifoParam+0x70>)
 8002bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf4:	08002c05 	.word	0x08002c05
 8002bf8:	08002c0b 	.word	0x08002c0b
 8002bfc:	08002c05 	.word	0x08002c05
 8002c00:	08002c1d 	.word	0x08002c1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	73fb      	strb	r3, [r7, #15]
      break;
 8002c08:	e030      	b.n	8002c6c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d025      	beq.n	8002c62 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c1a:	e022      	b.n	8002c62 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c20:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c24:	d11f      	bne.n	8002c66 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c2a:	e01c      	b.n	8002c66 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d903      	bls.n	8002c3a <DMA_CheckFifoParam+0xb6>
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	2b03      	cmp	r3, #3
 8002c36:	d003      	beq.n	8002c40 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c38:	e018      	b.n	8002c6c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	73fb      	strb	r3, [r7, #15]
      break;
 8002c3e:	e015      	b.n	8002c6c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d00e      	beq.n	8002c6a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	73fb      	strb	r3, [r7, #15]
      break;
 8002c50:	e00b      	b.n	8002c6a <DMA_CheckFifoParam+0xe6>
      break;
 8002c52:	bf00      	nop
 8002c54:	e00a      	b.n	8002c6c <DMA_CheckFifoParam+0xe8>
      break;
 8002c56:	bf00      	nop
 8002c58:	e008      	b.n	8002c6c <DMA_CheckFifoParam+0xe8>
      break;
 8002c5a:	bf00      	nop
 8002c5c:	e006      	b.n	8002c6c <DMA_CheckFifoParam+0xe8>
      break;
 8002c5e:	bf00      	nop
 8002c60:	e004      	b.n	8002c6c <DMA_CheckFifoParam+0xe8>
      break;
 8002c62:	bf00      	nop
 8002c64:	e002      	b.n	8002c6c <DMA_CheckFifoParam+0xe8>
      break;   
 8002c66:	bf00      	nop
 8002c68:	e000      	b.n	8002c6c <DMA_CheckFifoParam+0xe8>
      break;
 8002c6a:	bf00      	nop
    }
  } 
  
  return status; 
 8002c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3714      	adds	r7, #20
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop

08002c7c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e03b      	b.n	8002d06 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d106      	bne.n	8002ca8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f7fd ffac 	bl	8000c00 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2202      	movs	r2, #2
 8002cac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	685a      	ldr	r2, [r3, #4]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	430a      	orrs	r2, r1
 8002cc4:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ccc:	f023 0107 	bic.w	r1, r3, #7
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002ce6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	68d1      	ldr	r1, [r2, #12]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	6812      	ldr	r2, [r2, #0]
 8002cf2:	430b      	orrs	r3, r1
 8002cf4:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b086      	sub	sp, #24
 8002d12:	af02      	add	r7, sp, #8
 8002d14:	60f8      	str	r0, [r7, #12]
 8002d16:	60b9      	str	r1, [r7, #8]
 8002d18:	607a      	str	r2, [r7, #4]
 8002d1a:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d101      	bne.n	8002d2a <HAL_DMA2D_Start+0x1c>
 8002d26:	2302      	movs	r3, #2
 8002d28:	e018      	b.n	8002d5c <HAL_DMA2D_Start+0x4e>
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2202      	movs	r2, #2
 8002d36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8002d3a:	69bb      	ldr	r3, [r7, #24]
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	68b9      	ldr	r1, [r7, #8]
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 f989 	bl	800305c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f042 0201 	orr.w	r2, r2, #1
 8002d58:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d056      	beq.n	8002e2e <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d80:	f7ff fc7c 	bl	800267c <HAL_GetTick>
 8002d84:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002d86:	e04b      	b.n	8002e20 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d023      	beq.n	8002de2 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f003 0320 	and.w	r3, r3, #32
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d005      	beq.n	8002db0 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002da8:	f043 0202 	orr.w	r2, r3, #2
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d005      	beq.n	8002dc6 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dbe:	f043 0201 	orr.w	r2, r3, #1
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2221      	movs	r2, #33	; 0x21
 8002dcc:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2204      	movs	r2, #4
 8002dd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e0a5      	b.n	8002f2e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002de8:	d01a      	beq.n	8002e20 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002dea:	f7ff fc47 	bl	800267c <HAL_GetTick>
 8002dee:	4602      	mov	r2, r0
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	1ad3      	subs	r3, r2, r3
 8002df4:	683a      	ldr	r2, [r7, #0]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d302      	bcc.n	8002e00 <HAL_DMA2D_PollForTransfer+0x9c>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10f      	bne.n	8002e20 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e04:	f043 0220 	orr.w	r2, r3, #32
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2203      	movs	r2, #3
 8002e10:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e086      	b.n	8002f2e <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d0ac      	beq.n	8002d88 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	f003 0320 	and.w	r3, r3, #32
 8002e38:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e40:	f003 0320 	and.w	r3, r3, #32
 8002e44:	693a      	ldr	r2, [r7, #16]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d061      	beq.n	8002f14 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e50:	f7ff fc14 	bl	800267c <HAL_GetTick>
 8002e54:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002e56:	e056      	b.n	8002f06 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d02e      	beq.n	8002ec8 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f003 0308 	and.w	r3, r3, #8
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d005      	beq.n	8002e80 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e78:	f043 0204 	orr.w	r2, r3, #4
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f003 0320 	and.w	r3, r3, #32
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d005      	beq.n	8002e96 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e8e:	f043 0202 	orr.w	r2, r3, #2
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d005      	beq.n	8002eac <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea4:	f043 0201 	orr.w	r2, r3, #1
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2229      	movs	r2, #41	; 0x29
 8002eb2:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2204      	movs	r2, #4
 8002eb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e032      	b.n	8002f2e <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002ece:	d01a      	beq.n	8002f06 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002ed0:	f7ff fbd4 	bl	800267c <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d302      	bcc.n	8002ee6 <HAL_DMA2D_PollForTransfer+0x182>
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10f      	bne.n	8002f06 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eea:	f043 0220 	orr.w	r2, r3, #32
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2203      	movs	r2, #3
 8002ef6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e013      	b.n	8002f2e <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f003 0310 	and.w	r3, r3, #16
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d0a1      	beq.n	8002e58 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2212      	movs	r2, #18
 8002f1a:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2201      	movs	r2, #1
 8002f20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
	...

08002f38 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b087      	sub	sp, #28
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d101      	bne.n	8002f58 <HAL_DMA2D_ConfigLayer+0x20>
 8002f54:	2302      	movs	r3, #2
 8002f56:	e079      	b.n	800304c <HAL_DMA2D_ConfigLayer+0x114>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2202      	movs	r2, #2
 8002f64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	3318      	adds	r3, #24
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	4413      	add	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	041b      	lsls	r3, r3, #16
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002f82:	4b35      	ldr	r3, [pc, #212]	; (8003058 <HAL_DMA2D_ConfigLayer+0x120>)
 8002f84:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b0a      	cmp	r3, #10
 8002f8c:	d003      	beq.n	8002f96 <HAL_DMA2D_ConfigLayer+0x5e>
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b09      	cmp	r3, #9
 8002f94:	d107      	bne.n	8002fa6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002f9e:	697a      	ldr	r2, [r7, #20]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	617b      	str	r3, [r7, #20]
 8002fa4:	e005      	b.n	8002fb2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	061b      	lsls	r3, r3, #24
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d120      	bne.n	8002ffa <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	ea02 0103 	and.w	r1, r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	6812      	ldr	r2, [r2, #0]
 8002fd8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b0a      	cmp	r3, #10
 8002fe0:	d003      	beq.n	8002fea <HAL_DMA2D_ConfigLayer+0xb2>
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	2b09      	cmp	r3, #9
 8002fe8:	d127      	bne.n	800303a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	68da      	ldr	r2, [r3, #12]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002ff6:	629a      	str	r2, [r3, #40]	; 0x28
 8002ff8:	e01f      	b.n	800303a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	69da      	ldr	r2, [r3, #28]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	43db      	mvns	r3, r3
 8003004:	ea02 0103 	and.w	r1, r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	430a      	orrs	r2, r1
 8003010:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	693a      	ldr	r2, [r7, #16]
 8003018:	6812      	ldr	r2, [r2, #0]
 800301a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	2b0a      	cmp	r3, #10
 8003022:	d003      	beq.n	800302c <HAL_DMA2D_ConfigLayer+0xf4>
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	2b09      	cmp	r3, #9
 800302a:	d106      	bne.n	800303a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	68da      	ldr	r2, [r3, #12]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8003038:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	371c      	adds	r7, #28
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	ff03000f 	.word	0xff03000f

0800305c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800305c:	b480      	push	{r7}
 800305e:	b08b      	sub	sp, #44	; 0x2c
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]
 8003068:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003070:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	041a      	lsls	r2, r3, #16
 8003078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307a:	431a      	orrs	r2, r3
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003094:	d174      	bne.n	8003180 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800309c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80030a4:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80030ac:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d108      	bne.n	80030ce <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	431a      	orrs	r2, r3
 80030c2:	6a3b      	ldr	r3, [r7, #32]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	697a      	ldr	r2, [r7, #20]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	627b      	str	r3, [r7, #36]	; 0x24
 80030cc:	e053      	b.n	8003176 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d106      	bne.n	80030e4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	4313      	orrs	r3, r2
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	4313      	orrs	r3, r2
 80030e0:	627b      	str	r3, [r7, #36]	; 0x24
 80030e2:	e048      	b.n	8003176 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d111      	bne.n	8003110 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	0cdb      	lsrs	r3, r3, #19
 80030f0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	0a9b      	lsrs	r3, r3, #10
 80030f6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	08db      	lsrs	r3, r3, #3
 80030fc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	015a      	lsls	r2, r3, #5
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	02db      	lsls	r3, r3, #11
 8003106:	4313      	orrs	r3, r2
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	4313      	orrs	r3, r2
 800310c:	627b      	str	r3, [r7, #36]	; 0x24
 800310e:	e032      	b.n	8003176 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	2b03      	cmp	r3, #3
 8003116:	d117      	bne.n	8003148 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8003118:	6a3b      	ldr	r3, [r7, #32]
 800311a:	0fdb      	lsrs	r3, r3, #31
 800311c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	0cdb      	lsrs	r3, r3, #19
 8003122:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	0adb      	lsrs	r3, r3, #11
 8003128:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	08db      	lsrs	r3, r3, #3
 800312e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	015a      	lsls	r2, r3, #5
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	029b      	lsls	r3, r3, #10
 8003138:	431a      	orrs	r2, r3
 800313a:	6a3b      	ldr	r3, [r7, #32]
 800313c:	03db      	lsls	r3, r3, #15
 800313e:	4313      	orrs	r3, r2
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	4313      	orrs	r3, r2
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
 8003146:	e016      	b.n	8003176 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8003148:	6a3b      	ldr	r3, [r7, #32]
 800314a:	0f1b      	lsrs	r3, r3, #28
 800314c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	0d1b      	lsrs	r3, r3, #20
 8003152:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	0b1b      	lsrs	r3, r3, #12
 8003158:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	091b      	lsrs	r3, r3, #4
 800315e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	011a      	lsls	r2, r3, #4
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	021b      	lsls	r3, r3, #8
 8003168:	431a      	orrs	r2, r3
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	031b      	lsls	r3, r3, #12
 800316e:	4313      	orrs	r3, r2
 8003170:	697a      	ldr	r2, [r7, #20]
 8003172:	4313      	orrs	r3, r2
 8003174:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800317c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800317e:	e003      	b.n	8003188 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	60da      	str	r2, [r3, #12]
}
 8003188:	bf00      	nop
 800318a:	372c      	adds	r7, #44	; 0x2c
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003194:	b480      	push	{r7}
 8003196:	b089      	sub	sp, #36	; 0x24
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800319e:	2300      	movs	r3, #0
 80031a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031aa:	2300      	movs	r3, #0
 80031ac:	61fb      	str	r3, [r7, #28]
 80031ae:	e177      	b.n	80034a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031b0:	2201      	movs	r2, #1
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	4013      	ands	r3, r2
 80031c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031c4:	693a      	ldr	r2, [r7, #16]
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	f040 8166 	bne.w	800349a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f003 0303 	and.w	r3, r3, #3
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d005      	beq.n	80031e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d130      	bne.n	8003248 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	2203      	movs	r2, #3
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	43db      	mvns	r3, r3
 80031f8:	69ba      	ldr	r2, [r7, #24]
 80031fa:	4013      	ands	r3, r2
 80031fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	68da      	ldr	r2, [r3, #12]
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	4313      	orrs	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800321c:	2201      	movs	r2, #1
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	43db      	mvns	r3, r3
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4013      	ands	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	091b      	lsrs	r3, r3, #4
 8003232:	f003 0201 	and.w	r2, r3, #1
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	4313      	orrs	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	69ba      	ldr	r2, [r7, #24]
 8003246:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f003 0303 	and.w	r3, r3, #3
 8003250:	2b03      	cmp	r3, #3
 8003252:	d017      	beq.n	8003284 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	2203      	movs	r2, #3
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	43db      	mvns	r3, r3
 8003266:	69ba      	ldr	r2, [r7, #24]
 8003268:	4013      	ands	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	fa02 f303 	lsl.w	r3, r2, r3
 8003278:	69ba      	ldr	r2, [r7, #24]
 800327a:	4313      	orrs	r3, r2
 800327c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f003 0303 	and.w	r3, r3, #3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d123      	bne.n	80032d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	08da      	lsrs	r2, r3, #3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3208      	adds	r2, #8
 8003298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800329c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	220f      	movs	r2, #15
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	43db      	mvns	r3, r3
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	4013      	ands	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	691a      	ldr	r2, [r3, #16]
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	f003 0307 	and.w	r3, r3, #7
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	fa02 f303 	lsl.w	r3, r2, r3
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	08da      	lsrs	r2, r3, #3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	3208      	adds	r2, #8
 80032d2:	69b9      	ldr	r1, [r7, #24]
 80032d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	2203      	movs	r2, #3
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	43db      	mvns	r3, r3
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	4013      	ands	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f003 0203 	and.w	r2, r3, #3
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003300:	69ba      	ldr	r2, [r7, #24]
 8003302:	4313      	orrs	r3, r2
 8003304:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003314:	2b00      	cmp	r3, #0
 8003316:	f000 80c0 	beq.w	800349a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800331a:	2300      	movs	r3, #0
 800331c:	60fb      	str	r3, [r7, #12]
 800331e:	4b66      	ldr	r3, [pc, #408]	; (80034b8 <HAL_GPIO_Init+0x324>)
 8003320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003322:	4a65      	ldr	r2, [pc, #404]	; (80034b8 <HAL_GPIO_Init+0x324>)
 8003324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003328:	6453      	str	r3, [r2, #68]	; 0x44
 800332a:	4b63      	ldr	r3, [pc, #396]	; (80034b8 <HAL_GPIO_Init+0x324>)
 800332c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800332e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003332:	60fb      	str	r3, [r7, #12]
 8003334:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003336:	4a61      	ldr	r2, [pc, #388]	; (80034bc <HAL_GPIO_Init+0x328>)
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	089b      	lsrs	r3, r3, #2
 800333c:	3302      	adds	r3, #2
 800333e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003342:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	f003 0303 	and.w	r3, r3, #3
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	220f      	movs	r2, #15
 800334e:	fa02 f303 	lsl.w	r3, r2, r3
 8003352:	43db      	mvns	r3, r3
 8003354:	69ba      	ldr	r2, [r7, #24]
 8003356:	4013      	ands	r3, r2
 8003358:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a58      	ldr	r2, [pc, #352]	; (80034c0 <HAL_GPIO_Init+0x32c>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d037      	beq.n	80033d2 <HAL_GPIO_Init+0x23e>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a57      	ldr	r2, [pc, #348]	; (80034c4 <HAL_GPIO_Init+0x330>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d031      	beq.n	80033ce <HAL_GPIO_Init+0x23a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a56      	ldr	r2, [pc, #344]	; (80034c8 <HAL_GPIO_Init+0x334>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d02b      	beq.n	80033ca <HAL_GPIO_Init+0x236>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a55      	ldr	r2, [pc, #340]	; (80034cc <HAL_GPIO_Init+0x338>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d025      	beq.n	80033c6 <HAL_GPIO_Init+0x232>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	4a54      	ldr	r2, [pc, #336]	; (80034d0 <HAL_GPIO_Init+0x33c>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d01f      	beq.n	80033c2 <HAL_GPIO_Init+0x22e>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a53      	ldr	r2, [pc, #332]	; (80034d4 <HAL_GPIO_Init+0x340>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d019      	beq.n	80033be <HAL_GPIO_Init+0x22a>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	4a52      	ldr	r2, [pc, #328]	; (80034d8 <HAL_GPIO_Init+0x344>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d013      	beq.n	80033ba <HAL_GPIO_Init+0x226>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a51      	ldr	r2, [pc, #324]	; (80034dc <HAL_GPIO_Init+0x348>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d00d      	beq.n	80033b6 <HAL_GPIO_Init+0x222>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a50      	ldr	r2, [pc, #320]	; (80034e0 <HAL_GPIO_Init+0x34c>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d007      	beq.n	80033b2 <HAL_GPIO_Init+0x21e>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a4f      	ldr	r2, [pc, #316]	; (80034e4 <HAL_GPIO_Init+0x350>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d101      	bne.n	80033ae <HAL_GPIO_Init+0x21a>
 80033aa:	2309      	movs	r3, #9
 80033ac:	e012      	b.n	80033d4 <HAL_GPIO_Init+0x240>
 80033ae:	230a      	movs	r3, #10
 80033b0:	e010      	b.n	80033d4 <HAL_GPIO_Init+0x240>
 80033b2:	2308      	movs	r3, #8
 80033b4:	e00e      	b.n	80033d4 <HAL_GPIO_Init+0x240>
 80033b6:	2307      	movs	r3, #7
 80033b8:	e00c      	b.n	80033d4 <HAL_GPIO_Init+0x240>
 80033ba:	2306      	movs	r3, #6
 80033bc:	e00a      	b.n	80033d4 <HAL_GPIO_Init+0x240>
 80033be:	2305      	movs	r3, #5
 80033c0:	e008      	b.n	80033d4 <HAL_GPIO_Init+0x240>
 80033c2:	2304      	movs	r3, #4
 80033c4:	e006      	b.n	80033d4 <HAL_GPIO_Init+0x240>
 80033c6:	2303      	movs	r3, #3
 80033c8:	e004      	b.n	80033d4 <HAL_GPIO_Init+0x240>
 80033ca:	2302      	movs	r3, #2
 80033cc:	e002      	b.n	80033d4 <HAL_GPIO_Init+0x240>
 80033ce:	2301      	movs	r3, #1
 80033d0:	e000      	b.n	80033d4 <HAL_GPIO_Init+0x240>
 80033d2:	2300      	movs	r3, #0
 80033d4:	69fa      	ldr	r2, [r7, #28]
 80033d6:	f002 0203 	and.w	r2, r2, #3
 80033da:	0092      	lsls	r2, r2, #2
 80033dc:	4093      	lsls	r3, r2
 80033de:	69ba      	ldr	r2, [r7, #24]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033e4:	4935      	ldr	r1, [pc, #212]	; (80034bc <HAL_GPIO_Init+0x328>)
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	089b      	lsrs	r3, r3, #2
 80033ea:	3302      	adds	r3, #2
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033f2:	4b3d      	ldr	r3, [pc, #244]	; (80034e8 <HAL_GPIO_Init+0x354>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	43db      	mvns	r3, r3
 80033fc:	69ba      	ldr	r2, [r7, #24]
 80033fe:	4013      	ands	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	4313      	orrs	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003416:	4a34      	ldr	r2, [pc, #208]	; (80034e8 <HAL_GPIO_Init+0x354>)
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800341c:	4b32      	ldr	r3, [pc, #200]	; (80034e8 <HAL_GPIO_Init+0x354>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	43db      	mvns	r3, r3
 8003426:	69ba      	ldr	r2, [r7, #24]
 8003428:	4013      	ands	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d003      	beq.n	8003440 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	4313      	orrs	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003440:	4a29      	ldr	r2, [pc, #164]	; (80034e8 <HAL_GPIO_Init+0x354>)
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003446:	4b28      	ldr	r3, [pc, #160]	; (80034e8 <HAL_GPIO_Init+0x354>)
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	43db      	mvns	r3, r3
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4013      	ands	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	4313      	orrs	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800346a:	4a1f      	ldr	r2, [pc, #124]	; (80034e8 <HAL_GPIO_Init+0x354>)
 800346c:	69bb      	ldr	r3, [r7, #24]
 800346e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003470:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <HAL_GPIO_Init+0x354>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	43db      	mvns	r3, r3
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	4013      	ands	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d003      	beq.n	8003494 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	4313      	orrs	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003494:	4a14      	ldr	r2, [pc, #80]	; (80034e8 <HAL_GPIO_Init+0x354>)
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	3301      	adds	r3, #1
 800349e:	61fb      	str	r3, [r7, #28]
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	2b0f      	cmp	r3, #15
 80034a4:	f67f ae84 	bls.w	80031b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034a8:	bf00      	nop
 80034aa:	bf00      	nop
 80034ac:	3724      	adds	r7, #36	; 0x24
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr
 80034b6:	bf00      	nop
 80034b8:	40023800 	.word	0x40023800
 80034bc:	40013800 	.word	0x40013800
 80034c0:	40020000 	.word	0x40020000
 80034c4:	40020400 	.word	0x40020400
 80034c8:	40020800 	.word	0x40020800
 80034cc:	40020c00 	.word	0x40020c00
 80034d0:	40021000 	.word	0x40021000
 80034d4:	40021400 	.word	0x40021400
 80034d8:	40021800 	.word	0x40021800
 80034dc:	40021c00 	.word	0x40021c00
 80034e0:	40022000 	.word	0x40022000
 80034e4:	40022400 	.word	0x40022400
 80034e8:	40013c00 	.word	0x40013c00

080034ec <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b087      	sub	sp, #28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034f6:	2300      	movs	r3, #0
 80034f8:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80034fa:	2300      	movs	r3, #0
 80034fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80034fe:	2300      	movs	r3, #0
 8003500:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003502:	2300      	movs	r3, #0
 8003504:	617b      	str	r3, [r7, #20]
 8003506:	e0d9      	b.n	80036bc <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003508:	2201      	movs	r2, #1
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	fa02 f303 	lsl.w	r3, r2, r3
 8003510:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	4013      	ands	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	429a      	cmp	r2, r3
 8003520:	f040 80c9 	bne.w	80036b6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003524:	4a6b      	ldr	r2, [pc, #428]	; (80036d4 <HAL_GPIO_DeInit+0x1e8>)
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	089b      	lsrs	r3, r3, #2
 800352a:	3302      	adds	r3, #2
 800352c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003530:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f003 0303 	and.w	r3, r3, #3
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	220f      	movs	r2, #15
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	4013      	ands	r3, r2
 8003544:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a63      	ldr	r2, [pc, #396]	; (80036d8 <HAL_GPIO_DeInit+0x1ec>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d037      	beq.n	80035be <HAL_GPIO_DeInit+0xd2>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a62      	ldr	r2, [pc, #392]	; (80036dc <HAL_GPIO_DeInit+0x1f0>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d031      	beq.n	80035ba <HAL_GPIO_DeInit+0xce>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a61      	ldr	r2, [pc, #388]	; (80036e0 <HAL_GPIO_DeInit+0x1f4>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d02b      	beq.n	80035b6 <HAL_GPIO_DeInit+0xca>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	4a60      	ldr	r2, [pc, #384]	; (80036e4 <HAL_GPIO_DeInit+0x1f8>)
 8003562:	4293      	cmp	r3, r2
 8003564:	d025      	beq.n	80035b2 <HAL_GPIO_DeInit+0xc6>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	4a5f      	ldr	r2, [pc, #380]	; (80036e8 <HAL_GPIO_DeInit+0x1fc>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d01f      	beq.n	80035ae <HAL_GPIO_DeInit+0xc2>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a5e      	ldr	r2, [pc, #376]	; (80036ec <HAL_GPIO_DeInit+0x200>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d019      	beq.n	80035aa <HAL_GPIO_DeInit+0xbe>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a5d      	ldr	r2, [pc, #372]	; (80036f0 <HAL_GPIO_DeInit+0x204>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d013      	beq.n	80035a6 <HAL_GPIO_DeInit+0xba>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a5c      	ldr	r2, [pc, #368]	; (80036f4 <HAL_GPIO_DeInit+0x208>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d00d      	beq.n	80035a2 <HAL_GPIO_DeInit+0xb6>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a5b      	ldr	r2, [pc, #364]	; (80036f8 <HAL_GPIO_DeInit+0x20c>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d007      	beq.n	800359e <HAL_GPIO_DeInit+0xb2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a5a      	ldr	r2, [pc, #360]	; (80036fc <HAL_GPIO_DeInit+0x210>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d101      	bne.n	800359a <HAL_GPIO_DeInit+0xae>
 8003596:	2309      	movs	r3, #9
 8003598:	e012      	b.n	80035c0 <HAL_GPIO_DeInit+0xd4>
 800359a:	230a      	movs	r3, #10
 800359c:	e010      	b.n	80035c0 <HAL_GPIO_DeInit+0xd4>
 800359e:	2308      	movs	r3, #8
 80035a0:	e00e      	b.n	80035c0 <HAL_GPIO_DeInit+0xd4>
 80035a2:	2307      	movs	r3, #7
 80035a4:	e00c      	b.n	80035c0 <HAL_GPIO_DeInit+0xd4>
 80035a6:	2306      	movs	r3, #6
 80035a8:	e00a      	b.n	80035c0 <HAL_GPIO_DeInit+0xd4>
 80035aa:	2305      	movs	r3, #5
 80035ac:	e008      	b.n	80035c0 <HAL_GPIO_DeInit+0xd4>
 80035ae:	2304      	movs	r3, #4
 80035b0:	e006      	b.n	80035c0 <HAL_GPIO_DeInit+0xd4>
 80035b2:	2303      	movs	r3, #3
 80035b4:	e004      	b.n	80035c0 <HAL_GPIO_DeInit+0xd4>
 80035b6:	2302      	movs	r3, #2
 80035b8:	e002      	b.n	80035c0 <HAL_GPIO_DeInit+0xd4>
 80035ba:	2301      	movs	r3, #1
 80035bc:	e000      	b.n	80035c0 <HAL_GPIO_DeInit+0xd4>
 80035be:	2300      	movs	r3, #0
 80035c0:	697a      	ldr	r2, [r7, #20]
 80035c2:	f002 0203 	and.w	r2, r2, #3
 80035c6:	0092      	lsls	r2, r2, #2
 80035c8:	4093      	lsls	r3, r2
 80035ca:	68ba      	ldr	r2, [r7, #8]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d132      	bne.n	8003636 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80035d0:	4b4b      	ldr	r3, [pc, #300]	; (8003700 <HAL_GPIO_DeInit+0x214>)
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	43db      	mvns	r3, r3
 80035d8:	4949      	ldr	r1, [pc, #292]	; (8003700 <HAL_GPIO_DeInit+0x214>)
 80035da:	4013      	ands	r3, r2
 80035dc:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80035de:	4b48      	ldr	r3, [pc, #288]	; (8003700 <HAL_GPIO_DeInit+0x214>)
 80035e0:	685a      	ldr	r2, [r3, #4]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	43db      	mvns	r3, r3
 80035e6:	4946      	ldr	r1, [pc, #280]	; (8003700 <HAL_GPIO_DeInit+0x214>)
 80035e8:	4013      	ands	r3, r2
 80035ea:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80035ec:	4b44      	ldr	r3, [pc, #272]	; (8003700 <HAL_GPIO_DeInit+0x214>)
 80035ee:	68da      	ldr	r2, [r3, #12]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	43db      	mvns	r3, r3
 80035f4:	4942      	ldr	r1, [pc, #264]	; (8003700 <HAL_GPIO_DeInit+0x214>)
 80035f6:	4013      	ands	r3, r2
 80035f8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80035fa:	4b41      	ldr	r3, [pc, #260]	; (8003700 <HAL_GPIO_DeInit+0x214>)
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	43db      	mvns	r3, r3
 8003602:	493f      	ldr	r1, [pc, #252]	; (8003700 <HAL_GPIO_DeInit+0x214>)
 8003604:	4013      	ands	r3, r2
 8003606:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	220f      	movs	r2, #15
 8003612:	fa02 f303 	lsl.w	r3, r2, r3
 8003616:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003618:	4a2e      	ldr	r2, [pc, #184]	; (80036d4 <HAL_GPIO_DeInit+0x1e8>)
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	089b      	lsrs	r3, r3, #2
 800361e:	3302      	adds	r3, #2
 8003620:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	43da      	mvns	r2, r3
 8003628:	482a      	ldr	r0, [pc, #168]	; (80036d4 <HAL_GPIO_DeInit+0x1e8>)
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	089b      	lsrs	r3, r3, #2
 800362e:	400a      	ands	r2, r1
 8003630:	3302      	adds	r3, #2
 8003632:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	2103      	movs	r1, #3
 8003640:	fa01 f303 	lsl.w	r3, r1, r3
 8003644:	43db      	mvns	r3, r3
 8003646:	401a      	ands	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	08da      	lsrs	r2, r3, #3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3208      	adds	r2, #8
 8003654:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	f003 0307 	and.w	r3, r3, #7
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	220f      	movs	r2, #15
 8003662:	fa02 f303 	lsl.w	r3, r2, r3
 8003666:	43db      	mvns	r3, r3
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	08d2      	lsrs	r2, r2, #3
 800366c:	4019      	ands	r1, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	3208      	adds	r2, #8
 8003672:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68da      	ldr	r2, [r3, #12]
 800367a:	697b      	ldr	r3, [r7, #20]
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	2103      	movs	r1, #3
 8003680:	fa01 f303 	lsl.w	r3, r1, r3
 8003684:	43db      	mvns	r3, r3
 8003686:	401a      	ands	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	2101      	movs	r1, #1
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	fa01 f303 	lsl.w	r3, r1, r3
 8003698:	43db      	mvns	r3, r3
 800369a:	401a      	ands	r2, r3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	005b      	lsls	r3, r3, #1
 80036a8:	2103      	movs	r1, #3
 80036aa:	fa01 f303 	lsl.w	r3, r1, r3
 80036ae:	43db      	mvns	r3, r3
 80036b0:	401a      	ands	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	3301      	adds	r3, #1
 80036ba:	617b      	str	r3, [r7, #20]
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	2b0f      	cmp	r3, #15
 80036c0:	f67f af22 	bls.w	8003508 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80036c4:	bf00      	nop
 80036c6:	bf00      	nop
 80036c8:	371c      	adds	r7, #28
 80036ca:	46bd      	mov	sp, r7
 80036cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d0:	4770      	bx	lr
 80036d2:	bf00      	nop
 80036d4:	40013800 	.word	0x40013800
 80036d8:	40020000 	.word	0x40020000
 80036dc:	40020400 	.word	0x40020400
 80036e0:	40020800 	.word	0x40020800
 80036e4:	40020c00 	.word	0x40020c00
 80036e8:	40021000 	.word	0x40021000
 80036ec:	40021400 	.word	0x40021400
 80036f0:	40021800 	.word	0x40021800
 80036f4:	40021c00 	.word	0x40021c00
 80036f8:	40022000 	.word	0x40022000
 80036fc:	40022400 	.word	0x40022400
 8003700:	40013c00 	.word	0x40013c00

08003704 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	460b      	mov	r3, r1
 800370e:	807b      	strh	r3, [r7, #2]
 8003710:	4613      	mov	r3, r2
 8003712:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003714:	787b      	ldrb	r3, [r7, #1]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d003      	beq.n	8003722 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800371a:	887a      	ldrh	r2, [r7, #2]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003720:	e003      	b.n	800372a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003722:	887b      	ldrh	r3, [r7, #2]
 8003724:	041a      	lsls	r2, r3, #16
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	619a      	str	r2, [r3, #24]
}
 800372a:	bf00      	nop
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr
	...

08003738 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b084      	sub	sp, #16
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e12b      	b.n	80039a2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d106      	bne.n	8003764 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7fd fa70 	bl	8000c44 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2224      	movs	r2, #36	; 0x24
 8003768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 0201 	bic.w	r2, r2, #1
 800377a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800378a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800379a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800379c:	f001 f8f2 	bl	8004984 <HAL_RCC_GetPCLK1Freq>
 80037a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	4a81      	ldr	r2, [pc, #516]	; (80039ac <HAL_I2C_Init+0x274>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d807      	bhi.n	80037bc <HAL_I2C_Init+0x84>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4a80      	ldr	r2, [pc, #512]	; (80039b0 <HAL_I2C_Init+0x278>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	bf94      	ite	ls
 80037b4:	2301      	movls	r3, #1
 80037b6:	2300      	movhi	r3, #0
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	e006      	b.n	80037ca <HAL_I2C_Init+0x92>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4a7d      	ldr	r2, [pc, #500]	; (80039b4 <HAL_I2C_Init+0x27c>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	bf94      	ite	ls
 80037c4:	2301      	movls	r3, #1
 80037c6:	2300      	movhi	r3, #0
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037ce:	2301      	movs	r3, #1
 80037d0:	e0e7      	b.n	80039a2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	4a78      	ldr	r2, [pc, #480]	; (80039b8 <HAL_I2C_Init+0x280>)
 80037d6:	fba2 2303 	umull	r2, r3, r2, r3
 80037da:	0c9b      	lsrs	r3, r3, #18
 80037dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	430a      	orrs	r2, r1
 80037f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	4a6a      	ldr	r2, [pc, #424]	; (80039ac <HAL_I2C_Init+0x274>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d802      	bhi.n	800380c <HAL_I2C_Init+0xd4>
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	3301      	adds	r3, #1
 800380a:	e009      	b.n	8003820 <HAL_I2C_Init+0xe8>
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003812:	fb02 f303 	mul.w	r3, r2, r3
 8003816:	4a69      	ldr	r2, [pc, #420]	; (80039bc <HAL_I2C_Init+0x284>)
 8003818:	fba2 2303 	umull	r2, r3, r2, r3
 800381c:	099b      	lsrs	r3, r3, #6
 800381e:	3301      	adds	r3, #1
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	6812      	ldr	r2, [r2, #0]
 8003824:	430b      	orrs	r3, r1
 8003826:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	69db      	ldr	r3, [r3, #28]
 800382e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003832:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	495c      	ldr	r1, [pc, #368]	; (80039ac <HAL_I2C_Init+0x274>)
 800383c:	428b      	cmp	r3, r1
 800383e:	d819      	bhi.n	8003874 <HAL_I2C_Init+0x13c>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	1e59      	subs	r1, r3, #1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	005b      	lsls	r3, r3, #1
 800384a:	fbb1 f3f3 	udiv	r3, r1, r3
 800384e:	1c59      	adds	r1, r3, #1
 8003850:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003854:	400b      	ands	r3, r1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00a      	beq.n	8003870 <HAL_I2C_Init+0x138>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	1e59      	subs	r1, r3, #1
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	005b      	lsls	r3, r3, #1
 8003864:	fbb1 f3f3 	udiv	r3, r1, r3
 8003868:	3301      	adds	r3, #1
 800386a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800386e:	e051      	b.n	8003914 <HAL_I2C_Init+0x1dc>
 8003870:	2304      	movs	r3, #4
 8003872:	e04f      	b.n	8003914 <HAL_I2C_Init+0x1dc>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d111      	bne.n	80038a0 <HAL_I2C_Init+0x168>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	1e58      	subs	r0, r3, #1
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6859      	ldr	r1, [r3, #4]
 8003884:	460b      	mov	r3, r1
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	440b      	add	r3, r1
 800388a:	fbb0 f3f3 	udiv	r3, r0, r3
 800388e:	3301      	adds	r3, #1
 8003890:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003894:	2b00      	cmp	r3, #0
 8003896:	bf0c      	ite	eq
 8003898:	2301      	moveq	r3, #1
 800389a:	2300      	movne	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	e012      	b.n	80038c6 <HAL_I2C_Init+0x18e>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	1e58      	subs	r0, r3, #1
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6859      	ldr	r1, [r3, #4]
 80038a8:	460b      	mov	r3, r1
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	0099      	lsls	r1, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80038b6:	3301      	adds	r3, #1
 80038b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038bc:	2b00      	cmp	r3, #0
 80038be:	bf0c      	ite	eq
 80038c0:	2301      	moveq	r3, #1
 80038c2:	2300      	movne	r3, #0
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d001      	beq.n	80038ce <HAL_I2C_Init+0x196>
 80038ca:	2301      	movs	r3, #1
 80038cc:	e022      	b.n	8003914 <HAL_I2C_Init+0x1dc>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10e      	bne.n	80038f4 <HAL_I2C_Init+0x1bc>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	1e58      	subs	r0, r3, #1
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6859      	ldr	r1, [r3, #4]
 80038de:	460b      	mov	r3, r1
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	440b      	add	r3, r1
 80038e4:	fbb0 f3f3 	udiv	r3, r0, r3
 80038e8:	3301      	adds	r3, #1
 80038ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038f2:	e00f      	b.n	8003914 <HAL_I2C_Init+0x1dc>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	1e58      	subs	r0, r3, #1
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6859      	ldr	r1, [r3, #4]
 80038fc:	460b      	mov	r3, r1
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	0099      	lsls	r1, r3, #2
 8003904:	440b      	add	r3, r1
 8003906:	fbb0 f3f3 	udiv	r3, r0, r3
 800390a:	3301      	adds	r3, #1
 800390c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003910:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003914:	6879      	ldr	r1, [r7, #4]
 8003916:	6809      	ldr	r1, [r1, #0]
 8003918:	4313      	orrs	r3, r2
 800391a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	69da      	ldr	r2, [r3, #28]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	430a      	orrs	r2, r1
 8003936:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003942:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	6911      	ldr	r1, [r2, #16]
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	68d2      	ldr	r2, [r2, #12]
 800394e:	4311      	orrs	r1, r2
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	6812      	ldr	r2, [r2, #0]
 8003954:	430b      	orrs	r3, r1
 8003956:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	68db      	ldr	r3, [r3, #12]
 800395e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	695a      	ldr	r2, [r3, #20]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0201 	orr.w	r2, r2, #1
 8003982:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2220      	movs	r2, #32
 800398e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	000186a0 	.word	0x000186a0
 80039b0:	001e847f 	.word	0x001e847f
 80039b4:	003d08ff 	.word	0x003d08ff
 80039b8:	431bde83 	.word	0x431bde83
 80039bc:	10624dd3 	.word	0x10624dd3

080039c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b20      	cmp	r3, #32
 80039d4:	d129      	bne.n	8003a2a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2224      	movs	r2, #36	; 0x24
 80039da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f022 0201 	bic.w	r2, r2, #1
 80039ec:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 0210 	bic.w	r2, r2, #16
 80039fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f042 0201 	orr.w	r2, r2, #1
 8003a1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2220      	movs	r2, #32
 8003a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a26:	2300      	movs	r3, #0
 8003a28:	e000      	b.n	8003a2c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003a2a:	2302      	movs	r3, #2
  }
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003a42:	2300      	movs	r3, #0
 8003a44:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b20      	cmp	r3, #32
 8003a50:	d12a      	bne.n	8003aa8 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2224      	movs	r2, #36	; 0x24
 8003a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f022 0201 	bic.w	r2, r2, #1
 8003a68:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003a72:	89fb      	ldrh	r3, [r7, #14]
 8003a74:	f023 030f 	bic.w	r3, r3, #15
 8003a78:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	89fb      	ldrh	r3, [r7, #14]
 8003a80:	4313      	orrs	r3, r2
 8003a82:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	89fa      	ldrh	r2, [r7, #14]
 8003a8a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0201 	orr.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2220      	movs	r2, #32
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	e000      	b.n	8003aaa <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003aa8:	2302      	movs	r3, #2
  }
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3714      	adds	r7, #20
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
	...

08003ab8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e0bf      	b.n	8003c4a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d106      	bne.n	8003ae4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7fd f91a 	bl	8000d18 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	699a      	ldr	r2, [r3, #24]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8003afa:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	6999      	ldr	r1, [r3, #24]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003b10:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6899      	ldr	r1, [r3, #8]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	4b4a      	ldr	r3, [pc, #296]	; (8003c54 <HAL_LTDC_Init+0x19c>)
 8003b2c:	400b      	ands	r3, r1
 8003b2e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	041b      	lsls	r3, r3, #16
 8003b36:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6899      	ldr	r1, [r3, #8]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	699a      	ldr	r2, [r3, #24]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	431a      	orrs	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	68d9      	ldr	r1, [r3, #12]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	4b3e      	ldr	r3, [pc, #248]	; (8003c54 <HAL_LTDC_Init+0x19c>)
 8003b5a:	400b      	ands	r3, r1
 8003b5c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	041b      	lsls	r3, r3, #16
 8003b64:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68d9      	ldr	r1, [r3, #12]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a1a      	ldr	r2, [r3, #32]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	430a      	orrs	r2, r1
 8003b7a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	6919      	ldr	r1, [r3, #16]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	4b33      	ldr	r3, [pc, #204]	; (8003c54 <HAL_LTDC_Init+0x19c>)
 8003b88:	400b      	ands	r3, r1
 8003b8a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b90:	041b      	lsls	r3, r3, #16
 8003b92:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	6919      	ldr	r1, [r3, #16]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	6959      	ldr	r1, [r3, #20]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	4b27      	ldr	r3, [pc, #156]	; (8003c54 <HAL_LTDC_Init+0x19c>)
 8003bb6:	400b      	ands	r3, r1
 8003bb8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbe:	041b      	lsls	r3, r3, #16
 8003bc0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6959      	ldr	r1, [r3, #20]
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003bde:	021b      	lsls	r3, r3, #8
 8003be0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8003be8:	041b      	lsls	r3, r3, #16
 8003bea:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8003bfa:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c02:	68ba      	ldr	r2, [r7, #8]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	430a      	orrs	r2, r1
 8003c16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0206 	orr.w	r2, r2, #6
 8003c26:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699a      	ldr	r2, [r3, #24]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 0201 	orr.w	r2, r2, #1
 8003c36:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3710      	adds	r7, #16
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	f000f800 	.word	0xf000f800

08003c58 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003c58:	b5b0      	push	{r4, r5, r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d101      	bne.n	8003c72 <HAL_LTDC_ConfigLayer+0x1a>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	e02c      	b.n	8003ccc <HAL_LTDC_ConfigLayer+0x74>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8003c82:	68fa      	ldr	r2, [r7, #12]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2134      	movs	r1, #52	; 0x34
 8003c88:	fb01 f303 	mul.w	r3, r1, r3
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	4614      	mov	r4, r2
 8003c96:	461d      	mov	r5, r3
 8003c98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ca0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ca2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ca4:	682b      	ldr	r3, [r5, #0]
 8003ca6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	68b9      	ldr	r1, [r7, #8]
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f000 f811 	bl	8003cd4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	2201      	movs	r2, #1
 8003cb8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bdb0      	pop	{r4, r5, r7, pc}

08003cd4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b089      	sub	sp, #36	; 0x24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	0c1b      	lsrs	r3, r3, #16
 8003cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cf0:	4413      	add	r3, r2
 8003cf2:	041b      	lsls	r3, r3, #16
 8003cf4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	01db      	lsls	r3, r3, #7
 8003d00:	4413      	add	r3, r2
 8003d02:	3384      	adds	r3, #132	; 0x84
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	6812      	ldr	r2, [r2, #0]
 8003d0a:	4611      	mov	r1, r2
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	01d2      	lsls	r2, r2, #7
 8003d10:	440a      	add	r2, r1
 8003d12:	3284      	adds	r2, #132	; 0x84
 8003d14:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003d18:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	0c1b      	lsrs	r3, r3, #16
 8003d26:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003d2a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003d2c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4619      	mov	r1, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	01db      	lsls	r3, r3, #7
 8003d38:	440b      	add	r3, r1
 8003d3a:	3384      	adds	r3, #132	; 0x84
 8003d3c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8003d42:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	68da      	ldr	r2, [r3, #12]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d52:	4413      	add	r3, r2
 8003d54:	041b      	lsls	r3, r3, #16
 8003d56:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	01db      	lsls	r3, r3, #7
 8003d62:	4413      	add	r3, r2
 8003d64:	3384      	adds	r3, #132	; 0x84
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	68fa      	ldr	r2, [r7, #12]
 8003d6a:	6812      	ldr	r2, [r2, #0]
 8003d6c:	4611      	mov	r1, r2
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	01d2      	lsls	r2, r2, #7
 8003d72:	440a      	add	r2, r1
 8003d74:	3284      	adds	r2, #132	; 0x84
 8003d76:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8003d7a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d8a:	4413      	add	r3, r2
 8003d8c:	1c5a      	adds	r2, r3, #1
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4619      	mov	r1, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	01db      	lsls	r3, r3, #7
 8003d98:	440b      	add	r3, r1
 8003d9a:	3384      	adds	r3, #132	; 0x84
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	461a      	mov	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	01db      	lsls	r3, r3, #7
 8003dae:	4413      	add	r3, r2
 8003db0:	3384      	adds	r3, #132	; 0x84
 8003db2:	691b      	ldr	r3, [r3, #16]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	6812      	ldr	r2, [r2, #0]
 8003db8:	4611      	mov	r1, r2
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	01d2      	lsls	r2, r2, #7
 8003dbe:	440a      	add	r2, r1
 8003dc0:	3284      	adds	r2, #132	; 0x84
 8003dc2:	f023 0307 	bic.w	r3, r3, #7
 8003dc6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	461a      	mov	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	01db      	lsls	r3, r3, #7
 8003dd2:	4413      	add	r3, r2
 8003dd4:	3384      	adds	r3, #132	; 0x84
 8003dd6:	461a      	mov	r2, r3
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003de4:	021b      	lsls	r3, r3, #8
 8003de6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8003dee:	041b      	lsls	r3, r3, #16
 8003df0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	699b      	ldr	r3, [r3, #24]
 8003df6:	061b      	lsls	r3, r3, #24
 8003df8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	461a      	mov	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	01db      	lsls	r3, r3, #7
 8003e04:	4413      	add	r3, r2
 8003e06:	3384      	adds	r3, #132	; 0x84
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	461a      	mov	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	01db      	lsls	r3, r3, #7
 8003e14:	4413      	add	r3, r2
 8003e16:	3384      	adds	r3, #132	; 0x84
 8003e18:	461a      	mov	r2, r3
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e24:	461a      	mov	r2, r3
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	431a      	orrs	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4619      	mov	r1, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	01db      	lsls	r3, r3, #7
 8003e38:	440b      	add	r3, r1
 8003e3a:	3384      	adds	r3, #132	; 0x84
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	461a      	mov	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	01db      	lsls	r3, r3, #7
 8003e4e:	4413      	add	r3, r2
 8003e50:	3384      	adds	r3, #132	; 0x84
 8003e52:	695b      	ldr	r3, [r3, #20]
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	6812      	ldr	r2, [r2, #0]
 8003e58:	4611      	mov	r1, r2
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	01d2      	lsls	r2, r2, #7
 8003e5e:	440a      	add	r2, r1
 8003e60:	3284      	adds	r2, #132	; 0x84
 8003e62:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e66:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	01db      	lsls	r3, r3, #7
 8003e72:	4413      	add	r3, r2
 8003e74:	3384      	adds	r3, #132	; 0x84
 8003e76:	461a      	mov	r2, r3
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	461a      	mov	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	01db      	lsls	r3, r3, #7
 8003e88:	4413      	add	r3, r2
 8003e8a:	3384      	adds	r3, #132	; 0x84
 8003e8c:	69db      	ldr	r3, [r3, #28]
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	6812      	ldr	r2, [r2, #0]
 8003e92:	4611      	mov	r1, r2
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	01d2      	lsls	r2, r2, #7
 8003e98:	440a      	add	r2, r1
 8003e9a:	3284      	adds	r2, #132	; 0x84
 8003e9c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003ea0:	f023 0307 	bic.w	r3, r3, #7
 8003ea4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	69da      	ldr	r2, [r3, #28]
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	68f9      	ldr	r1, [r7, #12]
 8003eb0:	6809      	ldr	r1, [r1, #0]
 8003eb2:	4608      	mov	r0, r1
 8003eb4:	6879      	ldr	r1, [r7, #4]
 8003eb6:	01c9      	lsls	r1, r1, #7
 8003eb8:	4401      	add	r1, r0
 8003eba:	3184      	adds	r1, #132	; 0x84
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	01db      	lsls	r3, r3, #7
 8003eca:	4413      	add	r3, r2
 8003ecc:	3384      	adds	r3, #132	; 0x84
 8003ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	01db      	lsls	r3, r3, #7
 8003eda:	4413      	add	r3, r2
 8003edc:	3384      	adds	r3, #132	; 0x84
 8003ede:	461a      	mov	r2, r3
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	461a      	mov	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	01db      	lsls	r3, r3, #7
 8003eee:	4413      	add	r3, r2
 8003ef0:	3384      	adds	r3, #132	; 0x84
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d102      	bne.n	8003f08 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8003f02:	2304      	movs	r3, #4
 8003f04:	61fb      	str	r3, [r7, #28]
 8003f06:	e01b      	b.n	8003f40 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	691b      	ldr	r3, [r3, #16]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d102      	bne.n	8003f16 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8003f10:	2303      	movs	r3, #3
 8003f12:	61fb      	str	r3, [r7, #28]
 8003f14:	e014      	b.n	8003f40 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	2b04      	cmp	r3, #4
 8003f1c:	d00b      	beq.n	8003f36 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d007      	beq.n	8003f36 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8003f2a:	2b03      	cmp	r3, #3
 8003f2c:	d003      	beq.n	8003f36 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8003f32:	2b07      	cmp	r3, #7
 8003f34:	d102      	bne.n	8003f3c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8003f36:	2302      	movs	r3, #2
 8003f38:	61fb      	str	r3, [r7, #28]
 8003f3a:	e001      	b.n	8003f40 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	461a      	mov	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	01db      	lsls	r3, r3, #7
 8003f4a:	4413      	add	r3, r2
 8003f4c:	3384      	adds	r3, #132	; 0x84
 8003f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f50:	68fa      	ldr	r2, [r7, #12]
 8003f52:	6812      	ldr	r2, [r2, #0]
 8003f54:	4611      	mov	r1, r2
 8003f56:	687a      	ldr	r2, [r7, #4]
 8003f58:	01d2      	lsls	r2, r2, #7
 8003f5a:	440a      	add	r2, r1
 8003f5c:	3284      	adds	r2, #132	; 0x84
 8003f5e:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8003f62:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f68:	69fa      	ldr	r2, [r7, #28]
 8003f6a:	fb02 f303 	mul.w	r3, r2, r3
 8003f6e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	6859      	ldr	r1, [r3, #4]
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	1acb      	subs	r3, r1, r3
 8003f7a:	69f9      	ldr	r1, [r7, #28]
 8003f7c:	fb01 f303 	mul.w	r3, r1, r3
 8003f80:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8003f82:	68f9      	ldr	r1, [r7, #12]
 8003f84:	6809      	ldr	r1, [r1, #0]
 8003f86:	4608      	mov	r0, r1
 8003f88:	6879      	ldr	r1, [r7, #4]
 8003f8a:	01c9      	lsls	r1, r1, #7
 8003f8c:	4401      	add	r1, r0
 8003f8e:	3184      	adds	r1, #132	; 0x84
 8003f90:	4313      	orrs	r3, r2
 8003f92:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	461a      	mov	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	01db      	lsls	r3, r3, #7
 8003f9e:	4413      	add	r3, r2
 8003fa0:	3384      	adds	r3, #132	; 0x84
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	6812      	ldr	r2, [r2, #0]
 8003fa8:	4611      	mov	r1, r2
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	01d2      	lsls	r2, r2, #7
 8003fae:	440a      	add	r2, r1
 8003fb0:	3284      	adds	r2, #132	; 0x84
 8003fb2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003fb6:	f023 0307 	bic.w	r3, r3, #7
 8003fba:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	01db      	lsls	r3, r3, #7
 8003fc6:	4413      	add	r3, r2
 8003fc8:	3384      	adds	r3, #132	; 0x84
 8003fca:	461a      	mov	r2, r3
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	01db      	lsls	r3, r3, #7
 8003fdc:	4413      	add	r3, r2
 8003fde:	3384      	adds	r3, #132	; 0x84
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68fa      	ldr	r2, [r7, #12]
 8003fe4:	6812      	ldr	r2, [r2, #0]
 8003fe6:	4611      	mov	r1, r2
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	01d2      	lsls	r2, r2, #7
 8003fec:	440a      	add	r2, r1
 8003fee:	3284      	adds	r2, #132	; 0x84
 8003ff0:	f043 0301 	orr.w	r3, r3, #1
 8003ff4:	6013      	str	r3, [r2, #0]
}
 8003ff6:	bf00      	nop
 8003ff8:	3724      	adds	r7, #36	; 0x24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
	...

08004004 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800400a:	2300      	movs	r3, #0
 800400c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800400e:	2300      	movs	r3, #0
 8004010:	603b      	str	r3, [r7, #0]
 8004012:	4b20      	ldr	r3, [pc, #128]	; (8004094 <HAL_PWREx_EnableOverDrive+0x90>)
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	4a1f      	ldr	r2, [pc, #124]	; (8004094 <HAL_PWREx_EnableOverDrive+0x90>)
 8004018:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800401c:	6413      	str	r3, [r2, #64]	; 0x40
 800401e:	4b1d      	ldr	r3, [pc, #116]	; (8004094 <HAL_PWREx_EnableOverDrive+0x90>)
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004026:	603b      	str	r3, [r7, #0]
 8004028:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800402a:	4b1b      	ldr	r3, [pc, #108]	; (8004098 <HAL_PWREx_EnableOverDrive+0x94>)
 800402c:	2201      	movs	r2, #1
 800402e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004030:	f7fe fb24 	bl	800267c <HAL_GetTick>
 8004034:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004036:	e009      	b.n	800404c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004038:	f7fe fb20 	bl	800267c <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004046:	d901      	bls.n	800404c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e01f      	b.n	800408c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800404c:	4b13      	ldr	r3, [pc, #76]	; (800409c <HAL_PWREx_EnableOverDrive+0x98>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004058:	d1ee      	bne.n	8004038 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800405a:	4b11      	ldr	r3, [pc, #68]	; (80040a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800405c:	2201      	movs	r2, #1
 800405e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004060:	f7fe fb0c 	bl	800267c <HAL_GetTick>
 8004064:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004066:	e009      	b.n	800407c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004068:	f7fe fb08 	bl	800267c <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004076:	d901      	bls.n	800407c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e007      	b.n	800408c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800407c:	4b07      	ldr	r3, [pc, #28]	; (800409c <HAL_PWREx_EnableOverDrive+0x98>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004084:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004088:	d1ee      	bne.n	8004068 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3708      	adds	r7, #8
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	40023800 	.word	0x40023800
 8004098:	420e0040 	.word	0x420e0040
 800409c:	40007000 	.word	0x40007000
 80040a0:	420e0044 	.word	0x420e0044

080040a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040b2:	2301      	movs	r3, #1
 80040b4:	e267      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d075      	beq.n	80041ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040c2:	4b88      	ldr	r3, [pc, #544]	; (80042e4 <HAL_RCC_OscConfig+0x240>)
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f003 030c 	and.w	r3, r3, #12
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	d00c      	beq.n	80040e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040ce:	4b85      	ldr	r3, [pc, #532]	; (80042e4 <HAL_RCC_OscConfig+0x240>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040d6:	2b08      	cmp	r3, #8
 80040d8:	d112      	bne.n	8004100 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040da:	4b82      	ldr	r3, [pc, #520]	; (80042e4 <HAL_RCC_OscConfig+0x240>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040e6:	d10b      	bne.n	8004100 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040e8:	4b7e      	ldr	r3, [pc, #504]	; (80042e4 <HAL_RCC_OscConfig+0x240>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d05b      	beq.n	80041ac <HAL_RCC_OscConfig+0x108>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d157      	bne.n	80041ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e242      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004108:	d106      	bne.n	8004118 <HAL_RCC_OscConfig+0x74>
 800410a:	4b76      	ldr	r3, [pc, #472]	; (80042e4 <HAL_RCC_OscConfig+0x240>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a75      	ldr	r2, [pc, #468]	; (80042e4 <HAL_RCC_OscConfig+0x240>)
 8004110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	e01d      	b.n	8004154 <HAL_RCC_OscConfig+0xb0>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004120:	d10c      	bne.n	800413c <HAL_RCC_OscConfig+0x98>
 8004122:	4b70      	ldr	r3, [pc, #448]	; (80042e4 <HAL_RCC_OscConfig+0x240>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a6f      	ldr	r2, [pc, #444]	; (80042e4 <HAL_RCC_OscConfig+0x240>)
 8004128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800412c:	6013      	str	r3, [r2, #0]
 800412e:	4b6d      	ldr	r3, [pc, #436]	; (80042e4 <HAL_RCC_OscConfig+0x240>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a6c      	ldr	r2, [pc, #432]	; (80042e4 <HAL_RCC_OscConfig+0x240>)
 8004134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	e00b      	b.n	8004154 <HAL_RCC_OscConfig+0xb0>
 800413c:	4b69      	ldr	r3, [pc, #420]	; (80042e4 <HAL_RCC_OscConfig+0x240>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a68      	ldr	r2, [pc, #416]	; (80042e4 <HAL_RCC_OscConfig+0x240>)
 8004142:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004146:	6013      	str	r3, [r2, #0]
 8004148:	4b66      	ldr	r3, [pc, #408]	; (80042e4 <HAL_RCC_OscConfig+0x240>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a65      	ldr	r2, [pc, #404]	; (80042e4 <HAL_RCC_OscConfig+0x240>)
 800414e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004152:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d013      	beq.n	8004184 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800415c:	f7fe fa8e 	bl	800267c <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004162:	e008      	b.n	8004176 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004164:	f7fe fa8a 	bl	800267c <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b64      	cmp	r3, #100	; 0x64
 8004170:	d901      	bls.n	8004176 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e207      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004176:	4b5b      	ldr	r3, [pc, #364]	; (80042e4 <HAL_RCC_OscConfig+0x240>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d0f0      	beq.n	8004164 <HAL_RCC_OscConfig+0xc0>
 8004182:	e014      	b.n	80041ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004184:	f7fe fa7a 	bl	800267c <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800418a:	e008      	b.n	800419e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800418c:	f7fe fa76 	bl	800267c <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b64      	cmp	r3, #100	; 0x64
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e1f3      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800419e:	4b51      	ldr	r3, [pc, #324]	; (80042e4 <HAL_RCC_OscConfig+0x240>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1f0      	bne.n	800418c <HAL_RCC_OscConfig+0xe8>
 80041aa:	e000      	b.n	80041ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0302 	and.w	r3, r3, #2
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d063      	beq.n	8004282 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041ba:	4b4a      	ldr	r3, [pc, #296]	; (80042e4 <HAL_RCC_OscConfig+0x240>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 030c 	and.w	r3, r3, #12
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00b      	beq.n	80041de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041c6:	4b47      	ldr	r3, [pc, #284]	; (80042e4 <HAL_RCC_OscConfig+0x240>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041ce:	2b08      	cmp	r3, #8
 80041d0:	d11c      	bne.n	800420c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041d2:	4b44      	ldr	r3, [pc, #272]	; (80042e4 <HAL_RCC_OscConfig+0x240>)
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d116      	bne.n	800420c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041de:	4b41      	ldr	r3, [pc, #260]	; (80042e4 <HAL_RCC_OscConfig+0x240>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d005      	beq.n	80041f6 <HAL_RCC_OscConfig+0x152>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	68db      	ldr	r3, [r3, #12]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d001      	beq.n	80041f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e1c7      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041f6:	4b3b      	ldr	r3, [pc, #236]	; (80042e4 <HAL_RCC_OscConfig+0x240>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	00db      	lsls	r3, r3, #3
 8004204:	4937      	ldr	r1, [pc, #220]	; (80042e4 <HAL_RCC_OscConfig+0x240>)
 8004206:	4313      	orrs	r3, r2
 8004208:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800420a:	e03a      	b.n	8004282 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d020      	beq.n	8004256 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004214:	4b34      	ldr	r3, [pc, #208]	; (80042e8 <HAL_RCC_OscConfig+0x244>)
 8004216:	2201      	movs	r2, #1
 8004218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800421a:	f7fe fa2f 	bl	800267c <HAL_GetTick>
 800421e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004220:	e008      	b.n	8004234 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004222:	f7fe fa2b 	bl	800267c <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e1a8      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004234:	4b2b      	ldr	r3, [pc, #172]	; (80042e4 <HAL_RCC_OscConfig+0x240>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0f0      	beq.n	8004222 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004240:	4b28      	ldr	r3, [pc, #160]	; (80042e4 <HAL_RCC_OscConfig+0x240>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	00db      	lsls	r3, r3, #3
 800424e:	4925      	ldr	r1, [pc, #148]	; (80042e4 <HAL_RCC_OscConfig+0x240>)
 8004250:	4313      	orrs	r3, r2
 8004252:	600b      	str	r3, [r1, #0]
 8004254:	e015      	b.n	8004282 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004256:	4b24      	ldr	r3, [pc, #144]	; (80042e8 <HAL_RCC_OscConfig+0x244>)
 8004258:	2200      	movs	r2, #0
 800425a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800425c:	f7fe fa0e 	bl	800267c <HAL_GetTick>
 8004260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004262:	e008      	b.n	8004276 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004264:	f7fe fa0a 	bl	800267c <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e187      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004276:	4b1b      	ldr	r3, [pc, #108]	; (80042e4 <HAL_RCC_OscConfig+0x240>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d1f0      	bne.n	8004264 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0308 	and.w	r3, r3, #8
 800428a:	2b00      	cmp	r3, #0
 800428c:	d036      	beq.n	80042fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d016      	beq.n	80042c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004296:	4b15      	ldr	r3, [pc, #84]	; (80042ec <HAL_RCC_OscConfig+0x248>)
 8004298:	2201      	movs	r2, #1
 800429a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429c:	f7fe f9ee 	bl	800267c <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042a4:	f7fe f9ea 	bl	800267c <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e167      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042b6:	4b0b      	ldr	r3, [pc, #44]	; (80042e4 <HAL_RCC_OscConfig+0x240>)
 80042b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0f0      	beq.n	80042a4 <HAL_RCC_OscConfig+0x200>
 80042c2:	e01b      	b.n	80042fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042c4:	4b09      	ldr	r3, [pc, #36]	; (80042ec <HAL_RCC_OscConfig+0x248>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ca:	f7fe f9d7 	bl	800267c <HAL_GetTick>
 80042ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042d0:	e00e      	b.n	80042f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042d2:	f7fe f9d3 	bl	800267c <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d907      	bls.n	80042f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e150      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
 80042e4:	40023800 	.word	0x40023800
 80042e8:	42470000 	.word	0x42470000
 80042ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042f0:	4b88      	ldr	r3, [pc, #544]	; (8004514 <HAL_RCC_OscConfig+0x470>)
 80042f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042f4:	f003 0302 	and.w	r3, r3, #2
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1ea      	bne.n	80042d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 8097 	beq.w	8004438 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800430a:	2300      	movs	r3, #0
 800430c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800430e:	4b81      	ldr	r3, [pc, #516]	; (8004514 <HAL_RCC_OscConfig+0x470>)
 8004310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10f      	bne.n	800433a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800431a:	2300      	movs	r3, #0
 800431c:	60bb      	str	r3, [r7, #8]
 800431e:	4b7d      	ldr	r3, [pc, #500]	; (8004514 <HAL_RCC_OscConfig+0x470>)
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	4a7c      	ldr	r2, [pc, #496]	; (8004514 <HAL_RCC_OscConfig+0x470>)
 8004324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004328:	6413      	str	r3, [r2, #64]	; 0x40
 800432a:	4b7a      	ldr	r3, [pc, #488]	; (8004514 <HAL_RCC_OscConfig+0x470>)
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004332:	60bb      	str	r3, [r7, #8]
 8004334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004336:	2301      	movs	r3, #1
 8004338:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800433a:	4b77      	ldr	r3, [pc, #476]	; (8004518 <HAL_RCC_OscConfig+0x474>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004342:	2b00      	cmp	r3, #0
 8004344:	d118      	bne.n	8004378 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004346:	4b74      	ldr	r3, [pc, #464]	; (8004518 <HAL_RCC_OscConfig+0x474>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a73      	ldr	r2, [pc, #460]	; (8004518 <HAL_RCC_OscConfig+0x474>)
 800434c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004352:	f7fe f993 	bl	800267c <HAL_GetTick>
 8004356:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004358:	e008      	b.n	800436c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800435a:	f7fe f98f 	bl	800267c <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b02      	cmp	r3, #2
 8004366:	d901      	bls.n	800436c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e10c      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800436c:	4b6a      	ldr	r3, [pc, #424]	; (8004518 <HAL_RCC_OscConfig+0x474>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0f0      	beq.n	800435a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d106      	bne.n	800438e <HAL_RCC_OscConfig+0x2ea>
 8004380:	4b64      	ldr	r3, [pc, #400]	; (8004514 <HAL_RCC_OscConfig+0x470>)
 8004382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004384:	4a63      	ldr	r2, [pc, #396]	; (8004514 <HAL_RCC_OscConfig+0x470>)
 8004386:	f043 0301 	orr.w	r3, r3, #1
 800438a:	6713      	str	r3, [r2, #112]	; 0x70
 800438c:	e01c      	b.n	80043c8 <HAL_RCC_OscConfig+0x324>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	2b05      	cmp	r3, #5
 8004394:	d10c      	bne.n	80043b0 <HAL_RCC_OscConfig+0x30c>
 8004396:	4b5f      	ldr	r3, [pc, #380]	; (8004514 <HAL_RCC_OscConfig+0x470>)
 8004398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439a:	4a5e      	ldr	r2, [pc, #376]	; (8004514 <HAL_RCC_OscConfig+0x470>)
 800439c:	f043 0304 	orr.w	r3, r3, #4
 80043a0:	6713      	str	r3, [r2, #112]	; 0x70
 80043a2:	4b5c      	ldr	r3, [pc, #368]	; (8004514 <HAL_RCC_OscConfig+0x470>)
 80043a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a6:	4a5b      	ldr	r2, [pc, #364]	; (8004514 <HAL_RCC_OscConfig+0x470>)
 80043a8:	f043 0301 	orr.w	r3, r3, #1
 80043ac:	6713      	str	r3, [r2, #112]	; 0x70
 80043ae:	e00b      	b.n	80043c8 <HAL_RCC_OscConfig+0x324>
 80043b0:	4b58      	ldr	r3, [pc, #352]	; (8004514 <HAL_RCC_OscConfig+0x470>)
 80043b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b4:	4a57      	ldr	r2, [pc, #348]	; (8004514 <HAL_RCC_OscConfig+0x470>)
 80043b6:	f023 0301 	bic.w	r3, r3, #1
 80043ba:	6713      	str	r3, [r2, #112]	; 0x70
 80043bc:	4b55      	ldr	r3, [pc, #340]	; (8004514 <HAL_RCC_OscConfig+0x470>)
 80043be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c0:	4a54      	ldr	r2, [pc, #336]	; (8004514 <HAL_RCC_OscConfig+0x470>)
 80043c2:	f023 0304 	bic.w	r3, r3, #4
 80043c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	689b      	ldr	r3, [r3, #8]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d015      	beq.n	80043fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043d0:	f7fe f954 	bl	800267c <HAL_GetTick>
 80043d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d6:	e00a      	b.n	80043ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043d8:	f7fe f950 	bl	800267c <HAL_GetTick>
 80043dc:	4602      	mov	r2, r0
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	1ad3      	subs	r3, r2, r3
 80043e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e0cb      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ee:	4b49      	ldr	r3, [pc, #292]	; (8004514 <HAL_RCC_OscConfig+0x470>)
 80043f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0ee      	beq.n	80043d8 <HAL_RCC_OscConfig+0x334>
 80043fa:	e014      	b.n	8004426 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043fc:	f7fe f93e 	bl	800267c <HAL_GetTick>
 8004400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004402:	e00a      	b.n	800441a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004404:	f7fe f93a 	bl	800267c <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004412:	4293      	cmp	r3, r2
 8004414:	d901      	bls.n	800441a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e0b5      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800441a:	4b3e      	ldr	r3, [pc, #248]	; (8004514 <HAL_RCC_OscConfig+0x470>)
 800441c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d1ee      	bne.n	8004404 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004426:	7dfb      	ldrb	r3, [r7, #23]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d105      	bne.n	8004438 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800442c:	4b39      	ldr	r3, [pc, #228]	; (8004514 <HAL_RCC_OscConfig+0x470>)
 800442e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004430:	4a38      	ldr	r2, [pc, #224]	; (8004514 <HAL_RCC_OscConfig+0x470>)
 8004432:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004436:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	2b00      	cmp	r3, #0
 800443e:	f000 80a1 	beq.w	8004584 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004442:	4b34      	ldr	r3, [pc, #208]	; (8004514 <HAL_RCC_OscConfig+0x470>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f003 030c 	and.w	r3, r3, #12
 800444a:	2b08      	cmp	r3, #8
 800444c:	d05c      	beq.n	8004508 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	699b      	ldr	r3, [r3, #24]
 8004452:	2b02      	cmp	r3, #2
 8004454:	d141      	bne.n	80044da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004456:	4b31      	ldr	r3, [pc, #196]	; (800451c <HAL_RCC_OscConfig+0x478>)
 8004458:	2200      	movs	r2, #0
 800445a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800445c:	f7fe f90e 	bl	800267c <HAL_GetTick>
 8004460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004462:	e008      	b.n	8004476 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004464:	f7fe f90a 	bl	800267c <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	2b02      	cmp	r3, #2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e087      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004476:	4b27      	ldr	r3, [pc, #156]	; (8004514 <HAL_RCC_OscConfig+0x470>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1f0      	bne.n	8004464 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	69da      	ldr	r2, [r3, #28]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	431a      	orrs	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	019b      	lsls	r3, r3, #6
 8004492:	431a      	orrs	r2, r3
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004498:	085b      	lsrs	r3, r3, #1
 800449a:	3b01      	subs	r3, #1
 800449c:	041b      	lsls	r3, r3, #16
 800449e:	431a      	orrs	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a4:	061b      	lsls	r3, r3, #24
 80044a6:	491b      	ldr	r1, [pc, #108]	; (8004514 <HAL_RCC_OscConfig+0x470>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044ac:	4b1b      	ldr	r3, [pc, #108]	; (800451c <HAL_RCC_OscConfig+0x478>)
 80044ae:	2201      	movs	r2, #1
 80044b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b2:	f7fe f8e3 	bl	800267c <HAL_GetTick>
 80044b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044b8:	e008      	b.n	80044cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044ba:	f7fe f8df 	bl	800267c <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d901      	bls.n	80044cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e05c      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044cc:	4b11      	ldr	r3, [pc, #68]	; (8004514 <HAL_RCC_OscConfig+0x470>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d0f0      	beq.n	80044ba <HAL_RCC_OscConfig+0x416>
 80044d8:	e054      	b.n	8004584 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044da:	4b10      	ldr	r3, [pc, #64]	; (800451c <HAL_RCC_OscConfig+0x478>)
 80044dc:	2200      	movs	r2, #0
 80044de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044e0:	f7fe f8cc 	bl	800267c <HAL_GetTick>
 80044e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044e6:	e008      	b.n	80044fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044e8:	f7fe f8c8 	bl	800267c <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e045      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044fa:	4b06      	ldr	r3, [pc, #24]	; (8004514 <HAL_RCC_OscConfig+0x470>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1f0      	bne.n	80044e8 <HAL_RCC_OscConfig+0x444>
 8004506:	e03d      	b.n	8004584 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	699b      	ldr	r3, [r3, #24]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d107      	bne.n	8004520 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e038      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
 8004514:	40023800 	.word	0x40023800
 8004518:	40007000 	.word	0x40007000
 800451c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004520:	4b1b      	ldr	r3, [pc, #108]	; (8004590 <HAL_RCC_OscConfig+0x4ec>)
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d028      	beq.n	8004580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004538:	429a      	cmp	r2, r3
 800453a:	d121      	bne.n	8004580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004546:	429a      	cmp	r2, r3
 8004548:	d11a      	bne.n	8004580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800454a:	68fa      	ldr	r2, [r7, #12]
 800454c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004550:	4013      	ands	r3, r2
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004556:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004558:	4293      	cmp	r3, r2
 800455a:	d111      	bne.n	8004580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004566:	085b      	lsrs	r3, r3, #1
 8004568:	3b01      	subs	r3, #1
 800456a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800456c:	429a      	cmp	r2, r3
 800456e:	d107      	bne.n	8004580 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800457a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800457c:	429a      	cmp	r2, r3
 800457e:	d001      	beq.n	8004584 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e000      	b.n	8004586 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004584:	2300      	movs	r3, #0
}
 8004586:	4618      	mov	r0, r3
 8004588:	3718      	adds	r7, #24
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
 800458e:	bf00      	nop
 8004590:	40023800 	.word	0x40023800

08004594 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e0cc      	b.n	8004742 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045a8:	4b68      	ldr	r3, [pc, #416]	; (800474c <HAL_RCC_ClockConfig+0x1b8>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 030f 	and.w	r3, r3, #15
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d90c      	bls.n	80045d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045b6:	4b65      	ldr	r3, [pc, #404]	; (800474c <HAL_RCC_ClockConfig+0x1b8>)
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	b2d2      	uxtb	r2, r2
 80045bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045be:	4b63      	ldr	r3, [pc, #396]	; (800474c <HAL_RCC_ClockConfig+0x1b8>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d001      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e0b8      	b.n	8004742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0302 	and.w	r3, r3, #2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d020      	beq.n	800461e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0304 	and.w	r3, r3, #4
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d005      	beq.n	80045f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045e8:	4b59      	ldr	r3, [pc, #356]	; (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	4a58      	ldr	r2, [pc, #352]	; (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 80045ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f003 0308 	and.w	r3, r3, #8
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d005      	beq.n	800460c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004600:	4b53      	ldr	r3, [pc, #332]	; (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	4a52      	ldr	r2, [pc, #328]	; (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 8004606:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800460a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800460c:	4b50      	ldr	r3, [pc, #320]	; (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	494d      	ldr	r1, [pc, #308]	; (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 800461a:	4313      	orrs	r3, r2
 800461c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	2b00      	cmp	r3, #0
 8004628:	d044      	beq.n	80046b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d107      	bne.n	8004642 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004632:	4b47      	ldr	r3, [pc, #284]	; (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d119      	bne.n	8004672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e07f      	b.n	8004742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	2b02      	cmp	r3, #2
 8004648:	d003      	beq.n	8004652 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800464e:	2b03      	cmp	r3, #3
 8004650:	d107      	bne.n	8004662 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004652:	4b3f      	ldr	r3, [pc, #252]	; (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d109      	bne.n	8004672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e06f      	b.n	8004742 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004662:	4b3b      	ldr	r3, [pc, #236]	; (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e067      	b.n	8004742 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004672:	4b37      	ldr	r3, [pc, #220]	; (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f023 0203 	bic.w	r2, r3, #3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	4934      	ldr	r1, [pc, #208]	; (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 8004680:	4313      	orrs	r3, r2
 8004682:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004684:	f7fd fffa 	bl	800267c <HAL_GetTick>
 8004688:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800468a:	e00a      	b.n	80046a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800468c:	f7fd fff6 	bl	800267c <HAL_GetTick>
 8004690:	4602      	mov	r2, r0
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	1ad3      	subs	r3, r2, r3
 8004696:	f241 3288 	movw	r2, #5000	; 0x1388
 800469a:	4293      	cmp	r3, r2
 800469c:	d901      	bls.n	80046a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e04f      	b.n	8004742 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046a2:	4b2b      	ldr	r3, [pc, #172]	; (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f003 020c 	and.w	r2, r3, #12
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d1eb      	bne.n	800468c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046b4:	4b25      	ldr	r3, [pc, #148]	; (800474c <HAL_RCC_ClockConfig+0x1b8>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 030f 	and.w	r3, r3, #15
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d20c      	bcs.n	80046dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046c2:	4b22      	ldr	r3, [pc, #136]	; (800474c <HAL_RCC_ClockConfig+0x1b8>)
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	b2d2      	uxtb	r2, r2
 80046c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046ca:	4b20      	ldr	r3, [pc, #128]	; (800474c <HAL_RCC_ClockConfig+0x1b8>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 030f 	and.w	r3, r3, #15
 80046d2:	683a      	ldr	r2, [r7, #0]
 80046d4:	429a      	cmp	r2, r3
 80046d6:	d001      	beq.n	80046dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e032      	b.n	8004742 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0304 	and.w	r3, r3, #4
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d008      	beq.n	80046fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046e8:	4b19      	ldr	r3, [pc, #100]	; (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	4916      	ldr	r1, [pc, #88]	; (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0308 	and.w	r3, r3, #8
 8004702:	2b00      	cmp	r3, #0
 8004704:	d009      	beq.n	800471a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004706:	4b12      	ldr	r3, [pc, #72]	; (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	00db      	lsls	r3, r3, #3
 8004714:	490e      	ldr	r1, [pc, #56]	; (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 8004716:	4313      	orrs	r3, r2
 8004718:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800471a:	f000 f821 	bl	8004760 <HAL_RCC_GetSysClockFreq>
 800471e:	4602      	mov	r2, r0
 8004720:	4b0b      	ldr	r3, [pc, #44]	; (8004750 <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	091b      	lsrs	r3, r3, #4
 8004726:	f003 030f 	and.w	r3, r3, #15
 800472a:	490a      	ldr	r1, [pc, #40]	; (8004754 <HAL_RCC_ClockConfig+0x1c0>)
 800472c:	5ccb      	ldrb	r3, [r1, r3]
 800472e:	fa22 f303 	lsr.w	r3, r2, r3
 8004732:	4a09      	ldr	r2, [pc, #36]	; (8004758 <HAL_RCC_ClockConfig+0x1c4>)
 8004734:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004736:	4b09      	ldr	r3, [pc, #36]	; (800475c <HAL_RCC_ClockConfig+0x1c8>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	4618      	mov	r0, r3
 800473c:	f7fd ff5a 	bl	80025f4 <HAL_InitTick>

  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	40023c00 	.word	0x40023c00
 8004750:	40023800 	.word	0x40023800
 8004754:	080062d0 	.word	0x080062d0
 8004758:	20000000 	.word	0x20000000
 800475c:	20000064 	.word	0x20000064

08004760 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004764:	b094      	sub	sp, #80	; 0x50
 8004766:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004768:	2300      	movs	r3, #0
 800476a:	647b      	str	r3, [r7, #68]	; 0x44
 800476c:	2300      	movs	r3, #0
 800476e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004770:	2300      	movs	r3, #0
 8004772:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004774:	2300      	movs	r3, #0
 8004776:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004778:	4b79      	ldr	r3, [pc, #484]	; (8004960 <HAL_RCC_GetSysClockFreq+0x200>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f003 030c 	and.w	r3, r3, #12
 8004780:	2b08      	cmp	r3, #8
 8004782:	d00d      	beq.n	80047a0 <HAL_RCC_GetSysClockFreq+0x40>
 8004784:	2b08      	cmp	r3, #8
 8004786:	f200 80e1 	bhi.w	800494c <HAL_RCC_GetSysClockFreq+0x1ec>
 800478a:	2b00      	cmp	r3, #0
 800478c:	d002      	beq.n	8004794 <HAL_RCC_GetSysClockFreq+0x34>
 800478e:	2b04      	cmp	r3, #4
 8004790:	d003      	beq.n	800479a <HAL_RCC_GetSysClockFreq+0x3a>
 8004792:	e0db      	b.n	800494c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004794:	4b73      	ldr	r3, [pc, #460]	; (8004964 <HAL_RCC_GetSysClockFreq+0x204>)
 8004796:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004798:	e0db      	b.n	8004952 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800479a:	4b73      	ldr	r3, [pc, #460]	; (8004968 <HAL_RCC_GetSysClockFreq+0x208>)
 800479c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800479e:	e0d8      	b.n	8004952 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047a0:	4b6f      	ldr	r3, [pc, #444]	; (8004960 <HAL_RCC_GetSysClockFreq+0x200>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047a8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047aa:	4b6d      	ldr	r3, [pc, #436]	; (8004960 <HAL_RCC_GetSysClockFreq+0x200>)
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d063      	beq.n	800487e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047b6:	4b6a      	ldr	r3, [pc, #424]	; (8004960 <HAL_RCC_GetSysClockFreq+0x200>)
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	099b      	lsrs	r3, r3, #6
 80047bc:	2200      	movs	r2, #0
 80047be:	63bb      	str	r3, [r7, #56]	; 0x38
 80047c0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80047c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c8:	633b      	str	r3, [r7, #48]	; 0x30
 80047ca:	2300      	movs	r3, #0
 80047cc:	637b      	str	r3, [r7, #52]	; 0x34
 80047ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80047d2:	4622      	mov	r2, r4
 80047d4:	462b      	mov	r3, r5
 80047d6:	f04f 0000 	mov.w	r0, #0
 80047da:	f04f 0100 	mov.w	r1, #0
 80047de:	0159      	lsls	r1, r3, #5
 80047e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047e4:	0150      	lsls	r0, r2, #5
 80047e6:	4602      	mov	r2, r0
 80047e8:	460b      	mov	r3, r1
 80047ea:	4621      	mov	r1, r4
 80047ec:	1a51      	subs	r1, r2, r1
 80047ee:	6139      	str	r1, [r7, #16]
 80047f0:	4629      	mov	r1, r5
 80047f2:	eb63 0301 	sbc.w	r3, r3, r1
 80047f6:	617b      	str	r3, [r7, #20]
 80047f8:	f04f 0200 	mov.w	r2, #0
 80047fc:	f04f 0300 	mov.w	r3, #0
 8004800:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004804:	4659      	mov	r1, fp
 8004806:	018b      	lsls	r3, r1, #6
 8004808:	4651      	mov	r1, sl
 800480a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800480e:	4651      	mov	r1, sl
 8004810:	018a      	lsls	r2, r1, #6
 8004812:	4651      	mov	r1, sl
 8004814:	ebb2 0801 	subs.w	r8, r2, r1
 8004818:	4659      	mov	r1, fp
 800481a:	eb63 0901 	sbc.w	r9, r3, r1
 800481e:	f04f 0200 	mov.w	r2, #0
 8004822:	f04f 0300 	mov.w	r3, #0
 8004826:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800482a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800482e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004832:	4690      	mov	r8, r2
 8004834:	4699      	mov	r9, r3
 8004836:	4623      	mov	r3, r4
 8004838:	eb18 0303 	adds.w	r3, r8, r3
 800483c:	60bb      	str	r3, [r7, #8]
 800483e:	462b      	mov	r3, r5
 8004840:	eb49 0303 	adc.w	r3, r9, r3
 8004844:	60fb      	str	r3, [r7, #12]
 8004846:	f04f 0200 	mov.w	r2, #0
 800484a:	f04f 0300 	mov.w	r3, #0
 800484e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004852:	4629      	mov	r1, r5
 8004854:	024b      	lsls	r3, r1, #9
 8004856:	4621      	mov	r1, r4
 8004858:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800485c:	4621      	mov	r1, r4
 800485e:	024a      	lsls	r2, r1, #9
 8004860:	4610      	mov	r0, r2
 8004862:	4619      	mov	r1, r3
 8004864:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004866:	2200      	movs	r2, #0
 8004868:	62bb      	str	r3, [r7, #40]	; 0x28
 800486a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800486c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004870:	f7fb fcbc 	bl	80001ec <__aeabi_uldivmod>
 8004874:	4602      	mov	r2, r0
 8004876:	460b      	mov	r3, r1
 8004878:	4613      	mov	r3, r2
 800487a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800487c:	e058      	b.n	8004930 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800487e:	4b38      	ldr	r3, [pc, #224]	; (8004960 <HAL_RCC_GetSysClockFreq+0x200>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	099b      	lsrs	r3, r3, #6
 8004884:	2200      	movs	r2, #0
 8004886:	4618      	mov	r0, r3
 8004888:	4611      	mov	r1, r2
 800488a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800488e:	623b      	str	r3, [r7, #32]
 8004890:	2300      	movs	r3, #0
 8004892:	627b      	str	r3, [r7, #36]	; 0x24
 8004894:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004898:	4642      	mov	r2, r8
 800489a:	464b      	mov	r3, r9
 800489c:	f04f 0000 	mov.w	r0, #0
 80048a0:	f04f 0100 	mov.w	r1, #0
 80048a4:	0159      	lsls	r1, r3, #5
 80048a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048aa:	0150      	lsls	r0, r2, #5
 80048ac:	4602      	mov	r2, r0
 80048ae:	460b      	mov	r3, r1
 80048b0:	4641      	mov	r1, r8
 80048b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80048b6:	4649      	mov	r1, r9
 80048b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80048bc:	f04f 0200 	mov.w	r2, #0
 80048c0:	f04f 0300 	mov.w	r3, #0
 80048c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80048c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80048cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80048d0:	ebb2 040a 	subs.w	r4, r2, sl
 80048d4:	eb63 050b 	sbc.w	r5, r3, fp
 80048d8:	f04f 0200 	mov.w	r2, #0
 80048dc:	f04f 0300 	mov.w	r3, #0
 80048e0:	00eb      	lsls	r3, r5, #3
 80048e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048e6:	00e2      	lsls	r2, r4, #3
 80048e8:	4614      	mov	r4, r2
 80048ea:	461d      	mov	r5, r3
 80048ec:	4643      	mov	r3, r8
 80048ee:	18e3      	adds	r3, r4, r3
 80048f0:	603b      	str	r3, [r7, #0]
 80048f2:	464b      	mov	r3, r9
 80048f4:	eb45 0303 	adc.w	r3, r5, r3
 80048f8:	607b      	str	r3, [r7, #4]
 80048fa:	f04f 0200 	mov.w	r2, #0
 80048fe:	f04f 0300 	mov.w	r3, #0
 8004902:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004906:	4629      	mov	r1, r5
 8004908:	028b      	lsls	r3, r1, #10
 800490a:	4621      	mov	r1, r4
 800490c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004910:	4621      	mov	r1, r4
 8004912:	028a      	lsls	r2, r1, #10
 8004914:	4610      	mov	r0, r2
 8004916:	4619      	mov	r1, r3
 8004918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800491a:	2200      	movs	r2, #0
 800491c:	61bb      	str	r3, [r7, #24]
 800491e:	61fa      	str	r2, [r7, #28]
 8004920:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004924:	f7fb fc62 	bl	80001ec <__aeabi_uldivmod>
 8004928:	4602      	mov	r2, r0
 800492a:	460b      	mov	r3, r1
 800492c:	4613      	mov	r3, r2
 800492e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004930:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <HAL_RCC_GetSysClockFreq+0x200>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	0c1b      	lsrs	r3, r3, #16
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	3301      	adds	r3, #1
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004940:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004944:	fbb2 f3f3 	udiv	r3, r2, r3
 8004948:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800494a:	e002      	b.n	8004952 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800494c:	4b05      	ldr	r3, [pc, #20]	; (8004964 <HAL_RCC_GetSysClockFreq+0x204>)
 800494e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004950:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004954:	4618      	mov	r0, r3
 8004956:	3750      	adds	r7, #80	; 0x50
 8004958:	46bd      	mov	sp, r7
 800495a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800495e:	bf00      	nop
 8004960:	40023800 	.word	0x40023800
 8004964:	00f42400 	.word	0x00f42400
 8004968:	007a1200 	.word	0x007a1200

0800496c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004970:	4b03      	ldr	r3, [pc, #12]	; (8004980 <HAL_RCC_GetHCLKFreq+0x14>)
 8004972:	681b      	ldr	r3, [r3, #0]
}
 8004974:	4618      	mov	r0, r3
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	20000000 	.word	0x20000000

08004984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004988:	f7ff fff0 	bl	800496c <HAL_RCC_GetHCLKFreq>
 800498c:	4602      	mov	r2, r0
 800498e:	4b05      	ldr	r3, [pc, #20]	; (80049a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	0a9b      	lsrs	r3, r3, #10
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	4903      	ldr	r1, [pc, #12]	; (80049a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800499a:	5ccb      	ldrb	r3, [r1, r3]
 800499c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	40023800 	.word	0x40023800
 80049a8:	080062e0 	.word	0x080062e0

080049ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80049b0:	f7ff ffdc 	bl	800496c <HAL_RCC_GetHCLKFreq>
 80049b4:	4602      	mov	r2, r0
 80049b6:	4b05      	ldr	r3, [pc, #20]	; (80049cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	0b5b      	lsrs	r3, r3, #13
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	4903      	ldr	r1, [pc, #12]	; (80049d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049c2:	5ccb      	ldrb	r3, [r1, r3]
 80049c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40023800 	.word	0x40023800
 80049d0:	080062e0 	.word	0x080062e0

080049d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80049dc:	2300      	movs	r3, #0
 80049de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d10b      	bne.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d105      	bne.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d075      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a08:	4b91      	ldr	r3, [pc, #580]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a0e:	f7fd fe35 	bl	800267c <HAL_GetTick>
 8004a12:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a14:	e008      	b.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004a16:	f7fd fe31 	bl	800267c <HAL_GetTick>
 8004a1a:	4602      	mov	r2, r0
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d901      	bls.n	8004a28 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a24:	2303      	movs	r3, #3
 8004a26:	e189      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a28:	4b8a      	ldr	r3, [pc, #552]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1f0      	bne.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d009      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	019a      	lsls	r2, r3, #6
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	689b      	ldr	r3, [r3, #8]
 8004a4a:	071b      	lsls	r3, r3, #28
 8004a4c:	4981      	ldr	r1, [pc, #516]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d01f      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a60:	4b7c      	ldr	r3, [pc, #496]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a66:	0f1b      	lsrs	r3, r3, #28
 8004a68:	f003 0307 	and.w	r3, r3, #7
 8004a6c:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	019a      	lsls	r2, r3, #6
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	68db      	ldr	r3, [r3, #12]
 8004a78:	061b      	lsls	r3, r3, #24
 8004a7a:	431a      	orrs	r2, r3
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	071b      	lsls	r3, r3, #28
 8004a80:	4974      	ldr	r1, [pc, #464]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a82:	4313      	orrs	r3, r2
 8004a84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004a88:	4b72      	ldr	r3, [pc, #456]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a8e:	f023 021f 	bic.w	r2, r3, #31
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	69db      	ldr	r3, [r3, #28]
 8004a96:	3b01      	subs	r3, #1
 8004a98:	496e      	ldr	r1, [pc, #440]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00d      	beq.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	019a      	lsls	r2, r3, #6
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	061b      	lsls	r3, r3, #24
 8004ab8:	431a      	orrs	r2, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	689b      	ldr	r3, [r3, #8]
 8004abe:	071b      	lsls	r3, r3, #28
 8004ac0:	4964      	ldr	r1, [pc, #400]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004ac8:	4b61      	ldr	r3, [pc, #388]	; (8004c50 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004aca:	2201      	movs	r2, #1
 8004acc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004ace:	f7fd fdd5 	bl	800267c <HAL_GetTick>
 8004ad2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ad4:	e008      	b.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004ad6:	f7fd fdd1 	bl	800267c <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e129      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ae8:	4b5a      	ldr	r3, [pc, #360]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d0f0      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0304 	and.w	r3, r3, #4
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d105      	bne.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d079      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004b0c:	4b52      	ldr	r3, [pc, #328]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b12:	f7fd fdb3 	bl	800267c <HAL_GetTick>
 8004b16:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b18:	e008      	b.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004b1a:	f7fd fdaf 	bl	800267c <HAL_GetTick>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	1ad3      	subs	r3, r2, r3
 8004b24:	2b02      	cmp	r3, #2
 8004b26:	d901      	bls.n	8004b2c <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e107      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b2c:	4b49      	ldr	r3, [pc, #292]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b38:	d0ef      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f003 0304 	and.w	r3, r3, #4
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d020      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b46:	4b43      	ldr	r3, [pc, #268]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4c:	0f1b      	lsrs	r3, r3, #28
 8004b4e:	f003 0307 	and.w	r3, r3, #7
 8004b52:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	019a      	lsls	r2, r3, #6
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	061b      	lsls	r3, r3, #24
 8004b60:	431a      	orrs	r2, r3
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	071b      	lsls	r3, r3, #28
 8004b66:	493b      	ldr	r1, [pc, #236]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b6e:	4b39      	ldr	r3, [pc, #228]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b74:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a1b      	ldr	r3, [r3, #32]
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	021b      	lsls	r3, r3, #8
 8004b80:	4934      	ldr	r1, [pc, #208]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b82:	4313      	orrs	r3, r2
 8004b84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0308 	and.w	r3, r3, #8
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d01e      	beq.n	8004bd2 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b94:	4b2f      	ldr	r3, [pc, #188]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b9a:	0e1b      	lsrs	r3, r3, #24
 8004b9c:	f003 030f 	and.w	r3, r3, #15
 8004ba0:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	019a      	lsls	r2, r3, #6
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	061b      	lsls	r3, r3, #24
 8004bac:	431a      	orrs	r2, r3
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	699b      	ldr	r3, [r3, #24]
 8004bb2:	071b      	lsls	r3, r3, #28
 8004bb4:	4927      	ldr	r1, [pc, #156]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004bbc:	4b25      	ldr	r3, [pc, #148]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bc2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bca:	4922      	ldr	r1, [pc, #136]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004bd2:	4b21      	ldr	r3, [pc, #132]	; (8004c58 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004bd8:	f7fd fd50 	bl	800267c <HAL_GetTick>
 8004bdc:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bde:	e008      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8004be0:	f7fd fd4c 	bl	800267c <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	697b      	ldr	r3, [r7, #20]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d901      	bls.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e0a4      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bf2:	4b18      	ldr	r3, [pc, #96]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bfe:	d1ef      	bne.n	8004be0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0320 	and.w	r3, r3, #32
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f000 808b 	beq.w	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004c0e:	2300      	movs	r3, #0
 8004c10:	60fb      	str	r3, [r7, #12]
 8004c12:	4b10      	ldr	r3, [pc, #64]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c16:	4a0f      	ldr	r2, [pc, #60]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8004c1e:	4b0d      	ldr	r3, [pc, #52]	; (8004c54 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c26:	60fb      	str	r3, [r7, #12]
 8004c28:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004c2a:	4b0c      	ldr	r3, [pc, #48]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a0b      	ldr	r2, [pc, #44]	; (8004c5c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004c30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c34:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004c36:	f7fd fd21 	bl	800267c <HAL_GetTick>
 8004c3a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c3c:	e010      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004c3e:	f7fd fd1d 	bl	800267c <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d909      	bls.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e075      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x368>
 8004c50:	42470068 	.word	0x42470068
 8004c54:	40023800 	.word	0x40023800
 8004c58:	42470070 	.word	0x42470070
 8004c5c:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004c60:	4b38      	ldr	r3, [pc, #224]	; (8004d44 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d0e8      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004c6c:	4b36      	ldr	r3, [pc, #216]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c74:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d02f      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x308>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d028      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c8a:	4b2f      	ldr	r3, [pc, #188]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c92:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c94:	4b2d      	ldr	r3, [pc, #180]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004c96:	2201      	movs	r2, #1
 8004c98:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c9a:	4b2c      	ldr	r3, [pc, #176]	; (8004d4c <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004ca0:	4a29      	ldr	r2, [pc, #164]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ca6:	4b28      	ldr	r3, [pc, #160]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d114      	bne.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004cb2:	f7fd fce3 	bl	800267c <HAL_GetTick>
 8004cb6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cb8:	e00a      	b.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cba:	f7fd fcdf 	bl	800267c <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d901      	bls.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e035      	b.n	8004d3c <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cd0:	4b1d      	ldr	r3, [pc, #116]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d0ee      	beq.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ce4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ce8:	d10d      	bne.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8004cea:	4b17      	ldr	r3, [pc, #92]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cfe:	4912      	ldr	r1, [pc, #72]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	608b      	str	r3, [r1, #8]
 8004d04:	e005      	b.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8004d06:	4b10      	ldr	r3, [pc, #64]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	4a0f      	ldr	r2, [pc, #60]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d0c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004d10:	6093      	str	r3, [r2, #8]
 8004d12:	4b0d      	ldr	r3, [pc, #52]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d1e:	490a      	ldr	r1, [pc, #40]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8004d20:	4313      	orrs	r3, r2
 8004d22:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f003 0310 	and.w	r3, r3, #16
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d004      	beq.n	8004d3a <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004d36:	4b06      	ldr	r3, [pc, #24]	; (8004d50 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8004d38:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3718      	adds	r7, #24
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	40007000 	.word	0x40007000
 8004d48:	40023800 	.word	0x40023800
 8004d4c:	42470e40 	.word	0x42470e40
 8004d50:	424711e0 	.word	0x424711e0

08004d54 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b082      	sub	sp, #8
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d101      	bne.n	8004d68 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	e025      	b.n	8004db4 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004d6e:	b2db      	uxtb	r3, r3
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d106      	bne.n	8004d82 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f7fc fa33 	bl	80011e8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2202      	movs	r2, #2
 8004d86:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	3304      	adds	r3, #4
 8004d92:	4619      	mov	r1, r3
 8004d94:	4610      	mov	r0, r2
 8004d96:	f001 f90f 	bl	8005fb8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6818      	ldr	r0, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	461a      	mov	r2, r3
 8004da4:	6839      	ldr	r1, [r7, #0]
 8004da6:	f001 f964 	bl	8006072 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2201      	movs	r2, #1
 8004dae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3708      	adds	r7, #8
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}

08004dbc <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b086      	sub	sp, #24
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004dce:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8004dd0:	7dfb      	ldrb	r3, [r7, #23]
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d101      	bne.n	8004dda <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	e021      	b.n	8004e1e <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8004dda:	7dfb      	ldrb	r3, [r7, #23]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d002      	beq.n	8004de6 <HAL_SDRAM_SendCommand+0x2a>
 8004de0:	7dfb      	ldrb	r3, [r7, #23]
 8004de2:	2b05      	cmp	r3, #5
 8004de4:	d118      	bne.n	8004e18 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	2202      	movs	r2, #2
 8004dea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	68b9      	ldr	r1, [r7, #8]
 8004df6:	4618      	mov	r0, r3
 8004df8:	f001 f9a4 	bl	8006144 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d104      	bne.n	8004e0e <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2205      	movs	r2, #5
 8004e08:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004e0c:	e006      	b.n	8004e1c <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004e16:	e001      	b.n	8004e1c <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e000      	b.n	8004e1e <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3718      	adds	r7, #24
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b082      	sub	sp, #8
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
 8004e2e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d101      	bne.n	8004e40 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8004e3c:	2302      	movs	r3, #2
 8004e3e:	e016      	b.n	8004e6e <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d10f      	bne.n	8004e6c <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	6839      	ldr	r1, [r7, #0]
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f001 f9af 	bl	80061be <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2201      	movs	r2, #1
 8004e64:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	e000      	b.n	8004e6e <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3708      	adds	r7, #8
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}

08004e76 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e76:	b580      	push	{r7, lr}
 8004e78:	b082      	sub	sp, #8
 8004e7a:	af00      	add	r7, sp, #0
 8004e7c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d101      	bne.n	8004e88 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e07b      	b.n	8004f80 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d108      	bne.n	8004ea2 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e98:	d009      	beq.n	8004eae <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2200      	movs	r2, #0
 8004e9e:	61da      	str	r2, [r3, #28]
 8004ea0:	e005      	b.n	8004eae <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d106      	bne.n	8004ece <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f7fc f84d 	bl	8000f68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2202      	movs	r2, #2
 8004ed2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ee4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f00:	431a      	orrs	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	691b      	ldr	r3, [r3, #16]
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	431a      	orrs	r2, r3
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	f003 0301 	and.w	r3, r3, #1
 8004f14:	431a      	orrs	r2, r3
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f1e:	431a      	orrs	r2, r3
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f28:	431a      	orrs	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a1b      	ldr	r3, [r3, #32]
 8004f2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f32:	ea42 0103 	orr.w	r1, r2, r3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f3a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	430a      	orrs	r2, r1
 8004f44:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	0c1b      	lsrs	r3, r3, #16
 8004f4c:	f003 0104 	and.w	r1, r3, #4
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	f003 0210 	and.w	r2, r3, #16
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	430a      	orrs	r2, r1
 8004f5e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	69da      	ldr	r2, [r3, #28]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f6e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3708      	adds	r7, #8
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e01a      	b.n	8004fd0 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2202      	movs	r2, #2
 8004f9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fb0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7fc f820 	bl	8000ff8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3708      	adds	r7, #8
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b088      	sub	sp, #32
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	603b      	str	r3, [r7, #0]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d101      	bne.n	8004ffa <HAL_SPI_Transmit+0x22>
 8004ff6:	2302      	movs	r3, #2
 8004ff8:	e126      	b.n	8005248 <HAL_SPI_Transmit+0x270>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005002:	f7fd fb3b 	bl	800267c <HAL_GetTick>
 8005006:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005008:	88fb      	ldrh	r3, [r7, #6]
 800500a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005012:	b2db      	uxtb	r3, r3
 8005014:	2b01      	cmp	r3, #1
 8005016:	d002      	beq.n	800501e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005018:	2302      	movs	r3, #2
 800501a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800501c:	e10b      	b.n	8005236 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d002      	beq.n	800502a <HAL_SPI_Transmit+0x52>
 8005024:	88fb      	ldrh	r3, [r7, #6]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d102      	bne.n	8005030 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800502e:	e102      	b.n	8005236 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2203      	movs	r2, #3
 8005034:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	88fa      	ldrh	r2, [r7, #6]
 8005048:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	88fa      	ldrh	r2, [r7, #6]
 800504e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2200      	movs	r2, #0
 8005060:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2200      	movs	r2, #0
 800506c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005076:	d10f      	bne.n	8005098 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005086:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005096:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a2:	2b40      	cmp	r3, #64	; 0x40
 80050a4:	d007      	beq.n	80050b6 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050be:	d14b      	bne.n	8005158 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d002      	beq.n	80050ce <HAL_SPI_Transmit+0xf6>
 80050c8:	8afb      	ldrh	r3, [r7, #22]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d13e      	bne.n	800514c <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d2:	881a      	ldrh	r2, [r3, #0]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050de:	1c9a      	adds	r2, r3, #2
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	3b01      	subs	r3, #1
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80050f2:	e02b      	b.n	800514c <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	f003 0302 	and.w	r3, r3, #2
 80050fe:	2b02      	cmp	r3, #2
 8005100:	d112      	bne.n	8005128 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005106:	881a      	ldrh	r2, [r3, #0]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005112:	1c9a      	adds	r2, r3, #2
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800511c:	b29b      	uxth	r3, r3
 800511e:	3b01      	subs	r3, #1
 8005120:	b29a      	uxth	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	86da      	strh	r2, [r3, #54]	; 0x36
 8005126:	e011      	b.n	800514c <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005128:	f7fd faa8 	bl	800267c <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	429a      	cmp	r2, r3
 8005136:	d803      	bhi.n	8005140 <HAL_SPI_Transmit+0x168>
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800513e:	d102      	bne.n	8005146 <HAL_SPI_Transmit+0x16e>
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d102      	bne.n	800514c <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	77fb      	strb	r3, [r7, #31]
          goto error;
 800514a:	e074      	b.n	8005236 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005150:	b29b      	uxth	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1ce      	bne.n	80050f4 <HAL_SPI_Transmit+0x11c>
 8005156:	e04c      	b.n	80051f2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d002      	beq.n	8005166 <HAL_SPI_Transmit+0x18e>
 8005160:	8afb      	ldrh	r3, [r7, #22]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d140      	bne.n	80051e8 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	330c      	adds	r3, #12
 8005170:	7812      	ldrb	r2, [r2, #0]
 8005172:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005178:	1c5a      	adds	r2, r3, #1
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005182:	b29b      	uxth	r3, r3
 8005184:	3b01      	subs	r3, #1
 8005186:	b29a      	uxth	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800518c:	e02c      	b.n	80051e8 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f003 0302 	and.w	r3, r3, #2
 8005198:	2b02      	cmp	r3, #2
 800519a:	d113      	bne.n	80051c4 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	330c      	adds	r3, #12
 80051a6:	7812      	ldrb	r2, [r2, #0]
 80051a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ae:	1c5a      	adds	r2, r3, #1
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051b8:	b29b      	uxth	r3, r3
 80051ba:	3b01      	subs	r3, #1
 80051bc:	b29a      	uxth	r2, r3
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	86da      	strh	r2, [r3, #54]	; 0x36
 80051c2:	e011      	b.n	80051e8 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051c4:	f7fd fa5a 	bl	800267c <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	683a      	ldr	r2, [r7, #0]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d803      	bhi.n	80051dc <HAL_SPI_Transmit+0x204>
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051da:	d102      	bne.n	80051e2 <HAL_SPI_Transmit+0x20a>
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d102      	bne.n	80051e8 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80051e2:	2303      	movs	r3, #3
 80051e4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80051e6:	e026      	b.n	8005236 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1cd      	bne.n	800518e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80051f2:	69ba      	ldr	r2, [r7, #24]
 80051f4:	6839      	ldr	r1, [r7, #0]
 80051f6:	68f8      	ldr	r0, [r7, #12]
 80051f8:	f000 fbda 	bl	80059b0 <SPI_EndRxTxTransaction>
 80051fc:	4603      	mov	r3, r0
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d002      	beq.n	8005208 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2220      	movs	r2, #32
 8005206:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d10a      	bne.n	8005226 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005210:	2300      	movs	r3, #0
 8005212:	613b      	str	r3, [r7, #16]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	613b      	str	r3, [r7, #16]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	613b      	str	r3, [r7, #16]
 8005224:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800522a:	2b00      	cmp	r3, #0
 800522c:	d002      	beq.n	8005234 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	77fb      	strb	r3, [r7, #31]
 8005232:	e000      	b.n	8005236 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005234:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005246:	7ffb      	ldrb	r3, [r7, #31]
}
 8005248:	4618      	mov	r0, r3
 800524a:	3720      	adds	r7, #32
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}

08005250 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b088      	sub	sp, #32
 8005254:	af02      	add	r7, sp, #8
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	603b      	str	r3, [r7, #0]
 800525c:	4613      	mov	r3, r2
 800525e:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005260:	2300      	movs	r3, #0
 8005262:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800526c:	d112      	bne.n	8005294 <HAL_SPI_Receive+0x44>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10e      	bne.n	8005294 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2204      	movs	r2, #4
 800527a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800527e:	88fa      	ldrh	r2, [r7, #6]
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	9300      	str	r3, [sp, #0]
 8005284:	4613      	mov	r3, r2
 8005286:	68ba      	ldr	r2, [r7, #8]
 8005288:	68b9      	ldr	r1, [r7, #8]
 800528a:	68f8      	ldr	r0, [r7, #12]
 800528c:	f000 f8f1 	bl	8005472 <HAL_SPI_TransmitReceive>
 8005290:	4603      	mov	r3, r0
 8005292:	e0ea      	b.n	800546a <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800529a:	2b01      	cmp	r3, #1
 800529c:	d101      	bne.n	80052a2 <HAL_SPI_Receive+0x52>
 800529e:	2302      	movs	r3, #2
 80052a0:	e0e3      	b.n	800546a <HAL_SPI_Receive+0x21a>
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2201      	movs	r2, #1
 80052a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80052aa:	f7fd f9e7 	bl	800267c <HAL_GetTick>
 80052ae:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d002      	beq.n	80052c2 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80052bc:	2302      	movs	r3, #2
 80052be:	75fb      	strb	r3, [r7, #23]
    goto error;
 80052c0:	e0ca      	b.n	8005458 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d002      	beq.n	80052ce <HAL_SPI_Receive+0x7e>
 80052c8:	88fb      	ldrh	r3, [r7, #6]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d102      	bne.n	80052d4 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80052ce:	2301      	movs	r3, #1
 80052d0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80052d2:	e0c1      	b.n	8005458 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2204      	movs	r2, #4
 80052d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	68ba      	ldr	r2, [r7, #8]
 80052e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	88fa      	ldrh	r2, [r7, #6]
 80052ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	88fa      	ldrh	r2, [r7, #6]
 80052f2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2200      	movs	r2, #0
 80052f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2200      	movs	r2, #0
 80052fe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2200      	movs	r2, #0
 8005304:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	2200      	movs	r2, #0
 800530a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2200      	movs	r2, #0
 8005310:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800531a:	d10f      	bne.n	800533c <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800532a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800533a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005346:	2b40      	cmp	r3, #64	; 0x40
 8005348:	d007      	beq.n	800535a <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005358:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d162      	bne.n	8005428 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005362:	e02e      	b.n	80053c2 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b01      	cmp	r3, #1
 8005370:	d115      	bne.n	800539e <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f103 020c 	add.w	r2, r3, #12
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537e:	7812      	ldrb	r2, [r2, #0]
 8005380:	b2d2      	uxtb	r2, r2
 8005382:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005388:	1c5a      	adds	r2, r3, #1
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005392:	b29b      	uxth	r3, r3
 8005394:	3b01      	subs	r3, #1
 8005396:	b29a      	uxth	r2, r3
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800539c:	e011      	b.n	80053c2 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800539e:	f7fd f96d 	bl	800267c <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	683a      	ldr	r2, [r7, #0]
 80053aa:	429a      	cmp	r2, r3
 80053ac:	d803      	bhi.n	80053b6 <HAL_SPI_Receive+0x166>
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053b4:	d102      	bne.n	80053bc <HAL_SPI_Receive+0x16c>
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d102      	bne.n	80053c2 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80053bc:	2303      	movs	r3, #3
 80053be:	75fb      	strb	r3, [r7, #23]
          goto error;
 80053c0:	e04a      	b.n	8005458 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d1cb      	bne.n	8005364 <HAL_SPI_Receive+0x114>
 80053cc:	e031      	b.n	8005432 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f003 0301 	and.w	r3, r3, #1
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d113      	bne.n	8005404 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68da      	ldr	r2, [r3, #12]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e6:	b292      	uxth	r2, r2
 80053e8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ee:	1c9a      	adds	r2, r3, #2
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	3b01      	subs	r3, #1
 80053fc:	b29a      	uxth	r2, r3
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005402:	e011      	b.n	8005428 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005404:	f7fd f93a 	bl	800267c <HAL_GetTick>
 8005408:	4602      	mov	r2, r0
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	683a      	ldr	r2, [r7, #0]
 8005410:	429a      	cmp	r2, r3
 8005412:	d803      	bhi.n	800541c <HAL_SPI_Receive+0x1cc>
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800541a:	d102      	bne.n	8005422 <HAL_SPI_Receive+0x1d2>
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d102      	bne.n	8005428 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	75fb      	strb	r3, [r7, #23]
          goto error;
 8005426:	e017      	b.n	8005458 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800542c:	b29b      	uxth	r3, r3
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1cd      	bne.n	80053ce <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	6839      	ldr	r1, [r7, #0]
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f000 fa54 	bl	80058e4 <SPI_EndRxTransaction>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d002      	beq.n	8005448 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2220      	movs	r2, #32
 8005446:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800544c:	2b00      	cmp	r3, #0
 800544e:	d002      	beq.n	8005456 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	75fb      	strb	r3, [r7, #23]
 8005454:	e000      	b.n	8005458 <HAL_SPI_Receive+0x208>
  }

error :
 8005456:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2200      	movs	r2, #0
 8005464:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005468:	7dfb      	ldrb	r3, [r7, #23]
}
 800546a:	4618      	mov	r0, r3
 800546c:	3718      	adds	r7, #24
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005472:	b580      	push	{r7, lr}
 8005474:	b08c      	sub	sp, #48	; 0x30
 8005476:	af00      	add	r7, sp, #0
 8005478:	60f8      	str	r0, [r7, #12]
 800547a:	60b9      	str	r1, [r7, #8]
 800547c:	607a      	str	r2, [r7, #4]
 800547e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005480:	2301      	movs	r3, #1
 8005482:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005484:	2300      	movs	r3, #0
 8005486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005490:	2b01      	cmp	r3, #1
 8005492:	d101      	bne.n	8005498 <HAL_SPI_TransmitReceive+0x26>
 8005494:	2302      	movs	r3, #2
 8005496:	e18a      	b.n	80057ae <HAL_SPI_TransmitReceive+0x33c>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054a0:	f7fd f8ec 	bl	800267c <HAL_GetTick>
 80054a4:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80054b6:	887b      	ldrh	r3, [r7, #2]
 80054b8:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80054ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d00f      	beq.n	80054e2 <HAL_SPI_TransmitReceive+0x70>
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054c8:	d107      	bne.n	80054da <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d103      	bne.n	80054da <HAL_SPI_TransmitReceive+0x68>
 80054d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80054d6:	2b04      	cmp	r3, #4
 80054d8:	d003      	beq.n	80054e2 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80054da:	2302      	movs	r3, #2
 80054dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80054e0:	e15b      	b.n	800579a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d005      	beq.n	80054f4 <HAL_SPI_TransmitReceive+0x82>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <HAL_SPI_TransmitReceive+0x82>
 80054ee:	887b      	ldrh	r3, [r7, #2]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d103      	bne.n	80054fc <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80054fa:	e14e      	b.n	800579a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b04      	cmp	r3, #4
 8005506:	d003      	beq.n	8005510 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	2205      	movs	r2, #5
 800550c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2200      	movs	r2, #0
 8005514:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	887a      	ldrh	r2, [r7, #2]
 8005520:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	887a      	ldrh	r2, [r7, #2]
 8005526:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	68ba      	ldr	r2, [r7, #8]
 800552c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	887a      	ldrh	r2, [r7, #2]
 8005532:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	887a      	ldrh	r2, [r7, #2]
 8005538:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005550:	2b40      	cmp	r3, #64	; 0x40
 8005552:	d007      	beq.n	8005564 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	681a      	ldr	r2, [r3, #0]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005562:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800556c:	d178      	bne.n	8005660 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d002      	beq.n	800557c <HAL_SPI_TransmitReceive+0x10a>
 8005576:	8b7b      	ldrh	r3, [r7, #26]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d166      	bne.n	800564a <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005580:	881a      	ldrh	r2, [r3, #0]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800558c:	1c9a      	adds	r2, r3, #2
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005596:	b29b      	uxth	r3, r3
 8005598:	3b01      	subs	r3, #1
 800559a:	b29a      	uxth	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80055a0:	e053      	b.n	800564a <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	d11b      	bne.n	80055e8 <HAL_SPI_TransmitReceive+0x176>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055b4:	b29b      	uxth	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d016      	beq.n	80055e8 <HAL_SPI_TransmitReceive+0x176>
 80055ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d113      	bne.n	80055e8 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c4:	881a      	ldrh	r2, [r3, #0]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d0:	1c9a      	adds	r2, r3, #2
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80055da:	b29b      	uxth	r3, r3
 80055dc:	3b01      	subs	r3, #1
 80055de:	b29a      	uxth	r2, r3
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d119      	bne.n	800562a <HAL_SPI_TransmitReceive+0x1b8>
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d014      	beq.n	800562a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68da      	ldr	r2, [r3, #12]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560a:	b292      	uxth	r2, r2
 800560c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005612:	1c9a      	adds	r2, r3, #2
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800561c:	b29b      	uxth	r3, r3
 800561e:	3b01      	subs	r3, #1
 8005620:	b29a      	uxth	r2, r3
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005626:	2301      	movs	r3, #1
 8005628:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800562a:	f7fd f827 	bl	800267c <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005636:	429a      	cmp	r2, r3
 8005638:	d807      	bhi.n	800564a <HAL_SPI_TransmitReceive+0x1d8>
 800563a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005640:	d003      	beq.n	800564a <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8005642:	2303      	movs	r3, #3
 8005644:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005648:	e0a7      	b.n	800579a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800564e:	b29b      	uxth	r3, r3
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1a6      	bne.n	80055a2 <HAL_SPI_TransmitReceive+0x130>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005658:	b29b      	uxth	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1a1      	bne.n	80055a2 <HAL_SPI_TransmitReceive+0x130>
 800565e:	e07c      	b.n	800575a <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d002      	beq.n	800566e <HAL_SPI_TransmitReceive+0x1fc>
 8005668:	8b7b      	ldrh	r3, [r7, #26]
 800566a:	2b01      	cmp	r3, #1
 800566c:	d16b      	bne.n	8005746 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	330c      	adds	r3, #12
 8005678:	7812      	ldrb	r2, [r2, #0]
 800567a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005680:	1c5a      	adds	r2, r3, #1
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800568a:	b29b      	uxth	r3, r3
 800568c:	3b01      	subs	r3, #1
 800568e:	b29a      	uxth	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005694:	e057      	b.n	8005746 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f003 0302 	and.w	r3, r3, #2
 80056a0:	2b02      	cmp	r3, #2
 80056a2:	d11c      	bne.n	80056de <HAL_SPI_TransmitReceive+0x26c>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d017      	beq.n	80056de <HAL_SPI_TransmitReceive+0x26c>
 80056ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d114      	bne.n	80056de <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	330c      	adds	r3, #12
 80056be:	7812      	ldrb	r2, [r2, #0]
 80056c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c6:	1c5a      	adds	r2, r3, #1
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	3b01      	subs	r3, #1
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056da:	2300      	movs	r3, #0
 80056dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	f003 0301 	and.w	r3, r3, #1
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d119      	bne.n	8005720 <HAL_SPI_TransmitReceive+0x2ae>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d014      	beq.n	8005720 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68da      	ldr	r2, [r3, #12]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005700:	b2d2      	uxtb	r2, r2
 8005702:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005708:	1c5a      	adds	r2, r3, #1
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005712:	b29b      	uxth	r3, r3
 8005714:	3b01      	subs	r3, #1
 8005716:	b29a      	uxth	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800571c:	2301      	movs	r3, #1
 800571e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005720:	f7fc ffac 	bl	800267c <HAL_GetTick>
 8005724:	4602      	mov	r2, r0
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	1ad3      	subs	r3, r2, r3
 800572a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800572c:	429a      	cmp	r2, r3
 800572e:	d803      	bhi.n	8005738 <HAL_SPI_TransmitReceive+0x2c6>
 8005730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005732:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005736:	d102      	bne.n	800573e <HAL_SPI_TransmitReceive+0x2cc>
 8005738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800573a:	2b00      	cmp	r3, #0
 800573c:	d103      	bne.n	8005746 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8005744:	e029      	b.n	800579a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800574a:	b29b      	uxth	r3, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1a2      	bne.n	8005696 <HAL_SPI_TransmitReceive+0x224>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005754:	b29b      	uxth	r3, r3
 8005756:	2b00      	cmp	r3, #0
 8005758:	d19d      	bne.n	8005696 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800575a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800575c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800575e:	68f8      	ldr	r0, [r7, #12]
 8005760:	f000 f926 	bl	80059b0 <SPI_EndRxTxTransaction>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d006      	beq.n	8005778 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2220      	movs	r2, #32
 8005774:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005776:	e010      	b.n	800579a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10b      	bne.n	8005798 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005780:	2300      	movs	r3, #0
 8005782:	617b      	str	r3, [r7, #20]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	617b      	str	r3, [r7, #20]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	617b      	str	r3, [r7, #20]
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	e000      	b.n	800579a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8005798:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3730      	adds	r7, #48	; 0x30
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b083      	sub	sp, #12
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80057c4:	b2db      	uxtb	r3, r3
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
	...

080057d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b088      	sub	sp, #32
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	603b      	str	r3, [r7, #0]
 80057e0:	4613      	mov	r3, r2
 80057e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80057e4:	f7fc ff4a 	bl	800267c <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ec:	1a9b      	subs	r3, r3, r2
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	4413      	add	r3, r2
 80057f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80057f4:	f7fc ff42 	bl	800267c <HAL_GetTick>
 80057f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80057fa:	4b39      	ldr	r3, [pc, #228]	; (80058e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	015b      	lsls	r3, r3, #5
 8005800:	0d1b      	lsrs	r3, r3, #20
 8005802:	69fa      	ldr	r2, [r7, #28]
 8005804:	fb02 f303 	mul.w	r3, r2, r3
 8005808:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800580a:	e054      	b.n	80058b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005812:	d050      	beq.n	80058b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005814:	f7fc ff32 	bl	800267c <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	69fa      	ldr	r2, [r7, #28]
 8005820:	429a      	cmp	r2, r3
 8005822:	d902      	bls.n	800582a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d13d      	bne.n	80058a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005838:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005842:	d111      	bne.n	8005868 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800584c:	d004      	beq.n	8005858 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005856:	d107      	bne.n	8005868 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005866:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005870:	d10f      	bne.n	8005892 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005890:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e017      	b.n	80058d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d101      	bne.n	80058b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80058ac:	2300      	movs	r3, #0
 80058ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	3b01      	subs	r3, #1
 80058b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	689a      	ldr	r2, [r3, #8]
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	4013      	ands	r3, r2
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	bf0c      	ite	eq
 80058c6:	2301      	moveq	r3, #1
 80058c8:	2300      	movne	r3, #0
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	461a      	mov	r2, r3
 80058ce:	79fb      	ldrb	r3, [r7, #7]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d19b      	bne.n	800580c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3720      	adds	r7, #32
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	20000000 	.word	0x20000000

080058e4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af02      	add	r7, sp, #8
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058f8:	d111      	bne.n	800591e <SPI_EndRxTransaction+0x3a>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005902:	d004      	beq.n	800590e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800590c:	d107      	bne.n	800591e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800591c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005926:	d12a      	bne.n	800597e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	689b      	ldr	r3, [r3, #8]
 800592c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005930:	d012      	beq.n	8005958 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	9300      	str	r3, [sp, #0]
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	2200      	movs	r2, #0
 800593a:	2180      	movs	r1, #128	; 0x80
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f7ff ff49 	bl	80057d4 <SPI_WaitFlagStateUntilTimeout>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d02d      	beq.n	80059a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800594c:	f043 0220 	orr.w	r2, r3, #32
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005954:	2303      	movs	r3, #3
 8005956:	e026      	b.n	80059a6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	9300      	str	r3, [sp, #0]
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	2200      	movs	r2, #0
 8005960:	2101      	movs	r1, #1
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f7ff ff36 	bl	80057d4 <SPI_WaitFlagStateUntilTimeout>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d01a      	beq.n	80059a4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005972:	f043 0220 	orr.w	r2, r3, #32
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e013      	b.n	80059a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	9300      	str	r3, [sp, #0]
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	2200      	movs	r2, #0
 8005986:	2101      	movs	r1, #1
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f7ff ff23 	bl	80057d4 <SPI_WaitFlagStateUntilTimeout>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d007      	beq.n	80059a4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005998:	f043 0220 	orr.w	r2, r3, #32
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e000      	b.n	80059a6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3710      	adds	r7, #16
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
	...

080059b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b088      	sub	sp, #32
 80059b4:	af02      	add	r7, sp, #8
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80059bc:	4b1b      	ldr	r3, [pc, #108]	; (8005a2c <SPI_EndRxTxTransaction+0x7c>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a1b      	ldr	r2, [pc, #108]	; (8005a30 <SPI_EndRxTxTransaction+0x80>)
 80059c2:	fba2 2303 	umull	r2, r3, r2, r3
 80059c6:	0d5b      	lsrs	r3, r3, #21
 80059c8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80059cc:	fb02 f303 	mul.w	r3, r2, r3
 80059d0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059da:	d112      	bne.n	8005a02 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	9300      	str	r3, [sp, #0]
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	2200      	movs	r2, #0
 80059e4:	2180      	movs	r1, #128	; 0x80
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f7ff fef4 	bl	80057d4 <SPI_WaitFlagStateUntilTimeout>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d016      	beq.n	8005a20 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059f6:	f043 0220 	orr.w	r2, r3, #32
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e00f      	b.n	8005a22 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00a      	beq.n	8005a1e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	3b01      	subs	r3, #1
 8005a0c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a18:	2b80      	cmp	r3, #128	; 0x80
 8005a1a:	d0f2      	beq.n	8005a02 <SPI_EndRxTxTransaction+0x52>
 8005a1c:	e000      	b.n	8005a20 <SPI_EndRxTxTransaction+0x70>
        break;
 8005a1e:	bf00      	nop
  }

  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3718      	adds	r7, #24
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	20000000 	.word	0x20000000
 8005a30:	165e9f81 	.word	0x165e9f81

08005a34 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b082      	sub	sp, #8
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e03f      	b.n	8005ac6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d106      	bne.n	8005a60 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f7fb faea 	bl	8001034 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2224      	movs	r2, #36	; 0x24
 8005a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68da      	ldr	r2, [r3, #12]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a76:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 f829 	bl	8005ad0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	691a      	ldr	r2, [r3, #16]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a8c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	695a      	ldr	r2, [r3, #20]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a9c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68da      	ldr	r2, [r3, #12]
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005aac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2220      	movs	r2, #32
 8005ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3708      	adds	r7, #8
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
	...

08005ad0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ad0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ad4:	b0c0      	sub	sp, #256	; 0x100
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	691b      	ldr	r3, [r3, #16]
 8005ae4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aec:	68d9      	ldr	r1, [r3, #12]
 8005aee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	ea40 0301 	orr.w	r3, r0, r1
 8005af8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005afe:	689a      	ldr	r2, [r3, #8]
 8005b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	431a      	orrs	r2, r3
 8005b08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b14:	69db      	ldr	r3, [r3, #28]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005b28:	f021 010c 	bic.w	r1, r1, #12
 8005b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b36:	430b      	orrs	r3, r1
 8005b38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b4a:	6999      	ldr	r1, [r3, #24]
 8005b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	ea40 0301 	orr.w	r3, r0, r1
 8005b56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	4b8f      	ldr	r3, [pc, #572]	; (8005d9c <UART_SetConfig+0x2cc>)
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d005      	beq.n	8005b70 <UART_SetConfig+0xa0>
 8005b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	4b8d      	ldr	r3, [pc, #564]	; (8005da0 <UART_SetConfig+0x2d0>)
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d104      	bne.n	8005b7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b70:	f7fe ff1c 	bl	80049ac <HAL_RCC_GetPCLK2Freq>
 8005b74:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005b78:	e003      	b.n	8005b82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b7a:	f7fe ff03 	bl	8004984 <HAL_RCC_GetPCLK1Freq>
 8005b7e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b86:	69db      	ldr	r3, [r3, #28]
 8005b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b8c:	f040 810c 	bne.w	8005da8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b94:	2200      	movs	r2, #0
 8005b96:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005b9a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005b9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005ba2:	4622      	mov	r2, r4
 8005ba4:	462b      	mov	r3, r5
 8005ba6:	1891      	adds	r1, r2, r2
 8005ba8:	65b9      	str	r1, [r7, #88]	; 0x58
 8005baa:	415b      	adcs	r3, r3
 8005bac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005bae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005bb2:	4621      	mov	r1, r4
 8005bb4:	eb12 0801 	adds.w	r8, r2, r1
 8005bb8:	4629      	mov	r1, r5
 8005bba:	eb43 0901 	adc.w	r9, r3, r1
 8005bbe:	f04f 0200 	mov.w	r2, #0
 8005bc2:	f04f 0300 	mov.w	r3, #0
 8005bc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bd2:	4690      	mov	r8, r2
 8005bd4:	4699      	mov	r9, r3
 8005bd6:	4623      	mov	r3, r4
 8005bd8:	eb18 0303 	adds.w	r3, r8, r3
 8005bdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005be0:	462b      	mov	r3, r5
 8005be2:	eb49 0303 	adc.w	r3, r9, r3
 8005be6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005bf6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005bfa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005bfe:	460b      	mov	r3, r1
 8005c00:	18db      	adds	r3, r3, r3
 8005c02:	653b      	str	r3, [r7, #80]	; 0x50
 8005c04:	4613      	mov	r3, r2
 8005c06:	eb42 0303 	adc.w	r3, r2, r3
 8005c0a:	657b      	str	r3, [r7, #84]	; 0x54
 8005c0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005c10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005c14:	f7fa faea 	bl	80001ec <__aeabi_uldivmod>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	460b      	mov	r3, r1
 8005c1c:	4b61      	ldr	r3, [pc, #388]	; (8005da4 <UART_SetConfig+0x2d4>)
 8005c1e:	fba3 2302 	umull	r2, r3, r3, r2
 8005c22:	095b      	lsrs	r3, r3, #5
 8005c24:	011c      	lsls	r4, r3, #4
 8005c26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c30:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005c34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005c38:	4642      	mov	r2, r8
 8005c3a:	464b      	mov	r3, r9
 8005c3c:	1891      	adds	r1, r2, r2
 8005c3e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005c40:	415b      	adcs	r3, r3
 8005c42:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005c48:	4641      	mov	r1, r8
 8005c4a:	eb12 0a01 	adds.w	sl, r2, r1
 8005c4e:	4649      	mov	r1, r9
 8005c50:	eb43 0b01 	adc.w	fp, r3, r1
 8005c54:	f04f 0200 	mov.w	r2, #0
 8005c58:	f04f 0300 	mov.w	r3, #0
 8005c5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c68:	4692      	mov	sl, r2
 8005c6a:	469b      	mov	fp, r3
 8005c6c:	4643      	mov	r3, r8
 8005c6e:	eb1a 0303 	adds.w	r3, sl, r3
 8005c72:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005c76:	464b      	mov	r3, r9
 8005c78:	eb4b 0303 	adc.w	r3, fp, r3
 8005c7c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005c8c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005c90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005c94:	460b      	mov	r3, r1
 8005c96:	18db      	adds	r3, r3, r3
 8005c98:	643b      	str	r3, [r7, #64]	; 0x40
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	eb42 0303 	adc.w	r3, r2, r3
 8005ca0:	647b      	str	r3, [r7, #68]	; 0x44
 8005ca2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ca6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005caa:	f7fa fa9f 	bl	80001ec <__aeabi_uldivmod>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	4611      	mov	r1, r2
 8005cb4:	4b3b      	ldr	r3, [pc, #236]	; (8005da4 <UART_SetConfig+0x2d4>)
 8005cb6:	fba3 2301 	umull	r2, r3, r3, r1
 8005cba:	095b      	lsrs	r3, r3, #5
 8005cbc:	2264      	movs	r2, #100	; 0x64
 8005cbe:	fb02 f303 	mul.w	r3, r2, r3
 8005cc2:	1acb      	subs	r3, r1, r3
 8005cc4:	00db      	lsls	r3, r3, #3
 8005cc6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005cca:	4b36      	ldr	r3, [pc, #216]	; (8005da4 <UART_SetConfig+0x2d4>)
 8005ccc:	fba3 2302 	umull	r2, r3, r3, r2
 8005cd0:	095b      	lsrs	r3, r3, #5
 8005cd2:	005b      	lsls	r3, r3, #1
 8005cd4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005cd8:	441c      	add	r4, r3
 8005cda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cde:	2200      	movs	r2, #0
 8005ce0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ce4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005ce8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005cec:	4642      	mov	r2, r8
 8005cee:	464b      	mov	r3, r9
 8005cf0:	1891      	adds	r1, r2, r2
 8005cf2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005cf4:	415b      	adcs	r3, r3
 8005cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cf8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005cfc:	4641      	mov	r1, r8
 8005cfe:	1851      	adds	r1, r2, r1
 8005d00:	6339      	str	r1, [r7, #48]	; 0x30
 8005d02:	4649      	mov	r1, r9
 8005d04:	414b      	adcs	r3, r1
 8005d06:	637b      	str	r3, [r7, #52]	; 0x34
 8005d08:	f04f 0200 	mov.w	r2, #0
 8005d0c:	f04f 0300 	mov.w	r3, #0
 8005d10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005d14:	4659      	mov	r1, fp
 8005d16:	00cb      	lsls	r3, r1, #3
 8005d18:	4651      	mov	r1, sl
 8005d1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d1e:	4651      	mov	r1, sl
 8005d20:	00ca      	lsls	r2, r1, #3
 8005d22:	4610      	mov	r0, r2
 8005d24:	4619      	mov	r1, r3
 8005d26:	4603      	mov	r3, r0
 8005d28:	4642      	mov	r2, r8
 8005d2a:	189b      	adds	r3, r3, r2
 8005d2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005d30:	464b      	mov	r3, r9
 8005d32:	460a      	mov	r2, r1
 8005d34:	eb42 0303 	adc.w	r3, r2, r3
 8005d38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005d48:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005d4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005d50:	460b      	mov	r3, r1
 8005d52:	18db      	adds	r3, r3, r3
 8005d54:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d56:	4613      	mov	r3, r2
 8005d58:	eb42 0303 	adc.w	r3, r2, r3
 8005d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005d66:	f7fa fa41 	bl	80001ec <__aeabi_uldivmod>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	460b      	mov	r3, r1
 8005d6e:	4b0d      	ldr	r3, [pc, #52]	; (8005da4 <UART_SetConfig+0x2d4>)
 8005d70:	fba3 1302 	umull	r1, r3, r3, r2
 8005d74:	095b      	lsrs	r3, r3, #5
 8005d76:	2164      	movs	r1, #100	; 0x64
 8005d78:	fb01 f303 	mul.w	r3, r1, r3
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	00db      	lsls	r3, r3, #3
 8005d80:	3332      	adds	r3, #50	; 0x32
 8005d82:	4a08      	ldr	r2, [pc, #32]	; (8005da4 <UART_SetConfig+0x2d4>)
 8005d84:	fba2 2303 	umull	r2, r3, r2, r3
 8005d88:	095b      	lsrs	r3, r3, #5
 8005d8a:	f003 0207 	and.w	r2, r3, #7
 8005d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4422      	add	r2, r4
 8005d96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d98:	e105      	b.n	8005fa6 <UART_SetConfig+0x4d6>
 8005d9a:	bf00      	nop
 8005d9c:	40011000 	.word	0x40011000
 8005da0:	40011400 	.word	0x40011400
 8005da4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005da8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dac:	2200      	movs	r2, #0
 8005dae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005db2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005db6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005dba:	4642      	mov	r2, r8
 8005dbc:	464b      	mov	r3, r9
 8005dbe:	1891      	adds	r1, r2, r2
 8005dc0:	6239      	str	r1, [r7, #32]
 8005dc2:	415b      	adcs	r3, r3
 8005dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8005dc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005dca:	4641      	mov	r1, r8
 8005dcc:	1854      	adds	r4, r2, r1
 8005dce:	4649      	mov	r1, r9
 8005dd0:	eb43 0501 	adc.w	r5, r3, r1
 8005dd4:	f04f 0200 	mov.w	r2, #0
 8005dd8:	f04f 0300 	mov.w	r3, #0
 8005ddc:	00eb      	lsls	r3, r5, #3
 8005dde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005de2:	00e2      	lsls	r2, r4, #3
 8005de4:	4614      	mov	r4, r2
 8005de6:	461d      	mov	r5, r3
 8005de8:	4643      	mov	r3, r8
 8005dea:	18e3      	adds	r3, r4, r3
 8005dec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005df0:	464b      	mov	r3, r9
 8005df2:	eb45 0303 	adc.w	r3, r5, r3
 8005df6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e0a:	f04f 0200 	mov.w	r2, #0
 8005e0e:	f04f 0300 	mov.w	r3, #0
 8005e12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005e16:	4629      	mov	r1, r5
 8005e18:	008b      	lsls	r3, r1, #2
 8005e1a:	4621      	mov	r1, r4
 8005e1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e20:	4621      	mov	r1, r4
 8005e22:	008a      	lsls	r2, r1, #2
 8005e24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005e28:	f7fa f9e0 	bl	80001ec <__aeabi_uldivmod>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	460b      	mov	r3, r1
 8005e30:	4b60      	ldr	r3, [pc, #384]	; (8005fb4 <UART_SetConfig+0x4e4>)
 8005e32:	fba3 2302 	umull	r2, r3, r3, r2
 8005e36:	095b      	lsrs	r3, r3, #5
 8005e38:	011c      	lsls	r4, r3, #4
 8005e3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e3e:	2200      	movs	r2, #0
 8005e40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005e48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005e4c:	4642      	mov	r2, r8
 8005e4e:	464b      	mov	r3, r9
 8005e50:	1891      	adds	r1, r2, r2
 8005e52:	61b9      	str	r1, [r7, #24]
 8005e54:	415b      	adcs	r3, r3
 8005e56:	61fb      	str	r3, [r7, #28]
 8005e58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e5c:	4641      	mov	r1, r8
 8005e5e:	1851      	adds	r1, r2, r1
 8005e60:	6139      	str	r1, [r7, #16]
 8005e62:	4649      	mov	r1, r9
 8005e64:	414b      	adcs	r3, r1
 8005e66:	617b      	str	r3, [r7, #20]
 8005e68:	f04f 0200 	mov.w	r2, #0
 8005e6c:	f04f 0300 	mov.w	r3, #0
 8005e70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e74:	4659      	mov	r1, fp
 8005e76:	00cb      	lsls	r3, r1, #3
 8005e78:	4651      	mov	r1, sl
 8005e7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e7e:	4651      	mov	r1, sl
 8005e80:	00ca      	lsls	r2, r1, #3
 8005e82:	4610      	mov	r0, r2
 8005e84:	4619      	mov	r1, r3
 8005e86:	4603      	mov	r3, r0
 8005e88:	4642      	mov	r2, r8
 8005e8a:	189b      	adds	r3, r3, r2
 8005e8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005e90:	464b      	mov	r3, r9
 8005e92:	460a      	mov	r2, r1
 8005e94:	eb42 0303 	adc.w	r3, r2, r3
 8005e98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea0:	685b      	ldr	r3, [r3, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ea6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005ea8:	f04f 0200 	mov.w	r2, #0
 8005eac:	f04f 0300 	mov.w	r3, #0
 8005eb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005eb4:	4649      	mov	r1, r9
 8005eb6:	008b      	lsls	r3, r1, #2
 8005eb8:	4641      	mov	r1, r8
 8005eba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ebe:	4641      	mov	r1, r8
 8005ec0:	008a      	lsls	r2, r1, #2
 8005ec2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005ec6:	f7fa f991 	bl	80001ec <__aeabi_uldivmod>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	460b      	mov	r3, r1
 8005ece:	4b39      	ldr	r3, [pc, #228]	; (8005fb4 <UART_SetConfig+0x4e4>)
 8005ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8005ed4:	095b      	lsrs	r3, r3, #5
 8005ed6:	2164      	movs	r1, #100	; 0x64
 8005ed8:	fb01 f303 	mul.w	r3, r1, r3
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	011b      	lsls	r3, r3, #4
 8005ee0:	3332      	adds	r3, #50	; 0x32
 8005ee2:	4a34      	ldr	r2, [pc, #208]	; (8005fb4 <UART_SetConfig+0x4e4>)
 8005ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ee8:	095b      	lsrs	r3, r3, #5
 8005eea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005eee:	441c      	add	r4, r3
 8005ef0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	673b      	str	r3, [r7, #112]	; 0x70
 8005ef8:	677a      	str	r2, [r7, #116]	; 0x74
 8005efa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005efe:	4642      	mov	r2, r8
 8005f00:	464b      	mov	r3, r9
 8005f02:	1891      	adds	r1, r2, r2
 8005f04:	60b9      	str	r1, [r7, #8]
 8005f06:	415b      	adcs	r3, r3
 8005f08:	60fb      	str	r3, [r7, #12]
 8005f0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f0e:	4641      	mov	r1, r8
 8005f10:	1851      	adds	r1, r2, r1
 8005f12:	6039      	str	r1, [r7, #0]
 8005f14:	4649      	mov	r1, r9
 8005f16:	414b      	adcs	r3, r1
 8005f18:	607b      	str	r3, [r7, #4]
 8005f1a:	f04f 0200 	mov.w	r2, #0
 8005f1e:	f04f 0300 	mov.w	r3, #0
 8005f22:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f26:	4659      	mov	r1, fp
 8005f28:	00cb      	lsls	r3, r1, #3
 8005f2a:	4651      	mov	r1, sl
 8005f2c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f30:	4651      	mov	r1, sl
 8005f32:	00ca      	lsls	r2, r1, #3
 8005f34:	4610      	mov	r0, r2
 8005f36:	4619      	mov	r1, r3
 8005f38:	4603      	mov	r3, r0
 8005f3a:	4642      	mov	r2, r8
 8005f3c:	189b      	adds	r3, r3, r2
 8005f3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005f40:	464b      	mov	r3, r9
 8005f42:	460a      	mov	r2, r1
 8005f44:	eb42 0303 	adc.w	r3, r2, r3
 8005f48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	663b      	str	r3, [r7, #96]	; 0x60
 8005f54:	667a      	str	r2, [r7, #100]	; 0x64
 8005f56:	f04f 0200 	mov.w	r2, #0
 8005f5a:	f04f 0300 	mov.w	r3, #0
 8005f5e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005f62:	4649      	mov	r1, r9
 8005f64:	008b      	lsls	r3, r1, #2
 8005f66:	4641      	mov	r1, r8
 8005f68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f6c:	4641      	mov	r1, r8
 8005f6e:	008a      	lsls	r2, r1, #2
 8005f70:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005f74:	f7fa f93a 	bl	80001ec <__aeabi_uldivmod>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	4b0d      	ldr	r3, [pc, #52]	; (8005fb4 <UART_SetConfig+0x4e4>)
 8005f7e:	fba3 1302 	umull	r1, r3, r3, r2
 8005f82:	095b      	lsrs	r3, r3, #5
 8005f84:	2164      	movs	r1, #100	; 0x64
 8005f86:	fb01 f303 	mul.w	r3, r1, r3
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	011b      	lsls	r3, r3, #4
 8005f8e:	3332      	adds	r3, #50	; 0x32
 8005f90:	4a08      	ldr	r2, [pc, #32]	; (8005fb4 <UART_SetConfig+0x4e4>)
 8005f92:	fba2 2303 	umull	r2, r3, r2, r3
 8005f96:	095b      	lsrs	r3, r3, #5
 8005f98:	f003 020f 	and.w	r2, r3, #15
 8005f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4422      	add	r2, r4
 8005fa4:	609a      	str	r2, [r3, #8]
}
 8005fa6:	bf00      	nop
 8005fa8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005fac:	46bd      	mov	sp, r7
 8005fae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fb2:	bf00      	nop
 8005fb4:	51eb851f 	.word	0x51eb851f

08005fb8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d123      	bne.n	8006012 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005fd2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005fd6:	683a      	ldr	r2, [r7, #0]
 8005fd8:	6851      	ldr	r1, [r2, #4]
 8005fda:	683a      	ldr	r2, [r7, #0]
 8005fdc:	6892      	ldr	r2, [r2, #8]
 8005fde:	4311      	orrs	r1, r2
 8005fe0:	683a      	ldr	r2, [r7, #0]
 8005fe2:	68d2      	ldr	r2, [r2, #12]
 8005fe4:	4311      	orrs	r1, r2
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	6912      	ldr	r2, [r2, #16]
 8005fea:	4311      	orrs	r1, r2
 8005fec:	683a      	ldr	r2, [r7, #0]
 8005fee:	6952      	ldr	r2, [r2, #20]
 8005ff0:	4311      	orrs	r1, r2
 8005ff2:	683a      	ldr	r2, [r7, #0]
 8005ff4:	6992      	ldr	r2, [r2, #24]
 8005ff6:	4311      	orrs	r1, r2
 8005ff8:	683a      	ldr	r2, [r7, #0]
 8005ffa:	69d2      	ldr	r2, [r2, #28]
 8005ffc:	4311      	orrs	r1, r2
 8005ffe:	683a      	ldr	r2, [r7, #0]
 8006000:	6a12      	ldr	r2, [r2, #32]
 8006002:	4311      	orrs	r1, r2
 8006004:	683a      	ldr	r2, [r7, #0]
 8006006:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006008:	430a      	orrs	r2, r1
 800600a:	431a      	orrs	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	601a      	str	r2, [r3, #0]
 8006010:	e028      	b.n	8006064 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	69d9      	ldr	r1, [r3, #28]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	6a1b      	ldr	r3, [r3, #32]
 8006022:	4319      	orrs	r1, r3
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006028:	430b      	orrs	r3, r1
 800602a:	431a      	orrs	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006038:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800603c:	683a      	ldr	r2, [r7, #0]
 800603e:	6851      	ldr	r1, [r2, #4]
 8006040:	683a      	ldr	r2, [r7, #0]
 8006042:	6892      	ldr	r2, [r2, #8]
 8006044:	4311      	orrs	r1, r2
 8006046:	683a      	ldr	r2, [r7, #0]
 8006048:	68d2      	ldr	r2, [r2, #12]
 800604a:	4311      	orrs	r1, r2
 800604c:	683a      	ldr	r2, [r7, #0]
 800604e:	6912      	ldr	r2, [r2, #16]
 8006050:	4311      	orrs	r1, r2
 8006052:	683a      	ldr	r2, [r7, #0]
 8006054:	6952      	ldr	r2, [r2, #20]
 8006056:	4311      	orrs	r1, r2
 8006058:	683a      	ldr	r2, [r7, #0]
 800605a:	6992      	ldr	r2, [r2, #24]
 800605c:	430a      	orrs	r2, r1
 800605e:	431a      	orrs	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	370c      	adds	r7, #12
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr

08006072 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006072:	b480      	push	{r7}
 8006074:	b085      	sub	sp, #20
 8006076:	af00      	add	r7, sp, #0
 8006078:	60f8      	str	r0, [r7, #12]
 800607a:	60b9      	str	r1, [r7, #8]
 800607c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d128      	bne.n	80060d6 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	689b      	ldr	r3, [r3, #8]
 8006088:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	1e59      	subs	r1, r3, #1
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	3b01      	subs	r3, #1
 8006098:	011b      	lsls	r3, r3, #4
 800609a:	4319      	orrs	r1, r3
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	689b      	ldr	r3, [r3, #8]
 80060a0:	3b01      	subs	r3, #1
 80060a2:	021b      	lsls	r3, r3, #8
 80060a4:	4319      	orrs	r1, r3
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	68db      	ldr	r3, [r3, #12]
 80060aa:	3b01      	subs	r3, #1
 80060ac:	031b      	lsls	r3, r3, #12
 80060ae:	4319      	orrs	r1, r3
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	691b      	ldr	r3, [r3, #16]
 80060b4:	3b01      	subs	r3, #1
 80060b6:	041b      	lsls	r3, r3, #16
 80060b8:	4319      	orrs	r1, r3
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	3b01      	subs	r3, #1
 80060c0:	051b      	lsls	r3, r3, #20
 80060c2:	4319      	orrs	r1, r3
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	699b      	ldr	r3, [r3, #24]
 80060c8:	3b01      	subs	r3, #1
 80060ca:	061b      	lsls	r3, r3, #24
 80060cc:	430b      	orrs	r3, r1
 80060ce:	431a      	orrs	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	609a      	str	r2, [r3, #8]
 80060d4:	e02f      	b.n	8006136 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80060de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	68d2      	ldr	r2, [r2, #12]
 80060e6:	3a01      	subs	r2, #1
 80060e8:	0311      	lsls	r1, r2, #12
 80060ea:	68ba      	ldr	r2, [r7, #8]
 80060ec:	6952      	ldr	r2, [r2, #20]
 80060ee:	3a01      	subs	r2, #1
 80060f0:	0512      	lsls	r2, r2, #20
 80060f2:	430a      	orrs	r2, r1
 80060f4:	431a      	orrs	r2, r3
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	1e59      	subs	r1, r3, #1
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	3b01      	subs	r3, #1
 800610e:	011b      	lsls	r3, r3, #4
 8006110:	4319      	orrs	r1, r3
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	3b01      	subs	r3, #1
 8006118:	021b      	lsls	r3, r3, #8
 800611a:	4319      	orrs	r1, r3
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	691b      	ldr	r3, [r3, #16]
 8006120:	3b01      	subs	r3, #1
 8006122:	041b      	lsls	r3, r3, #16
 8006124:	4319      	orrs	r1, r3
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	699b      	ldr	r3, [r3, #24]
 800612a:	3b01      	subs	r3, #1
 800612c:	061b      	lsls	r3, r3, #24
 800612e:	430b      	orrs	r3, r1
 8006130:	431a      	orrs	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3714      	adds	r7, #20
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b086      	sub	sp, #24
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8006150:	2300      	movs	r3, #0
 8006152:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	0d9b      	lsrs	r3, r3, #22
 800615a:	059b      	lsls	r3, r3, #22
 800615c:	68ba      	ldr	r2, [r7, #8]
 800615e:	6811      	ldr	r1, [r2, #0]
 8006160:	68ba      	ldr	r2, [r7, #8]
 8006162:	6852      	ldr	r2, [r2, #4]
 8006164:	4311      	orrs	r1, r2
 8006166:	68ba      	ldr	r2, [r7, #8]
 8006168:	6892      	ldr	r2, [r2, #8]
 800616a:	3a01      	subs	r2, #1
 800616c:	0152      	lsls	r2, r2, #5
 800616e:	4311      	orrs	r1, r2
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	68d2      	ldr	r2, [r2, #12]
 8006174:	0252      	lsls	r2, r2, #9
 8006176:	430a      	orrs	r2, r1
 8006178:	431a      	orrs	r2, r3
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800617e:	f7fc fa7d 	bl	800267c <HAL_GetTick>
 8006182:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8006184:	e010      	b.n	80061a8 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800618c:	d00c      	beq.n	80061a8 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d007      	beq.n	80061a4 <FMC_SDRAM_SendCommand+0x60>
 8006194:	f7fc fa72 	bl	800267c <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	697b      	ldr	r3, [r7, #20]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	687a      	ldr	r2, [r7, #4]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d201      	bcs.n	80061a8 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 80061a4:	2303      	movs	r3, #3
 80061a6:	e006      	b.n	80061b6 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	699b      	ldr	r3, [r3, #24]
 80061ac:	f003 0320 	and.w	r3, r3, #32
 80061b0:	2b20      	cmp	r3, #32
 80061b2:	d0e8      	beq.n	8006186 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3718      	adds	r7, #24
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}

080061be <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80061be:	b480      	push	{r7}
 80061c0:	b083      	sub	sp, #12
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
 80061c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	695b      	ldr	r3, [r3, #20]
 80061cc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80061d0:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 80061d4:	683a      	ldr	r2, [r7, #0]
 80061d6:	0052      	lsls	r2, r2, #1
 80061d8:	431a      	orrs	r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <__libc_init_array>:
 80061ec:	b570      	push	{r4, r5, r6, lr}
 80061ee:	4d0d      	ldr	r5, [pc, #52]	; (8006224 <__libc_init_array+0x38>)
 80061f0:	4c0d      	ldr	r4, [pc, #52]	; (8006228 <__libc_init_array+0x3c>)
 80061f2:	1b64      	subs	r4, r4, r5
 80061f4:	10a4      	asrs	r4, r4, #2
 80061f6:	2600      	movs	r6, #0
 80061f8:	42a6      	cmp	r6, r4
 80061fa:	d109      	bne.n	8006210 <__libc_init_array+0x24>
 80061fc:	4d0b      	ldr	r5, [pc, #44]	; (800622c <__libc_init_array+0x40>)
 80061fe:	4c0c      	ldr	r4, [pc, #48]	; (8006230 <__libc_init_array+0x44>)
 8006200:	f000 f820 	bl	8006244 <_init>
 8006204:	1b64      	subs	r4, r4, r5
 8006206:	10a4      	asrs	r4, r4, #2
 8006208:	2600      	movs	r6, #0
 800620a:	42a6      	cmp	r6, r4
 800620c:	d105      	bne.n	800621a <__libc_init_array+0x2e>
 800620e:	bd70      	pop	{r4, r5, r6, pc}
 8006210:	f855 3b04 	ldr.w	r3, [r5], #4
 8006214:	4798      	blx	r3
 8006216:	3601      	adds	r6, #1
 8006218:	e7ee      	b.n	80061f8 <__libc_init_array+0xc>
 800621a:	f855 3b04 	ldr.w	r3, [r5], #4
 800621e:	4798      	blx	r3
 8006220:	3601      	adds	r6, #1
 8006222:	e7f2      	b.n	800620a <__libc_init_array+0x1e>
 8006224:	080090fc 	.word	0x080090fc
 8006228:	080090fc 	.word	0x080090fc
 800622c:	080090fc 	.word	0x080090fc
 8006230:	08009100 	.word	0x08009100

08006234 <memset>:
 8006234:	4402      	add	r2, r0
 8006236:	4603      	mov	r3, r0
 8006238:	4293      	cmp	r3, r2
 800623a:	d100      	bne.n	800623e <memset+0xa>
 800623c:	4770      	bx	lr
 800623e:	f803 1b01 	strb.w	r1, [r3], #1
 8006242:	e7f9      	b.n	8006238 <memset+0x4>

08006244 <_init>:
 8006244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006246:	bf00      	nop
 8006248:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800624a:	bc08      	pop	{r3}
 800624c:	469e      	mov	lr, r3
 800624e:	4770      	bx	lr

08006250 <_fini>:
 8006250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006252:	bf00      	nop
 8006254:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006256:	bc08      	pop	{r3}
 8006258:	469e      	mov	lr, r3
 800625a:	4770      	bx	lr
