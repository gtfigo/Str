
BELIVE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f1fc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ba8  0800f3ac  0800f3ac  0001f3ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010f54  08010f54  000300dc  2**0
                  CONTENTS
  4 .ARM          00000008  08010f54  08010f54  00020f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010f5c  08010f5c  000300dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010f5c  08010f5c  00020f5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010f60  08010f60  00020f60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  08010f64  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000300dc  2**0
                  CONTENTS
 10 .bss          00009004  200000dc  200000dc  000300dc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200090e0  200090e0  000300dc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000300dc  2**0
                  CONTENTS, READONLY
 13 .debug_info   00032677  00000000  00000000  0003010c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000068fa  00000000  00000000  00062783  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000027c8  00000000  00000000  00069080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002538  00000000  00000000  0006b848  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002df5a  00000000  00000000  0006dd80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00030274  00000000  00000000  0009bcda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fe1c8  00000000  00000000  000cbf4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001ca116  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000ac94  00000000  00000000  001ca168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f394 	.word	0x0800f394

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000e0 	.word	0x200000e0
 80001ec:	0800f394 	.word	0x0800f394

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005a2:	b480      	push	{r7}
 80005a4:	b083      	sub	sp, #12
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	6078      	str	r0, [r7, #4]
 80005aa:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr

080005b8 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
	...

080005c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	60f8      	str	r0, [r7, #12]
 80005d0:	60b9      	str	r1, [r7, #8]
 80005d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	4a07      	ldr	r2, [pc, #28]	; (80005f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80005d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	4a06      	ldr	r2, [pc, #24]	; (80005f8 <vApplicationGetIdleTaskMemory+0x30>)
 80005de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	2280      	movs	r2, #128	; 0x80
 80005e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005e6:	bf00      	nop
 80005e8:	3714      	adds	r7, #20
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	200000f8 	.word	0x200000f8
 80005f8:	20000150 	.word	0x20000150

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b5b0      	push	{r4, r5, r7, lr}
 80005fe:	b08e      	sub	sp, #56	; 0x38
 8000600:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	EEPROM_Data_TypeDef eeprom_data;
	eeprom_data.data1 = 0x12345678;
 8000602:	4b36      	ldr	r3, [pc, #216]	; (80006dc <main+0xe0>)
 8000604:	623b      	str	r3, [r7, #32]
//	HAL_FLASHEx_DATAEEPROM_Unlock(); //Unlock the EEPROM interface
	uint32_t address = EEPROM_START_ADDRESS; //Set the EEPROM start address
 8000606:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <main+0xe4>)
 8000608:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800060a:	f001 ffcd 	bl	80025a8 <HAL_Init>

  /* USER CODE BEGIN Init */


  eeprom_data.data1 = *(__IO uint32_t*)address; //Read the first word of data
 800060e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	623b      	str	r3, [r7, #32]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000614:	f000 f87a 	bl	800070c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000618:	f000 fb44 	bl	8000ca4 <MX_GPIO_Init>
  MX_CRC_Init();
 800061c:	f000 f8e2 	bl	80007e4 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000620:	f000 f8f4 	bl	800080c <MX_DMA2D_Init>
  MX_FMC_Init();
 8000624:	f000 faee 	bl	8000c04 <MX_FMC_Init>
  MX_I2C3_Init();
 8000628:	f000 f922 	bl	8000870 <MX_I2C3_Init>
  MX_LTDC_Init();
 800062c:	f000 f960 	bl	80008f0 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000630:	f000 fa38 	bl	8000aa4 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000634:	f000 fa6c 	bl	8000b10 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000638:	f000 faba 	bl	8000bb0 <MX_USART1_UART_Init>
  MX_RTC_Init();
 800063c:	f000 f9d8 	bl	80009f0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  BSP_LCD_Init();
 8000640:	f001 fc8e 	bl	8001f60 <BSP_LCD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8000644:	4b27      	ldr	r3, [pc, #156]	; (80006e4 <main+0xe8>)
 8000646:	1d3c      	adds	r4, r7, #4
 8000648:	461d      	mov	r5, r3
 800064a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800064c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800064e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000652:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000656:	1d3b      	adds	r3, r7, #4
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f00b fc6d 	bl	800bf3a <osThreadCreate>
 8000660:	4603      	mov	r3, r0
 8000662:	4a21      	ldr	r2, [pc, #132]	; (80006e8 <main+0xec>)
 8000664:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000666:	f00b fc61 	bl	800bf2c <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800066a:	2200      	movs	r2, #0
 800066c:	491f      	ldr	r1, [pc, #124]	; (80006ec <main+0xf0>)
 800066e:	4820      	ldr	r0, [pc, #128]	; (80006f0 <main+0xf4>)
 8000670:	f006 f846 	bl	8006700 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000674:	2200      	movs	r2, #0
 8000676:	491f      	ldr	r1, [pc, #124]	; (80006f4 <main+0xf8>)
 8000678:	481d      	ldr	r0, [pc, #116]	; (80006f0 <main+0xf4>)
 800067a:	f006 f923 	bl	80068c4 <HAL_RTC_GetDate>


	  sprintf(date,"Date: %02d.%02d.%02d\t",sDate.Date,sDate.Month,sDate.Year);
 800067e:	4b1d      	ldr	r3, [pc, #116]	; (80006f4 <main+0xf8>)
 8000680:	789b      	ldrb	r3, [r3, #2]
 8000682:	461a      	mov	r2, r3
 8000684:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <main+0xf8>)
 8000686:	785b      	ldrb	r3, [r3, #1]
 8000688:	4619      	mov	r1, r3
 800068a:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <main+0xf8>)
 800068c:	78db      	ldrb	r3, [r3, #3]
 800068e:	9300      	str	r3, [sp, #0]
 8000690:	460b      	mov	r3, r1
 8000692:	4919      	ldr	r1, [pc, #100]	; (80006f8 <main+0xfc>)
 8000694:	4819      	ldr	r0, [pc, #100]	; (80006fc <main+0x100>)
 8000696:	f00e fb0d 	bl	800ecb4 <siprintf>
	  sprintf(time,"Time: %02d.%02d.%02d\r\n",sTime.Hours,sTime.Minutes,sTime.Seconds);
 800069a:	4b14      	ldr	r3, [pc, #80]	; (80006ec <main+0xf0>)
 800069c:	781b      	ldrb	r3, [r3, #0]
 800069e:	461a      	mov	r2, r3
 80006a0:	4b12      	ldr	r3, [pc, #72]	; (80006ec <main+0xf0>)
 80006a2:	785b      	ldrb	r3, [r3, #1]
 80006a4:	4619      	mov	r1, r3
 80006a6:	4b11      	ldr	r3, [pc, #68]	; (80006ec <main+0xf0>)
 80006a8:	789b      	ldrb	r3, [r3, #2]
 80006aa:	9300      	str	r3, [sp, #0]
 80006ac:	460b      	mov	r3, r1
 80006ae:	4914      	ldr	r1, [pc, #80]	; (8000700 <main+0x104>)
 80006b0:	4814      	ldr	r0, [pc, #80]	; (8000704 <main+0x108>)
 80006b2:	f00e faff 	bl	800ecb4 <siprintf>



	  HAL_UART_Transmit(&huart1, (uint8_t *)date, sizeof(date), 300);
 80006b6:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80006ba:	221e      	movs	r2, #30
 80006bc:	490f      	ldr	r1, [pc, #60]	; (80006fc <main+0x100>)
 80006be:	4812      	ldr	r0, [pc, #72]	; (8000708 <main+0x10c>)
 80006c0:	f007 fd4b 	bl	800815a <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, (uint8_t *)time, sizeof(time), 300);
 80006c4:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80006c8:	221e      	movs	r2, #30
 80006ca:	490e      	ldr	r1, [pc, #56]	; (8000704 <main+0x108>)
 80006cc:	480e      	ldr	r0, [pc, #56]	; (8000708 <main+0x10c>)
 80006ce:	f007 fd44 	bl	800815a <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80006d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006d6:	f001 ffa9 	bl	800262c <HAL_Delay>
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80006da:	e7c6      	b.n	800066a <main+0x6e>
 80006dc:	12345678 	.word	0x12345678
 80006e0:	08080000 	.word	0x08080000
 80006e4:	0800f3e8 	.word	0x0800f3e8
 80006e8:	200005cc 	.word	0x200005cc
 80006ec:	20000610 	.word	0x20000610
 80006f0:	20000494 	.word	0x20000494
 80006f4:	20000624 	.word	0x20000624
 80006f8:	0800f3b8 	.word	0x0800f3b8
 80006fc:	200005f0 	.word	0x200005f0
 8000700:	0800f3d0 	.word	0x0800f3d0
 8000704:	200005d0 	.word	0x200005d0
 8000708:	20000554 	.word	0x20000554

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b094      	sub	sp, #80	; 0x50
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 0320 	add.w	r3, r7, #32
 8000716:	2230      	movs	r2, #48	; 0x30
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f00e f9d2 	bl	800eac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	f107 030c 	add.w	r3, r7, #12
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000730:	2300      	movs	r3, #0
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	4b29      	ldr	r3, [pc, #164]	; (80007dc <SystemClock_Config+0xd0>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000738:	4a28      	ldr	r2, [pc, #160]	; (80007dc <SystemClock_Config+0xd0>)
 800073a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800073e:	6413      	str	r3, [r2, #64]	; 0x40
 8000740:	4b26      	ldr	r3, [pc, #152]	; (80007dc <SystemClock_Config+0xd0>)
 8000742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800074c:	2300      	movs	r3, #0
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	4b23      	ldr	r3, [pc, #140]	; (80007e0 <SystemClock_Config+0xd4>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000758:	4a21      	ldr	r2, [pc, #132]	; (80007e0 <SystemClock_Config+0xd4>)
 800075a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075e:	6013      	str	r3, [r2, #0]
 8000760:	4b1f      	ldr	r3, [pc, #124]	; (80007e0 <SystemClock_Config+0xd4>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000768:	607b      	str	r3, [r7, #4]
 800076a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800076c:	2309      	movs	r3, #9
 800076e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000770:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000776:	2301      	movs	r3, #1
 8000778:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077a:	2302      	movs	r3, #2
 800077c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800077e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000782:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000784:	2304      	movs	r3, #4
 8000786:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000788:	2348      	movs	r3, #72	; 0x48
 800078a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800078c:	2302      	movs	r3, #2
 800078e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000790:	2303      	movs	r3, #3
 8000792:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000794:	f107 0320 	add.w	r3, r7, #32
 8000798:	4618      	mov	r0, r3
 800079a:	f005 f817 	bl	80057cc <HAL_RCC_OscConfig>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80007a4:	f000 fbaa 	bl	8000efc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a8:	230f      	movs	r3, #15
 80007aa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ac:	2302      	movs	r3, #2
 80007ae:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007be:	f107 030c 	add.w	r3, r7, #12
 80007c2:	2102      	movs	r1, #2
 80007c4:	4618      	mov	r0, r3
 80007c6:	f005 fa79 	bl	8005cbc <HAL_RCC_ClockConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80007d0:	f000 fb94 	bl	8000efc <Error_Handler>
  }
}
 80007d4:	bf00      	nop
 80007d6:	3750      	adds	r7, #80	; 0x50
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40007000 	.word	0x40007000

080007e4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MX_CRC_Init+0x20>)
 80007ea:	4a07      	ldr	r2, [pc, #28]	; (8000808 <MX_CRC_Init+0x24>)
 80007ec:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_CRC_Init+0x20>)
 80007f0:	f002 f822 	bl	8002838 <HAL_CRC_Init>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80007fa:	f000 fb7f 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20000350 	.word	0x20000350
 8000808:	40023000 	.word	0x40023000

0800080c <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000810:	4b15      	ldr	r3, [pc, #84]	; (8000868 <MX_DMA2D_Init+0x5c>)
 8000812:	4a16      	ldr	r2, [pc, #88]	; (800086c <MX_DMA2D_Init+0x60>)
 8000814:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000816:	4b14      	ldr	r3, [pc, #80]	; (8000868 <MX_DMA2D_Init+0x5c>)
 8000818:	2200      	movs	r2, #0
 800081a:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 800081c:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_DMA2D_Init+0x5c>)
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000822:	4b11      	ldr	r3, [pc, #68]	; (8000868 <MX_DMA2D_Init+0x5c>)
 8000824:	2200      	movs	r2, #0
 8000826:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_DMA2D_Init+0x5c>)
 800082a:	2200      	movs	r2, #0
 800082c:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800082e:	4b0e      	ldr	r3, [pc, #56]	; (8000868 <MX_DMA2D_Init+0x5c>)
 8000830:	2200      	movs	r2, #0
 8000832:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000834:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_DMA2D_Init+0x5c>)
 8000836:	2200      	movs	r2, #0
 8000838:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800083a:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_DMA2D_Init+0x5c>)
 800083c:	2200      	movs	r2, #0
 800083e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000840:	4809      	ldr	r0, [pc, #36]	; (8000868 <MX_DMA2D_Init+0x5c>)
 8000842:	f002 f9d3 	bl	8002bec <HAL_DMA2D_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 800084c:	f000 fb56 	bl	8000efc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000850:	2101      	movs	r1, #1
 8000852:	4805      	ldr	r0, [pc, #20]	; (8000868 <MX_DMA2D_Init+0x5c>)
 8000854:	f002 fb24 	bl	8002ea0 <HAL_DMA2D_ConfigLayer>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800085e:	f000 fb4d 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000358 	.word	0x20000358
 800086c:	4002b000 	.word	0x4002b000

08000870 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000874:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <MX_I2C3_Init+0x74>)
 8000876:	4a1c      	ldr	r2, [pc, #112]	; (80008e8 <MX_I2C3_Init+0x78>)
 8000878:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800087a:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <MX_I2C3_Init+0x74>)
 800087c:	4a1b      	ldr	r2, [pc, #108]	; (80008ec <MX_I2C3_Init+0x7c>)
 800087e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000880:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <MX_I2C3_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000886:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <MX_I2C3_Init+0x74>)
 8000888:	2200      	movs	r2, #0
 800088a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800088c:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <MX_I2C3_Init+0x74>)
 800088e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000892:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000894:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <MX_I2C3_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800089a:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <MX_I2C3_Init+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008a0:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <MX_I2C3_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a6:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_I2C3_Init+0x74>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80008ac:	480d      	ldr	r0, [pc, #52]	; (80008e4 <MX_I2C3_Init+0x74>)
 80008ae:	f004 fa65 	bl	8004d7c <HAL_I2C_Init>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80008b8:	f000 fb20 	bl	8000efc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008bc:	2100      	movs	r1, #0
 80008be:	4809      	ldr	r0, [pc, #36]	; (80008e4 <MX_I2C3_Init+0x74>)
 80008c0:	f004 fba0 	bl	8005004 <HAL_I2CEx_ConfigAnalogFilter>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80008ca:	f000 fb17 	bl	8000efc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80008ce:	2100      	movs	r1, #0
 80008d0:	4804      	ldr	r0, [pc, #16]	; (80008e4 <MX_I2C3_Init+0x74>)
 80008d2:	f004 fbd3 	bl	800507c <HAL_I2CEx_ConfigDigitalFilter>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80008dc:	f000 fb0e 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	20000398 	.word	0x20000398
 80008e8:	40005c00 	.word	0x40005c00
 80008ec:	000186a0 	.word	0x000186a0

080008f0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08e      	sub	sp, #56	; 0x38
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2234      	movs	r2, #52	; 0x34
 80008fa:	2100      	movs	r1, #0
 80008fc:	4618      	mov	r0, r3
 80008fe:	f00e f8e1 	bl	800eac4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000902:	4b39      	ldr	r3, [pc, #228]	; (80009e8 <MX_LTDC_Init+0xf8>)
 8000904:	4a39      	ldr	r2, [pc, #228]	; (80009ec <MX_LTDC_Init+0xfc>)
 8000906:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000908:	4b37      	ldr	r3, [pc, #220]	; (80009e8 <MX_LTDC_Init+0xf8>)
 800090a:	2200      	movs	r2, #0
 800090c:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800090e:	4b36      	ldr	r3, [pc, #216]	; (80009e8 <MX_LTDC_Init+0xf8>)
 8000910:	2200      	movs	r2, #0
 8000912:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000914:	4b34      	ldr	r3, [pc, #208]	; (80009e8 <MX_LTDC_Init+0xf8>)
 8000916:	2200      	movs	r2, #0
 8000918:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800091a:	4b33      	ldr	r3, [pc, #204]	; (80009e8 <MX_LTDC_Init+0xf8>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000920:	4b31      	ldr	r3, [pc, #196]	; (80009e8 <MX_LTDC_Init+0xf8>)
 8000922:	2209      	movs	r2, #9
 8000924:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000926:	4b30      	ldr	r3, [pc, #192]	; (80009e8 <MX_LTDC_Init+0xf8>)
 8000928:	2201      	movs	r2, #1
 800092a:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 800092c:	4b2e      	ldr	r3, [pc, #184]	; (80009e8 <MX_LTDC_Init+0xf8>)
 800092e:	221d      	movs	r2, #29
 8000930:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000932:	4b2d      	ldr	r3, [pc, #180]	; (80009e8 <MX_LTDC_Init+0xf8>)
 8000934:	2203      	movs	r2, #3
 8000936:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000938:	4b2b      	ldr	r3, [pc, #172]	; (80009e8 <MX_LTDC_Init+0xf8>)
 800093a:	f240 120d 	movw	r2, #269	; 0x10d
 800093e:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000940:	4b29      	ldr	r3, [pc, #164]	; (80009e8 <MX_LTDC_Init+0xf8>)
 8000942:	f240 1243 	movw	r2, #323	; 0x143
 8000946:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8000948:	4b27      	ldr	r3, [pc, #156]	; (80009e8 <MX_LTDC_Init+0xf8>)
 800094a:	f240 1217 	movw	r2, #279	; 0x117
 800094e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000950:	4b25      	ldr	r3, [pc, #148]	; (80009e8 <MX_LTDC_Init+0xf8>)
 8000952:	f240 1247 	movw	r2, #327	; 0x147
 8000956:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000958:	4b23      	ldr	r3, [pc, #140]	; (80009e8 <MX_LTDC_Init+0xf8>)
 800095a:	2200      	movs	r2, #0
 800095c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000960:	4b21      	ldr	r3, [pc, #132]	; (80009e8 <MX_LTDC_Init+0xf8>)
 8000962:	2200      	movs	r2, #0
 8000964:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000968:	4b1f      	ldr	r3, [pc, #124]	; (80009e8 <MX_LTDC_Init+0xf8>)
 800096a:	2200      	movs	r2, #0
 800096c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000970:	481d      	ldr	r0, [pc, #116]	; (80009e8 <MX_LTDC_Init+0xf8>)
 8000972:	f004 fbc3 	bl	80050fc <HAL_LTDC_Init>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 800097c:	f000 fabe 	bl	8000efc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000984:	23f0      	movs	r3, #240	; 0xf0
 8000986:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000988:	2300      	movs	r3, #0
 800098a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 800098c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000990:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000992:	2302      	movs	r3, #2
 8000994:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000996:	23ff      	movs	r3, #255	; 0xff
 8000998:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 800099a:	2300      	movs	r3, #0
 800099c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800099e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009a2:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80009a4:	2307      	movs	r3, #7
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80009a8:	f04f 4350 	mov.w	r3, #3489660928	; 0xd0000000
 80009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 80009ae:	23f0      	movs	r3, #240	; 0xf0
 80009b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
 80009b2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80009b6:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80009be:	2300      	movs	r3, #0
 80009c0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80009c4:	2300      	movs	r3, #0
 80009c6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2200      	movs	r2, #0
 80009ce:	4619      	mov	r1, r3
 80009d0:	4805      	ldr	r0, [pc, #20]	; (80009e8 <MX_LTDC_Init+0xf8>)
 80009d2:	f004 fd25 	bl	8005420 <HAL_LTDC_ConfigLayer>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 80009dc:	f000 fa8e 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80009e0:	bf00      	nop
 80009e2:	3738      	adds	r7, #56	; 0x38
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	200003ec 	.word	0x200003ec
 80009ec:	40016800 	.word	0x40016800

080009f0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b086      	sub	sp, #24
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000a04:	2300      	movs	r3, #0
 8000a06:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000a08:	4b24      	ldr	r3, [pc, #144]	; (8000a9c <MX_RTC_Init+0xac>)
 8000a0a:	4a25      	ldr	r2, [pc, #148]	; (8000aa0 <MX_RTC_Init+0xb0>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000a0e:	4b23      	ldr	r3, [pc, #140]	; (8000a9c <MX_RTC_Init+0xac>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000a14:	4b21      	ldr	r3, [pc, #132]	; (8000a9c <MX_RTC_Init+0xac>)
 8000a16:	227f      	movs	r2, #127	; 0x7f
 8000a18:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000a1a:	4b20      	ldr	r3, [pc, #128]	; (8000a9c <MX_RTC_Init+0xac>)
 8000a1c:	22ff      	movs	r2, #255	; 0xff
 8000a1e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000a20:	4b1e      	ldr	r3, [pc, #120]	; (8000a9c <MX_RTC_Init+0xac>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000a26:	4b1d      	ldr	r3, [pc, #116]	; (8000a9c <MX_RTC_Init+0xac>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000a2c:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <MX_RTC_Init+0xac>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000a32:	481a      	ldr	r0, [pc, #104]	; (8000a9c <MX_RTC_Init+0xac>)
 8000a34:	f005 fd54 	bl	80064e0 <HAL_RTC_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8000a3e:	f000 fa5d 	bl	8000efc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000a46:	2300      	movs	r3, #0
 8000a48:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000a52:	2300      	movs	r3, #0
 8000a54:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	2201      	movs	r2, #1
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480f      	ldr	r0, [pc, #60]	; (8000a9c <MX_RTC_Init+0xac>)
 8000a5e:	f005 fdb5 	bl	80065cc <HAL_RTC_SetTime>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000a68:	f000 fa48 	bl	8000efc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_MAY;
 8000a70:	2305      	movs	r3, #5
 8000a72:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x2;
 8000a74:	2302      	movs	r3, #2
 8000a76:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8000a78:	2323      	movs	r3, #35	; 0x23
 8000a7a:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000a7c:	463b      	mov	r3, r7
 8000a7e:	2201      	movs	r2, #1
 8000a80:	4619      	mov	r1, r3
 8000a82:	4806      	ldr	r0, [pc, #24]	; (8000a9c <MX_RTC_Init+0xac>)
 8000a84:	f005 fe9a 	bl	80067bc <HAL_RTC_SetDate>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d001      	beq.n	8000a92 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000a8e:	f000 fa35 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a92:	bf00      	nop
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000494 	.word	0x20000494
 8000aa0:	40002800 	.word	0x40002800

08000aa4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000aa8:	4b17      	ldr	r3, [pc, #92]	; (8000b08 <MX_SPI5_Init+0x64>)
 8000aaa:	4a18      	ldr	r2, [pc, #96]	; (8000b0c <MX_SPI5_Init+0x68>)
 8000aac:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000aae:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <MX_SPI5_Init+0x64>)
 8000ab0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000ab4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000ab6:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <MX_SPI5_Init+0x64>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <MX_SPI5_Init+0x64>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <MX_SPI5_Init+0x64>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ac8:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <MX_SPI5_Init+0x64>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <MX_SPI5_Init+0x64>)
 8000ad0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000ad4:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	; (8000b08 <MX_SPI5_Init+0x64>)
 8000ad8:	2218      	movs	r2, #24
 8000ada:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000adc:	4b0a      	ldr	r3, [pc, #40]	; (8000b08 <MX_SPI5_Init+0x64>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ae2:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_SPI5_Init+0x64>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ae8:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <MX_SPI5_Init+0x64>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <MX_SPI5_Init+0x64>)
 8000af0:	220a      	movs	r2, #10
 8000af2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000af4:	4804      	ldr	r0, [pc, #16]	; (8000b08 <MX_SPI5_Init+0x64>)
 8000af6:	f006 f882 	bl	8006bfe <HAL_SPI_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000b00:	f000 f9fc 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	200004b4 	.word	0x200004b4
 8000b0c:	40015000 	.word	0x40015000

08000b10 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b086      	sub	sp, #24
 8000b14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b16:	f107 0308 	add.w	r3, r7, #8
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b24:	463b      	mov	r3, r7
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
 8000b2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ba8 <MX_TIM1_Init+0x98>)
 8000b2e:	4a1f      	ldr	r2, [pc, #124]	; (8000bac <MX_TIM1_Init+0x9c>)
 8000b30:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b32:	4b1d      	ldr	r3, [pc, #116]	; (8000ba8 <MX_TIM1_Init+0x98>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b38:	4b1b      	ldr	r3, [pc, #108]	; (8000ba8 <MX_TIM1_Init+0x98>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b3e:	4b1a      	ldr	r3, [pc, #104]	; (8000ba8 <MX_TIM1_Init+0x98>)
 8000b40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b44:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b46:	4b18      	ldr	r3, [pc, #96]	; (8000ba8 <MX_TIM1_Init+0x98>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b4c:	4b16      	ldr	r3, [pc, #88]	; (8000ba8 <MX_TIM1_Init+0x98>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b52:	4b15      	ldr	r3, [pc, #84]	; (8000ba8 <MX_TIM1_Init+0x98>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b58:	4813      	ldr	r0, [pc, #76]	; (8000ba8 <MX_TIM1_Init+0x98>)
 8000b5a:	f006 fe2f 	bl	80077bc <HAL_TIM_Base_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000b64:	f000 f9ca 	bl	8000efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b6c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b6e:	f107 0308 	add.w	r3, r7, #8
 8000b72:	4619      	mov	r1, r3
 8000b74:	480c      	ldr	r0, [pc, #48]	; (8000ba8 <MX_TIM1_Init+0x98>)
 8000b76:	f006 ffe9 	bl	8007b4c <HAL_TIM_ConfigClockSource>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000b80:	f000 f9bc 	bl	8000efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b84:	2300      	movs	r3, #0
 8000b86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b8c:	463b      	mov	r3, r7
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4805      	ldr	r0, [pc, #20]	; (8000ba8 <MX_TIM1_Init+0x98>)
 8000b92:	f007 fa05 	bl	8007fa0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b9c:	f000 f9ae 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000ba0:	bf00      	nop
 8000ba2:	3718      	adds	r7, #24
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	2000050c 	.word	0x2000050c
 8000bac:	40010000 	.word	0x40010000

08000bb0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bb4:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <MX_USART1_UART_Init+0x4c>)
 8000bb6:	4a12      	ldr	r2, [pc, #72]	; (8000c00 <MX_USART1_UART_Init+0x50>)
 8000bb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bba:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <MX_USART1_UART_Init+0x4c>)
 8000bbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bc0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <MX_USART1_UART_Init+0x4c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <MX_USART1_UART_Init+0x4c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <MX_USART1_UART_Init+0x4c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bd4:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <MX_USART1_UART_Init+0x4c>)
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <MX_USART1_UART_Init+0x4c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <MX_USART1_UART_Init+0x4c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000be6:	4805      	ldr	r0, [pc, #20]	; (8000bfc <MX_USART1_UART_Init+0x4c>)
 8000be8:	f007 fa6a 	bl	80080c0 <HAL_UART_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bf2:	f000 f983 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000554 	.word	0x20000554
 8000c00:	40011000 	.word	0x40011000

08000c04 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b088      	sub	sp, #32
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
 8000c18:	615a      	str	r2, [r3, #20]
 8000c1a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000c1c:	4b1f      	ldr	r3, [pc, #124]	; (8000c9c <MX_FMC_Init+0x98>)
 8000c1e:	4a20      	ldr	r2, [pc, #128]	; (8000ca0 <MX_FMC_Init+0x9c>)
 8000c20:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000c22:	4b1e      	ldr	r3, [pc, #120]	; (8000c9c <MX_FMC_Init+0x98>)
 8000c24:	2201      	movs	r2, #1
 8000c26:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000c28:	4b1c      	ldr	r3, [pc, #112]	; (8000c9c <MX_FMC_Init+0x98>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000c2e:	4b1b      	ldr	r3, [pc, #108]	; (8000c9c <MX_FMC_Init+0x98>)
 8000c30:	2204      	movs	r2, #4
 8000c32:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000c34:	4b19      	ldr	r3, [pc, #100]	; (8000c9c <MX_FMC_Init+0x98>)
 8000c36:	2210      	movs	r2, #16
 8000c38:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000c3a:	4b18      	ldr	r3, [pc, #96]	; (8000c9c <MX_FMC_Init+0x98>)
 8000c3c:	2240      	movs	r2, #64	; 0x40
 8000c3e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000c40:	4b16      	ldr	r3, [pc, #88]	; (8000c9c <MX_FMC_Init+0x98>)
 8000c42:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8000c46:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000c48:	4b14      	ldr	r3, [pc, #80]	; (8000c9c <MX_FMC_Init+0x98>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000c4e:	4b13      	ldr	r3, [pc, #76]	; (8000c9c <MX_FMC_Init+0x98>)
 8000c50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000c54:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000c56:	4b11      	ldr	r3, [pc, #68]	; (8000c9c <MX_FMC_Init+0x98>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000c5c:	4b0f      	ldr	r3, [pc, #60]	; (8000c9c <MX_FMC_Init+0x98>)
 8000c5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c62:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000c64:	2302      	movs	r3, #2
 8000c66:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000c68:	2307      	movs	r3, #7
 8000c6a:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000c70:	2307      	movs	r3, #7
 8000c72:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000c74:	2303      	movs	r3, #3
 8000c76:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000c78:	2302      	movs	r3, #2
 8000c7a:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000c80:	1d3b      	adds	r3, r7, #4
 8000c82:	4619      	mov	r1, r3
 8000c84:	4805      	ldr	r0, [pc, #20]	; (8000c9c <MX_FMC_Init+0x98>)
 8000c86:	f005 ff29 	bl	8006adc <HAL_SDRAM_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000c90:	f000 f934 	bl	8000efc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000c94:	bf00      	nop
 8000c96:	3720      	adds	r7, #32
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	20000598 	.word	0x20000598
 8000ca0:	a0000140 	.word	0xa0000140

08000ca4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08e      	sub	sp, #56	; 0x38
 8000ca8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
 8000cb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	623b      	str	r3, [r7, #32]
 8000cbe:	4b7b      	ldr	r3, [pc, #492]	; (8000eac <MX_GPIO_Init+0x208>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4a7a      	ldr	r2, [pc, #488]	; (8000eac <MX_GPIO_Init+0x208>)
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4b78      	ldr	r3, [pc, #480]	; (8000eac <MX_GPIO_Init+0x208>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0304 	and.w	r3, r3, #4
 8000cd2:	623b      	str	r3, [r7, #32]
 8000cd4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	61fb      	str	r3, [r7, #28]
 8000cda:	4b74      	ldr	r3, [pc, #464]	; (8000eac <MX_GPIO_Init+0x208>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a73      	ldr	r2, [pc, #460]	; (8000eac <MX_GPIO_Init+0x208>)
 8000ce0:	f043 0320 	orr.w	r3, r3, #32
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b71      	ldr	r3, [pc, #452]	; (8000eac <MX_GPIO_Init+0x208>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0320 	and.w	r3, r3, #32
 8000cee:	61fb      	str	r3, [r7, #28]
 8000cf0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	61bb      	str	r3, [r7, #24]
 8000cf6:	4b6d      	ldr	r3, [pc, #436]	; (8000eac <MX_GPIO_Init+0x208>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a6c      	ldr	r2, [pc, #432]	; (8000eac <MX_GPIO_Init+0x208>)
 8000cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b6a      	ldr	r3, [pc, #424]	; (8000eac <MX_GPIO_Init+0x208>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d0a:	61bb      	str	r3, [r7, #24]
 8000d0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
 8000d12:	4b66      	ldr	r3, [pc, #408]	; (8000eac <MX_GPIO_Init+0x208>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a65      	ldr	r2, [pc, #404]	; (8000eac <MX_GPIO_Init+0x208>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b63      	ldr	r3, [pc, #396]	; (8000eac <MX_GPIO_Init+0x208>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0301 	and.w	r3, r3, #1
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	613b      	str	r3, [r7, #16]
 8000d2e:	4b5f      	ldr	r3, [pc, #380]	; (8000eac <MX_GPIO_Init+0x208>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a5e      	ldr	r2, [pc, #376]	; (8000eac <MX_GPIO_Init+0x208>)
 8000d34:	f043 0302 	orr.w	r3, r3, #2
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b5c      	ldr	r3, [pc, #368]	; (8000eac <MX_GPIO_Init+0x208>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	613b      	str	r3, [r7, #16]
 8000d44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	4b58      	ldr	r3, [pc, #352]	; (8000eac <MX_GPIO_Init+0x208>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a57      	ldr	r2, [pc, #348]	; (8000eac <MX_GPIO_Init+0x208>)
 8000d50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b55      	ldr	r3, [pc, #340]	; (8000eac <MX_GPIO_Init+0x208>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	60bb      	str	r3, [r7, #8]
 8000d66:	4b51      	ldr	r3, [pc, #324]	; (8000eac <MX_GPIO_Init+0x208>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a50      	ldr	r2, [pc, #320]	; (8000eac <MX_GPIO_Init+0x208>)
 8000d6c:	f043 0310 	orr.w	r3, r3, #16
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b4e      	ldr	r3, [pc, #312]	; (8000eac <MX_GPIO_Init+0x208>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0310 	and.w	r3, r3, #16
 8000d7a:	60bb      	str	r3, [r7, #8]
 8000d7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	607b      	str	r3, [r7, #4]
 8000d82:	4b4a      	ldr	r3, [pc, #296]	; (8000eac <MX_GPIO_Init+0x208>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a49      	ldr	r2, [pc, #292]	; (8000eac <MX_GPIO_Init+0x208>)
 8000d88:	f043 0308 	orr.w	r3, r3, #8
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b47      	ldr	r3, [pc, #284]	; (8000eac <MX_GPIO_Init+0x208>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0308 	and.w	r3, r3, #8
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2116      	movs	r1, #22
 8000d9e:	4844      	ldr	r0, [pc, #272]	; (8000eb0 <MX_GPIO_Init+0x20c>)
 8000da0:	f002 fbc8 	bl	8003534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2180      	movs	r1, #128	; 0x80
 8000da8:	4842      	ldr	r0, [pc, #264]	; (8000eb4 <MX_GPIO_Init+0x210>)
 8000daa:	f002 fbc3 	bl	8003534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000dae:	2200      	movs	r2, #0
 8000db0:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000db4:	4840      	ldr	r0, [pc, #256]	; (8000eb8 <MX_GPIO_Init+0x214>)
 8000db6:	f002 fbbd 	bl	8003534 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000dc0:	483e      	ldr	r0, [pc, #248]	; (8000ebc <MX_GPIO_Init+0x218>)
 8000dc2:	f002 fbb7 	bl	8003534 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000dc6:	2316      	movs	r3, #22
 8000dc8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4834      	ldr	r0, [pc, #208]	; (8000eb0 <MX_GPIO_Init+0x20c>)
 8000dde:	f002 f8f1 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000de2:	f248 0307 	movw	r3, #32775	; 0x8007
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000de8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000dec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	2300      	movs	r3, #0
 8000df0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df6:	4619      	mov	r1, r3
 8000df8:	482e      	ldr	r0, [pc, #184]	; (8000eb4 <MX_GPIO_Init+0x210>)
 8000dfa:	f002 f8e3 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000dfe:	2380      	movs	r3, #128	; 0x80
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000e0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e12:	4619      	mov	r1, r3
 8000e14:	4827      	ldr	r0, [pc, #156]	; (8000eb4 <MX_GPIO_Init+0x210>)
 8000e16:	f002 f8d5 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000e1a:	2320      	movs	r3, #32
 8000e1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e1e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000e22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4820      	ldr	r0, [pc, #128]	; (8000eb0 <MX_GPIO_Init+0x20c>)
 8000e30:	f002 f8c8 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e34:	2304      	movs	r3, #4
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e44:	4619      	mov	r1, r3
 8000e46:	481e      	ldr	r0, [pc, #120]	; (8000ec0 <MX_GPIO_Init+0x21c>)
 8000e48:	f002 f8bc 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000e4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e50:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e52:	2300      	movs	r3, #0
 8000e54:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000e5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4815      	ldr	r0, [pc, #84]	; (8000eb8 <MX_GPIO_Init+0x214>)
 8000e62:	f002 f8af 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000e66:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000e6a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e74:	2300      	movs	r3, #0
 8000e76:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	480e      	ldr	r0, [pc, #56]	; (8000eb8 <MX_GPIO_Init+0x214>)
 8000e80:	f002 f8a0 	bl	8002fc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000e84:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4807      	ldr	r0, [pc, #28]	; (8000ebc <MX_GPIO_Init+0x218>)
 8000e9e:	f002 f891 	bl	8002fc4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ea2:	bf00      	nop
 8000ea4:	3738      	adds	r7, #56	; 0x38
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	40020800 	.word	0x40020800
 8000eb4:	40020000 	.word	0x40020000
 8000eb8:	40020c00 	.word	0x40020c00
 8000ebc:	40021800 	.word	0x40021800
 8000ec0:	40020400 	.word	0x40020400

08000ec4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8000ecc:	f00d faaa 	bl	800e424 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f00b f87e 	bl	800bfd2 <osDelay>
 8000ed6:	e7fb      	b.n	8000ed0 <StartDefaultTask+0xc>

08000ed8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a04      	ldr	r2, [pc, #16]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d101      	bne.n	8000eee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000eea:	f001 fb7f 	bl	80025ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40001000 	.word	0x40001000

08000efc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f00:	b672      	cpsid	i
}
 8000f02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f04:	e7fe      	b.n	8000f04 <Error_Handler+0x8>
	...

08000f08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_MspInit+0x54>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	4a11      	ldr	r2, [pc, #68]	; (8000f5c <HAL_MspInit+0x54>)
 8000f18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f1e:	4b0f      	ldr	r3, [pc, #60]	; (8000f5c <HAL_MspInit+0x54>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	603b      	str	r3, [r7, #0]
 8000f2e:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <HAL_MspInit+0x54>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f32:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <HAL_MspInit+0x54>)
 8000f34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f38:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3a:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <HAL_MspInit+0x54>)
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f42:	603b      	str	r3, [r7, #0]
 8000f44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f46:	2200      	movs	r2, #0
 8000f48:	210f      	movs	r1, #15
 8000f4a:	f06f 0001 	mvn.w	r0, #1
 8000f4e:	f001 fc49 	bl	80027e4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40023800 	.word	0x40023800

08000f60 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a0b      	ldr	r2, [pc, #44]	; (8000f9c <HAL_CRC_MspInit+0x3c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d10d      	bne.n	8000f8e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <HAL_CRC_MspInit+0x40>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	4a09      	ldr	r2, [pc, #36]	; (8000fa0 <HAL_CRC_MspInit+0x40>)
 8000f7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f80:	6313      	str	r3, [r2, #48]	; 0x30
 8000f82:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <HAL_CRC_MspInit+0x40>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000f8e:	bf00      	nop
 8000f90:	3714      	adds	r7, #20
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	40023000 	.word	0x40023000
 8000fa0:	40023800 	.word	0x40023800

08000fa4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a0e      	ldr	r2, [pc, #56]	; (8000fec <HAL_DMA2D_MspInit+0x48>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d115      	bne.n	8000fe2 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b0d      	ldr	r3, [pc, #52]	; (8000ff0 <HAL_DMA2D_MspInit+0x4c>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a0c      	ldr	r2, [pc, #48]	; (8000ff0 <HAL_DMA2D_MspInit+0x4c>)
 8000fc0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <HAL_DMA2D_MspInit+0x4c>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2105      	movs	r1, #5
 8000fd6:	205a      	movs	r0, #90	; 0x5a
 8000fd8:	f001 fc04 	bl	80027e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000fdc:	205a      	movs	r0, #90	; 0x5a
 8000fde:	f001 fc1d 	bl	800281c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	4002b000 	.word	0x4002b000
 8000ff0:	40023800 	.word	0x40023800

08000ff4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b08a      	sub	sp, #40	; 0x28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffc:	f107 0314 	add.w	r3, r7, #20
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a29      	ldr	r2, [pc, #164]	; (80010b8 <HAL_I2C_MspInit+0xc4>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d14b      	bne.n	80010ae <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	613b      	str	r3, [r7, #16]
 800101a:	4b28      	ldr	r3, [pc, #160]	; (80010bc <HAL_I2C_MspInit+0xc8>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a27      	ldr	r2, [pc, #156]	; (80010bc <HAL_I2C_MspInit+0xc8>)
 8001020:	f043 0304 	orr.w	r3, r3, #4
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b25      	ldr	r3, [pc, #148]	; (80010bc <HAL_I2C_MspInit+0xc8>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f003 0304 	and.w	r3, r3, #4
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	4b21      	ldr	r3, [pc, #132]	; (80010bc <HAL_I2C_MspInit+0xc8>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a20      	ldr	r2, [pc, #128]	; (80010bc <HAL_I2C_MspInit+0xc8>)
 800103c:	f043 0301 	orr.w	r3, r3, #1
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b1e      	ldr	r3, [pc, #120]	; (80010bc <HAL_I2C_MspInit+0xc8>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 800104e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001052:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001054:	2312      	movs	r3, #18
 8001056:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001058:	2301      	movs	r3, #1
 800105a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105c:	2300      	movs	r3, #0
 800105e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001060:	2304      	movs	r3, #4
 8001062:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	4619      	mov	r1, r3
 800106a:	4815      	ldr	r0, [pc, #84]	; (80010c0 <HAL_I2C_MspInit+0xcc>)
 800106c:	f001 ffaa 	bl	8002fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001070:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001076:	2312      	movs	r3, #18
 8001078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800107a:	2301      	movs	r3, #1
 800107c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107e:	2300      	movs	r3, #0
 8001080:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001082:	2304      	movs	r3, #4
 8001084:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8001086:	f107 0314 	add.w	r3, r7, #20
 800108a:	4619      	mov	r1, r3
 800108c:	480d      	ldr	r0, [pc, #52]	; (80010c4 <HAL_I2C_MspInit+0xd0>)
 800108e:	f001 ff99 	bl	8002fc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <HAL_I2C_MspInit+0xc8>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	4a08      	ldr	r2, [pc, #32]	; (80010bc <HAL_I2C_MspInit+0xc8>)
 800109c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80010a0:	6413      	str	r3, [r2, #64]	; 0x40
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_I2C_MspInit+0xc8>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80010ae:	bf00      	nop
 80010b0:	3728      	adds	r7, #40	; 0x28
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40005c00 	.word	0x40005c00
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40020800 	.word	0x40020800
 80010c4:	40020000 	.word	0x40020000

080010c8 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b09a      	sub	sp, #104	; 0x68
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e4:	2230      	movs	r2, #48	; 0x30
 80010e6:	2100      	movs	r1, #0
 80010e8:	4618      	mov	r0, r3
 80010ea:	f00d fceb 	bl	800eac4 <memset>
  if(hltdc->Instance==LTDC)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a85      	ldr	r2, [pc, #532]	; (8001308 <HAL_LTDC_MspInit+0x240>)
 80010f4:	4293      	cmp	r3, r2
 80010f6:	f040 8102 	bne.w	80012fe <HAL_LTDC_MspInit+0x236>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80010fa:	2308      	movs	r3, #8
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80010fe:	2332      	movs	r3, #50	; 0x32
 8001100:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001102:	2302      	movs	r3, #2
 8001104:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001106:	2300      	movs	r3, #0
 8001108:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800110a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800110e:	4618      	mov	r0, r3
 8001110:	f005 f826 	bl	8006160 <HAL_RCCEx_PeriphCLKConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 800111a:	f7ff feef 	bl	8000efc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	623b      	str	r3, [r7, #32]
 8001122:	4b7a      	ldr	r3, [pc, #488]	; (800130c <HAL_LTDC_MspInit+0x244>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	4a79      	ldr	r2, [pc, #484]	; (800130c <HAL_LTDC_MspInit+0x244>)
 8001128:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800112c:	6453      	str	r3, [r2, #68]	; 0x44
 800112e:	4b77      	ldr	r3, [pc, #476]	; (800130c <HAL_LTDC_MspInit+0x244>)
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001136:	623b      	str	r3, [r7, #32]
 8001138:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	61fb      	str	r3, [r7, #28]
 800113e:	4b73      	ldr	r3, [pc, #460]	; (800130c <HAL_LTDC_MspInit+0x244>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	4a72      	ldr	r2, [pc, #456]	; (800130c <HAL_LTDC_MspInit+0x244>)
 8001144:	f043 0320 	orr.w	r3, r3, #32
 8001148:	6313      	str	r3, [r2, #48]	; 0x30
 800114a:	4b70      	ldr	r3, [pc, #448]	; (800130c <HAL_LTDC_MspInit+0x244>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	f003 0320 	and.w	r3, r3, #32
 8001152:	61fb      	str	r3, [r7, #28]
 8001154:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	61bb      	str	r3, [r7, #24]
 800115a:	4b6c      	ldr	r3, [pc, #432]	; (800130c <HAL_LTDC_MspInit+0x244>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	4a6b      	ldr	r2, [pc, #428]	; (800130c <HAL_LTDC_MspInit+0x244>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6313      	str	r3, [r2, #48]	; 0x30
 8001166:	4b69      	ldr	r3, [pc, #420]	; (800130c <HAL_LTDC_MspInit+0x244>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	61bb      	str	r3, [r7, #24]
 8001170:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	4b65      	ldr	r3, [pc, #404]	; (800130c <HAL_LTDC_MspInit+0x244>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a64      	ldr	r2, [pc, #400]	; (800130c <HAL_LTDC_MspInit+0x244>)
 800117c:	f043 0302 	orr.w	r3, r3, #2
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b62      	ldr	r3, [pc, #392]	; (800130c <HAL_LTDC_MspInit+0x244>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0302 	and.w	r3, r3, #2
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	613b      	str	r3, [r7, #16]
 8001192:	4b5e      	ldr	r3, [pc, #376]	; (800130c <HAL_LTDC_MspInit+0x244>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4a5d      	ldr	r2, [pc, #372]	; (800130c <HAL_LTDC_MspInit+0x244>)
 8001198:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4b5b      	ldr	r3, [pc, #364]	; (800130c <HAL_LTDC_MspInit+0x244>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011a6:	613b      	str	r3, [r7, #16]
 80011a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	60fb      	str	r3, [r7, #12]
 80011ae:	4b57      	ldr	r3, [pc, #348]	; (800130c <HAL_LTDC_MspInit+0x244>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	4a56      	ldr	r2, [pc, #344]	; (800130c <HAL_LTDC_MspInit+0x244>)
 80011b4:	f043 0304 	orr.w	r3, r3, #4
 80011b8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ba:	4b54      	ldr	r3, [pc, #336]	; (800130c <HAL_LTDC_MspInit+0x244>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	f003 0304 	and.w	r3, r3, #4
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	4b50      	ldr	r3, [pc, #320]	; (800130c <HAL_LTDC_MspInit+0x244>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	4a4f      	ldr	r2, [pc, #316]	; (800130c <HAL_LTDC_MspInit+0x244>)
 80011d0:	f043 0308 	orr.w	r3, r3, #8
 80011d4:	6313      	str	r3, [r2, #48]	; 0x30
 80011d6:	4b4d      	ldr	r3, [pc, #308]	; (800130c <HAL_LTDC_MspInit+0x244>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	f003 0308 	and.w	r3, r3, #8
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80011e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011e6:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	2302      	movs	r3, #2
 80011ea:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f0:	2300      	movs	r3, #0
 80011f2:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011f4:	230e      	movs	r3, #14
 80011f6:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80011f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011fc:	4619      	mov	r1, r3
 80011fe:	4844      	ldr	r0, [pc, #272]	; (8001310 <HAL_LTDC_MspInit+0x248>)
 8001200:	f001 fee0 	bl	8002fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001204:	f641 0358 	movw	r3, #6232	; 0x1858
 8001208:	657b      	str	r3, [r7, #84]	; 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800120a:	2302      	movs	r3, #2
 800120c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120e:	2300      	movs	r3, #0
 8001210:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001212:	2300      	movs	r3, #0
 8001214:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001216:	230e      	movs	r3, #14
 8001218:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800121a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800121e:	4619      	mov	r1, r3
 8001220:	483c      	ldr	r0, [pc, #240]	; (8001314 <HAL_LTDC_MspInit+0x24c>)
 8001222:	f001 fecf 	bl	8002fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001226:	2303      	movs	r3, #3
 8001228:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122a:	2302      	movs	r3, #2
 800122c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122e:	2300      	movs	r3, #0
 8001230:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001232:	2300      	movs	r3, #0
 8001234:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001236:	2309      	movs	r3, #9
 8001238:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800123e:	4619      	mov	r1, r3
 8001240:	4835      	ldr	r0, [pc, #212]	; (8001318 <HAL_LTDC_MspInit+0x250>)
 8001242:	f001 febf 	bl	8002fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001246:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800124a:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124c:	2302      	movs	r3, #2
 800124e:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001254:	2300      	movs	r3, #0
 8001256:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001258:	230e      	movs	r3, #14
 800125a:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001260:	4619      	mov	r1, r3
 8001262:	482d      	ldr	r0, [pc, #180]	; (8001318 <HAL_LTDC_MspInit+0x250>)
 8001264:	f001 feae 	bl	8002fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001268:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 800126c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	2302      	movs	r3, #2
 8001270:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001276:	2300      	movs	r3, #0
 8001278:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800127a:	230e      	movs	r3, #14
 800127c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800127e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001282:	4619      	mov	r1, r3
 8001284:	4825      	ldr	r0, [pc, #148]	; (800131c <HAL_LTDC_MspInit+0x254>)
 8001286:	f001 fe9d 	bl	8002fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800128a:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 800128e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	2300      	movs	r3, #0
 800129a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800129c:	230e      	movs	r3, #14
 800129e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012a4:	4619      	mov	r1, r3
 80012a6:	481e      	ldr	r0, [pc, #120]	; (8001320 <HAL_LTDC_MspInit+0x258>)
 80012a8:	f001 fe8c 	bl	8002fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80012ac:	2348      	movs	r3, #72	; 0x48
 80012ae:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012bc:	230e      	movs	r3, #14
 80012be:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012c4:	4619      	mov	r1, r3
 80012c6:	4817      	ldr	r0, [pc, #92]	; (8001324 <HAL_LTDC_MspInit+0x25c>)
 80012c8:	f001 fe7c 	bl	8002fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80012cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012d0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012da:	2300      	movs	r3, #0
 80012dc:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80012de:	2309      	movs	r3, #9
 80012e0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012e2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012e6:	4619      	mov	r1, r3
 80012e8:	480c      	ldr	r0, [pc, #48]	; (800131c <HAL_LTDC_MspInit+0x254>)
 80012ea:	f001 fe6b 	bl	8002fc4 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2105      	movs	r1, #5
 80012f2:	2058      	movs	r0, #88	; 0x58
 80012f4:	f001 fa76 	bl	80027e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80012f8:	2058      	movs	r0, #88	; 0x58
 80012fa:	f001 fa8f 	bl	800281c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80012fe:	bf00      	nop
 8001300:	3768      	adds	r7, #104	; 0x68
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40016800 	.word	0x40016800
 800130c:	40023800 	.word	0x40023800
 8001310:	40021400 	.word	0x40021400
 8001314:	40020000 	.word	0x40020000
 8001318:	40020400 	.word	0x40020400
 800131c:	40021800 	.word	0x40021800
 8001320:	40020800 	.word	0x40020800
 8001324:	40020c00 	.word	0x40020c00

08001328 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08e      	sub	sp, #56	; 0x38
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001330:	f107 0308 	add.w	r3, r7, #8
 8001334:	2230      	movs	r2, #48	; 0x30
 8001336:	2100      	movs	r1, #0
 8001338:	4618      	mov	r0, r3
 800133a:	f00d fbc3 	bl	800eac4 <memset>
  if(hrtc->Instance==RTC)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a0c      	ldr	r2, [pc, #48]	; (8001374 <HAL_RTC_MspInit+0x4c>)
 8001344:	4293      	cmp	r3, r2
 8001346:	d111      	bne.n	800136c <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001348:	2320      	movs	r3, #32
 800134a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800134c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001350:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001352:	f107 0308 	add.w	r3, r7, #8
 8001356:	4618      	mov	r0, r3
 8001358:	f004 ff02 	bl	8006160 <HAL_RCCEx_PeriphCLKConfig>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001362:	f7ff fdcb 	bl	8000efc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001366:	4b04      	ldr	r3, [pc, #16]	; (8001378 <HAL_RTC_MspInit+0x50>)
 8001368:	2201      	movs	r2, #1
 800136a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800136c:	bf00      	nop
 800136e:	3738      	adds	r7, #56	; 0x38
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	40002800 	.word	0x40002800
 8001378:	42470e3c 	.word	0x42470e3c

0800137c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b08a      	sub	sp, #40	; 0x28
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001384:	f107 0314 	add.w	r3, r7, #20
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a19      	ldr	r2, [pc, #100]	; (8001400 <HAL_SPI_MspInit+0x84>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d12c      	bne.n	80013f8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
 80013a2:	4b18      	ldr	r3, [pc, #96]	; (8001404 <HAL_SPI_MspInit+0x88>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013a6:	4a17      	ldr	r2, [pc, #92]	; (8001404 <HAL_SPI_MspInit+0x88>)
 80013a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80013ac:	6453      	str	r3, [r2, #68]	; 0x44
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <HAL_SPI_MspInit+0x88>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
 80013be:	4b11      	ldr	r3, [pc, #68]	; (8001404 <HAL_SPI_MspInit+0x88>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	4a10      	ldr	r2, [pc, #64]	; (8001404 <HAL_SPI_MspInit+0x88>)
 80013c4:	f043 0320 	orr.w	r3, r3, #32
 80013c8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ca:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <HAL_SPI_MspInit+0x88>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	f003 0320 	and.w	r3, r3, #32
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80013d6:	f44f 7360 	mov.w	r3, #896	; 0x380
 80013da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013dc:	2302      	movs	r3, #2
 80013de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e4:	2300      	movs	r3, #0
 80013e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80013e8:	2305      	movs	r3, #5
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013ec:	f107 0314 	add.w	r3, r7, #20
 80013f0:	4619      	mov	r1, r3
 80013f2:	4805      	ldr	r0, [pc, #20]	; (8001408 <HAL_SPI_MspInit+0x8c>)
 80013f4:	f001 fde6 	bl	8002fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80013f8:	bf00      	nop
 80013fa:	3728      	adds	r7, #40	; 0x28
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40015000 	.word	0x40015000
 8001404:	40023800 	.word	0x40023800
 8001408:	40021400 	.word	0x40021400

0800140c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a08      	ldr	r2, [pc, #32]	; (800143c <HAL_SPI_MspDeInit+0x30>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d10a      	bne.n	8001434 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 800141e:	4b08      	ldr	r3, [pc, #32]	; (8001440 <HAL_SPI_MspDeInit+0x34>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	4a07      	ldr	r2, [pc, #28]	; (8001440 <HAL_SPI_MspDeInit+0x34>)
 8001424:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001428:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 800142a:	f44f 7160 	mov.w	r1, #896	; 0x380
 800142e:	4805      	ldr	r0, [pc, #20]	; (8001444 <HAL_SPI_MspDeInit+0x38>)
 8001430:	f001 ff74 	bl	800331c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 8001434:	bf00      	nop
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40015000 	.word	0x40015000
 8001440:	40023800 	.word	0x40023800
 8001444:	40021400 	.word	0x40021400

08001448 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001448:	b480      	push	{r7}
 800144a:	b085      	sub	sp, #20
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a0b      	ldr	r2, [pc, #44]	; (8001484 <HAL_TIM_Base_MspInit+0x3c>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d10d      	bne.n	8001476 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	4b0a      	ldr	r3, [pc, #40]	; (8001488 <HAL_TIM_Base_MspInit+0x40>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	4a09      	ldr	r2, [pc, #36]	; (8001488 <HAL_TIM_Base_MspInit+0x40>)
 8001464:	f043 0301 	orr.w	r3, r3, #1
 8001468:	6453      	str	r3, [r2, #68]	; 0x44
 800146a:	4b07      	ldr	r3, [pc, #28]	; (8001488 <HAL_TIM_Base_MspInit+0x40>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001476:	bf00      	nop
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	40010000 	.word	0x40010000
 8001488:	40023800 	.word	0x40023800

0800148c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08a      	sub	sp, #40	; 0x28
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a19      	ldr	r2, [pc, #100]	; (8001510 <HAL_UART_MspInit+0x84>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d12c      	bne.n	8001508 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	613b      	str	r3, [r7, #16]
 80014b2:	4b18      	ldr	r3, [pc, #96]	; (8001514 <HAL_UART_MspInit+0x88>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	4a17      	ldr	r2, [pc, #92]	; (8001514 <HAL_UART_MspInit+0x88>)
 80014b8:	f043 0310 	orr.w	r3, r3, #16
 80014bc:	6453      	str	r3, [r2, #68]	; 0x44
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <HAL_UART_MspInit+0x88>)
 80014c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c2:	f003 0310 	and.w	r3, r3, #16
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	60fb      	str	r3, [r7, #12]
 80014ce:	4b11      	ldr	r3, [pc, #68]	; (8001514 <HAL_UART_MspInit+0x88>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a10      	ldr	r2, [pc, #64]	; (8001514 <HAL_UART_MspInit+0x88>)
 80014d4:	f043 0301 	orr.w	r3, r3, #1
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <HAL_UART_MspInit+0x88>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80014e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80014ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ec:	2302      	movs	r3, #2
 80014ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f4:	2303      	movs	r3, #3
 80014f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014f8:	2307      	movs	r3, #7
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	4619      	mov	r1, r3
 8001502:	4805      	ldr	r0, [pc, #20]	; (8001518 <HAL_UART_MspInit+0x8c>)
 8001504:	f001 fd5e 	bl	8002fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001508:	bf00      	nop
 800150a:	3728      	adds	r7, #40	; 0x28
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40011000 	.word	0x40011000
 8001514:	40023800 	.word	0x40023800
 8001518:	40020000 	.word	0x40020000

0800151c <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800151c:	b580      	push	{r7, lr}
 800151e:	b086      	sub	sp, #24
 8001520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	2200      	movs	r2, #0
 8001526:	601a      	str	r2, [r3, #0]
 8001528:	605a      	str	r2, [r3, #4]
 800152a:	609a      	str	r2, [r3, #8]
 800152c:	60da      	str	r2, [r3, #12]
 800152e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001530:	4b3b      	ldr	r3, [pc, #236]	; (8001620 <HAL_FMC_MspInit+0x104>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d16f      	bne.n	8001618 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001538:	4b39      	ldr	r3, [pc, #228]	; (8001620 <HAL_FMC_MspInit+0x104>)
 800153a:	2201      	movs	r2, #1
 800153c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	603b      	str	r3, [r7, #0]
 8001542:	4b38      	ldr	r3, [pc, #224]	; (8001624 <HAL_FMC_MspInit+0x108>)
 8001544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001546:	4a37      	ldr	r2, [pc, #220]	; (8001624 <HAL_FMC_MspInit+0x108>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6393      	str	r3, [r2, #56]	; 0x38
 800154e:	4b35      	ldr	r3, [pc, #212]	; (8001624 <HAL_FMC_MspInit+0x108>)
 8001550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	603b      	str	r3, [r7, #0]
 8001558:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800155a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800155e:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001560:	2302      	movs	r3, #2
 8001562:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001568:	2303      	movs	r3, #3
 800156a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800156c:	230c      	movs	r3, #12
 800156e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	4619      	mov	r1, r3
 8001574:	482c      	ldr	r0, [pc, #176]	; (8001628 <HAL_FMC_MspInit+0x10c>)
 8001576:	f001 fd25 	bl	8002fc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800157a:	2301      	movs	r3, #1
 800157c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001586:	2303      	movs	r3, #3
 8001588:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800158a:	230c      	movs	r3, #12
 800158c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	4619      	mov	r1, r3
 8001592:	4826      	ldr	r0, [pc, #152]	; (800162c <HAL_FMC_MspInit+0x110>)
 8001594:	f001 fd16 	bl	8002fc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001598:	f248 1333 	movw	r3, #33075	; 0x8133
 800159c:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159e:	2302      	movs	r3, #2
 80015a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a6:	2303      	movs	r3, #3
 80015a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015aa:	230c      	movs	r3, #12
 80015ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	4619      	mov	r1, r3
 80015b2:	481f      	ldr	r0, [pc, #124]	; (8001630 <HAL_FMC_MspInit+0x114>)
 80015b4:	f001 fd06 	bl	8002fc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80015b8:	f64f 7383 	movw	r3, #65411	; 0xff83
 80015bc:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	2302      	movs	r3, #2
 80015c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c6:	2303      	movs	r3, #3
 80015c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015ca:	230c      	movs	r3, #12
 80015cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	4619      	mov	r1, r3
 80015d2:	4818      	ldr	r0, [pc, #96]	; (8001634 <HAL_FMC_MspInit+0x118>)
 80015d4:	f001 fcf6 	bl	8002fc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80015d8:	f24c 7303 	movw	r3, #50947	; 0xc703
 80015dc:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015de:	2302      	movs	r3, #2
 80015e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e6:	2303      	movs	r3, #3
 80015e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015ea:	230c      	movs	r3, #12
 80015ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	4619      	mov	r1, r3
 80015f2:	4811      	ldr	r0, [pc, #68]	; (8001638 <HAL_FMC_MspInit+0x11c>)
 80015f4:	f001 fce6 	bl	8002fc4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80015f8:	2360      	movs	r3, #96	; 0x60
 80015fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fc:	2302      	movs	r3, #2
 80015fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001600:	2300      	movs	r3, #0
 8001602:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001604:	2303      	movs	r3, #3
 8001606:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001608:	230c      	movs	r3, #12
 800160a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160c:	1d3b      	adds	r3, r7, #4
 800160e:	4619      	mov	r1, r3
 8001610:	480a      	ldr	r0, [pc, #40]	; (800163c <HAL_FMC_MspInit+0x120>)
 8001612:	f001 fcd7 	bl	8002fc4 <HAL_GPIO_Init>
 8001616:	e000      	b.n	800161a <HAL_FMC_MspInit+0xfe>
    return;
 8001618:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000628 	.word	0x20000628
 8001624:	40023800 	.word	0x40023800
 8001628:	40021400 	.word	0x40021400
 800162c:	40020800 	.word	0x40020800
 8001630:	40021800 	.word	0x40021800
 8001634:	40021000 	.word	0x40021000
 8001638:	40020c00 	.word	0x40020c00
 800163c:	40020400 	.word	0x40020400

08001640 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001648:	f7ff ff68 	bl	800151c <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800164c:	bf00      	nop
 800164e:	3708      	adds	r7, #8
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08e      	sub	sp, #56	; 0x38
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800165c:	2300      	movs	r3, #0
 800165e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001660:	2300      	movs	r3, #0
 8001662:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001664:	2300      	movs	r3, #0
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	4b33      	ldr	r3, [pc, #204]	; (8001738 <HAL_InitTick+0xe4>)
 800166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166c:	4a32      	ldr	r2, [pc, #200]	; (8001738 <HAL_InitTick+0xe4>)
 800166e:	f043 0310 	orr.w	r3, r3, #16
 8001672:	6413      	str	r3, [r2, #64]	; 0x40
 8001674:	4b30      	ldr	r3, [pc, #192]	; (8001738 <HAL_InitTick+0xe4>)
 8001676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001678:	f003 0310 	and.w	r3, r3, #16
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001680:	f107 0210 	add.w	r2, r7, #16
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	4611      	mov	r1, r2
 800168a:	4618      	mov	r0, r3
 800168c:	f004 fd36 	bl	80060fc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001690:	6a3b      	ldr	r3, [r7, #32]
 8001692:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001696:	2b00      	cmp	r3, #0
 8001698:	d103      	bne.n	80016a2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800169a:	f004 fd07 	bl	80060ac <HAL_RCC_GetPCLK1Freq>
 800169e:	6378      	str	r0, [r7, #52]	; 0x34
 80016a0:	e004      	b.n	80016ac <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80016a2:	f004 fd03 	bl	80060ac <HAL_RCC_GetPCLK1Freq>
 80016a6:	4603      	mov	r3, r0
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80016ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016ae:	4a23      	ldr	r2, [pc, #140]	; (800173c <HAL_InitTick+0xe8>)
 80016b0:	fba2 2303 	umull	r2, r3, r2, r3
 80016b4:	0c9b      	lsrs	r3, r3, #18
 80016b6:	3b01      	subs	r3, #1
 80016b8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80016ba:	4b21      	ldr	r3, [pc, #132]	; (8001740 <HAL_InitTick+0xec>)
 80016bc:	4a21      	ldr	r2, [pc, #132]	; (8001744 <HAL_InitTick+0xf0>)
 80016be:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80016c0:	4b1f      	ldr	r3, [pc, #124]	; (8001740 <HAL_InitTick+0xec>)
 80016c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80016c6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80016c8:	4a1d      	ldr	r2, [pc, #116]	; (8001740 <HAL_InitTick+0xec>)
 80016ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016cc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80016ce:	4b1c      	ldr	r3, [pc, #112]	; (8001740 <HAL_InitTick+0xec>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d4:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <HAL_InitTick+0xec>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016da:	4b19      	ldr	r3, [pc, #100]	; (8001740 <HAL_InitTick+0xec>)
 80016dc:	2200      	movs	r2, #0
 80016de:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80016e0:	4817      	ldr	r0, [pc, #92]	; (8001740 <HAL_InitTick+0xec>)
 80016e2:	f006 f86b 	bl	80077bc <HAL_TIM_Base_Init>
 80016e6:	4603      	mov	r3, r0
 80016e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80016ec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d11b      	bne.n	800172c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80016f4:	4812      	ldr	r0, [pc, #72]	; (8001740 <HAL_InitTick+0xec>)
 80016f6:	f006 f8b1 	bl	800785c <HAL_TIM_Base_Start_IT>
 80016fa:	4603      	mov	r3, r0
 80016fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001700:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001704:	2b00      	cmp	r3, #0
 8001706:	d111      	bne.n	800172c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001708:	2036      	movs	r0, #54	; 0x36
 800170a:	f001 f887 	bl	800281c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b0f      	cmp	r3, #15
 8001712:	d808      	bhi.n	8001726 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001714:	2200      	movs	r2, #0
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	2036      	movs	r0, #54	; 0x36
 800171a:	f001 f863 	bl	80027e4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800171e:	4a0a      	ldr	r2, [pc, #40]	; (8001748 <HAL_InitTick+0xf4>)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6013      	str	r3, [r2, #0]
 8001724:	e002      	b.n	800172c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800172c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001730:	4618      	mov	r0, r3
 8001732:	3738      	adds	r7, #56	; 0x38
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	40023800 	.word	0x40023800
 800173c:	431bde83 	.word	0x431bde83
 8001740:	2000062c 	.word	0x2000062c
 8001744:	40001000 	.word	0x40001000
 8001748:	2000004c 	.word	0x2000004c

0800174c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001750:	e7fe      	b.n	8001750 <NMI_Handler+0x4>

08001752 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001752:	b480      	push	{r7}
 8001754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001756:	e7fe      	b.n	8001756 <HardFault_Handler+0x4>

08001758 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800175c:	e7fe      	b.n	800175c <MemManage_Handler+0x4>

0800175e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800175e:	b480      	push	{r7}
 8001760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001762:	e7fe      	b.n	8001762 <BusFault_Handler+0x4>

08001764 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001768:	e7fe      	b.n	8001768 <UsageFault_Handler+0x4>

0800176a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800176a:	b480      	push	{r7}
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr

08001778 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800177c:	4802      	ldr	r0, [pc, #8]	; (8001788 <TIM6_DAC_IRQHandler+0x10>)
 800177e:	f006 f8dd 	bl	800793c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	2000062c 	.word	0x2000062c

0800178c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001790:	4802      	ldr	r0, [pc, #8]	; (800179c <OTG_HS_IRQHandler+0x10>)
 8001792:	f002 f953 	bl	8003a3c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20008dcc 	.word	0x20008dcc

080017a0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80017a4:	4802      	ldr	r0, [pc, #8]	; (80017b0 <LTDC_IRQHandler+0x10>)
 80017a6:	f003 fd79 	bl	800529c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	200003ec 	.word	0x200003ec

080017b4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80017b8:	4802      	ldr	r0, [pc, #8]	; (80017c4 <DMA2D_IRQHandler+0x10>)
 80017ba:	f001 fa60 	bl	8002c7e <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000358 	.word	0x20000358

080017c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017d0:	4a14      	ldr	r2, [pc, #80]	; (8001824 <_sbrk+0x5c>)
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <_sbrk+0x60>)
 80017d4:	1ad3      	subs	r3, r2, r3
 80017d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017dc:	4b13      	ldr	r3, [pc, #76]	; (800182c <_sbrk+0x64>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d102      	bne.n	80017ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <_sbrk+0x64>)
 80017e6:	4a12      	ldr	r2, [pc, #72]	; (8001830 <_sbrk+0x68>)
 80017e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ea:	4b10      	ldr	r3, [pc, #64]	; (800182c <_sbrk+0x64>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	693a      	ldr	r2, [r7, #16]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d207      	bcs.n	8001808 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017f8:	f00d f91c 	bl	800ea34 <__errno>
 80017fc:	4603      	mov	r3, r0
 80017fe:	220c      	movs	r2, #12
 8001800:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001806:	e009      	b.n	800181c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001808:	4b08      	ldr	r3, [pc, #32]	; (800182c <_sbrk+0x64>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800180e:	4b07      	ldr	r3, [pc, #28]	; (800182c <_sbrk+0x64>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4413      	add	r3, r2
 8001816:	4a05      	ldr	r2, [pc, #20]	; (800182c <_sbrk+0x64>)
 8001818:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800181a:	68fb      	ldr	r3, [r7, #12]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20030000 	.word	0x20030000
 8001828:	00000400 	.word	0x00000400
 800182c:	20000674 	.word	0x20000674
 8001830:	200090e0 	.word	0x200090e0

08001834 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <SystemInit+0x20>)
 800183a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800183e:	4a05      	ldr	r2, [pc, #20]	; (8001854 <SystemInit+0x20>)
 8001840:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001844:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001848:	bf00      	nop
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001858:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001890 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800185c:	480d      	ldr	r0, [pc, #52]	; (8001894 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800185e:	490e      	ldr	r1, [pc, #56]	; (8001898 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001860:	4a0e      	ldr	r2, [pc, #56]	; (800189c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001862:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001864:	e002      	b.n	800186c <LoopCopyDataInit>

08001866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800186a:	3304      	adds	r3, #4

0800186c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800186c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800186e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001870:	d3f9      	bcc.n	8001866 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001872:	4a0b      	ldr	r2, [pc, #44]	; (80018a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001874:	4c0b      	ldr	r4, [pc, #44]	; (80018a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001878:	e001      	b.n	800187e <LoopFillZerobss>

0800187a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800187a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800187c:	3204      	adds	r2, #4

0800187e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800187e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001880:	d3fb      	bcc.n	800187a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001882:	f7ff ffd7 	bl	8001834 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001886:	f00d f8db 	bl	800ea40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800188a:	f7fe feb7 	bl	80005fc <main>
  bx  lr    
 800188e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001890:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001894:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001898:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 800189c:	08010f64 	.word	0x08010f64
  ldr r2, =_sbss
 80018a0:	200000dc 	.word	0x200000dc
  ldr r4, =_ebss
 80018a4:	200090e0 	.word	0x200090e0

080018a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018a8:	e7fe      	b.n	80018a8 <ADC_IRQHandler>

080018aa <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 80018ae:	f000 fa5d 	bl	8001d6c <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 80018b2:	20ca      	movs	r0, #202	; 0xca
 80018b4:	f000 f95d 	bl	8001b72 <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 80018b8:	20c3      	movs	r0, #195	; 0xc3
 80018ba:	f000 f967 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x08);
 80018be:	2008      	movs	r0, #8
 80018c0:	f000 f964 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x50);
 80018c4:	2050      	movs	r0, #80	; 0x50
 80018c6:	f000 f961 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 80018ca:	20cf      	movs	r0, #207	; 0xcf
 80018cc:	f000 f951 	bl	8001b72 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80018d0:	2000      	movs	r0, #0
 80018d2:	f000 f95b 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 80018d6:	20c1      	movs	r0, #193	; 0xc1
 80018d8:	f000 f958 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x30);
 80018dc:	2030      	movs	r0, #48	; 0x30
 80018de:	f000 f955 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 80018e2:	20ed      	movs	r0, #237	; 0xed
 80018e4:	f000 f945 	bl	8001b72 <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80018e8:	2064      	movs	r0, #100	; 0x64
 80018ea:	f000 f94f 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80018ee:	2003      	movs	r0, #3
 80018f0:	f000 f94c 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80018f4:	2012      	movs	r0, #18
 80018f6:	f000 f949 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80018fa:	2081      	movs	r0, #129	; 0x81
 80018fc:	f000 f946 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 8001900:	20e8      	movs	r0, #232	; 0xe8
 8001902:	f000 f936 	bl	8001b72 <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 8001906:	2085      	movs	r0, #133	; 0x85
 8001908:	f000 f940 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800190c:	2000      	movs	r0, #0
 800190e:	f000 f93d 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001912:	2078      	movs	r0, #120	; 0x78
 8001914:	f000 f93a 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 8001918:	20cb      	movs	r0, #203	; 0xcb
 800191a:	f000 f92a 	bl	8001b72 <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 800191e:	2039      	movs	r0, #57	; 0x39
 8001920:	f000 f934 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 8001924:	202c      	movs	r0, #44	; 0x2c
 8001926:	f000 f931 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 800192a:	2000      	movs	r0, #0
 800192c:	f000 f92e 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x34);
 8001930:	2034      	movs	r0, #52	; 0x34
 8001932:	f000 f92b 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x02);
 8001936:	2002      	movs	r0, #2
 8001938:	f000 f928 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 800193c:	20f7      	movs	r0, #247	; 0xf7
 800193e:	f000 f918 	bl	8001b72 <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 8001942:	2020      	movs	r0, #32
 8001944:	f000 f922 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001948:	20ea      	movs	r0, #234	; 0xea
 800194a:	f000 f912 	bl	8001b72 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800194e:	2000      	movs	r0, #0
 8001950:	f000 f91c 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001954:	2000      	movs	r0, #0
 8001956:	f000 f919 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 800195a:	20b1      	movs	r0, #177	; 0xb1
 800195c:	f000 f909 	bl	8001b72 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001960:	2000      	movs	r0, #0
 8001962:	f000 f913 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001966:	201b      	movs	r0, #27
 8001968:	f000 f910 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 800196c:	20b6      	movs	r0, #182	; 0xb6
 800196e:	f000 f900 	bl	8001b72 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 8001972:	200a      	movs	r0, #10
 8001974:	f000 f90a 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001978:	20a2      	movs	r0, #162	; 0xa2
 800197a:	f000 f907 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800197e:	20c0      	movs	r0, #192	; 0xc0
 8001980:	f000 f8f7 	bl	8001b72 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001984:	2010      	movs	r0, #16
 8001986:	f000 f901 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 800198a:	20c1      	movs	r0, #193	; 0xc1
 800198c:	f000 f8f1 	bl	8001b72 <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001990:	2010      	movs	r0, #16
 8001992:	f000 f8fb 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001996:	20c5      	movs	r0, #197	; 0xc5
 8001998:	f000 f8eb 	bl	8001b72 <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 800199c:	2045      	movs	r0, #69	; 0x45
 800199e:	f000 f8f5 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x15);
 80019a2:	2015      	movs	r0, #21
 80019a4:	f000 f8f2 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 80019a8:	20c7      	movs	r0, #199	; 0xc7
 80019aa:	f000 f8e2 	bl	8001b72 <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 80019ae:	2090      	movs	r0, #144	; 0x90
 80019b0:	f000 f8ec 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 80019b4:	2036      	movs	r0, #54	; 0x36
 80019b6:	f000 f8dc 	bl	8001b72 <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 80019ba:	20c8      	movs	r0, #200	; 0xc8
 80019bc:	f000 f8e6 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 80019c0:	20f2      	movs	r0, #242	; 0xf2
 80019c2:	f000 f8d6 	bl	8001b72 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80019c6:	2000      	movs	r0, #0
 80019c8:	f000 f8e0 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 80019cc:	20b0      	movs	r0, #176	; 0xb0
 80019ce:	f000 f8d0 	bl	8001b72 <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 80019d2:	20c2      	movs	r0, #194	; 0xc2
 80019d4:	f000 f8da 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 80019d8:	20b6      	movs	r0, #182	; 0xb6
 80019da:	f000 f8ca 	bl	8001b72 <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 80019de:	200a      	movs	r0, #10
 80019e0:	f000 f8d4 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80019e4:	20a7      	movs	r0, #167	; 0xa7
 80019e6:	f000 f8d1 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80019ea:	2027      	movs	r0, #39	; 0x27
 80019ec:	f000 f8ce 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80019f0:	2004      	movs	r0, #4
 80019f2:	f000 f8cb 	bl	8001b8c <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80019f6:	202a      	movs	r0, #42	; 0x2a
 80019f8:	f000 f8bb 	bl	8001b72 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80019fc:	2000      	movs	r0, #0
 80019fe:	f000 f8c5 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a02:	2000      	movs	r0, #0
 8001a04:	f000 f8c2 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a08:	2000      	movs	r0, #0
 8001a0a:	f000 f8bf 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 8001a0e:	20ef      	movs	r0, #239	; 0xef
 8001a10:	f000 f8bc 	bl	8001b8c <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 8001a14:	202b      	movs	r0, #43	; 0x2b
 8001a16:	f000 f8ac 	bl	8001b72 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f000 f8b6 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a20:	2000      	movs	r0, #0
 8001a22:	f000 f8b3 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x01);
 8001a26:	2001      	movs	r0, #1
 8001a28:	f000 f8b0 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 8001a2c:	203f      	movs	r0, #63	; 0x3f
 8001a2e:	f000 f8ad 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 8001a32:	20f6      	movs	r0, #246	; 0xf6
 8001a34:	f000 f89d 	bl	8001b72 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001a38:	2001      	movs	r0, #1
 8001a3a:	f000 f8a7 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f000 f8a4 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001a44:	2006      	movs	r0, #6
 8001a46:	f000 f8a1 	bl	8001b8c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001a4a:	202c      	movs	r0, #44	; 0x2c
 8001a4c:	f000 f891 	bl	8001b72 <ili9341_WriteReg>
  LCD_Delay(200);
 8001a50:	20c8      	movs	r0, #200	; 0xc8
 8001a52:	f000 fa79 	bl	8001f48 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001a56:	2026      	movs	r0, #38	; 0x26
 8001a58:	f000 f88b 	bl	8001b72 <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001a5c:	2001      	movs	r0, #1
 8001a5e:	f000 f895 	bl	8001b8c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 8001a62:	20e0      	movs	r0, #224	; 0xe0
 8001a64:	f000 f885 	bl	8001b72 <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001a68:	200f      	movs	r0, #15
 8001a6a:	f000 f88f 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x29);
 8001a6e:	2029      	movs	r0, #41	; 0x29
 8001a70:	f000 f88c 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001a74:	2024      	movs	r0, #36	; 0x24
 8001a76:	f000 f889 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001a7a:	200c      	movs	r0, #12
 8001a7c:	f000 f886 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 8001a80:	200e      	movs	r0, #14
 8001a82:	f000 f883 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001a86:	2009      	movs	r0, #9
 8001a88:	f000 f880 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001a8c:	204e      	movs	r0, #78	; 0x4e
 8001a8e:	f000 f87d 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x78);
 8001a92:	2078      	movs	r0, #120	; 0x78
 8001a94:	f000 f87a 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001a98:	203c      	movs	r0, #60	; 0x3c
 8001a9a:	f000 f877 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001a9e:	2009      	movs	r0, #9
 8001aa0:	f000 f874 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001aa4:	2013      	movs	r0, #19
 8001aa6:	f000 f871 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001aaa:	2005      	movs	r0, #5
 8001aac:	f000 f86e 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x17);
 8001ab0:	2017      	movs	r0, #23
 8001ab2:	f000 f86b 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001ab6:	2011      	movs	r0, #17
 8001ab8:	f000 f868 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001abc:	2000      	movs	r0, #0
 8001abe:	f000 f865 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 8001ac2:	20e1      	movs	r0, #225	; 0xe1
 8001ac4:	f000 f855 	bl	8001b72 <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001ac8:	2000      	movs	r0, #0
 8001aca:	f000 f85f 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x16);
 8001ace:	2016      	movs	r0, #22
 8001ad0:	f000 f85c 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001ad4:	201b      	movs	r0, #27
 8001ad6:	f000 f859 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001ada:	2004      	movs	r0, #4
 8001adc:	f000 f856 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001ae0:	2011      	movs	r0, #17
 8001ae2:	f000 f853 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x07);
 8001ae6:	2007      	movs	r0, #7
 8001ae8:	f000 f850 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x31);
 8001aec:	2031      	movs	r0, #49	; 0x31
 8001aee:	f000 f84d 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x33);
 8001af2:	2033      	movs	r0, #51	; 0x33
 8001af4:	f000 f84a 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x42);
 8001af8:	2042      	movs	r0, #66	; 0x42
 8001afa:	f000 f847 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001afe:	2005      	movs	r0, #5
 8001b00:	f000 f844 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001b04:	200c      	movs	r0, #12
 8001b06:	f000 f841 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 8001b0a:	200a      	movs	r0, #10
 8001b0c:	f000 f83e 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x28);
 8001b10:	2028      	movs	r0, #40	; 0x28
 8001b12:	f000 f83b 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 8001b16:	202f      	movs	r0, #47	; 0x2f
 8001b18:	f000 f838 	bl	8001b8c <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 8001b1c:	200f      	movs	r0, #15
 8001b1e:	f000 f835 	bl	8001b8c <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 8001b22:	2011      	movs	r0, #17
 8001b24:	f000 f825 	bl	8001b72 <ili9341_WriteReg>
  LCD_Delay(200);
 8001b28:	20c8      	movs	r0, #200	; 0xc8
 8001b2a:	f000 fa0d 	bl	8001f48 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001b2e:	2029      	movs	r0, #41	; 0x29
 8001b30:	f000 f81f 	bl	8001b72 <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 8001b34:	202c      	movs	r0, #44	; 0x2c
 8001b36:	f000 f81c 	bl	8001b72 <ili9341_WriteReg>
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 8001b42:	f000 f913 	bl	8001d6c <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001b46:	2103      	movs	r1, #3
 8001b48:	20d3      	movs	r0, #211	; 0xd3
 8001b4a:	f000 f82c 	bl	8001ba6 <ili9341_ReadData>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	b29b      	uxth	r3, r3
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001b5a:	2029      	movs	r0, #41	; 0x29
 8001b5c:	f000 f809 	bl	8001b72 <ili9341_WriteReg>
}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}

08001b64 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001b68:	2028      	movs	r0, #40	; 0x28
 8001b6a:	f000 f802 	bl	8001b72 <ili9341_WriteReg>
}
 8001b6e:	bf00      	nop
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	4603      	mov	r3, r0
 8001b7a:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f000 f98e 	bl	8001ea0 <LCD_IO_WriteReg>
}
 8001b84:	bf00      	nop
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001b96:	88fb      	ldrh	r3, [r7, #6]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f000 f95f 	bl	8001e5c <LCD_IO_WriteData>
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	4603      	mov	r3, r0
 8001bae:	460a      	mov	r2, r1
 8001bb0:	80fb      	strh	r3, [r7, #6]
 8001bb2:	4613      	mov	r3, r2
 8001bb4:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001bb6:	797a      	ldrb	r2, [r7, #5]
 8001bb8:	88fb      	ldrh	r3, [r7, #6]
 8001bba:	4611      	mov	r1, r2
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f000 f991 	bl	8001ee4 <LCD_IO_ReadData>
 8001bc2:	4603      	mov	r3, r0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001bd0:	23f0      	movs	r3, #240	; 0xf0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001be0:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
	...

08001bf0 <SPIx_Init>:
/******************************* SPI Routines *********************************/

/**
 * @brief  SPIx Bus initialization
 */
static void SPIx_Init(void) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
	if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET) {
 8001bf4:	4819      	ldr	r0, [pc, #100]	; (8001c5c <SPIx_Init+0x6c>)
 8001bf6:	f005 fca2 	bl	800753e <HAL_SPI_GetState>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d12b      	bne.n	8001c58 <SPIx_Init+0x68>
		/* SPI configuration -----------------------------------------------------*/
		SpiHandle.Instance = DISCOVERY_SPIx;
 8001c00:	4b16      	ldr	r3, [pc, #88]	; (8001c5c <SPIx_Init+0x6c>)
 8001c02:	4a17      	ldr	r2, [pc, #92]	; (8001c60 <SPIx_Init+0x70>)
 8001c04:	601a      	str	r2, [r3, #0]
		 to verify these constraints:
		 - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
		 - l3gd20 SPI interface max baudrate is 10MHz for write/read
		 - PCLK2 frequency is set to 90 MHz 
		 */
		SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001c06:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <SPIx_Init+0x6c>)
 8001c08:	2218      	movs	r2, #24
 8001c0a:	61da      	str	r2, [r3, #28]

		/* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
		/* for LCD and GYRO (SPI_DIRECTION_2LINES) */
		/* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
		SpiHandle.Init.Direction = SPI_DIRECTION_2LINES;
 8001c0c:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <SPIx_Init+0x6c>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	609a      	str	r2, [r3, #8]
		SpiHandle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c12:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <SPIx_Init+0x6c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	615a      	str	r2, [r3, #20]
		SpiHandle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c18:	4b10      	ldr	r3, [pc, #64]	; (8001c5c <SPIx_Init+0x6c>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	611a      	str	r2, [r3, #16]
		SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001c1e:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <SPIx_Init+0x6c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	629a      	str	r2, [r3, #40]	; 0x28
		SpiHandle.Init.CRCPolynomial = 7;
 8001c24:	4b0d      	ldr	r3, [pc, #52]	; (8001c5c <SPIx_Init+0x6c>)
 8001c26:	2207      	movs	r2, #7
 8001c28:	62da      	str	r2, [r3, #44]	; 0x2c
		SpiHandle.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c2a:	4b0c      	ldr	r3, [pc, #48]	; (8001c5c <SPIx_Init+0x6c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	60da      	str	r2, [r3, #12]
		SpiHandle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c30:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <SPIx_Init+0x6c>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	621a      	str	r2, [r3, #32]
		SpiHandle.Init.NSS = SPI_NSS_SOFT;
 8001c36:	4b09      	ldr	r3, [pc, #36]	; (8001c5c <SPIx_Init+0x6c>)
 8001c38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c3c:	619a      	str	r2, [r3, #24]
		SpiHandle.Init.TIMode = SPI_TIMODE_DISABLED;
 8001c3e:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <SPIx_Init+0x6c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	625a      	str	r2, [r3, #36]	; 0x24
		SpiHandle.Init.Mode = SPI_MODE_MASTER;
 8001c44:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <SPIx_Init+0x6c>)
 8001c46:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c4a:	605a      	str	r2, [r3, #4]

		SPIx_MspInit(&SpiHandle);
 8001c4c:	4803      	ldr	r0, [pc, #12]	; (8001c5c <SPIx_Init+0x6c>)
 8001c4e:	f000 f853 	bl	8001cf8 <SPIx_MspInit>
		HAL_SPI_Init(&SpiHandle);
 8001c52:	4802      	ldr	r0, [pc, #8]	; (8001c5c <SPIx_Init+0x6c>)
 8001c54:	f004 ffd3 	bl	8006bfe <HAL_SPI_Init>
	}
}
 8001c58:	bf00      	nop
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	20000678 	.word	0x20000678
 8001c60:	40015000 	.word	0x40015000

08001c64 <SPIx_Read>:
/**
 * @brief  Reads 4 bytes from device.
 * @param  ReadSize: Number of bytes to read (max 4 bytes)
 * @retval Value read on the SPI
 */
static uint32_t SPIx_Read(uint8_t ReadSize) {
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef status = HAL_OK;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	73fb      	strb	r3, [r7, #15]
	uint32_t readvalue;

	status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize,
 8001c72:	79fb      	ldrb	r3, [r7, #7]
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <SPIx_Read+0x38>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f107 0108 	add.w	r1, r7, #8
 8001c7e:	4808      	ldr	r0, [pc, #32]	; (8001ca0 <SPIx_Read+0x3c>)
 8001c80:	f005 f9aa 	bl	8006fd8 <HAL_SPI_Receive>
 8001c84:	4603      	mov	r3, r0
 8001c86:	73fb      	strb	r3, [r7, #15]
			SpixTimeout);

	/* Check the communication status */
	if (status != HAL_OK) {
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <SPIx_Read+0x2e>
		/* Re-Initialize the BUS */
		SPIx_Error();
 8001c8e:	f000 f827 	bl	8001ce0 <SPIx_Error>
	}

	return readvalue;
 8001c92:	68bb      	ldr	r3, [r7, #8]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3710      	adds	r7, #16
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	2000003c 	.word	0x2000003c
 8001ca0:	20000678 	.word	0x20000678

08001ca4 <SPIx_Write>:

/**
 * @brief  Writes a byte to device.
 * @param  Value: value to be written
 */
static void SPIx_Write(uint16_t Value) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	4603      	mov	r3, r0
 8001cac:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status = HAL_OK;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	73fb      	strb	r3, [r7, #15]

	status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8001cb2:	4b09      	ldr	r3, [pc, #36]	; (8001cd8 <SPIx_Write+0x34>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	1db9      	adds	r1, r7, #6
 8001cb8:	2201      	movs	r2, #1
 8001cba:	4808      	ldr	r0, [pc, #32]	; (8001cdc <SPIx_Write+0x38>)
 8001cbc:	f005 f850 	bl	8006d60 <HAL_SPI_Transmit>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	73fb      	strb	r3, [r7, #15]

	/* Check the communication status */
	if (status != HAL_OK) {
 8001cc4:	7bfb      	ldrb	r3, [r7, #15]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <SPIx_Write+0x2a>
		/* Re-Initialize the BUS */
		SPIx_Error();
 8001cca:	f000 f809 	bl	8001ce0 <SPIx_Error>
	}
}
 8001cce:	bf00      	nop
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	2000003c 	.word	0x2000003c
 8001cdc:	20000678 	.word	0x20000678

08001ce0 <SPIx_Error>:
}

/**
 * @brief  SPIx error treatment function.
 */
static void SPIx_Error(void) {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
	/* De-initialize the SPI communication BUS */
	HAL_SPI_DeInit(&SpiHandle);
 8001ce4:	4803      	ldr	r0, [pc, #12]	; (8001cf4 <SPIx_Error+0x14>)
 8001ce6:	f005 f813 	bl	8006d10 <HAL_SPI_DeInit>

	/* Re- Initialize the SPI communication BUS */
	SPIx_Init();
 8001cea:	f7ff ff81 	bl	8001bf0 <SPIx_Init>
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	20000678 	.word	0x20000678

08001cf8 <SPIx_MspInit>:

/**
 * @brief  SPI MSP Init.
 * @param  hspi: SPI handle
 */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08a      	sub	sp, #40	; 0x28
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable SPIx clock */
	DISCOVERY_SPIx_CLK_ENABLE();
 8001d00:	2300      	movs	r3, #0
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <SPIx_MspInit+0x6c>)
 8001d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d08:	4a16      	ldr	r2, [pc, #88]	; (8001d64 <SPIx_MspInit+0x6c>)
 8001d0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d0e:	6453      	str	r3, [r2, #68]	; 0x44
 8001d10:	4b14      	ldr	r3, [pc, #80]	; (8001d64 <SPIx_MspInit+0x6c>)
 8001d12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	693b      	ldr	r3, [r7, #16]

	/* Enable DISCOVERY_SPI GPIO clock */
	DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <SPIx_MspInit+0x6c>)
 8001d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d24:	4a0f      	ldr	r2, [pc, #60]	; (8001d64 <SPIx_MspInit+0x6c>)
 8001d26:	f043 0320 	orr.w	r3, r3, #32
 8001d2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2c:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <SPIx_MspInit+0x6c>)
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d30:	f003 0320 	and.w	r3, r3, #32
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	68fb      	ldr	r3, [r7, #12]

	/* configure SPI SCK, MOSI and MISO */
	GPIO_InitStructure.Pin = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN
 8001d38:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001d3c:	617b      	str	r3, [r7, #20]
			| DISCOVERY_SPIx_MISO_PIN);
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.Pull = GPIO_PULLDOWN;
 8001d42:	2302      	movs	r3, #2
 8001d44:	61fb      	str	r3, [r7, #28]
	GPIO_InitStructure.Speed = GPIO_SPEED_MEDIUM;
 8001d46:	2301      	movs	r3, #1
 8001d48:	623b      	str	r3, [r7, #32]
	GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001d4a:	2305      	movs	r3, #5
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8001d4e:	f107 0314 	add.w	r3, r7, #20
 8001d52:	4619      	mov	r1, r3
 8001d54:	4804      	ldr	r0, [pc, #16]	; (8001d68 <SPIx_MspInit+0x70>)
 8001d56:	f001 f935 	bl	8002fc4 <HAL_GPIO_Init>
}
 8001d5a:	bf00      	nop
 8001d5c:	3728      	adds	r7, #40	; 0x28
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40021400 	.word	0x40021400

08001d6c <LCD_IO_Init>:
/********************************* LINK LCD ***********************************/

/**
 * @brief  Configures the LCD_SPI interface.
 */
void LCD_IO_Init(void) {
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b088      	sub	sp, #32
 8001d70:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	if (Is_LCD_IO_Initialized == 0) {
 8001d72:	4b36      	ldr	r3, [pc, #216]	; (8001e4c <LCD_IO_Init+0xe0>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d164      	bne.n	8001e44 <LCD_IO_Init+0xd8>
		Is_LCD_IO_Initialized = 1;
 8001d7a:	4b34      	ldr	r3, [pc, #208]	; (8001e4c <LCD_IO_Init+0xe0>)
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	701a      	strb	r2, [r3, #0]

		/* Configure NCS in Output Push-Pull mode */
		LCD_WRX_GPIO_CLK_ENABLE();
 8001d80:	2300      	movs	r3, #0
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	4b32      	ldr	r3, [pc, #200]	; (8001e50 <LCD_IO_Init+0xe4>)
 8001d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d88:	4a31      	ldr	r2, [pc, #196]	; (8001e50 <LCD_IO_Init+0xe4>)
 8001d8a:	f043 0308 	orr.w	r3, r3, #8
 8001d8e:	6313      	str	r3, [r2, #48]	; 0x30
 8001d90:	4b2f      	ldr	r3, [pc, #188]	; (8001e50 <LCD_IO_Init+0xe4>)
 8001d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d94:	f003 0308 	and.w	r3, r3, #8
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStructure.Pin = LCD_WRX_PIN;
 8001d9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001da0:	60fb      	str	r3, [r7, #12]
		GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001da2:	2301      	movs	r3, #1
 8001da4:	613b      	str	r3, [r7, #16]
		GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
		GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001daa:	2302      	movs	r3, #2
 8001dac:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001dae:	f107 030c 	add.w	r3, r7, #12
 8001db2:	4619      	mov	r1, r3
 8001db4:	4827      	ldr	r0, [pc, #156]	; (8001e54 <LCD_IO_Init+0xe8>)
 8001db6:	f001 f905 	bl	8002fc4 <HAL_GPIO_Init>

		LCD_RDX_GPIO_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	607b      	str	r3, [r7, #4]
 8001dbe:	4b24      	ldr	r3, [pc, #144]	; (8001e50 <LCD_IO_Init+0xe4>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	4a23      	ldr	r2, [pc, #140]	; (8001e50 <LCD_IO_Init+0xe4>)
 8001dc4:	f043 0308 	orr.w	r3, r3, #8
 8001dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dca:	4b21      	ldr	r3, [pc, #132]	; (8001e50 <LCD_IO_Init+0xe4>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	f003 0308 	and.w	r3, r3, #8
 8001dd2:	607b      	str	r3, [r7, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
		GPIO_InitStructure.Pin = LCD_RDX_PIN;
 8001dd6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dda:	60fb      	str	r3, [r7, #12]
		GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	613b      	str	r3, [r7, #16]
		GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001de0:	2300      	movs	r3, #0
 8001de2:	617b      	str	r3, [r7, #20]
		GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001de4:	2302      	movs	r3, #2
 8001de6:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001de8:	f107 030c 	add.w	r3, r7, #12
 8001dec:	4619      	mov	r1, r3
 8001dee:	4819      	ldr	r0, [pc, #100]	; (8001e54 <LCD_IO_Init+0xe8>)
 8001df0:	f001 f8e8 	bl	8002fc4 <HAL_GPIO_Init>

		/* Configure the LCD Control pins ----------------------------------------*/
		LCD_NCS_GPIO_CLK_ENABLE();
 8001df4:	2300      	movs	r3, #0
 8001df6:	603b      	str	r3, [r7, #0]
 8001df8:	4b15      	ldr	r3, [pc, #84]	; (8001e50 <LCD_IO_Init+0xe4>)
 8001dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfc:	4a14      	ldr	r2, [pc, #80]	; (8001e50 <LCD_IO_Init+0xe4>)
 8001dfe:	f043 0304 	orr.w	r3, r3, #4
 8001e02:	6313      	str	r3, [r2, #48]	; 0x30
 8001e04:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <LCD_IO_Init+0xe4>)
 8001e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	603b      	str	r3, [r7, #0]
 8001e0e:	683b      	ldr	r3, [r7, #0]

		/* Configure NCS in Output Push-Pull mode */
		GPIO_InitStructure.Pin = LCD_NCS_PIN;
 8001e10:	2304      	movs	r3, #4
 8001e12:	60fb      	str	r3, [r7, #12]
		GPIO_InitStructure.Mode = GPIO_MODE_OUTPUT_PP;
 8001e14:	2301      	movs	r3, #1
 8001e16:	613b      	str	r3, [r7, #16]
		GPIO_InitStructure.Pull = GPIO_NOPULL;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]
		GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	61bb      	str	r3, [r7, #24]
		HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001e20:	f107 030c 	add.w	r3, r7, #12
 8001e24:	4619      	mov	r1, r3
 8001e26:	480c      	ldr	r0, [pc, #48]	; (8001e58 <LCD_IO_Init+0xec>)
 8001e28:	f001 f8cc 	bl	8002fc4 <HAL_GPIO_Init>

		/* Set or Reset the control line */
		LCD_CS_LOW();
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	2104      	movs	r1, #4
 8001e30:	4809      	ldr	r0, [pc, #36]	; (8001e58 <LCD_IO_Init+0xec>)
 8001e32:	f001 fb7f 	bl	8003534 <HAL_GPIO_WritePin>
		LCD_CS_HIGH();
 8001e36:	2201      	movs	r2, #1
 8001e38:	2104      	movs	r1, #4
 8001e3a:	4807      	ldr	r0, [pc, #28]	; (8001e58 <LCD_IO_Init+0xec>)
 8001e3c:	f001 fb7a 	bl	8003534 <HAL_GPIO_WritePin>

		SPIx_Init();
 8001e40:	f7ff fed6 	bl	8001bf0 <SPIx_Init>
	}
}
 8001e44:	bf00      	nop
 8001e46:	3720      	adds	r7, #32
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	200006d0 	.word	0x200006d0
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40020c00 	.word	0x40020c00
 8001e58:	40020800 	.word	0x40020800

08001e5c <LCD_IO_WriteData>:

/**
 * @brief  Writes register value.
 */
void LCD_IO_WriteData(uint16_t RegValue) {
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	80fb      	strh	r3, [r7, #6]
	/* Set WRX to send data */
	LCD_WRX_HIGH();
 8001e66:	2201      	movs	r2, #1
 8001e68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e6c:	480a      	ldr	r0, [pc, #40]	; (8001e98 <LCD_IO_WriteData+0x3c>)
 8001e6e:	f001 fb61 	bl	8003534 <HAL_GPIO_WritePin>

	/* Reset LCD control line(/CS) and Send data */
	LCD_CS_LOW();
 8001e72:	2200      	movs	r2, #0
 8001e74:	2104      	movs	r1, #4
 8001e76:	4809      	ldr	r0, [pc, #36]	; (8001e9c <LCD_IO_WriteData+0x40>)
 8001e78:	f001 fb5c 	bl	8003534 <HAL_GPIO_WritePin>
	SPIx_Write(RegValue);
 8001e7c:	88fb      	ldrh	r3, [r7, #6]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f7ff ff10 	bl	8001ca4 <SPIx_Write>

	/* Deselect: Chip Select high */
	LCD_CS_HIGH();
 8001e84:	2201      	movs	r2, #1
 8001e86:	2104      	movs	r1, #4
 8001e88:	4804      	ldr	r0, [pc, #16]	; (8001e9c <LCD_IO_WriteData+0x40>)
 8001e8a:	f001 fb53 	bl	8003534 <HAL_GPIO_WritePin>
}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40020c00 	.word	0x40020c00
 8001e9c:	40020800 	.word	0x40020800

08001ea0 <LCD_IO_WriteReg>:

/**
 * @brief  Writes register address.
 */
void LCD_IO_WriteReg(uint8_t Reg) {
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	71fb      	strb	r3, [r7, #7]
	/* Reset WRX to send command */
	LCD_WRX_LOW();
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001eb0:	480a      	ldr	r0, [pc, #40]	; (8001edc <LCD_IO_WriteReg+0x3c>)
 8001eb2:	f001 fb3f 	bl	8003534 <HAL_GPIO_WritePin>

	/* Reset LCD control line(/CS) and Send command */
	LCD_CS_LOW();
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	2104      	movs	r1, #4
 8001eba:	4809      	ldr	r0, [pc, #36]	; (8001ee0 <LCD_IO_WriteReg+0x40>)
 8001ebc:	f001 fb3a 	bl	8003534 <HAL_GPIO_WritePin>
	SPIx_Write(Reg);
 8001ec0:	79fb      	ldrb	r3, [r7, #7]
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff feed 	bl	8001ca4 <SPIx_Write>

	/* Deselect: Chip Select high */
	LCD_CS_HIGH();
 8001eca:	2201      	movs	r2, #1
 8001ecc:	2104      	movs	r1, #4
 8001ece:	4804      	ldr	r0, [pc, #16]	; (8001ee0 <LCD_IO_WriteReg+0x40>)
 8001ed0:	f001 fb30 	bl	8003534 <HAL_GPIO_WritePin>
}
 8001ed4:	bf00      	nop
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	40020c00 	.word	0x40020c00
 8001ee0:	40020800 	.word	0x40020800

08001ee4 <LCD_IO_ReadData>:
 * @brief  Reads register value.
 * @param  RegValue Address of the register to read
 * @param  ReadSize Number of bytes to read
 * @retval Content of the register value
 */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) {
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	4603      	mov	r3, r0
 8001eec:	460a      	mov	r2, r1
 8001eee:	80fb      	strh	r3, [r7, #6]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	717b      	strb	r3, [r7, #5]
	uint32_t readvalue = 0;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60fb      	str	r3, [r7, #12]

	/* Select: Chip Select low */
	LCD_CS_LOW();
 8001ef8:	2200      	movs	r2, #0
 8001efa:	2104      	movs	r1, #4
 8001efc:	4810      	ldr	r0, [pc, #64]	; (8001f40 <LCD_IO_ReadData+0x5c>)
 8001efe:	f001 fb19 	bl	8003534 <HAL_GPIO_WritePin>

	/* Reset WRX to send command */
	LCD_WRX_LOW();
 8001f02:	2200      	movs	r2, #0
 8001f04:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f08:	480e      	ldr	r0, [pc, #56]	; (8001f44 <LCD_IO_ReadData+0x60>)
 8001f0a:	f001 fb13 	bl	8003534 <HAL_GPIO_WritePin>

	SPIx_Write(RegValue);
 8001f0e:	88fb      	ldrh	r3, [r7, #6]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff fec7 	bl	8001ca4 <SPIx_Write>

	readvalue = SPIx_Read(ReadSize);
 8001f16:	797b      	ldrb	r3, [r7, #5]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f7ff fea3 	bl	8001c64 <SPIx_Read>
 8001f1e:	60f8      	str	r0, [r7, #12]

	/* Set WRX to send data */
	LCD_WRX_HIGH();
 8001f20:	2201      	movs	r2, #1
 8001f22:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f26:	4807      	ldr	r0, [pc, #28]	; (8001f44 <LCD_IO_ReadData+0x60>)
 8001f28:	f001 fb04 	bl	8003534 <HAL_GPIO_WritePin>

	/* Deselect: Chip Select high */
	LCD_CS_HIGH();
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	2104      	movs	r1, #4
 8001f30:	4803      	ldr	r0, [pc, #12]	; (8001f40 <LCD_IO_ReadData+0x5c>)
 8001f32:	f001 faff 	bl	8003534 <HAL_GPIO_WritePin>

	return readvalue;
 8001f36:	68fb      	ldr	r3, [r7, #12]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	40020800 	.word	0x40020800
 8001f44:	40020c00 	.word	0x40020c00

08001f48 <LCD_Delay>:

/**
 * @brief  Wait for loop in ms.
 * @param  Delay in ms.
 */
void LCD_Delay(uint32_t Delay) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
	HAL_Delay(Delay);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f000 fb6b 	bl	800262c <HAL_Delay>
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
	...

08001f60 <BSP_LCD_Init>:

/**
 * @brief  Initializes the LCD.
 * @retval LCD state
 */
uint8_t BSP_LCD_Init(void) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	af00      	add	r7, sp, #0
	/* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
	/* In this case, ReadID function is bypassed.*/
	/*if(ili9341_drv.ReadID() == ILI9341_ID)*/

	/* LTDC Configuration ----------------------------------------------------*/
	LtdcHandler.Instance = LTDC;
 8001f64:	4b2d      	ldr	r3, [pc, #180]	; (800201c <BSP_LCD_Init+0xbc>)
 8001f66:	4a2e      	ldr	r2, [pc, #184]	; (8002020 <BSP_LCD_Init+0xc0>)
 8001f68:	601a      	str	r2, [r3, #0]
	 ActiveH=320 (323-2-2+1)
	 VFP=4 (327-320-2-2+1)
	 */

	/* Configure horizontal synchronization width */
	LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8001f6a:	4b2c      	ldr	r3, [pc, #176]	; (800201c <BSP_LCD_Init+0xbc>)
 8001f6c:	2209      	movs	r2, #9
 8001f6e:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8001f70:	4b2a      	ldr	r3, [pc, #168]	; (800201c <BSP_LCD_Init+0xbc>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8001f76:	4b29      	ldr	r3, [pc, #164]	; (800201c <BSP_LCD_Init+0xbc>)
 8001f78:	221d      	movs	r2, #29
 8001f7a:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8001f7c:	4b27      	ldr	r3, [pc, #156]	; (800201c <BSP_LCD_Init+0xbc>)
 8001f7e:	2203      	movs	r2, #3
 8001f80:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	LtdcHandler.Init.AccumulatedActiveW = 269;
 8001f82:	4b26      	ldr	r3, [pc, #152]	; (800201c <BSP_LCD_Init+0xbc>)
 8001f84:	f240 120d 	movw	r2, #269	; 0x10d
 8001f88:	625a      	str	r2, [r3, #36]	; 0x24
	/* Configure accumulated active height */
	LtdcHandler.Init.AccumulatedActiveH = 323;
 8001f8a:	4b24      	ldr	r3, [pc, #144]	; (800201c <BSP_LCD_Init+0xbc>)
 8001f8c:	f240 1243 	movw	r2, #323	; 0x143
 8001f90:	629a      	str	r2, [r3, #40]	; 0x28
	/* Configure total width */
	LtdcHandler.Init.TotalWidth = 279;
 8001f92:	4b22      	ldr	r3, [pc, #136]	; (800201c <BSP_LCD_Init+0xbc>)
 8001f94:	f240 1217 	movw	r2, #279	; 0x117
 8001f98:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Configure total height */
	LtdcHandler.Init.TotalHeigh = 327;
 8001f9a:	4b20      	ldr	r3, [pc, #128]	; (800201c <BSP_LCD_Init+0xbc>)
 8001f9c:	f240 1247 	movw	r2, #327	; 0x147
 8001fa0:	631a      	str	r2, [r3, #48]	; 0x30

	/* Configure R,G,B component values for LCD background color */
	LtdcHandler.Init.Backcolor.Red = 0;
 8001fa2:	4b1e      	ldr	r3, [pc, #120]	; (800201c <BSP_LCD_Init+0xbc>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	LtdcHandler.Init.Backcolor.Blue = 0;
 8001faa:	4b1c      	ldr	r3, [pc, #112]	; (800201c <BSP_LCD_Init+0xbc>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	LtdcHandler.Init.Backcolor.Green = 0;
 8001fb2:	4b1a      	ldr	r3, [pc, #104]	; (800201c <BSP_LCD_Init+0xbc>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	/* LCD clock configuration */
	/* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
	/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
	/* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
	/* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001fba:	4b1a      	ldr	r3, [pc, #104]	; (8002024 <BSP_LCD_Init+0xc4>)
 8001fbc:	2208      	movs	r2, #8
 8001fbe:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001fc0:	4b18      	ldr	r3, [pc, #96]	; (8002024 <BSP_LCD_Init+0xc4>)
 8001fc2:	22c0      	movs	r2, #192	; 0xc0
 8001fc4:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001fc6:	4b17      	ldr	r3, [pc, #92]	; (8002024 <BSP_LCD_Init+0xc4>)
 8001fc8:	2204      	movs	r2, #4
 8001fca:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001fcc:	4b15      	ldr	r3, [pc, #84]	; (8002024 <BSP_LCD_Init+0xc4>)
 8001fce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fd2:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001fd4:	4813      	ldr	r0, [pc, #76]	; (8002024 <BSP_LCD_Init+0xc4>)
 8001fd6:	f004 f8c3 	bl	8006160 <HAL_RCCEx_PeriphCLKConfig>

	/* Polarity */
	LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001fda:	4b10      	ldr	r3, [pc, #64]	; (800201c <BSP_LCD_Init+0xbc>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	605a      	str	r2, [r3, #4]
	LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001fe0:	4b0e      	ldr	r3, [pc, #56]	; (800201c <BSP_LCD_Init+0xbc>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]
	LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001fe6:	4b0d      	ldr	r3, [pc, #52]	; (800201c <BSP_LCD_Init+0xbc>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	60da      	str	r2, [r3, #12]
	LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001fec:	4b0b      	ldr	r3, [pc, #44]	; (800201c <BSP_LCD_Init+0xbc>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	611a      	str	r2, [r3, #16]

	BSP_LCD_MspInit();
 8001ff2:	f000 f839 	bl	8002068 <BSP_LCD_MspInit>
	HAL_LTDC_Init(&LtdcHandler);
 8001ff6:	4809      	ldr	r0, [pc, #36]	; (800201c <BSP_LCD_Init+0xbc>)
 8001ff8:	f003 f880 	bl	80050fc <HAL_LTDC_Init>

	/* Select the device */
	LcdDrv = &ili9341_drv;
 8001ffc:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <BSP_LCD_Init+0xc8>)
 8001ffe:	4a0b      	ldr	r2, [pc, #44]	; (800202c <BSP_LCD_Init+0xcc>)
 8002000:	601a      	str	r2, [r3, #0]

	/* LCD Init */
	LcdDrv->Init();
 8002002:	4b09      	ldr	r3, [pc, #36]	; (8002028 <BSP_LCD_Init+0xc8>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4798      	blx	r3

	/* Initialize the SDRAM */
	BSP_SDRAM_Init();
 800200a:	f000 f903 	bl	8002214 <BSP_SDRAM_Init>

	/* Initialize the font */
	BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800200e:	4808      	ldr	r0, [pc, #32]	; (8002030 <BSP_LCD_Init+0xd0>)
 8002010:	f000 f810 	bl	8002034 <BSP_LCD_SetFont>

	return LCD_OK;
 8002014:	2300      	movs	r3, #0
}
 8002016:	4618      	mov	r0, r3
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	200006d4 	.word	0x200006d4
 8002020:	40016800 	.word	0x40016800
 8002024:	2000077c 	.word	0x2000077c
 8002028:	200007c8 	.word	0x200007c8
 800202c:	20000004 	.word	0x20000004
 8002030:	20000040 	.word	0x20000040

08002034 <BSP_LCD_SetFont>:

/**
 * @brief  Sets the Text Font.
 * @param  pFonts: the layer font to be used
 */
void BSP_LCD_SetFont(sFONT *pFonts) {
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
	DrawProp[ActiveLayer].pFont = pFonts;
 800203c:	4b08      	ldr	r3, [pc, #32]	; (8002060 <BSP_LCD_SetFont+0x2c>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	4908      	ldr	r1, [pc, #32]	; (8002064 <BSP_LCD_SetFont+0x30>)
 8002042:	4613      	mov	r3, r2
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	4413      	add	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	440b      	add	r3, r1
 800204c:	3308      	adds	r3, #8
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	601a      	str	r2, [r3, #0]
}
 8002052:	bf00      	nop
 8002054:	370c      	adds	r7, #12
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	200007ac 	.word	0x200007ac
 8002064:	200007b0 	.word	0x200007b0

08002068 <BSP_LCD_MspInit>:
 *******************************************************************************/

/**
 * @brief  Initializes the LTDC MSP.
 */
__weak void BSP_LCD_MspInit(void) {
 8002068:	b580      	push	{r7, lr}
 800206a:	b08e      	sub	sp, #56	; 0x38
 800206c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	/* Enable the LTDC and DMA2D Clock */
	__HAL_RCC_LTDC_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	623b      	str	r3, [r7, #32]
 8002072:	4b61      	ldr	r3, [pc, #388]	; (80021f8 <BSP_LCD_MspInit+0x190>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	4a60      	ldr	r2, [pc, #384]	; (80021f8 <BSP_LCD_MspInit+0x190>)
 8002078:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800207c:	6453      	str	r3, [r2, #68]	; 0x44
 800207e:	4b5e      	ldr	r3, [pc, #376]	; (80021f8 <BSP_LCD_MspInit+0x190>)
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002086:	623b      	str	r3, [r7, #32]
 8002088:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_DMA2D_CLK_ENABLE();
 800208a:	2300      	movs	r3, #0
 800208c:	61fb      	str	r3, [r7, #28]
 800208e:	4b5a      	ldr	r3, [pc, #360]	; (80021f8 <BSP_LCD_MspInit+0x190>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	4a59      	ldr	r2, [pc, #356]	; (80021f8 <BSP_LCD_MspInit+0x190>)
 8002094:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002098:	6313      	str	r3, [r2, #48]	; 0x30
 800209a:	4b57      	ldr	r3, [pc, #348]	; (80021f8 <BSP_LCD_MspInit+0x190>)
 800209c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800209e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020a2:	61fb      	str	r3, [r7, #28]
 80020a4:	69fb      	ldr	r3, [r7, #28]

	/* Enable GPIOs clock */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	61bb      	str	r3, [r7, #24]
 80020aa:	4b53      	ldr	r3, [pc, #332]	; (80021f8 <BSP_LCD_MspInit+0x190>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	4a52      	ldr	r2, [pc, #328]	; (80021f8 <BSP_LCD_MspInit+0x190>)
 80020b0:	f043 0301 	orr.w	r3, r3, #1
 80020b4:	6313      	str	r3, [r2, #48]	; 0x30
 80020b6:	4b50      	ldr	r3, [pc, #320]	; (80021f8 <BSP_LCD_MspInit+0x190>)
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	f003 0301 	and.w	r3, r3, #1
 80020be:	61bb      	str	r3, [r7, #24]
 80020c0:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	4b4c      	ldr	r3, [pc, #304]	; (80021f8 <BSP_LCD_MspInit+0x190>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	4a4b      	ldr	r2, [pc, #300]	; (80021f8 <BSP_LCD_MspInit+0x190>)
 80020cc:	f043 0302 	orr.w	r3, r3, #2
 80020d0:	6313      	str	r3, [r2, #48]	; 0x30
 80020d2:	4b49      	ldr	r3, [pc, #292]	; (80021f8 <BSP_LCD_MspInit+0x190>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	613b      	str	r3, [r7, #16]
 80020e2:	4b45      	ldr	r3, [pc, #276]	; (80021f8 <BSP_LCD_MspInit+0x190>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	4a44      	ldr	r2, [pc, #272]	; (80021f8 <BSP_LCD_MspInit+0x190>)
 80020e8:	f043 0304 	orr.w	r3, r3, #4
 80020ec:	6313      	str	r3, [r2, #48]	; 0x30
 80020ee:	4b42      	ldr	r3, [pc, #264]	; (80021f8 <BSP_LCD_MspInit+0x190>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	f003 0304 	and.w	r3, r3, #4
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80020fa:	2300      	movs	r3, #0
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	4b3e      	ldr	r3, [pc, #248]	; (80021f8 <BSP_LCD_MspInit+0x190>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	4a3d      	ldr	r2, [pc, #244]	; (80021f8 <BSP_LCD_MspInit+0x190>)
 8002104:	f043 0308 	orr.w	r3, r3, #8
 8002108:	6313      	str	r3, [r2, #48]	; 0x30
 800210a:	4b3b      	ldr	r3, [pc, #236]	; (80021f8 <BSP_LCD_MspInit+0x190>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	f003 0308 	and.w	r3, r3, #8
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	4b37      	ldr	r3, [pc, #220]	; (80021f8 <BSP_LCD_MspInit+0x190>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	4a36      	ldr	r2, [pc, #216]	; (80021f8 <BSP_LCD_MspInit+0x190>)
 8002120:	f043 0320 	orr.w	r3, r3, #32
 8002124:	6313      	str	r3, [r2, #48]	; 0x30
 8002126:	4b34      	ldr	r3, [pc, #208]	; (80021f8 <BSP_LCD_MspInit+0x190>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	f003 0320 	and.w	r3, r3, #32
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	607b      	str	r3, [r7, #4]
 8002136:	4b30      	ldr	r3, [pc, #192]	; (80021f8 <BSP_LCD_MspInit+0x190>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	4a2f      	ldr	r2, [pc, #188]	; (80021f8 <BSP_LCD_MspInit+0x190>)
 800213c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002140:	6313      	str	r3, [r2, #48]	; 0x30
 8002142:	4b2d      	ldr	r3, [pc, #180]	; (80021f8 <BSP_LCD_MspInit+0x190>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800214a:	607b      	str	r3, [r7, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
	 |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
	 -----------------------------------------------------
	 */

	/* GPIOA configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800214e:	f641 0358 	movw	r3, #6232	; 0x1858
 8002152:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_PIN_11 | GPIO_PIN_12;
	GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002154:	2302      	movs	r3, #2
 8002156:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002158:	2300      	movs	r3, #0
 800215a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800215c:	2302      	movs	r3, #2
 800215e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStructure.Alternate = GPIO_AF14_LTDC;
 8002160:	230e      	movs	r3, #14
 8002162:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002164:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002168:	4619      	mov	r1, r3
 800216a:	4824      	ldr	r0, [pc, #144]	; (80021fc <BSP_LCD_MspInit+0x194>)
 800216c:	f000 ff2a 	bl	8002fc4 <HAL_GPIO_Init>

	/* GPIOB configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_8 |
 8002170:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002176:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800217a:	4619      	mov	r1, r3
 800217c:	4820      	ldr	r0, [pc, #128]	; (8002200 <BSP_LCD_MspInit+0x198>)
 800217e:	f000 ff21 	bl	8002fc4 <HAL_GPIO_Init>

	/* GPIOC configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8002182:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 8002186:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800218c:	4619      	mov	r1, r3
 800218e:	481d      	ldr	r0, [pc, #116]	; (8002204 <BSP_LCD_MspInit+0x19c>)
 8002190:	f000 ff18 	bl	8002fc4 <HAL_GPIO_Init>

	/* GPIOD configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002194:	2348      	movs	r3, #72	; 0x48
 8002196:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002198:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800219c:	4619      	mov	r1, r3
 800219e:	481a      	ldr	r0, [pc, #104]	; (8002208 <BSP_LCD_MspInit+0x1a0>)
 80021a0:	f000 ff10 	bl	8002fc4 <HAL_GPIO_Init>

	/* GPIOF configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_10;
 80021a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021a8:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80021aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021ae:	4619      	mov	r1, r3
 80021b0:	4816      	ldr	r0, [pc, #88]	; (800220c <BSP_LCD_MspInit+0x1a4>)
 80021b2:	f000 ff07 	bl	8002fc4 <HAL_GPIO_Init>

	/* GPIOG configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 |
 80021b6:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
 80021ba:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_PIN_11;
	HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80021bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021c0:	4619      	mov	r1, r3
 80021c2:	4813      	ldr	r0, [pc, #76]	; (8002210 <BSP_LCD_MspInit+0x1a8>)
 80021c4:	f000 fefe 	bl	8002fc4 <HAL_GPIO_Init>

	/* GPIOB configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80021c8:	2303      	movs	r3, #3
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStructure.Alternate = GPIO_AF9_LTDC;
 80021cc:	2309      	movs	r3, #9
 80021ce:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80021d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021d4:	4619      	mov	r1, r3
 80021d6:	480a      	ldr	r0, [pc, #40]	; (8002200 <BSP_LCD_MspInit+0x198>)
 80021d8:	f000 fef4 	bl	8002fc4 <HAL_GPIO_Init>

	/* GPIOG configuration */
	GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80021dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80021e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021e6:	4619      	mov	r1, r3
 80021e8:	4809      	ldr	r0, [pc, #36]	; (8002210 <BSP_LCD_MspInit+0x1a8>)
 80021ea:	f000 feeb 	bl	8002fc4 <HAL_GPIO_Init>
}
 80021ee:	bf00      	nop
 80021f0:	3738      	adds	r7, #56	; 0x38
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40023800 	.word	0x40023800
 80021fc:	40020000 	.word	0x40020000
 8002200:	40020400 	.word	0x40020400
 8002204:	40020800 	.word	0x40020800
 8002208:	40020c00 	.word	0x40020c00
 800220c:	40021400 	.word	0x40021400
 8002210:	40021800 	.word	0x40021800

08002214 <BSP_SDRAM_Init>:
 */

/**
 * @brief  Initializes the SDRAM device.
 */
uint8_t BSP_SDRAM_Init(void) {
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
	static uint8_t sdramstatus = SDRAM_ERROR;

	/* SDRAM device configuration */
	SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002218:	4b29      	ldr	r3, [pc, #164]	; (80022c0 <BSP_SDRAM_Init+0xac>)
 800221a:	4a2a      	ldr	r2, [pc, #168]	; (80022c4 <BSP_SDRAM_Init+0xb0>)
 800221c:	601a      	str	r2, [r3, #0]

	/* FMC Configuration -------------------------------------------------------*/
	/* FMC SDRAM Bank configuration */
	/* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
	/* TMRD: 2 Clock cycles */
	Timing.LoadToActiveDelay = 2;
 800221e:	4b2a      	ldr	r3, [pc, #168]	; (80022c8 <BSP_SDRAM_Init+0xb4>)
 8002220:	2202      	movs	r2, #2
 8002222:	601a      	str	r2, [r3, #0]
	/* TXSR: min=70ns (7x11.11ns) */
	Timing.ExitSelfRefreshDelay = 7;
 8002224:	4b28      	ldr	r3, [pc, #160]	; (80022c8 <BSP_SDRAM_Init+0xb4>)
 8002226:	2207      	movs	r2, #7
 8002228:	605a      	str	r2, [r3, #4]
	/* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
	Timing.SelfRefreshTime = 4;
 800222a:	4b27      	ldr	r3, [pc, #156]	; (80022c8 <BSP_SDRAM_Init+0xb4>)
 800222c:	2204      	movs	r2, #4
 800222e:	609a      	str	r2, [r3, #8]
	/* TRC:  min=70 (7x11.11ns) */
	Timing.RowCycleDelay = 7;
 8002230:	4b25      	ldr	r3, [pc, #148]	; (80022c8 <BSP_SDRAM_Init+0xb4>)
 8002232:	2207      	movs	r2, #7
 8002234:	60da      	str	r2, [r3, #12]
	/* TWR:  min=1+ 7ns (1+1x11.11ns) */
	Timing.WriteRecoveryTime = 2;
 8002236:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <BSP_SDRAM_Init+0xb4>)
 8002238:	2202      	movs	r2, #2
 800223a:	611a      	str	r2, [r3, #16]
	/* TRP:  20ns => 2x11.11ns*/
	Timing.RPDelay = 2;
 800223c:	4b22      	ldr	r3, [pc, #136]	; (80022c8 <BSP_SDRAM_Init+0xb4>)
 800223e:	2202      	movs	r2, #2
 8002240:	615a      	str	r2, [r3, #20]
	/* TRCD: 20ns => 2x11.11ns */
	Timing.RCDDelay = 2;
 8002242:	4b21      	ldr	r3, [pc, #132]	; (80022c8 <BSP_SDRAM_Init+0xb4>)
 8002244:	2202      	movs	r2, #2
 8002246:	619a      	str	r2, [r3, #24]

	/* FMC SDRAM control configuration */
	SdramHandle.Init.SDBank = FMC_SDRAM_BANK2;
 8002248:	4b1d      	ldr	r3, [pc, #116]	; (80022c0 <BSP_SDRAM_Init+0xac>)
 800224a:	2201      	movs	r2, #1
 800224c:	605a      	str	r2, [r3, #4]
	/* Row addressing: [7:0] */
	SdramHandle.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800224e:	4b1c      	ldr	r3, [pc, #112]	; (80022c0 <BSP_SDRAM_Init+0xac>)
 8002250:	2200      	movs	r2, #0
 8002252:	609a      	str	r2, [r3, #8]
	/* Column addressing: [11:0] */
	SdramHandle.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002254:	4b1a      	ldr	r3, [pc, #104]	; (80022c0 <BSP_SDRAM_Init+0xac>)
 8002256:	2204      	movs	r2, #4
 8002258:	60da      	str	r2, [r3, #12]
	SdramHandle.Init.MemoryDataWidth = SDRAM_MEMORY_WIDTH;
 800225a:	4b19      	ldr	r3, [pc, #100]	; (80022c0 <BSP_SDRAM_Init+0xac>)
 800225c:	2210      	movs	r2, #16
 800225e:	611a      	str	r2, [r3, #16]
	SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8002260:	4b17      	ldr	r3, [pc, #92]	; (80022c0 <BSP_SDRAM_Init+0xac>)
 8002262:	2240      	movs	r2, #64	; 0x40
 8002264:	615a      	str	r2, [r3, #20]
	SdramHandle.Init.CASLatency = SDRAM_CAS_LATENCY;
 8002266:	4b16      	ldr	r3, [pc, #88]	; (80022c0 <BSP_SDRAM_Init+0xac>)
 8002268:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800226c:	619a      	str	r2, [r3, #24]
	SdramHandle.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800226e:	4b14      	ldr	r3, [pc, #80]	; (80022c0 <BSP_SDRAM_Init+0xac>)
 8002270:	2200      	movs	r2, #0
 8002272:	61da      	str	r2, [r3, #28]
	SdramHandle.Init.SDClockPeriod = SDCLOCK_PERIOD;
 8002274:	4b12      	ldr	r3, [pc, #72]	; (80022c0 <BSP_SDRAM_Init+0xac>)
 8002276:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800227a:	621a      	str	r2, [r3, #32]
	SdramHandle.Init.ReadBurst = SDRAM_READBURST;
 800227c:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <BSP_SDRAM_Init+0xac>)
 800227e:	2200      	movs	r2, #0
 8002280:	625a      	str	r2, [r3, #36]	; 0x24
	SdramHandle.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8002282:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <BSP_SDRAM_Init+0xac>)
 8002284:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002288:	629a      	str	r2, [r3, #40]	; 0x28

	/* SDRAM controller initialization */
	/* __weak function can be surcharged by the application code */
	BSP_SDRAM_MspInit(&SdramHandle, (void*) NULL);
 800228a:	2100      	movs	r1, #0
 800228c:	480c      	ldr	r0, [pc, #48]	; (80022c0 <BSP_SDRAM_Init+0xac>)
 800228e:	f000 f87f 	bl	8002390 <BSP_SDRAM_MspInit>
	if (HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK) {
 8002292:	490d      	ldr	r1, [pc, #52]	; (80022c8 <BSP_SDRAM_Init+0xb4>)
 8002294:	480a      	ldr	r0, [pc, #40]	; (80022c0 <BSP_SDRAM_Init+0xac>)
 8002296:	f004 fc21 	bl	8006adc <HAL_SDRAM_Init>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d003      	beq.n	80022a8 <BSP_SDRAM_Init+0x94>
		sdramstatus = SDRAM_ERROR;
 80022a0:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <BSP_SDRAM_Init+0xb8>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	701a      	strb	r2, [r3, #0]
 80022a6:	e002      	b.n	80022ae <BSP_SDRAM_Init+0x9a>
	} else {
		sdramstatus = SDRAM_OK;
 80022a8:	4b08      	ldr	r3, [pc, #32]	; (80022cc <BSP_SDRAM_Init+0xb8>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	701a      	strb	r2, [r3, #0]
	}

	/* SDRAM initialization sequence */
	BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80022ae:	f240 506a 	movw	r0, #1386	; 0x56a
 80022b2:	f000 f80d 	bl	80022d0 <BSP_SDRAM_Initialization_sequence>

	return sdramstatus;
 80022b6:	4b05      	ldr	r3, [pc, #20]	; (80022cc <BSP_SDRAM_Init+0xb8>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	200007cc 	.word	0x200007cc
 80022c4:	a0000140 	.word	0xa0000140
 80022c8:	20000800 	.word	0x20000800
 80022cc:	20000048 	.word	0x20000048

080022d0 <BSP_SDRAM_Initialization_sequence>:

/**
 * @brief  Programs the SDRAM device.
 * @param  RefreshCount: SDRAM refresh counter value 
 */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount) {
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b084      	sub	sp, #16
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
	__IO uint32_t tmpmrd = 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	60fb      	str	r3, [r7, #12]

	/* Step 1:  Configure a clock configuration enable command */
	Command.CommandMode = FMC_SDRAM_CMD_CLK_ENABLE;
 80022dc:	4b2a      	ldr	r3, [pc, #168]	; (8002388 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022de:	2201      	movs	r2, #1
 80022e0:	601a      	str	r2, [r3, #0]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 80022e2:	4b29      	ldr	r3, [pc, #164]	; (8002388 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022e4:	2208      	movs	r2, #8
 80022e6:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber = 1;
 80022e8:	4b27      	ldr	r3, [pc, #156]	; (8002388 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition = 0;
 80022ee:	4b26      	ldr	r3, [pc, #152]	; (8002388 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	60da      	str	r2, [r3, #12]

	/* Send the command */
	HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80022f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022f8:	4923      	ldr	r1, [pc, #140]	; (8002388 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80022fa:	4824      	ldr	r0, [pc, #144]	; (800238c <BSP_SDRAM_Initialization_sequence+0xbc>)
 80022fc:	f004 fc22 	bl	8006b44 <HAL_SDRAM_SendCommand>

	/* Step 2: Insert 100 us minimum delay */
	/* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
	HAL_Delay(1);
 8002300:	2001      	movs	r0, #1
 8002302:	f000 f993 	bl	800262c <HAL_Delay>

	/* Step 3: Configure a PALL (precharge all) command */
	Command.CommandMode = FMC_SDRAM_CMD_PALL;
 8002306:	4b20      	ldr	r3, [pc, #128]	; (8002388 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002308:	2202      	movs	r2, #2
 800230a:	601a      	str	r2, [r3, #0]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 800230c:	4b1e      	ldr	r3, [pc, #120]	; (8002388 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800230e:	2208      	movs	r2, #8
 8002310:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber = 1;
 8002312:	4b1d      	ldr	r3, [pc, #116]	; (8002388 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002314:	2201      	movs	r2, #1
 8002316:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition = 0;
 8002318:	4b1b      	ldr	r3, [pc, #108]	; (8002388 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800231a:	2200      	movs	r2, #0
 800231c:	60da      	str	r2, [r3, #12]

	/* Send the command */
	HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800231e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002322:	4919      	ldr	r1, [pc, #100]	; (8002388 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002324:	4819      	ldr	r0, [pc, #100]	; (800238c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002326:	f004 fc0d 	bl	8006b44 <HAL_SDRAM_SendCommand>

	/* Step 4: Configure an Auto Refresh command */
	Command.CommandMode = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800232a:	4b17      	ldr	r3, [pc, #92]	; (8002388 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800232c:	2203      	movs	r2, #3
 800232e:	601a      	str	r2, [r3, #0]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 8002330:	4b15      	ldr	r3, [pc, #84]	; (8002388 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002332:	2208      	movs	r2, #8
 8002334:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber = 4;
 8002336:	4b14      	ldr	r3, [pc, #80]	; (8002388 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002338:	2204      	movs	r2, #4
 800233a:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition = 0;
 800233c:	4b12      	ldr	r3, [pc, #72]	; (8002388 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800233e:	2200      	movs	r2, #0
 8002340:	60da      	str	r2, [r3, #12]

	/* Send the command */
	HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002342:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002346:	4910      	ldr	r1, [pc, #64]	; (8002388 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002348:	4810      	ldr	r0, [pc, #64]	; (800238c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800234a:	f004 fbfb 	bl	8006b44 <HAL_SDRAM_SendCommand>

	/* Step 5: Program the external memory mode register */
	tmpmrd = (uint32_t) SDRAM_MODEREG_BURST_LENGTH_1 |
 800234e:	f44f 730c 	mov.w	r3, #560	; 0x230
 8002352:	60fb      	str	r3, [r7, #12]
	SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL |
	SDRAM_MODEREG_CAS_LATENCY_3 |
	SDRAM_MODEREG_OPERATING_MODE_STANDARD |
	SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

	Command.CommandMode = FMC_SDRAM_CMD_LOAD_MODE;
 8002354:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002356:	2204      	movs	r2, #4
 8002358:	601a      	str	r2, [r3, #0]
	Command.CommandTarget = FMC_SDRAM_CMD_TARGET_BANK2;
 800235a:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800235c:	2208      	movs	r2, #8
 800235e:	605a      	str	r2, [r3, #4]
	Command.AutoRefreshNumber = 1;
 8002360:	4b09      	ldr	r3, [pc, #36]	; (8002388 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002362:	2201      	movs	r2, #1
 8002364:	609a      	str	r2, [r3, #8]
	Command.ModeRegisterDefinition = tmpmrd;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	4a07      	ldr	r2, [pc, #28]	; (8002388 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800236a:	60d3      	str	r3, [r2, #12]

	/* Send the command */
	HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800236c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002370:	4905      	ldr	r1, [pc, #20]	; (8002388 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002372:	4806      	ldr	r0, [pc, #24]	; (800238c <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002374:	f004 fbe6 	bl	8006b44 <HAL_SDRAM_SendCommand>

	/* Step 6: Set the refresh rate counter */
	/* Set the device refresh rate */
	HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount);
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	4804      	ldr	r0, [pc, #16]	; (800238c <BSP_SDRAM_Initialization_sequence+0xbc>)
 800237c:	f004 fc17 	bl	8006bae <HAL_SDRAM_ProgramRefreshRate>
}
 8002380:	bf00      	nop
 8002382:	3710      	adds	r7, #16
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}
 8002388:	2000081c 	.word	0x2000081c
 800238c:	200007cc 	.word	0x200007cc

08002390 <BSP_SDRAM_MspInit>:
 * @brief  Initializes SDRAM MSP.
 * @note   This function can be surcharged by application code.
 * @param  hsdram: pointer on SDRAM handle
 * @param  Params: pointer on additional configuration parameters, can be NULL.
 */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram, void *Params) {
 8002390:	b580      	push	{r7, lr}
 8002392:	b090      	sub	sp, #64	; 0x40
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
	static DMA_HandleTypeDef dmaHandle;
	GPIO_InitTypeDef GPIO_InitStructure;

	if (hsdram != (SDRAM_HandleTypeDef*) NULL) {
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	f000 80ec 	beq.w	800257a <BSP_SDRAM_MspInit+0x1ea>
		/* Enable FMC clock */
		__HAL_RCC_FMC_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80023a6:	4b77      	ldr	r3, [pc, #476]	; (8002584 <BSP_SDRAM_MspInit+0x1f4>)
 80023a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023aa:	4a76      	ldr	r2, [pc, #472]	; (8002584 <BSP_SDRAM_MspInit+0x1f4>)
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	6393      	str	r3, [r2, #56]	; 0x38
 80023b2:	4b74      	ldr	r3, [pc, #464]	; (8002584 <BSP_SDRAM_MspInit+0x1f4>)
 80023b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80023bc:	6abb      	ldr	r3, [r7, #40]	; 0x28

		/* Enable chosen DMAx clock */
		__DMAx_CLK_ENABLE()
 80023be:	2300      	movs	r3, #0
 80023c0:	627b      	str	r3, [r7, #36]	; 0x24
 80023c2:	4b70      	ldr	r3, [pc, #448]	; (8002584 <BSP_SDRAM_MspInit+0x1f4>)
 80023c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c6:	4a6f      	ldr	r2, [pc, #444]	; (8002584 <BSP_SDRAM_MspInit+0x1f4>)
 80023c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023cc:	6313      	str	r3, [r2, #48]	; 0x30
 80023ce:	4b6d      	ldr	r3, [pc, #436]	; (8002584 <BSP_SDRAM_MspInit+0x1f4>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
 80023d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		;

		/* Enable GPIOs clock */
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	623b      	str	r3, [r7, #32]
 80023de:	4b69      	ldr	r3, [pc, #420]	; (8002584 <BSP_SDRAM_MspInit+0x1f4>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	4a68      	ldr	r2, [pc, #416]	; (8002584 <BSP_SDRAM_MspInit+0x1f4>)
 80023e4:	f043 0302 	orr.w	r3, r3, #2
 80023e8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ea:	4b66      	ldr	r3, [pc, #408]	; (8002584 <BSP_SDRAM_MspInit+0x1f4>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	623b      	str	r3, [r7, #32]
 80023f4:	6a3b      	ldr	r3, [r7, #32]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	61fb      	str	r3, [r7, #28]
 80023fa:	4b62      	ldr	r3, [pc, #392]	; (8002584 <BSP_SDRAM_MspInit+0x1f4>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	4a61      	ldr	r2, [pc, #388]	; (8002584 <BSP_SDRAM_MspInit+0x1f4>)
 8002400:	f043 0304 	orr.w	r3, r3, #4
 8002404:	6313      	str	r3, [r2, #48]	; 0x30
 8002406:	4b5f      	ldr	r3, [pc, #380]	; (8002584 <BSP_SDRAM_MspInit+0x1f4>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f003 0304 	and.w	r3, r3, #4
 800240e:	61fb      	str	r3, [r7, #28]
 8002410:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOD_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	61bb      	str	r3, [r7, #24]
 8002416:	4b5b      	ldr	r3, [pc, #364]	; (8002584 <BSP_SDRAM_MspInit+0x1f4>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	4a5a      	ldr	r2, [pc, #360]	; (8002584 <BSP_SDRAM_MspInit+0x1f4>)
 800241c:	f043 0308 	orr.w	r3, r3, #8
 8002420:	6313      	str	r3, [r2, #48]	; 0x30
 8002422:	4b58      	ldr	r3, [pc, #352]	; (8002584 <BSP_SDRAM_MspInit+0x1f4>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	f003 0308 	and.w	r3, r3, #8
 800242a:	61bb      	str	r3, [r7, #24]
 800242c:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_GPIOE_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]
 8002432:	4b54      	ldr	r3, [pc, #336]	; (8002584 <BSP_SDRAM_MspInit+0x1f4>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	4a53      	ldr	r2, [pc, #332]	; (8002584 <BSP_SDRAM_MspInit+0x1f4>)
 8002438:	f043 0310 	orr.w	r3, r3, #16
 800243c:	6313      	str	r3, [r2, #48]	; 0x30
 800243e:	4b51      	ldr	r3, [pc, #324]	; (8002584 <BSP_SDRAM_MspInit+0x1f4>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	f003 0310 	and.w	r3, r3, #16
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	697b      	ldr	r3, [r7, #20]
		__HAL_RCC_GPIOF_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	613b      	str	r3, [r7, #16]
 800244e:	4b4d      	ldr	r3, [pc, #308]	; (8002584 <BSP_SDRAM_MspInit+0x1f4>)
 8002450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002452:	4a4c      	ldr	r2, [pc, #304]	; (8002584 <BSP_SDRAM_MspInit+0x1f4>)
 8002454:	f043 0320 	orr.w	r3, r3, #32
 8002458:	6313      	str	r3, [r2, #48]	; 0x30
 800245a:	4b4a      	ldr	r3, [pc, #296]	; (8002584 <BSP_SDRAM_MspInit+0x1f4>)
 800245c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245e:	f003 0320 	and.w	r3, r3, #32
 8002462:	613b      	str	r3, [r7, #16]
 8002464:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOG_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	4b46      	ldr	r3, [pc, #280]	; (8002584 <BSP_SDRAM_MspInit+0x1f4>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800246e:	4a45      	ldr	r2, [pc, #276]	; (8002584 <BSP_SDRAM_MspInit+0x1f4>)
 8002470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002474:	6313      	str	r3, [r2, #48]	; 0x30
 8002476:	4b43      	ldr	r3, [pc, #268]	; (8002584 <BSP_SDRAM_MspInit+0x1f4>)
 8002478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]
		 +-------------------+  
		 
		 */

		/* Common GPIO configuration */
		GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002482:	2302      	movs	r3, #2
 8002484:	633b      	str	r3, [r7, #48]	; 0x30
		GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002486:	2302      	movs	r3, #2
 8002488:	63bb      	str	r3, [r7, #56]	; 0x38
		GPIO_InitStructure.Pull = GPIO_NOPULL;
 800248a:	2300      	movs	r3, #0
 800248c:	637b      	str	r3, [r7, #52]	; 0x34
		GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 800248e:	230c      	movs	r3, #12
 8002490:	63fb      	str	r3, [r7, #60]	; 0x3c

		/* GPIOB configuration */
		GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8002492:	2360      	movs	r3, #96	; 0x60
 8002494:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002496:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800249a:	4619      	mov	r1, r3
 800249c:	483a      	ldr	r0, [pc, #232]	; (8002588 <BSP_SDRAM_MspInit+0x1f8>)
 800249e:	f000 fd91 	bl	8002fc4 <HAL_GPIO_Init>

		/* GPIOC configuration */
		GPIO_InitStructure.Pin = GPIO_PIN_0;
 80024a2:	2301      	movs	r3, #1
 80024a4:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80024a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024aa:	4619      	mov	r1, r3
 80024ac:	4837      	ldr	r0, [pc, #220]	; (800258c <BSP_SDRAM_MspInit+0x1fc>)
 80024ae:	f000 fd89 	bl	8002fc4 <HAL_GPIO_Init>

		/* GPIOD configuration */
		GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 |
 80024b2:	f24c 7303 	movw	r3, #50947	; 0xc703
 80024b6:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
		GPIO_PIN_15;
		HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80024b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024bc:	4619      	mov	r1, r3
 80024be:	4834      	ldr	r0, [pc, #208]	; (8002590 <BSP_SDRAM_MspInit+0x200>)
 80024c0:	f000 fd80 	bl	8002fc4 <HAL_GPIO_Init>

		/* GPIOE configuration */
		GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7 |
 80024c4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80024c8:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 |
		GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
		GPIO_PIN_14 | GPIO_PIN_15;
		HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80024ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ce:	4619      	mov	r1, r3
 80024d0:	4830      	ldr	r0, [pc, #192]	; (8002594 <BSP_SDRAM_MspInit+0x204>)
 80024d2:	f000 fd77 	bl	8002fc4 <HAL_GPIO_Init>

		/* GPIOF configuration */
		GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 |
 80024d6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80024da:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5 |
		GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
		GPIO_PIN_14 | GPIO_PIN_15;
		HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80024dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024e0:	4619      	mov	r1, r3
 80024e2:	482d      	ldr	r0, [pc, #180]	; (8002598 <BSP_SDRAM_MspInit+0x208>)
 80024e4:	f000 fd6e 	bl	8002fc4 <HAL_GPIO_Init>

		/* GPIOG configuration */
		GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80024e8:	f248 1333 	movw	r3, #33075	; 0x8133
 80024ec:	62fb      	str	r3, [r7, #44]	; 0x2c
		GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
		HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80024ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024f2:	4619      	mov	r1, r3
 80024f4:	4829      	ldr	r0, [pc, #164]	; (800259c <BSP_SDRAM_MspInit+0x20c>)
 80024f6:	f000 fd65 	bl	8002fc4 <HAL_GPIO_Init>

		/* Configure common DMA parameters */
		dmaHandle.Init.Channel = SDRAM_DMAx_CHANNEL;
 80024fa:	4b29      	ldr	r3, [pc, #164]	; (80025a0 <BSP_SDRAM_MspInit+0x210>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	605a      	str	r2, [r3, #4]
		dmaHandle.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8002500:	4b27      	ldr	r3, [pc, #156]	; (80025a0 <BSP_SDRAM_MspInit+0x210>)
 8002502:	2280      	movs	r2, #128	; 0x80
 8002504:	609a      	str	r2, [r3, #8]
		dmaHandle.Init.PeriphInc = DMA_PINC_ENABLE;
 8002506:	4b26      	ldr	r3, [pc, #152]	; (80025a0 <BSP_SDRAM_MspInit+0x210>)
 8002508:	f44f 7200 	mov.w	r2, #512	; 0x200
 800250c:	60da      	str	r2, [r3, #12]
		dmaHandle.Init.MemInc = DMA_MINC_ENABLE;
 800250e:	4b24      	ldr	r3, [pc, #144]	; (80025a0 <BSP_SDRAM_MspInit+0x210>)
 8002510:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002514:	611a      	str	r2, [r3, #16]
		dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002516:	4b22      	ldr	r3, [pc, #136]	; (80025a0 <BSP_SDRAM_MspInit+0x210>)
 8002518:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800251c:	615a      	str	r2, [r3, #20]
		dmaHandle.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800251e:	4b20      	ldr	r3, [pc, #128]	; (80025a0 <BSP_SDRAM_MspInit+0x210>)
 8002520:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002524:	619a      	str	r2, [r3, #24]
		dmaHandle.Init.Mode = DMA_NORMAL;
 8002526:	4b1e      	ldr	r3, [pc, #120]	; (80025a0 <BSP_SDRAM_MspInit+0x210>)
 8002528:	2200      	movs	r2, #0
 800252a:	61da      	str	r2, [r3, #28]
		dmaHandle.Init.Priority = DMA_PRIORITY_HIGH;
 800252c:	4b1c      	ldr	r3, [pc, #112]	; (80025a0 <BSP_SDRAM_MspInit+0x210>)
 800252e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002532:	621a      	str	r2, [r3, #32]
		dmaHandle.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002534:	4b1a      	ldr	r3, [pc, #104]	; (80025a0 <BSP_SDRAM_MspInit+0x210>)
 8002536:	2200      	movs	r2, #0
 8002538:	625a      	str	r2, [r3, #36]	; 0x24
		dmaHandle.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800253a:	4b19      	ldr	r3, [pc, #100]	; (80025a0 <BSP_SDRAM_MspInit+0x210>)
 800253c:	2203      	movs	r2, #3
 800253e:	629a      	str	r2, [r3, #40]	; 0x28
		dmaHandle.Init.MemBurst = DMA_MBURST_SINGLE;
 8002540:	4b17      	ldr	r3, [pc, #92]	; (80025a0 <BSP_SDRAM_MspInit+0x210>)
 8002542:	2200      	movs	r2, #0
 8002544:	62da      	str	r2, [r3, #44]	; 0x2c
		dmaHandle.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002546:	4b16      	ldr	r3, [pc, #88]	; (80025a0 <BSP_SDRAM_MspInit+0x210>)
 8002548:	2200      	movs	r2, #0
 800254a:	631a      	str	r2, [r3, #48]	; 0x30

		dmaHandle.Instance = SDRAM_DMAx_STREAM;
 800254c:	4b14      	ldr	r3, [pc, #80]	; (80025a0 <BSP_SDRAM_MspInit+0x210>)
 800254e:	4a15      	ldr	r2, [pc, #84]	; (80025a4 <BSP_SDRAM_MspInit+0x214>)
 8002550:	601a      	str	r2, [r3, #0]

		/* Associate the DMA handle */
		__HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a12      	ldr	r2, [pc, #72]	; (80025a0 <BSP_SDRAM_MspInit+0x210>)
 8002556:	631a      	str	r2, [r3, #48]	; 0x30
 8002558:	4a11      	ldr	r2, [pc, #68]	; (80025a0 <BSP_SDRAM_MspInit+0x210>)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6393      	str	r3, [r2, #56]	; 0x38

		/* Deinitialize the stream for new transfer */
		HAL_DMA_DeInit(&dmaHandle);
 800255e:	4810      	ldr	r0, [pc, #64]	; (80025a0 <BSP_SDRAM_MspInit+0x210>)
 8002560:	f000 fa34 	bl	80029cc <HAL_DMA_DeInit>

		/* Configure the DMA stream */
		HAL_DMA_Init(&dmaHandle);
 8002564:	480e      	ldr	r0, [pc, #56]	; (80025a0 <BSP_SDRAM_MspInit+0x210>)
 8002566:	f000 f983 	bl	8002870 <HAL_DMA_Init>

		/* NVIC configuration for DMA transfer complete interrupt */
		HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800256a:	2200      	movs	r2, #0
 800256c:	210f      	movs	r1, #15
 800256e:	2038      	movs	r0, #56	; 0x38
 8002570:	f000 f938 	bl	80027e4 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002574:	2038      	movs	r0, #56	; 0x38
 8002576:	f000 f951 	bl	800281c <HAL_NVIC_EnableIRQ>
	} /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800257a:	bf00      	nop
 800257c:	3740      	adds	r7, #64	; 0x40
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	40023800 	.word	0x40023800
 8002588:	40020400 	.word	0x40020400
 800258c:	40020800 	.word	0x40020800
 8002590:	40020c00 	.word	0x40020c00
 8002594:	40021000 	.word	0x40021000
 8002598:	40021400 	.word	0x40021400
 800259c:	40021800 	.word	0x40021800
 80025a0:	2000082c 	.word	0x2000082c
 80025a4:	40026410 	.word	0x40026410

080025a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025ac:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <HAL_Init+0x40>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a0d      	ldr	r2, [pc, #52]	; (80025e8 <HAL_Init+0x40>)
 80025b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025b8:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <HAL_Init+0x40>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a0a      	ldr	r2, [pc, #40]	; (80025e8 <HAL_Init+0x40>)
 80025be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025c4:	4b08      	ldr	r3, [pc, #32]	; (80025e8 <HAL_Init+0x40>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a07      	ldr	r2, [pc, #28]	; (80025e8 <HAL_Init+0x40>)
 80025ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025d0:	2003      	movs	r0, #3
 80025d2:	f000 f8fc 	bl	80027ce <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025d6:	2000      	movs	r0, #0
 80025d8:	f7ff f83c 	bl	8001654 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025dc:	f7fe fc94 	bl	8000f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40023c00 	.word	0x40023c00

080025ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025f0:	4b06      	ldr	r3, [pc, #24]	; (800260c <HAL_IncTick+0x20>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	461a      	mov	r2, r3
 80025f6:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HAL_IncTick+0x24>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4413      	add	r3, r2
 80025fc:	4a04      	ldr	r2, [pc, #16]	; (8002610 <HAL_IncTick+0x24>)
 80025fe:	6013      	str	r3, [r2, #0]
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	20000050 	.word	0x20000050
 8002610:	2000088c 	.word	0x2000088c

08002614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  return uwTick;
 8002618:	4b03      	ldr	r3, [pc, #12]	; (8002628 <HAL_GetTick+0x14>)
 800261a:	681b      	ldr	r3, [r3, #0]
}
 800261c:	4618      	mov	r0, r3
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	2000088c 	.word	0x2000088c

0800262c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002634:	f7ff ffee 	bl	8002614 <HAL_GetTick>
 8002638:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002644:	d005      	beq.n	8002652 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002646:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <HAL_Delay+0x44>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	461a      	mov	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	4413      	add	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002652:	bf00      	nop
 8002654:	f7ff ffde 	bl	8002614 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	429a      	cmp	r2, r3
 8002662:	d8f7      	bhi.n	8002654 <HAL_Delay+0x28>
  {
  }
}
 8002664:	bf00      	nop
 8002666:	bf00      	nop
 8002668:	3710      	adds	r7, #16
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}
 800266e:	bf00      	nop
 8002670:	20000050 	.word	0x20000050

08002674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002684:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002690:	4013      	ands	r3, r2
 8002692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800269c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026a6:	4a04      	ldr	r2, [pc, #16]	; (80026b8 <__NVIC_SetPriorityGrouping+0x44>)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	60d3      	str	r3, [r2, #12]
}
 80026ac:	bf00      	nop
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	e000ed00 	.word	0xe000ed00

080026bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026c0:	4b04      	ldr	r3, [pc, #16]	; (80026d4 <__NVIC_GetPriorityGrouping+0x18>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	0a1b      	lsrs	r3, r3, #8
 80026c6:	f003 0307 	and.w	r3, r3, #7
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	e000ed00 	.word	0xe000ed00

080026d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	db0b      	blt.n	8002702 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ea:	79fb      	ldrb	r3, [r7, #7]
 80026ec:	f003 021f 	and.w	r2, r3, #31
 80026f0:	4907      	ldr	r1, [pc, #28]	; (8002710 <__NVIC_EnableIRQ+0x38>)
 80026f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f6:	095b      	lsrs	r3, r3, #5
 80026f8:	2001      	movs	r0, #1
 80026fa:	fa00 f202 	lsl.w	r2, r0, r2
 80026fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	e000e100 	.word	0xe000e100

08002714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	4603      	mov	r3, r0
 800271c:	6039      	str	r1, [r7, #0]
 800271e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002724:	2b00      	cmp	r3, #0
 8002726:	db0a      	blt.n	800273e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	b2da      	uxtb	r2, r3
 800272c:	490c      	ldr	r1, [pc, #48]	; (8002760 <__NVIC_SetPriority+0x4c>)
 800272e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002732:	0112      	lsls	r2, r2, #4
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	440b      	add	r3, r1
 8002738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800273c:	e00a      	b.n	8002754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	b2da      	uxtb	r2, r3
 8002742:	4908      	ldr	r1, [pc, #32]	; (8002764 <__NVIC_SetPriority+0x50>)
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	3b04      	subs	r3, #4
 800274c:	0112      	lsls	r2, r2, #4
 800274e:	b2d2      	uxtb	r2, r2
 8002750:	440b      	add	r3, r1
 8002752:	761a      	strb	r2, [r3, #24]
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	e000e100 	.word	0xe000e100
 8002764:	e000ed00 	.word	0xe000ed00

08002768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002768:	b480      	push	{r7}
 800276a:	b089      	sub	sp, #36	; 0x24
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	f1c3 0307 	rsb	r3, r3, #7
 8002782:	2b04      	cmp	r3, #4
 8002784:	bf28      	it	cs
 8002786:	2304      	movcs	r3, #4
 8002788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	3304      	adds	r3, #4
 800278e:	2b06      	cmp	r3, #6
 8002790:	d902      	bls.n	8002798 <NVIC_EncodePriority+0x30>
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	3b03      	subs	r3, #3
 8002796:	e000      	b.n	800279a <NVIC_EncodePriority+0x32>
 8002798:	2300      	movs	r3, #0
 800279a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800279c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43da      	mvns	r2, r3
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	401a      	ands	r2, r3
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	fa01 f303 	lsl.w	r3, r1, r3
 80027ba:	43d9      	mvns	r1, r3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c0:	4313      	orrs	r3, r2
         );
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3724      	adds	r7, #36	; 0x24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7ff ff4c 	bl	8002674 <__NVIC_SetPriorityGrouping>
}
 80027dc:	bf00      	nop
 80027de:	3708      	adds	r7, #8
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}

080027e4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	607a      	str	r2, [r7, #4]
 80027f0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027f6:	f7ff ff61 	bl	80026bc <__NVIC_GetPriorityGrouping>
 80027fa:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	68b9      	ldr	r1, [r7, #8]
 8002800:	6978      	ldr	r0, [r7, #20]
 8002802:	f7ff ffb1 	bl	8002768 <NVIC_EncodePriority>
 8002806:	4602      	mov	r2, r0
 8002808:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800280c:	4611      	mov	r1, r2
 800280e:	4618      	mov	r0, r3
 8002810:	f7ff ff80 	bl	8002714 <__NVIC_SetPriority>
}
 8002814:	bf00      	nop
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff ff54 	bl	80026d8 <__NVIC_EnableIRQ>
}
 8002830:	bf00      	nop
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e00e      	b.n	8002868 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	795b      	ldrb	r3, [r3, #5]
 800284e:	b2db      	uxtb	r3, r3
 8002850:	2b00      	cmp	r3, #0
 8002852:	d105      	bne.n	8002860 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f7fe fb80 	bl	8000f60 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2201      	movs	r2, #1
 8002864:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002866:	2300      	movs	r3, #0
}
 8002868:	4618      	mov	r0, r3
 800286a:	3708      	adds	r7, #8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002878:	2300      	movs	r3, #0
 800287a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800287c:	f7ff feca 	bl	8002614 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d101      	bne.n	800288c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e099      	b.n	80029c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2202      	movs	r2, #2
 8002890:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 0201 	bic.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028ac:	e00f      	b.n	80028ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028ae:	f7ff feb1 	bl	8002614 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b05      	cmp	r3, #5
 80028ba:	d908      	bls.n	80028ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2220      	movs	r2, #32
 80028c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2203      	movs	r2, #3
 80028c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e078      	b.n	80029c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1e8      	bne.n	80028ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	4b38      	ldr	r3, [pc, #224]	; (80029c8 <HAL_DMA_Init+0x158>)
 80028e8:	4013      	ands	r3, r2
 80028ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002906:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002912:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a1b      	ldr	r3, [r3, #32]
 8002918:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800291a:	697a      	ldr	r2, [r7, #20]
 800291c:	4313      	orrs	r3, r2
 800291e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002924:	2b04      	cmp	r3, #4
 8002926:	d107      	bne.n	8002938 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002930:	4313      	orrs	r3, r2
 8002932:	697a      	ldr	r2, [r7, #20]
 8002934:	4313      	orrs	r3, r2
 8002936:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	f023 0307 	bic.w	r3, r3, #7
 800294e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	4313      	orrs	r3, r2
 8002958:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	2b04      	cmp	r3, #4
 8002960:	d117      	bne.n	8002992 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	4313      	orrs	r3, r2
 800296a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00e      	beq.n	8002992 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f000 f8bd 	bl	8002af4 <DMA_CheckFifoParam>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d008      	beq.n	8002992 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2240      	movs	r2, #64	; 0x40
 8002984:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2201      	movs	r2, #1
 800298a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800298e:	2301      	movs	r3, #1
 8002990:	e016      	b.n	80029c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 f874 	bl	8002a88 <DMA_CalcBaseAndBitshift>
 80029a0:	4603      	mov	r3, r0
 80029a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a8:	223f      	movs	r2, #63	; 0x3f
 80029aa:	409a      	lsls	r2, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3718      	adds	r7, #24
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	f010803f 	.word	0xf010803f

080029cc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e050      	b.n	8002a80 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d101      	bne.n	80029ee <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80029ea:	2302      	movs	r3, #2
 80029ec:	e048      	b.n	8002a80 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f022 0201 	bic.w	r2, r2, #1
 80029fc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	2200      	movs	r2, #0
 8002a14:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	2200      	movs	r2, #0
 8002a24:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2221      	movs	r2, #33	; 0x21
 8002a2c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 f82a 	bl	8002a88 <DMA_CalcBaseAndBitshift>
 8002a34:	4603      	mov	r3, r0
 8002a36:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a60:	223f      	movs	r2, #63	; 0x3f
 8002a62:	409a      	lsls	r2, r3
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b085      	sub	sp, #20
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	3b10      	subs	r3, #16
 8002a98:	4a14      	ldr	r2, [pc, #80]	; (8002aec <DMA_CalcBaseAndBitshift+0x64>)
 8002a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9e:	091b      	lsrs	r3, r3, #4
 8002aa0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002aa2:	4a13      	ldr	r2, [pc, #76]	; (8002af0 <DMA_CalcBaseAndBitshift+0x68>)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2b03      	cmp	r3, #3
 8002ab4:	d909      	bls.n	8002aca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002abe:	f023 0303 	bic.w	r3, r3, #3
 8002ac2:	1d1a      	adds	r2, r3, #4
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	659a      	str	r2, [r3, #88]	; 0x58
 8002ac8:	e007      	b.n	8002ada <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ad2:	f023 0303 	bic.w	r3, r3, #3
 8002ad6:	687a      	ldr	r2, [r7, #4]
 8002ad8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3714      	adds	r7, #20
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	aaaaaaab 	.word	0xaaaaaaab
 8002af0:	08010f18 	.word	0x08010f18

08002af4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002afc:	2300      	movs	r3, #0
 8002afe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b04:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d11f      	bne.n	8002b4e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	2b03      	cmp	r3, #3
 8002b12:	d856      	bhi.n	8002bc2 <DMA_CheckFifoParam+0xce>
 8002b14:	a201      	add	r2, pc, #4	; (adr r2, 8002b1c <DMA_CheckFifoParam+0x28>)
 8002b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b1a:	bf00      	nop
 8002b1c:	08002b2d 	.word	0x08002b2d
 8002b20:	08002b3f 	.word	0x08002b3f
 8002b24:	08002b2d 	.word	0x08002b2d
 8002b28:	08002bc3 	.word	0x08002bc3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d046      	beq.n	8002bc6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b3c:	e043      	b.n	8002bc6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b42:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b46:	d140      	bne.n	8002bca <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b4c:	e03d      	b.n	8002bca <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b56:	d121      	bne.n	8002b9c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	2b03      	cmp	r3, #3
 8002b5c:	d837      	bhi.n	8002bce <DMA_CheckFifoParam+0xda>
 8002b5e:	a201      	add	r2, pc, #4	; (adr r2, 8002b64 <DMA_CheckFifoParam+0x70>)
 8002b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b64:	08002b75 	.word	0x08002b75
 8002b68:	08002b7b 	.word	0x08002b7b
 8002b6c:	08002b75 	.word	0x08002b75
 8002b70:	08002b8d 	.word	0x08002b8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	73fb      	strb	r3, [r7, #15]
      break;
 8002b78:	e030      	b.n	8002bdc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d025      	beq.n	8002bd2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b8a:	e022      	b.n	8002bd2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b90:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b94:	d11f      	bne.n	8002bd6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b9a:	e01c      	b.n	8002bd6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d903      	bls.n	8002baa <DMA_CheckFifoParam+0xb6>
 8002ba2:	68bb      	ldr	r3, [r7, #8]
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	d003      	beq.n	8002bb0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ba8:	e018      	b.n	8002bdc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	73fb      	strb	r3, [r7, #15]
      break;
 8002bae:	e015      	b.n	8002bdc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00e      	beq.n	8002bda <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8002bc0:	e00b      	b.n	8002bda <DMA_CheckFifoParam+0xe6>
      break;
 8002bc2:	bf00      	nop
 8002bc4:	e00a      	b.n	8002bdc <DMA_CheckFifoParam+0xe8>
      break;
 8002bc6:	bf00      	nop
 8002bc8:	e008      	b.n	8002bdc <DMA_CheckFifoParam+0xe8>
      break;
 8002bca:	bf00      	nop
 8002bcc:	e006      	b.n	8002bdc <DMA_CheckFifoParam+0xe8>
      break;
 8002bce:	bf00      	nop
 8002bd0:	e004      	b.n	8002bdc <DMA_CheckFifoParam+0xe8>
      break;
 8002bd2:	bf00      	nop
 8002bd4:	e002      	b.n	8002bdc <DMA_CheckFifoParam+0xe8>
      break;   
 8002bd6:	bf00      	nop
 8002bd8:	e000      	b.n	8002bdc <DMA_CheckFifoParam+0xe8>
      break;
 8002bda:	bf00      	nop
    }
  } 
  
  return status; 
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop

08002bec <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d101      	bne.n	8002bfe <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e03b      	b.n	8002c76 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d106      	bne.n	8002c18 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7fe f9c6 	bl	8000fa4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2202      	movs	r2, #2
 8002c1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685a      	ldr	r2, [r3, #4]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c3c:	f023 0107 	bic.w	r1, r3, #7
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c56:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	68d1      	ldr	r1, [r2, #12]
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6812      	ldr	r2, [r2, #0]
 8002c62:	430b      	orrs	r3, r1
 8002c64:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b084      	sub	sp, #16
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f003 0301 	and.w	r3, r3, #1
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d026      	beq.n	8002cee <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d021      	beq.n	8002cee <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cb8:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cbe:	f043 0201 	orr.w	r2, r3, #1
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2204      	movs	r2, #4
 8002cd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f003 0320 	and.w	r3, r3, #32
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d026      	beq.n	8002d46 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d021      	beq.n	8002d46 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d10:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2220      	movs	r2, #32
 8002d18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1e:	f043 0202 	orr.w	r2, r3, #2
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2204      	movs	r2, #4
 8002d2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	695b      	ldr	r3, [r3, #20]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	695b      	ldr	r3, [r3, #20]
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f003 0308 	and.w	r3, r3, #8
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d026      	beq.n	8002d9e <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d021      	beq.n	8002d9e <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d68:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2208      	movs	r2, #8
 8002d70:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d76:	f043 0204 	orr.w	r2, r3, #4
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2204      	movs	r2, #4
 8002d82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d013      	beq.n	8002dd0 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d00e      	beq.n	8002dd0 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dc0:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2204      	movs	r2, #4
 8002dc8:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f000 f853 	bl	8002e76 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d024      	beq.n	8002e24 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d01f      	beq.n	8002e24 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002df2:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2202      	movs	r2, #2
 8002dfa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	691b      	ldr	r3, [r3, #16]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d003      	beq.n	8002e24 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f003 0310 	and.w	r3, r3, #16
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d01f      	beq.n	8002e6e <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d01a      	beq.n	8002e6e <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e46:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2210      	movs	r2, #16
 8002e4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 f80e 	bl	8002e8a <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8002e6e:	bf00      	nop
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002e76:	b480      	push	{r7}
 8002e78:	b083      	sub	sp, #12
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8002e7e:	bf00      	nop
 8002e80:	370c      	adds	r7, #12
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr

08002e8a <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
	...

08002ea0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b087      	sub	sp, #28
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d101      	bne.n	8002ec0 <HAL_DMA2D_ConfigLayer+0x20>
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	e079      	b.n	8002fb4 <HAL_DMA2D_ConfigLayer+0x114>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2202      	movs	r2, #2
 8002ecc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	3318      	adds	r3, #24
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	4413      	add	r3, r2
 8002eda:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	689b      	ldr	r3, [r3, #8]
 8002ee4:	041b      	lsls	r3, r3, #16
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8002eea:	4b35      	ldr	r3, [pc, #212]	; (8002fc0 <HAL_DMA2D_ConfigLayer+0x120>)
 8002eec:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b0a      	cmp	r3, #10
 8002ef4:	d003      	beq.n	8002efe <HAL_DMA2D_ConfigLayer+0x5e>
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b09      	cmp	r3, #9
 8002efc:	d107      	bne.n	8002f0e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	e005      	b.n	8002f1a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	061b      	lsls	r3, r3, #24
 8002f14:	697a      	ldr	r2, [r7, #20]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d120      	bne.n	8002f62 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	ea02 0103 	and.w	r1, r2, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	693a      	ldr	r2, [r7, #16]
 8002f3e:	6812      	ldr	r2, [r2, #0]
 8002f40:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	2b0a      	cmp	r3, #10
 8002f48:	d003      	beq.n	8002f52 <HAL_DMA2D_ConfigLayer+0xb2>
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	2b09      	cmp	r3, #9
 8002f50:	d127      	bne.n	8002fa2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	68da      	ldr	r2, [r3, #12]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002f5e:	629a      	str	r2, [r3, #40]	; 0x28
 8002f60:	e01f      	b.n	8002fa2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	69da      	ldr	r2, [r3, #28]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	ea02 0103 	and.w	r1, r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	697a      	ldr	r2, [r7, #20]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	6812      	ldr	r2, [r2, #0]
 8002f82:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	2b0a      	cmp	r3, #10
 8002f8a:	d003      	beq.n	8002f94 <HAL_DMA2D_ConfigLayer+0xf4>
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2b09      	cmp	r3, #9
 8002f92:	d106      	bne.n	8002fa2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	68da      	ldr	r2, [r3, #12]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8002fa0:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	371c      	adds	r7, #28
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	ff03000f 	.word	0xff03000f

08002fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b089      	sub	sp, #36	; 0x24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61fb      	str	r3, [r7, #28]
 8002fde:	e177      	b.n	80032d0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	697a      	ldr	r2, [r7, #20]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ff4:	693a      	ldr	r2, [r7, #16]
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	f040 8166 	bne.w	80032ca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	2b01      	cmp	r3, #1
 8003008:	d005      	beq.n	8003016 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003012:	2b02      	cmp	r3, #2
 8003014:	d130      	bne.n	8003078 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	2203      	movs	r2, #3
 8003022:	fa02 f303 	lsl.w	r3, r2, r3
 8003026:	43db      	mvns	r3, r3
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	4013      	ands	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	fa02 f303 	lsl.w	r3, r2, r3
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	4313      	orrs	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800304c:	2201      	movs	r2, #1
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	43db      	mvns	r3, r3
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4013      	ands	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	091b      	lsrs	r3, r3, #4
 8003062:	f003 0201 	and.w	r2, r3, #1
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	4313      	orrs	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 0303 	and.w	r3, r3, #3
 8003080:	2b03      	cmp	r3, #3
 8003082:	d017      	beq.n	80030b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	2203      	movs	r2, #3
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	43db      	mvns	r3, r3
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	4013      	ands	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 0303 	and.w	r3, r3, #3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d123      	bne.n	8003108 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	08da      	lsrs	r2, r3, #3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	3208      	adds	r2, #8
 80030c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	220f      	movs	r2, #15
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	43db      	mvns	r3, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	691a      	ldr	r2, [r3, #16]
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	08da      	lsrs	r2, r3, #3
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	3208      	adds	r2, #8
 8003102:	69b9      	ldr	r1, [r7, #24]
 8003104:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	2203      	movs	r2, #3
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	43db      	mvns	r3, r3
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	4013      	ands	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 0203 	and.w	r2, r3, #3
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4313      	orrs	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 80c0 	beq.w	80032ca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800314a:	2300      	movs	r3, #0
 800314c:	60fb      	str	r3, [r7, #12]
 800314e:	4b66      	ldr	r3, [pc, #408]	; (80032e8 <HAL_GPIO_Init+0x324>)
 8003150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003152:	4a65      	ldr	r2, [pc, #404]	; (80032e8 <HAL_GPIO_Init+0x324>)
 8003154:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003158:	6453      	str	r3, [r2, #68]	; 0x44
 800315a:	4b63      	ldr	r3, [pc, #396]	; (80032e8 <HAL_GPIO_Init+0x324>)
 800315c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003166:	4a61      	ldr	r2, [pc, #388]	; (80032ec <HAL_GPIO_Init+0x328>)
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	089b      	lsrs	r3, r3, #2
 800316c:	3302      	adds	r3, #2
 800316e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003172:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	220f      	movs	r2, #15
 800317e:	fa02 f303 	lsl.w	r3, r2, r3
 8003182:	43db      	mvns	r3, r3
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	4013      	ands	r3, r2
 8003188:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a58      	ldr	r2, [pc, #352]	; (80032f0 <HAL_GPIO_Init+0x32c>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d037      	beq.n	8003202 <HAL_GPIO_Init+0x23e>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a57      	ldr	r2, [pc, #348]	; (80032f4 <HAL_GPIO_Init+0x330>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d031      	beq.n	80031fe <HAL_GPIO_Init+0x23a>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a56      	ldr	r2, [pc, #344]	; (80032f8 <HAL_GPIO_Init+0x334>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d02b      	beq.n	80031fa <HAL_GPIO_Init+0x236>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a55      	ldr	r2, [pc, #340]	; (80032fc <HAL_GPIO_Init+0x338>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d025      	beq.n	80031f6 <HAL_GPIO_Init+0x232>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a54      	ldr	r2, [pc, #336]	; (8003300 <HAL_GPIO_Init+0x33c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d01f      	beq.n	80031f2 <HAL_GPIO_Init+0x22e>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a53      	ldr	r2, [pc, #332]	; (8003304 <HAL_GPIO_Init+0x340>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d019      	beq.n	80031ee <HAL_GPIO_Init+0x22a>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a52      	ldr	r2, [pc, #328]	; (8003308 <HAL_GPIO_Init+0x344>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d013      	beq.n	80031ea <HAL_GPIO_Init+0x226>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a51      	ldr	r2, [pc, #324]	; (800330c <HAL_GPIO_Init+0x348>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d00d      	beq.n	80031e6 <HAL_GPIO_Init+0x222>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a50      	ldr	r2, [pc, #320]	; (8003310 <HAL_GPIO_Init+0x34c>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d007      	beq.n	80031e2 <HAL_GPIO_Init+0x21e>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a4f      	ldr	r2, [pc, #316]	; (8003314 <HAL_GPIO_Init+0x350>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d101      	bne.n	80031de <HAL_GPIO_Init+0x21a>
 80031da:	2309      	movs	r3, #9
 80031dc:	e012      	b.n	8003204 <HAL_GPIO_Init+0x240>
 80031de:	230a      	movs	r3, #10
 80031e0:	e010      	b.n	8003204 <HAL_GPIO_Init+0x240>
 80031e2:	2308      	movs	r3, #8
 80031e4:	e00e      	b.n	8003204 <HAL_GPIO_Init+0x240>
 80031e6:	2307      	movs	r3, #7
 80031e8:	e00c      	b.n	8003204 <HAL_GPIO_Init+0x240>
 80031ea:	2306      	movs	r3, #6
 80031ec:	e00a      	b.n	8003204 <HAL_GPIO_Init+0x240>
 80031ee:	2305      	movs	r3, #5
 80031f0:	e008      	b.n	8003204 <HAL_GPIO_Init+0x240>
 80031f2:	2304      	movs	r3, #4
 80031f4:	e006      	b.n	8003204 <HAL_GPIO_Init+0x240>
 80031f6:	2303      	movs	r3, #3
 80031f8:	e004      	b.n	8003204 <HAL_GPIO_Init+0x240>
 80031fa:	2302      	movs	r3, #2
 80031fc:	e002      	b.n	8003204 <HAL_GPIO_Init+0x240>
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <HAL_GPIO_Init+0x240>
 8003202:	2300      	movs	r3, #0
 8003204:	69fa      	ldr	r2, [r7, #28]
 8003206:	f002 0203 	and.w	r2, r2, #3
 800320a:	0092      	lsls	r2, r2, #2
 800320c:	4093      	lsls	r3, r2
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4313      	orrs	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003214:	4935      	ldr	r1, [pc, #212]	; (80032ec <HAL_GPIO_Init+0x328>)
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	089b      	lsrs	r3, r3, #2
 800321a:	3302      	adds	r3, #2
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003222:	4b3d      	ldr	r3, [pc, #244]	; (8003318 <HAL_GPIO_Init+0x354>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	43db      	mvns	r3, r3
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	4013      	ands	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003246:	4a34      	ldr	r2, [pc, #208]	; (8003318 <HAL_GPIO_Init+0x354>)
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800324c:	4b32      	ldr	r3, [pc, #200]	; (8003318 <HAL_GPIO_Init+0x354>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	43db      	mvns	r3, r3
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	4013      	ands	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003270:	4a29      	ldr	r2, [pc, #164]	; (8003318 <HAL_GPIO_Init+0x354>)
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003276:	4b28      	ldr	r3, [pc, #160]	; (8003318 <HAL_GPIO_Init+0x354>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	43db      	mvns	r3, r3
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	4013      	ands	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	4313      	orrs	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800329a:	4a1f      	ldr	r2, [pc, #124]	; (8003318 <HAL_GPIO_Init+0x354>)
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032a0:	4b1d      	ldr	r3, [pc, #116]	; (8003318 <HAL_GPIO_Init+0x354>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	43db      	mvns	r3, r3
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4013      	ands	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032c4:	4a14      	ldr	r2, [pc, #80]	; (8003318 <HAL_GPIO_Init+0x354>)
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	3301      	adds	r3, #1
 80032ce:	61fb      	str	r3, [r7, #28]
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	2b0f      	cmp	r3, #15
 80032d4:	f67f ae84 	bls.w	8002fe0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032d8:	bf00      	nop
 80032da:	bf00      	nop
 80032dc:	3724      	adds	r7, #36	; 0x24
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	40023800 	.word	0x40023800
 80032ec:	40013800 	.word	0x40013800
 80032f0:	40020000 	.word	0x40020000
 80032f4:	40020400 	.word	0x40020400
 80032f8:	40020800 	.word	0x40020800
 80032fc:	40020c00 	.word	0x40020c00
 8003300:	40021000 	.word	0x40021000
 8003304:	40021400 	.word	0x40021400
 8003308:	40021800 	.word	0x40021800
 800330c:	40021c00 	.word	0x40021c00
 8003310:	40022000 	.word	0x40022000
 8003314:	40022400 	.word	0x40022400
 8003318:	40013c00 	.word	0x40013c00

0800331c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800331c:	b480      	push	{r7}
 800331e:	b087      	sub	sp, #28
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003326:	2300      	movs	r3, #0
 8003328:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 800332a:	2300      	movs	r3, #0
 800332c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 800332e:	2300      	movs	r3, #0
 8003330:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003332:	2300      	movs	r3, #0
 8003334:	617b      	str	r3, [r7, #20]
 8003336:	e0d9      	b.n	80034ec <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003338:	2201      	movs	r2, #1
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	4013      	ands	r3, r2
 8003348:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	429a      	cmp	r2, r3
 8003350:	f040 80c9 	bne.w	80034e6 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003354:	4a6b      	ldr	r2, [pc, #428]	; (8003504 <HAL_GPIO_DeInit+0x1e8>)
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	089b      	lsrs	r3, r3, #2
 800335a:	3302      	adds	r3, #2
 800335c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003360:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	f003 0303 	and.w	r3, r3, #3
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	220f      	movs	r2, #15
 800336c:	fa02 f303 	lsl.w	r3, r2, r3
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	4013      	ands	r3, r2
 8003374:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a63      	ldr	r2, [pc, #396]	; (8003508 <HAL_GPIO_DeInit+0x1ec>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d037      	beq.n	80033ee <HAL_GPIO_DeInit+0xd2>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a62      	ldr	r2, [pc, #392]	; (800350c <HAL_GPIO_DeInit+0x1f0>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d031      	beq.n	80033ea <HAL_GPIO_DeInit+0xce>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a61      	ldr	r2, [pc, #388]	; (8003510 <HAL_GPIO_DeInit+0x1f4>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d02b      	beq.n	80033e6 <HAL_GPIO_DeInit+0xca>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a60      	ldr	r2, [pc, #384]	; (8003514 <HAL_GPIO_DeInit+0x1f8>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d025      	beq.n	80033e2 <HAL_GPIO_DeInit+0xc6>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a5f      	ldr	r2, [pc, #380]	; (8003518 <HAL_GPIO_DeInit+0x1fc>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d01f      	beq.n	80033de <HAL_GPIO_DeInit+0xc2>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a5e      	ldr	r2, [pc, #376]	; (800351c <HAL_GPIO_DeInit+0x200>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d019      	beq.n	80033da <HAL_GPIO_DeInit+0xbe>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a5d      	ldr	r2, [pc, #372]	; (8003520 <HAL_GPIO_DeInit+0x204>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d013      	beq.n	80033d6 <HAL_GPIO_DeInit+0xba>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a5c      	ldr	r2, [pc, #368]	; (8003524 <HAL_GPIO_DeInit+0x208>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d00d      	beq.n	80033d2 <HAL_GPIO_DeInit+0xb6>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a5b      	ldr	r2, [pc, #364]	; (8003528 <HAL_GPIO_DeInit+0x20c>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d007      	beq.n	80033ce <HAL_GPIO_DeInit+0xb2>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a5a      	ldr	r2, [pc, #360]	; (800352c <HAL_GPIO_DeInit+0x210>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d101      	bne.n	80033ca <HAL_GPIO_DeInit+0xae>
 80033c6:	2309      	movs	r3, #9
 80033c8:	e012      	b.n	80033f0 <HAL_GPIO_DeInit+0xd4>
 80033ca:	230a      	movs	r3, #10
 80033cc:	e010      	b.n	80033f0 <HAL_GPIO_DeInit+0xd4>
 80033ce:	2308      	movs	r3, #8
 80033d0:	e00e      	b.n	80033f0 <HAL_GPIO_DeInit+0xd4>
 80033d2:	2307      	movs	r3, #7
 80033d4:	e00c      	b.n	80033f0 <HAL_GPIO_DeInit+0xd4>
 80033d6:	2306      	movs	r3, #6
 80033d8:	e00a      	b.n	80033f0 <HAL_GPIO_DeInit+0xd4>
 80033da:	2305      	movs	r3, #5
 80033dc:	e008      	b.n	80033f0 <HAL_GPIO_DeInit+0xd4>
 80033de:	2304      	movs	r3, #4
 80033e0:	e006      	b.n	80033f0 <HAL_GPIO_DeInit+0xd4>
 80033e2:	2303      	movs	r3, #3
 80033e4:	e004      	b.n	80033f0 <HAL_GPIO_DeInit+0xd4>
 80033e6:	2302      	movs	r3, #2
 80033e8:	e002      	b.n	80033f0 <HAL_GPIO_DeInit+0xd4>
 80033ea:	2301      	movs	r3, #1
 80033ec:	e000      	b.n	80033f0 <HAL_GPIO_DeInit+0xd4>
 80033ee:	2300      	movs	r3, #0
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	f002 0203 	and.w	r2, r2, #3
 80033f6:	0092      	lsls	r2, r2, #2
 80033f8:	4093      	lsls	r3, r2
 80033fa:	68ba      	ldr	r2, [r7, #8]
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d132      	bne.n	8003466 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003400:	4b4b      	ldr	r3, [pc, #300]	; (8003530 <HAL_GPIO_DeInit+0x214>)
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	43db      	mvns	r3, r3
 8003408:	4949      	ldr	r1, [pc, #292]	; (8003530 <HAL_GPIO_DeInit+0x214>)
 800340a:	4013      	ands	r3, r2
 800340c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800340e:	4b48      	ldr	r3, [pc, #288]	; (8003530 <HAL_GPIO_DeInit+0x214>)
 8003410:	685a      	ldr	r2, [r3, #4]
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	43db      	mvns	r3, r3
 8003416:	4946      	ldr	r1, [pc, #280]	; (8003530 <HAL_GPIO_DeInit+0x214>)
 8003418:	4013      	ands	r3, r2
 800341a:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800341c:	4b44      	ldr	r3, [pc, #272]	; (8003530 <HAL_GPIO_DeInit+0x214>)
 800341e:	68da      	ldr	r2, [r3, #12]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	43db      	mvns	r3, r3
 8003424:	4942      	ldr	r1, [pc, #264]	; (8003530 <HAL_GPIO_DeInit+0x214>)
 8003426:	4013      	ands	r3, r2
 8003428:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800342a:	4b41      	ldr	r3, [pc, #260]	; (8003530 <HAL_GPIO_DeInit+0x214>)
 800342c:	689a      	ldr	r2, [r3, #8]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	43db      	mvns	r3, r3
 8003432:	493f      	ldr	r1, [pc, #252]	; (8003530 <HAL_GPIO_DeInit+0x214>)
 8003434:	4013      	ands	r3, r2
 8003436:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	f003 0303 	and.w	r3, r3, #3
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	220f      	movs	r2, #15
 8003442:	fa02 f303 	lsl.w	r3, r2, r3
 8003446:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003448:	4a2e      	ldr	r2, [pc, #184]	; (8003504 <HAL_GPIO_DeInit+0x1e8>)
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	089b      	lsrs	r3, r3, #2
 800344e:	3302      	adds	r3, #2
 8003450:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	43da      	mvns	r2, r3
 8003458:	482a      	ldr	r0, [pc, #168]	; (8003504 <HAL_GPIO_DeInit+0x1e8>)
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	089b      	lsrs	r3, r3, #2
 800345e:	400a      	ands	r2, r1
 8003460:	3302      	adds	r3, #2
 8003462:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	2103      	movs	r1, #3
 8003470:	fa01 f303 	lsl.w	r3, r1, r3
 8003474:	43db      	mvns	r3, r3
 8003476:	401a      	ands	r2, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	08da      	lsrs	r2, r3, #3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	3208      	adds	r2, #8
 8003484:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f003 0307 	and.w	r3, r3, #7
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	220f      	movs	r2, #15
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	43db      	mvns	r3, r3
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	08d2      	lsrs	r2, r2, #3
 800349c:	4019      	ands	r1, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	3208      	adds	r2, #8
 80034a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	68da      	ldr	r2, [r3, #12]
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	005b      	lsls	r3, r3, #1
 80034ae:	2103      	movs	r1, #3
 80034b0:	fa01 f303 	lsl.w	r3, r1, r3
 80034b4:	43db      	mvns	r3, r3
 80034b6:	401a      	ands	r2, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	2101      	movs	r1, #1
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	fa01 f303 	lsl.w	r3, r1, r3
 80034c8:	43db      	mvns	r3, r3
 80034ca:	401a      	ands	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	689a      	ldr	r2, [r3, #8]
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	005b      	lsls	r3, r3, #1
 80034d8:	2103      	movs	r1, #3
 80034da:	fa01 f303 	lsl.w	r3, r1, r3
 80034de:	43db      	mvns	r3, r3
 80034e0:	401a      	ands	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	3301      	adds	r3, #1
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	2b0f      	cmp	r3, #15
 80034f0:	f67f af22 	bls.w	8003338 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80034f4:	bf00      	nop
 80034f6:	bf00      	nop
 80034f8:	371c      	adds	r7, #28
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	40013800 	.word	0x40013800
 8003508:	40020000 	.word	0x40020000
 800350c:	40020400 	.word	0x40020400
 8003510:	40020800 	.word	0x40020800
 8003514:	40020c00 	.word	0x40020c00
 8003518:	40021000 	.word	0x40021000
 800351c:	40021400 	.word	0x40021400
 8003520:	40021800 	.word	0x40021800
 8003524:	40021c00 	.word	0x40021c00
 8003528:	40022000 	.word	0x40022000
 800352c:	40022400 	.word	0x40022400
 8003530:	40013c00 	.word	0x40013c00

08003534 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	460b      	mov	r3, r1
 800353e:	807b      	strh	r3, [r7, #2]
 8003540:	4613      	mov	r3, r2
 8003542:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003544:	787b      	ldrb	r3, [r7, #1]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800354a:	887a      	ldrh	r2, [r7, #2]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003550:	e003      	b.n	800355a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003552:	887b      	ldrh	r3, [r7, #2]
 8003554:	041a      	lsls	r2, r3, #16
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	619a      	str	r2, [r3, #24]
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003566:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003568:	b08f      	sub	sp, #60	; 0x3c
 800356a:	af0a      	add	r7, sp, #40	; 0x28
 800356c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e054      	b.n	8003622 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003584:	b2db      	uxtb	r3, r3
 8003586:	2b00      	cmp	r3, #0
 8003588:	d106      	bne.n	8003598 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2200      	movs	r2, #0
 800358e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f00a ff9a 	bl	800e4cc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2203      	movs	r2, #3
 800359c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d102      	bne.n	80035b2 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f005 fad0 	bl	8008b5c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	603b      	str	r3, [r7, #0]
 80035c2:	687e      	ldr	r6, [r7, #4]
 80035c4:	466d      	mov	r5, sp
 80035c6:	f106 0410 	add.w	r4, r6, #16
 80035ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80035d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80035d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80035d6:	e885 0003 	stmia.w	r5, {r0, r1}
 80035da:	1d33      	adds	r3, r6, #4
 80035dc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035de:	6838      	ldr	r0, [r7, #0]
 80035e0:	f005 fa4a 	bl	8008a78 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2101      	movs	r1, #1
 80035ea:	4618      	mov	r0, r3
 80035ec:	f005 fac7 	bl	8008b7e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	603b      	str	r3, [r7, #0]
 80035f6:	687e      	ldr	r6, [r7, #4]
 80035f8:	466d      	mov	r5, sp
 80035fa:	f106 0410 	add.w	r4, r6, #16
 80035fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003600:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003602:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003604:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003606:	e894 0003 	ldmia.w	r4, {r0, r1}
 800360a:	e885 0003 	stmia.w	r5, {r0, r1}
 800360e:	1d33      	adds	r3, r6, #4
 8003610:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003612:	6838      	ldr	r0, [r7, #0]
 8003614:	f005 fc50 	bl	8008eb8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3714      	adds	r7, #20
 8003626:	46bd      	mov	sp, r7
 8003628:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800362a <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800362a:	b590      	push	{r4, r7, lr}
 800362c:	b089      	sub	sp, #36	; 0x24
 800362e:	af04      	add	r7, sp, #16
 8003630:	6078      	str	r0, [r7, #4]
 8003632:	4608      	mov	r0, r1
 8003634:	4611      	mov	r1, r2
 8003636:	461a      	mov	r2, r3
 8003638:	4603      	mov	r3, r0
 800363a:	70fb      	strb	r3, [r7, #3]
 800363c:	460b      	mov	r3, r1
 800363e:	70bb      	strb	r3, [r7, #2]
 8003640:	4613      	mov	r3, r2
 8003642:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800364a:	2b01      	cmp	r3, #1
 800364c:	d101      	bne.n	8003652 <HAL_HCD_HC_Init+0x28>
 800364e:	2302      	movs	r3, #2
 8003650:	e076      	b.n	8003740 <HAL_HCD_HC_Init+0x116>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800365a:	78fb      	ldrb	r3, [r7, #3]
 800365c:	687a      	ldr	r2, [r7, #4]
 800365e:	212c      	movs	r1, #44	; 0x2c
 8003660:	fb01 f303 	mul.w	r3, r1, r3
 8003664:	4413      	add	r3, r2
 8003666:	333d      	adds	r3, #61	; 0x3d
 8003668:	2200      	movs	r2, #0
 800366a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800366c:	78fb      	ldrb	r3, [r7, #3]
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	212c      	movs	r1, #44	; 0x2c
 8003672:	fb01 f303 	mul.w	r3, r1, r3
 8003676:	4413      	add	r3, r2
 8003678:	3338      	adds	r3, #56	; 0x38
 800367a:	787a      	ldrb	r2, [r7, #1]
 800367c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800367e:	78fb      	ldrb	r3, [r7, #3]
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	212c      	movs	r1, #44	; 0x2c
 8003684:	fb01 f303 	mul.w	r3, r1, r3
 8003688:	4413      	add	r3, r2
 800368a:	3340      	adds	r3, #64	; 0x40
 800368c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800368e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003690:	78fb      	ldrb	r3, [r7, #3]
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	212c      	movs	r1, #44	; 0x2c
 8003696:	fb01 f303 	mul.w	r3, r1, r3
 800369a:	4413      	add	r3, r2
 800369c:	3339      	adds	r3, #57	; 0x39
 800369e:	78fa      	ldrb	r2, [r7, #3]
 80036a0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80036a2:	78fb      	ldrb	r3, [r7, #3]
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	212c      	movs	r1, #44	; 0x2c
 80036a8:	fb01 f303 	mul.w	r3, r1, r3
 80036ac:	4413      	add	r3, r2
 80036ae:	333f      	adds	r3, #63	; 0x3f
 80036b0:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80036b4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80036b6:	78fb      	ldrb	r3, [r7, #3]
 80036b8:	78ba      	ldrb	r2, [r7, #2]
 80036ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036be:	b2d0      	uxtb	r0, r2
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	212c      	movs	r1, #44	; 0x2c
 80036c4:	fb01 f303 	mul.w	r3, r1, r3
 80036c8:	4413      	add	r3, r2
 80036ca:	333a      	adds	r3, #58	; 0x3a
 80036cc:	4602      	mov	r2, r0
 80036ce:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 80036d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	da09      	bge.n	80036ec <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80036d8:	78fb      	ldrb	r3, [r7, #3]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	212c      	movs	r1, #44	; 0x2c
 80036de:	fb01 f303 	mul.w	r3, r1, r3
 80036e2:	4413      	add	r3, r2
 80036e4:	333b      	adds	r3, #59	; 0x3b
 80036e6:	2201      	movs	r2, #1
 80036e8:	701a      	strb	r2, [r3, #0]
 80036ea:	e008      	b.n	80036fe <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80036ec:	78fb      	ldrb	r3, [r7, #3]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	212c      	movs	r1, #44	; 0x2c
 80036f2:	fb01 f303 	mul.w	r3, r1, r3
 80036f6:	4413      	add	r3, r2
 80036f8:	333b      	adds	r3, #59	; 0x3b
 80036fa:	2200      	movs	r2, #0
 80036fc:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80036fe:	78fb      	ldrb	r3, [r7, #3]
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	212c      	movs	r1, #44	; 0x2c
 8003704:	fb01 f303 	mul.w	r3, r1, r3
 8003708:	4413      	add	r3, r2
 800370a:	333c      	adds	r3, #60	; 0x3c
 800370c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8003710:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6818      	ldr	r0, [r3, #0]
 8003716:	787c      	ldrb	r4, [r7, #1]
 8003718:	78ba      	ldrb	r2, [r7, #2]
 800371a:	78f9      	ldrb	r1, [r7, #3]
 800371c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800371e:	9302      	str	r3, [sp, #8]
 8003720:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003724:	9301      	str	r3, [sp, #4]
 8003726:	f897 3020 	ldrb.w	r3, [r7, #32]
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	4623      	mov	r3, r4
 800372e:	f005 fd49 	bl	80091c4 <USB_HC_Init>
 8003732:	4603      	mov	r3, r0
 8003734:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800373e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003740:	4618      	mov	r0, r3
 8003742:	3714      	adds	r7, #20
 8003744:	46bd      	mov	sp, r7
 8003746:	bd90      	pop	{r4, r7, pc}

08003748 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	460b      	mov	r3, r1
 8003752:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800375e:	2b01      	cmp	r3, #1
 8003760:	d101      	bne.n	8003766 <HAL_HCD_HC_Halt+0x1e>
 8003762:	2302      	movs	r3, #2
 8003764:	e00f      	b.n	8003786 <HAL_HCD_HC_Halt+0x3e>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	2201      	movs	r2, #1
 800376a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	78fa      	ldrb	r2, [r7, #3]
 8003774:	4611      	mov	r1, r2
 8003776:	4618      	mov	r0, r3
 8003778:	f005 ff99 	bl	80096ae <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003784:	7bfb      	ldrb	r3, [r7, #15]
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
	...

08003790 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b082      	sub	sp, #8
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	4608      	mov	r0, r1
 800379a:	4611      	mov	r1, r2
 800379c:	461a      	mov	r2, r3
 800379e:	4603      	mov	r3, r0
 80037a0:	70fb      	strb	r3, [r7, #3]
 80037a2:	460b      	mov	r3, r1
 80037a4:	70bb      	strb	r3, [r7, #2]
 80037a6:	4613      	mov	r3, r2
 80037a8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80037aa:	78fb      	ldrb	r3, [r7, #3]
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	212c      	movs	r1, #44	; 0x2c
 80037b0:	fb01 f303 	mul.w	r3, r1, r3
 80037b4:	4413      	add	r3, r2
 80037b6:	333b      	adds	r3, #59	; 0x3b
 80037b8:	78ba      	ldrb	r2, [r7, #2]
 80037ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80037bc:	78fb      	ldrb	r3, [r7, #3]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	212c      	movs	r1, #44	; 0x2c
 80037c2:	fb01 f303 	mul.w	r3, r1, r3
 80037c6:	4413      	add	r3, r2
 80037c8:	333f      	adds	r3, #63	; 0x3f
 80037ca:	787a      	ldrb	r2, [r7, #1]
 80037cc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80037ce:	7c3b      	ldrb	r3, [r7, #16]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d112      	bne.n	80037fa <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80037d4:	78fb      	ldrb	r3, [r7, #3]
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	212c      	movs	r1, #44	; 0x2c
 80037da:	fb01 f303 	mul.w	r3, r1, r3
 80037de:	4413      	add	r3, r2
 80037e0:	3342      	adds	r3, #66	; 0x42
 80037e2:	2203      	movs	r2, #3
 80037e4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80037e6:	78fb      	ldrb	r3, [r7, #3]
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	212c      	movs	r1, #44	; 0x2c
 80037ec:	fb01 f303 	mul.w	r3, r1, r3
 80037f0:	4413      	add	r3, r2
 80037f2:	333d      	adds	r3, #61	; 0x3d
 80037f4:	7f3a      	ldrb	r2, [r7, #28]
 80037f6:	701a      	strb	r2, [r3, #0]
 80037f8:	e008      	b.n	800380c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80037fa:	78fb      	ldrb	r3, [r7, #3]
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	212c      	movs	r1, #44	; 0x2c
 8003800:	fb01 f303 	mul.w	r3, r1, r3
 8003804:	4413      	add	r3, r2
 8003806:	3342      	adds	r3, #66	; 0x42
 8003808:	2202      	movs	r2, #2
 800380a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800380c:	787b      	ldrb	r3, [r7, #1]
 800380e:	2b03      	cmp	r3, #3
 8003810:	f200 80c6 	bhi.w	80039a0 <HAL_HCD_HC_SubmitRequest+0x210>
 8003814:	a201      	add	r2, pc, #4	; (adr r2, 800381c <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381a:	bf00      	nop
 800381c:	0800382d 	.word	0x0800382d
 8003820:	0800398d 	.word	0x0800398d
 8003824:	08003891 	.word	0x08003891
 8003828:	0800390f 	.word	0x0800390f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 800382c:	7c3b      	ldrb	r3, [r7, #16]
 800382e:	2b01      	cmp	r3, #1
 8003830:	f040 80b8 	bne.w	80039a4 <HAL_HCD_HC_SubmitRequest+0x214>
 8003834:	78bb      	ldrb	r3, [r7, #2]
 8003836:	2b00      	cmp	r3, #0
 8003838:	f040 80b4 	bne.w	80039a4 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 800383c:	8b3b      	ldrh	r3, [r7, #24]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d108      	bne.n	8003854 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003842:	78fb      	ldrb	r3, [r7, #3]
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	212c      	movs	r1, #44	; 0x2c
 8003848:	fb01 f303 	mul.w	r3, r1, r3
 800384c:	4413      	add	r3, r2
 800384e:	3355      	adds	r3, #85	; 0x55
 8003850:	2201      	movs	r2, #1
 8003852:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003854:	78fb      	ldrb	r3, [r7, #3]
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	212c      	movs	r1, #44	; 0x2c
 800385a:	fb01 f303 	mul.w	r3, r1, r3
 800385e:	4413      	add	r3, r2
 8003860:	3355      	adds	r3, #85	; 0x55
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d109      	bne.n	800387c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003868:	78fb      	ldrb	r3, [r7, #3]
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	212c      	movs	r1, #44	; 0x2c
 800386e:	fb01 f303 	mul.w	r3, r1, r3
 8003872:	4413      	add	r3, r2
 8003874:	3342      	adds	r3, #66	; 0x42
 8003876:	2200      	movs	r2, #0
 8003878:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800387a:	e093      	b.n	80039a4 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800387c:	78fb      	ldrb	r3, [r7, #3]
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	212c      	movs	r1, #44	; 0x2c
 8003882:	fb01 f303 	mul.w	r3, r1, r3
 8003886:	4413      	add	r3, r2
 8003888:	3342      	adds	r3, #66	; 0x42
 800388a:	2202      	movs	r2, #2
 800388c:	701a      	strb	r2, [r3, #0]
      break;
 800388e:	e089      	b.n	80039a4 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003890:	78bb      	ldrb	r3, [r7, #2]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d11d      	bne.n	80038d2 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003896:	78fb      	ldrb	r3, [r7, #3]
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	212c      	movs	r1, #44	; 0x2c
 800389c:	fb01 f303 	mul.w	r3, r1, r3
 80038a0:	4413      	add	r3, r2
 80038a2:	3355      	adds	r3, #85	; 0x55
 80038a4:	781b      	ldrb	r3, [r3, #0]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d109      	bne.n	80038be <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038aa:	78fb      	ldrb	r3, [r7, #3]
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	212c      	movs	r1, #44	; 0x2c
 80038b0:	fb01 f303 	mul.w	r3, r1, r3
 80038b4:	4413      	add	r3, r2
 80038b6:	3342      	adds	r3, #66	; 0x42
 80038b8:	2200      	movs	r2, #0
 80038ba:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80038bc:	e073      	b.n	80039a6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038be:	78fb      	ldrb	r3, [r7, #3]
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	212c      	movs	r1, #44	; 0x2c
 80038c4:	fb01 f303 	mul.w	r3, r1, r3
 80038c8:	4413      	add	r3, r2
 80038ca:	3342      	adds	r3, #66	; 0x42
 80038cc:	2202      	movs	r2, #2
 80038ce:	701a      	strb	r2, [r3, #0]
      break;
 80038d0:	e069      	b.n	80039a6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80038d2:	78fb      	ldrb	r3, [r7, #3]
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	212c      	movs	r1, #44	; 0x2c
 80038d8:	fb01 f303 	mul.w	r3, r1, r3
 80038dc:	4413      	add	r3, r2
 80038de:	3354      	adds	r3, #84	; 0x54
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d109      	bne.n	80038fa <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038e6:	78fb      	ldrb	r3, [r7, #3]
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	212c      	movs	r1, #44	; 0x2c
 80038ec:	fb01 f303 	mul.w	r3, r1, r3
 80038f0:	4413      	add	r3, r2
 80038f2:	3342      	adds	r3, #66	; 0x42
 80038f4:	2200      	movs	r2, #0
 80038f6:	701a      	strb	r2, [r3, #0]
      break;
 80038f8:	e055      	b.n	80039a6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038fa:	78fb      	ldrb	r3, [r7, #3]
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	212c      	movs	r1, #44	; 0x2c
 8003900:	fb01 f303 	mul.w	r3, r1, r3
 8003904:	4413      	add	r3, r2
 8003906:	3342      	adds	r3, #66	; 0x42
 8003908:	2202      	movs	r2, #2
 800390a:	701a      	strb	r2, [r3, #0]
      break;
 800390c:	e04b      	b.n	80039a6 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800390e:	78bb      	ldrb	r3, [r7, #2]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d11d      	bne.n	8003950 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003914:	78fb      	ldrb	r3, [r7, #3]
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	212c      	movs	r1, #44	; 0x2c
 800391a:	fb01 f303 	mul.w	r3, r1, r3
 800391e:	4413      	add	r3, r2
 8003920:	3355      	adds	r3, #85	; 0x55
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d109      	bne.n	800393c <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003928:	78fb      	ldrb	r3, [r7, #3]
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	212c      	movs	r1, #44	; 0x2c
 800392e:	fb01 f303 	mul.w	r3, r1, r3
 8003932:	4413      	add	r3, r2
 8003934:	3342      	adds	r3, #66	; 0x42
 8003936:	2200      	movs	r2, #0
 8003938:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800393a:	e034      	b.n	80039a6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800393c:	78fb      	ldrb	r3, [r7, #3]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	212c      	movs	r1, #44	; 0x2c
 8003942:	fb01 f303 	mul.w	r3, r1, r3
 8003946:	4413      	add	r3, r2
 8003948:	3342      	adds	r3, #66	; 0x42
 800394a:	2202      	movs	r2, #2
 800394c:	701a      	strb	r2, [r3, #0]
      break;
 800394e:	e02a      	b.n	80039a6 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003950:	78fb      	ldrb	r3, [r7, #3]
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	212c      	movs	r1, #44	; 0x2c
 8003956:	fb01 f303 	mul.w	r3, r1, r3
 800395a:	4413      	add	r3, r2
 800395c:	3354      	adds	r3, #84	; 0x54
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d109      	bne.n	8003978 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003964:	78fb      	ldrb	r3, [r7, #3]
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	212c      	movs	r1, #44	; 0x2c
 800396a:	fb01 f303 	mul.w	r3, r1, r3
 800396e:	4413      	add	r3, r2
 8003970:	3342      	adds	r3, #66	; 0x42
 8003972:	2200      	movs	r2, #0
 8003974:	701a      	strb	r2, [r3, #0]
      break;
 8003976:	e016      	b.n	80039a6 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003978:	78fb      	ldrb	r3, [r7, #3]
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	212c      	movs	r1, #44	; 0x2c
 800397e:	fb01 f303 	mul.w	r3, r1, r3
 8003982:	4413      	add	r3, r2
 8003984:	3342      	adds	r3, #66	; 0x42
 8003986:	2202      	movs	r2, #2
 8003988:	701a      	strb	r2, [r3, #0]
      break;
 800398a:	e00c      	b.n	80039a6 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800398c:	78fb      	ldrb	r3, [r7, #3]
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	212c      	movs	r1, #44	; 0x2c
 8003992:	fb01 f303 	mul.w	r3, r1, r3
 8003996:	4413      	add	r3, r2
 8003998:	3342      	adds	r3, #66	; 0x42
 800399a:	2200      	movs	r2, #0
 800399c:	701a      	strb	r2, [r3, #0]
      break;
 800399e:	e002      	b.n	80039a6 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80039a0:	bf00      	nop
 80039a2:	e000      	b.n	80039a6 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 80039a4:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80039a6:	78fb      	ldrb	r3, [r7, #3]
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	212c      	movs	r1, #44	; 0x2c
 80039ac:	fb01 f303 	mul.w	r3, r1, r3
 80039b0:	4413      	add	r3, r2
 80039b2:	3344      	adds	r3, #68	; 0x44
 80039b4:	697a      	ldr	r2, [r7, #20]
 80039b6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80039b8:	78fb      	ldrb	r3, [r7, #3]
 80039ba:	8b3a      	ldrh	r2, [r7, #24]
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	202c      	movs	r0, #44	; 0x2c
 80039c0:	fb00 f303 	mul.w	r3, r0, r3
 80039c4:	440b      	add	r3, r1
 80039c6:	334c      	adds	r3, #76	; 0x4c
 80039c8:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80039ca:	78fb      	ldrb	r3, [r7, #3]
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	212c      	movs	r1, #44	; 0x2c
 80039d0:	fb01 f303 	mul.w	r3, r1, r3
 80039d4:	4413      	add	r3, r2
 80039d6:	3360      	adds	r3, #96	; 0x60
 80039d8:	2200      	movs	r2, #0
 80039da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80039dc:	78fb      	ldrb	r3, [r7, #3]
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	212c      	movs	r1, #44	; 0x2c
 80039e2:	fb01 f303 	mul.w	r3, r1, r3
 80039e6:	4413      	add	r3, r2
 80039e8:	3350      	adds	r3, #80	; 0x50
 80039ea:	2200      	movs	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80039ee:	78fb      	ldrb	r3, [r7, #3]
 80039f0:	687a      	ldr	r2, [r7, #4]
 80039f2:	212c      	movs	r1, #44	; 0x2c
 80039f4:	fb01 f303 	mul.w	r3, r1, r3
 80039f8:	4413      	add	r3, r2
 80039fa:	3339      	adds	r3, #57	; 0x39
 80039fc:	78fa      	ldrb	r2, [r7, #3]
 80039fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003a00:	78fb      	ldrb	r3, [r7, #3]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	212c      	movs	r1, #44	; 0x2c
 8003a06:	fb01 f303 	mul.w	r3, r1, r3
 8003a0a:	4413      	add	r3, r2
 8003a0c:	3361      	adds	r3, #97	; 0x61
 8003a0e:	2200      	movs	r2, #0
 8003a10:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6818      	ldr	r0, [r3, #0]
 8003a16:	78fb      	ldrb	r3, [r7, #3]
 8003a18:	222c      	movs	r2, #44	; 0x2c
 8003a1a:	fb02 f303 	mul.w	r3, r2, r3
 8003a1e:	3338      	adds	r3, #56	; 0x38
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	18d1      	adds	r1, r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	f005 fcec 	bl	8009408 <USB_HC_StartXfer>
 8003a30:	4603      	mov	r3, r0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop

08003a3c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4618      	mov	r0, r3
 8003a54:	f005 f9ed 	bl	8008e32 <USB_GetMode>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	f040 80f6 	bne.w	8003c4c <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4618      	mov	r0, r3
 8003a66:	f005 f9d1 	bl	8008e0c <USB_ReadInterrupts>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 80ec 	beq.w	8003c4a <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4618      	mov	r0, r3
 8003a78:	f005 f9c8 	bl	8008e0c <USB_ReadInterrupts>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a86:	d104      	bne.n	8003a92 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003a90:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f005 f9b8 	bl	8008e0c <USB_ReadInterrupts>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003aa2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aa6:	d104      	bne.n	8003ab2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003ab0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f005 f9a8 	bl	8008e0c <USB_ReadInterrupts>
 8003abc:	4603      	mov	r3, r0
 8003abe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ac2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003ac6:	d104      	bne.n	8003ad2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003ad0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f005 f998 	bl	8008e0c <USB_ReadInterrupts>
 8003adc:	4603      	mov	r3, r0
 8003ade:	f003 0302 	and.w	r3, r3, #2
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d103      	bne.n	8003aee <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	2202      	movs	r2, #2
 8003aec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f005 f98a 	bl	8008e0c <USB_ReadInterrupts>
 8003af8:	4603      	mov	r3, r0
 8003afa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003afe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b02:	d11c      	bne.n	8003b3e <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003b0c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d10f      	bne.n	8003b3e <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003b1e:	2110      	movs	r1, #16
 8003b20:	6938      	ldr	r0, [r7, #16]
 8003b22:	f005 f879 	bl	8008c18 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003b26:	6938      	ldr	r0, [r7, #16]
 8003b28:	f005 f8aa 	bl	8008c80 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2101      	movs	r1, #1
 8003b32:	4618      	mov	r0, r3
 8003b34:	f005 fa80 	bl	8009038 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f00a fd41 	bl	800e5c0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f005 f962 	bl	8008e0c <USB_ReadInterrupts>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b4e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b52:	d102      	bne.n	8003b5a <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f001 f89e 	bl	8004c96 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f005 f954 	bl	8008e0c <USB_ReadInterrupts>
 8003b64:	4603      	mov	r3, r0
 8003b66:	f003 0308 	and.w	r3, r3, #8
 8003b6a:	2b08      	cmp	r3, #8
 8003b6c:	d106      	bne.n	8003b7c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f00a fd0a 	bl	800e588 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2208      	movs	r2, #8
 8003b7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f005 f943 	bl	8008e0c <USB_ReadInterrupts>
 8003b86:	4603      	mov	r3, r0
 8003b88:	f003 0310 	and.w	r3, r3, #16
 8003b8c:	2b10      	cmp	r3, #16
 8003b8e:	d101      	bne.n	8003b94 <HAL_HCD_IRQHandler+0x158>
 8003b90:	2301      	movs	r3, #1
 8003b92:	e000      	b.n	8003b96 <HAL_HCD_IRQHandler+0x15a>
 8003b94:	2300      	movs	r3, #0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d012      	beq.n	8003bc0 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	699a      	ldr	r2, [r3, #24]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f022 0210 	bic.w	r2, r2, #16
 8003ba8:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f000 ffa1 	bl	8004af2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	699a      	ldr	r2, [r3, #24]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f042 0210 	orr.w	r2, r2, #16
 8003bbe:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f005 f921 	bl	8008e0c <USB_ReadInterrupts>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003bd4:	d13a      	bne.n	8003c4c <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f005 fd56 	bl	800968c <USB_HC_ReadInterrupt>
 8003be0:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003be2:	2300      	movs	r3, #0
 8003be4:	617b      	str	r3, [r7, #20]
 8003be6:	e025      	b.n	8003c34 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	68ba      	ldr	r2, [r7, #8]
 8003bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8003bf4:	f003 0301 	and.w	r3, r3, #1
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d018      	beq.n	8003c2e <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	015a      	lsls	r2, r3, #5
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	4413      	add	r3, r2
 8003c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c0e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c12:	d106      	bne.n	8003c22 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	4619      	mov	r1, r3
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 f8ab 	bl	8003d76 <HCD_HC_IN_IRQHandler>
 8003c20:	e005      	b.n	8003c2e <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	4619      	mov	r1, r3
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 fbf9 	bl	8004420 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	3301      	adds	r3, #1
 8003c32:	617b      	str	r3, [r7, #20]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d3d4      	bcc.n	8003be8 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c46:	615a      	str	r2, [r3, #20]
 8003c48:	e000      	b.n	8003c4c <HAL_HCD_IRQHandler+0x210>
      return;
 8003c4a:	bf00      	nop
    }
  }
}
 8003c4c:	3718      	adds	r7, #24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b082      	sub	sp, #8
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d101      	bne.n	8003c68 <HAL_HCD_Start+0x16>
 8003c64:	2302      	movs	r3, #2
 8003c66:	e013      	b.n	8003c90 <HAL_HCD_Start+0x3e>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2101      	movs	r1, #1
 8003c76:	4618      	mov	r0, r3
 8003c78:	f005 fa42 	bl	8009100 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4618      	mov	r0, r3
 8003c82:	f004 ff5a 	bl	8008b3a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d101      	bne.n	8003cae <HAL_HCD_Stop+0x16>
 8003caa:	2302      	movs	r3, #2
 8003cac:	e00d      	b.n	8003cca <HAL_HCD_Stop+0x32>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f005 fe30 	bl	8009920 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}

08003cd2 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003cd2:	b580      	push	{r7, lr}
 8003cd4:	b082      	sub	sp, #8
 8003cd6:	af00      	add	r7, sp, #0
 8003cd8:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f005 f9e4 	bl	80090ac <USB_ResetPort>
 8003ce4:	4603      	mov	r3, r0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b083      	sub	sp, #12
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	6078      	str	r0, [r7, #4]
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003cfa:	78fb      	ldrb	r3, [r7, #3]
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	212c      	movs	r1, #44	; 0x2c
 8003d00:	fb01 f303 	mul.w	r3, r1, r3
 8003d04:	4413      	add	r3, r2
 8003d06:	3360      	adds	r3, #96	; 0x60
 8003d08:	781b      	ldrb	r3, [r3, #0]
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr

08003d16 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d16:	b480      	push	{r7}
 8003d18:	b083      	sub	sp, #12
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
 8003d1e:	460b      	mov	r3, r1
 8003d20:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003d22:	78fb      	ldrb	r3, [r7, #3]
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	212c      	movs	r1, #44	; 0x2c
 8003d28:	fb01 f303 	mul.w	r3, r1, r3
 8003d2c:	4413      	add	r3, r2
 8003d2e:	3350      	adds	r3, #80	; 0x50
 8003d30:	681b      	ldr	r3, [r3, #0]
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003d3e:	b580      	push	{r7, lr}
 8003d40:	b082      	sub	sp, #8
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f005 fa28 	bl	80091a0 <USB_GetCurrentFrame>
 8003d50:	4603      	mov	r3, r0
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3708      	adds	r7, #8
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b082      	sub	sp, #8
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f005 fa03 	bl	8009172 <USB_GetHostSpeed>
 8003d6c:	4603      	mov	r3, r0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b086      	sub	sp, #24
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
 8003d7e:	460b      	mov	r3, r1
 8003d80:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003d8c:	78fb      	ldrb	r3, [r7, #3]
 8003d8e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	015a      	lsls	r2, r3, #5
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	f003 0304 	and.w	r3, r3, #4
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d11a      	bne.n	8003ddc <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	015a      	lsls	r2, r3, #5
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	4413      	add	r3, r2
 8003dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db2:	461a      	mov	r2, r3
 8003db4:	2304      	movs	r3, #4
 8003db6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	212c      	movs	r1, #44	; 0x2c
 8003dbe:	fb01 f303 	mul.w	r3, r1, r3
 8003dc2:	4413      	add	r3, r2
 8003dc4:	3361      	adds	r3, #97	; 0x61
 8003dc6:	2206      	movs	r2, #6
 8003dc8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	b2d2      	uxtb	r2, r2
 8003dd2:	4611      	mov	r1, r2
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f005 fc6a 	bl	80096ae <USB_HC_Halt>
 8003dda:	e0af      	b.n	8003f3c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003df2:	d11b      	bne.n	8003e2c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	015a      	lsls	r2, r3, #5
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e00:	461a      	mov	r2, r3
 8003e02:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e06:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003e08:	687a      	ldr	r2, [r7, #4]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	212c      	movs	r1, #44	; 0x2c
 8003e0e:	fb01 f303 	mul.w	r3, r1, r3
 8003e12:	4413      	add	r3, r2
 8003e14:	3361      	adds	r3, #97	; 0x61
 8003e16:	2207      	movs	r2, #7
 8003e18:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	68fa      	ldr	r2, [r7, #12]
 8003e20:	b2d2      	uxtb	r2, r2
 8003e22:	4611      	mov	r1, r2
 8003e24:	4618      	mov	r0, r3
 8003e26:	f005 fc42 	bl	80096ae <USB_HC_Halt>
 8003e2a:	e087      	b.n	8003f3c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	015a      	lsls	r2, r3, #5
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	4413      	add	r3, r2
 8003e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 0320 	and.w	r3, r3, #32
 8003e3e:	2b20      	cmp	r3, #32
 8003e40:	d109      	bne.n	8003e56 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	015a      	lsls	r2, r3, #5
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e4e:	461a      	mov	r2, r3
 8003e50:	2320      	movs	r3, #32
 8003e52:	6093      	str	r3, [r2, #8]
 8003e54:	e072      	b.n	8003f3c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	015a      	lsls	r2, r3, #5
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f003 0308 	and.w	r3, r3, #8
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d11a      	bne.n	8003ea2 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e78:	461a      	mov	r2, r3
 8003e7a:	2308      	movs	r3, #8
 8003e7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	212c      	movs	r1, #44	; 0x2c
 8003e84:	fb01 f303 	mul.w	r3, r1, r3
 8003e88:	4413      	add	r3, r2
 8003e8a:	3361      	adds	r3, #97	; 0x61
 8003e8c:	2205      	movs	r2, #5
 8003e8e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	b2d2      	uxtb	r2, r2
 8003e98:	4611      	mov	r1, r2
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f005 fc07 	bl	80096ae <USB_HC_Halt>
 8003ea0:	e04c      	b.n	8003f3c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	015a      	lsls	r2, r3, #5
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb8:	d11b      	bne.n	8003ef2 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ecc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003ece:	687a      	ldr	r2, [r7, #4]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	212c      	movs	r1, #44	; 0x2c
 8003ed4:	fb01 f303 	mul.w	r3, r1, r3
 8003ed8:	4413      	add	r3, r2
 8003eda:	3361      	adds	r3, #97	; 0x61
 8003edc:	2208      	movs	r2, #8
 8003ede:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	4611      	mov	r1, r2
 8003eea:	4618      	mov	r0, r3
 8003eec:	f005 fbdf 	bl	80096ae <USB_HC_Halt>
 8003ef0:	e024      	b.n	8003f3c <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	015a      	lsls	r2, r3, #5
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	4413      	add	r3, r2
 8003efa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f04:	2b80      	cmp	r3, #128	; 0x80
 8003f06:	d119      	bne.n	8003f3c <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f14:	461a      	mov	r2, r3
 8003f16:	2380      	movs	r3, #128	; 0x80
 8003f18:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	212c      	movs	r1, #44	; 0x2c
 8003f20:	fb01 f303 	mul.w	r3, r1, r3
 8003f24:	4413      	add	r3, r2
 8003f26:	3361      	adds	r3, #97	; 0x61
 8003f28:	2206      	movs	r2, #6
 8003f2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	b2d2      	uxtb	r2, r2
 8003f34:	4611      	mov	r1, r2
 8003f36:	4618      	mov	r0, r3
 8003f38:	f005 fbb9 	bl	80096ae <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	015a      	lsls	r2, r3, #5
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	4413      	add	r3, r2
 8003f44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f52:	d112      	bne.n	8003f7a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	b2d2      	uxtb	r2, r2
 8003f5c:	4611      	mov	r1, r2
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f005 fba5 	bl	80096ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	015a      	lsls	r2, r3, #5
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f70:	461a      	mov	r2, r3
 8003f72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f76:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003f78:	e24e      	b.n	8004418 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	015a      	lsls	r2, r3, #5
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	4413      	add	r3, r2
 8003f82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	f040 80df 	bne.w	8004150 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	691b      	ldr	r3, [r3, #16]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d019      	beq.n	8003fce <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	212c      	movs	r1, #44	; 0x2c
 8003fa0:	fb01 f303 	mul.w	r3, r1, r3
 8003fa4:	4413      	add	r3, r2
 8003fa6:	3348      	adds	r3, #72	; 0x48
 8003fa8:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	0159      	lsls	r1, r3, #5
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	440b      	add	r3, r1
 8003fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb6:	691b      	ldr	r3, [r3, #16]
 8003fb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003fbc:	1ad2      	subs	r2, r2, r3
 8003fbe:	6879      	ldr	r1, [r7, #4]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	202c      	movs	r0, #44	; 0x2c
 8003fc4:	fb00 f303 	mul.w	r3, r0, r3
 8003fc8:	440b      	add	r3, r1
 8003fca:	3350      	adds	r3, #80	; 0x50
 8003fcc:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	212c      	movs	r1, #44	; 0x2c
 8003fd4:	fb01 f303 	mul.w	r3, r1, r3
 8003fd8:	4413      	add	r3, r2
 8003fda:	3361      	adds	r3, #97	; 0x61
 8003fdc:	2201      	movs	r2, #1
 8003fde:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	212c      	movs	r1, #44	; 0x2c
 8003fe6:	fb01 f303 	mul.w	r3, r1, r3
 8003fea:	4413      	add	r3, r2
 8003fec:	335c      	adds	r3, #92	; 0x5c
 8003fee:	2200      	movs	r2, #0
 8003ff0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ffe:	461a      	mov	r2, r3
 8004000:	2301      	movs	r3, #1
 8004002:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004004:	687a      	ldr	r2, [r7, #4]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	212c      	movs	r1, #44	; 0x2c
 800400a:	fb01 f303 	mul.w	r3, r1, r3
 800400e:	4413      	add	r3, r2
 8004010:	333f      	adds	r3, #63	; 0x3f
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d009      	beq.n	800402c <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	212c      	movs	r1, #44	; 0x2c
 800401e:	fb01 f303 	mul.w	r3, r1, r3
 8004022:	4413      	add	r3, r2
 8004024:	333f      	adds	r3, #63	; 0x3f
 8004026:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004028:	2b02      	cmp	r3, #2
 800402a:	d111      	bne.n	8004050 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	4611      	mov	r1, r2
 8004036:	4618      	mov	r0, r3
 8004038:	f005 fb39 	bl	80096ae <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	015a      	lsls	r2, r3, #5
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	4413      	add	r3, r2
 8004044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004048:	461a      	mov	r2, r3
 800404a:	2310      	movs	r3, #16
 800404c:	6093      	str	r3, [r2, #8]
 800404e:	e03a      	b.n	80040c6 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	212c      	movs	r1, #44	; 0x2c
 8004056:	fb01 f303 	mul.w	r3, r1, r3
 800405a:	4413      	add	r3, r2
 800405c:	333f      	adds	r3, #63	; 0x3f
 800405e:	781b      	ldrb	r3, [r3, #0]
 8004060:	2b03      	cmp	r3, #3
 8004062:	d009      	beq.n	8004078 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	212c      	movs	r1, #44	; 0x2c
 800406a:	fb01 f303 	mul.w	r3, r1, r3
 800406e:	4413      	add	r3, r2
 8004070:	333f      	adds	r3, #63	; 0x3f
 8004072:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004074:	2b01      	cmp	r3, #1
 8004076:	d126      	bne.n	80040c6 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	015a      	lsls	r2, r3, #5
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	4413      	add	r3, r2
 8004080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68fa      	ldr	r2, [r7, #12]
 8004088:	0151      	lsls	r1, r2, #5
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	440a      	add	r2, r1
 800408e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004092:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004096:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004098:	687a      	ldr	r2, [r7, #4]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	212c      	movs	r1, #44	; 0x2c
 800409e:	fb01 f303 	mul.w	r3, r1, r3
 80040a2:	4413      	add	r3, r2
 80040a4:	3360      	adds	r3, #96	; 0x60
 80040a6:	2201      	movs	r2, #1
 80040a8:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	b2d9      	uxtb	r1, r3
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	202c      	movs	r0, #44	; 0x2c
 80040b4:	fb00 f303 	mul.w	r3, r0, r3
 80040b8:	4413      	add	r3, r2
 80040ba:	3360      	adds	r3, #96	; 0x60
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	461a      	mov	r2, r3
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f00a fa8b 	bl	800e5dc <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d12b      	bne.n	8004126 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	212c      	movs	r1, #44	; 0x2c
 80040d4:	fb01 f303 	mul.w	r3, r1, r3
 80040d8:	4413      	add	r3, r2
 80040da:	3348      	adds	r3, #72	; 0x48
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6879      	ldr	r1, [r7, #4]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	202c      	movs	r0, #44	; 0x2c
 80040e4:	fb00 f202 	mul.w	r2, r0, r2
 80040e8:	440a      	add	r2, r1
 80040ea:	3240      	adds	r2, #64	; 0x40
 80040ec:	8812      	ldrh	r2, [r2, #0]
 80040ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 818e 	beq.w	8004418 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	212c      	movs	r1, #44	; 0x2c
 8004102:	fb01 f303 	mul.w	r3, r1, r3
 8004106:	4413      	add	r3, r2
 8004108:	3354      	adds	r3, #84	; 0x54
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	f083 0301 	eor.w	r3, r3, #1
 8004110:	b2d8      	uxtb	r0, r3
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	212c      	movs	r1, #44	; 0x2c
 8004118:	fb01 f303 	mul.w	r3, r1, r3
 800411c:	4413      	add	r3, r2
 800411e:	3354      	adds	r3, #84	; 0x54
 8004120:	4602      	mov	r2, r0
 8004122:	701a      	strb	r2, [r3, #0]
}
 8004124:	e178      	b.n	8004418 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	212c      	movs	r1, #44	; 0x2c
 800412c:	fb01 f303 	mul.w	r3, r1, r3
 8004130:	4413      	add	r3, r2
 8004132:	3354      	adds	r3, #84	; 0x54
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	f083 0301 	eor.w	r3, r3, #1
 800413a:	b2d8      	uxtb	r0, r3
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	212c      	movs	r1, #44	; 0x2c
 8004142:	fb01 f303 	mul.w	r3, r1, r3
 8004146:	4413      	add	r3, r2
 8004148:	3354      	adds	r3, #84	; 0x54
 800414a:	4602      	mov	r2, r0
 800414c:	701a      	strb	r2, [r3, #0]
}
 800414e:	e163      	b.n	8004418 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	015a      	lsls	r2, r3, #5
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	4413      	add	r3, r2
 8004158:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b02      	cmp	r3, #2
 8004164:	f040 80f6 	bne.w	8004354 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	212c      	movs	r1, #44	; 0x2c
 800416e:	fb01 f303 	mul.w	r3, r1, r3
 8004172:	4413      	add	r3, r2
 8004174:	3361      	adds	r3, #97	; 0x61
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d109      	bne.n	8004190 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800417c:	687a      	ldr	r2, [r7, #4]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	212c      	movs	r1, #44	; 0x2c
 8004182:	fb01 f303 	mul.w	r3, r1, r3
 8004186:	4413      	add	r3, r2
 8004188:	3360      	adds	r3, #96	; 0x60
 800418a:	2201      	movs	r2, #1
 800418c:	701a      	strb	r2, [r3, #0]
 800418e:	e0c9      	b.n	8004324 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004190:	687a      	ldr	r2, [r7, #4]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	212c      	movs	r1, #44	; 0x2c
 8004196:	fb01 f303 	mul.w	r3, r1, r3
 800419a:	4413      	add	r3, r2
 800419c:	3361      	adds	r3, #97	; 0x61
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	2b05      	cmp	r3, #5
 80041a2:	d109      	bne.n	80041b8 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	212c      	movs	r1, #44	; 0x2c
 80041aa:	fb01 f303 	mul.w	r3, r1, r3
 80041ae:	4413      	add	r3, r2
 80041b0:	3360      	adds	r3, #96	; 0x60
 80041b2:	2205      	movs	r2, #5
 80041b4:	701a      	strb	r2, [r3, #0]
 80041b6:	e0b5      	b.n	8004324 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	212c      	movs	r1, #44	; 0x2c
 80041be:	fb01 f303 	mul.w	r3, r1, r3
 80041c2:	4413      	add	r3, r2
 80041c4:	3361      	adds	r3, #97	; 0x61
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	2b06      	cmp	r3, #6
 80041ca:	d009      	beq.n	80041e0 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80041cc:	687a      	ldr	r2, [r7, #4]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	212c      	movs	r1, #44	; 0x2c
 80041d2:	fb01 f303 	mul.w	r3, r1, r3
 80041d6:	4413      	add	r3, r2
 80041d8:	3361      	adds	r3, #97	; 0x61
 80041da:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80041dc:	2b08      	cmp	r3, #8
 80041de:	d150      	bne.n	8004282 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	212c      	movs	r1, #44	; 0x2c
 80041e6:	fb01 f303 	mul.w	r3, r1, r3
 80041ea:	4413      	add	r3, r2
 80041ec:	335c      	adds	r3, #92	; 0x5c
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	1c5a      	adds	r2, r3, #1
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	202c      	movs	r0, #44	; 0x2c
 80041f8:	fb00 f303 	mul.w	r3, r0, r3
 80041fc:	440b      	add	r3, r1
 80041fe:	335c      	adds	r3, #92	; 0x5c
 8004200:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	212c      	movs	r1, #44	; 0x2c
 8004208:	fb01 f303 	mul.w	r3, r1, r3
 800420c:	4413      	add	r3, r2
 800420e:	335c      	adds	r3, #92	; 0x5c
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2b02      	cmp	r3, #2
 8004214:	d912      	bls.n	800423c <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	212c      	movs	r1, #44	; 0x2c
 800421c:	fb01 f303 	mul.w	r3, r1, r3
 8004220:	4413      	add	r3, r2
 8004222:	335c      	adds	r3, #92	; 0x5c
 8004224:	2200      	movs	r2, #0
 8004226:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	212c      	movs	r1, #44	; 0x2c
 800422e:	fb01 f303 	mul.w	r3, r1, r3
 8004232:	4413      	add	r3, r2
 8004234:	3360      	adds	r3, #96	; 0x60
 8004236:	2204      	movs	r2, #4
 8004238:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800423a:	e073      	b.n	8004324 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	212c      	movs	r1, #44	; 0x2c
 8004242:	fb01 f303 	mul.w	r3, r1, r3
 8004246:	4413      	add	r3, r2
 8004248:	3360      	adds	r3, #96	; 0x60
 800424a:	2202      	movs	r2, #2
 800424c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	015a      	lsls	r2, r3, #5
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	4413      	add	r3, r2
 8004256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004264:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800426c:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	015a      	lsls	r2, r3, #5
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	4413      	add	r3, r2
 8004276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800427a:	461a      	mov	r2, r3
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004280:	e050      	b.n	8004324 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	212c      	movs	r1, #44	; 0x2c
 8004288:	fb01 f303 	mul.w	r3, r1, r3
 800428c:	4413      	add	r3, r2
 800428e:	3361      	adds	r3, #97	; 0x61
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	2b03      	cmp	r3, #3
 8004294:	d122      	bne.n	80042dc <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	212c      	movs	r1, #44	; 0x2c
 800429c:	fb01 f303 	mul.w	r3, r1, r3
 80042a0:	4413      	add	r3, r2
 80042a2:	3360      	adds	r3, #96	; 0x60
 80042a4:	2202      	movs	r2, #2
 80042a6:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	015a      	lsls	r2, r3, #5
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80042be:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80042c6:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042d4:	461a      	mov	r2, r3
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	e023      	b.n	8004324 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	212c      	movs	r1, #44	; 0x2c
 80042e2:	fb01 f303 	mul.w	r3, r1, r3
 80042e6:	4413      	add	r3, r2
 80042e8:	3361      	adds	r3, #97	; 0x61
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	2b07      	cmp	r3, #7
 80042ee:	d119      	bne.n	8004324 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	212c      	movs	r1, #44	; 0x2c
 80042f6:	fb01 f303 	mul.w	r3, r1, r3
 80042fa:	4413      	add	r3, r2
 80042fc:	335c      	adds	r3, #92	; 0x5c
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	1c5a      	adds	r2, r3, #1
 8004302:	6879      	ldr	r1, [r7, #4]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	202c      	movs	r0, #44	; 0x2c
 8004308:	fb00 f303 	mul.w	r3, r0, r3
 800430c:	440b      	add	r3, r1
 800430e:	335c      	adds	r3, #92	; 0x5c
 8004310:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	212c      	movs	r1, #44	; 0x2c
 8004318:	fb01 f303 	mul.w	r3, r1, r3
 800431c:	4413      	add	r3, r2
 800431e:	3360      	adds	r3, #96	; 0x60
 8004320:	2204      	movs	r2, #4
 8004322:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	015a      	lsls	r2, r3, #5
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	4413      	add	r3, r2
 800432c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004330:	461a      	mov	r2, r3
 8004332:	2302      	movs	r3, #2
 8004334:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	b2d9      	uxtb	r1, r3
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	202c      	movs	r0, #44	; 0x2c
 8004340:	fb00 f303 	mul.w	r3, r0, r3
 8004344:	4413      	add	r3, r2
 8004346:	3360      	adds	r3, #96	; 0x60
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	461a      	mov	r2, r3
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f00a f945 	bl	800e5dc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004352:	e061      	b.n	8004418 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	4413      	add	r3, r2
 800435c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f003 0310 	and.w	r3, r3, #16
 8004366:	2b10      	cmp	r3, #16
 8004368:	d156      	bne.n	8004418 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	212c      	movs	r1, #44	; 0x2c
 8004370:	fb01 f303 	mul.w	r3, r1, r3
 8004374:	4413      	add	r3, r2
 8004376:	333f      	adds	r3, #63	; 0x3f
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	2b03      	cmp	r3, #3
 800437c:	d111      	bne.n	80043a2 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	212c      	movs	r1, #44	; 0x2c
 8004384:	fb01 f303 	mul.w	r3, r1, r3
 8004388:	4413      	add	r3, r2
 800438a:	335c      	adds	r3, #92	; 0x5c
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	b2d2      	uxtb	r2, r2
 8004398:	4611      	mov	r1, r2
 800439a:	4618      	mov	r0, r3
 800439c:	f005 f987 	bl	80096ae <USB_HC_Halt>
 80043a0:	e031      	b.n	8004406 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	212c      	movs	r1, #44	; 0x2c
 80043a8:	fb01 f303 	mul.w	r3, r1, r3
 80043ac:	4413      	add	r3, r2
 80043ae:	333f      	adds	r3, #63	; 0x3f
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d009      	beq.n	80043ca <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	212c      	movs	r1, #44	; 0x2c
 80043bc:	fb01 f303 	mul.w	r3, r1, r3
 80043c0:	4413      	add	r3, r2
 80043c2:	333f      	adds	r3, #63	; 0x3f
 80043c4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d11d      	bne.n	8004406 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	212c      	movs	r1, #44	; 0x2c
 80043d0:	fb01 f303 	mul.w	r3, r1, r3
 80043d4:	4413      	add	r3, r2
 80043d6:	335c      	adds	r3, #92	; 0x5c
 80043d8:	2200      	movs	r2, #0
 80043da:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d110      	bne.n	8004406 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	212c      	movs	r1, #44	; 0x2c
 80043ea:	fb01 f303 	mul.w	r3, r1, r3
 80043ee:	4413      	add	r3, r2
 80043f0:	3361      	adds	r3, #97	; 0x61
 80043f2:	2203      	movs	r2, #3
 80043f4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	b2d2      	uxtb	r2, r2
 80043fe:	4611      	mov	r1, r2
 8004400:	4618      	mov	r0, r3
 8004402:	f005 f954 	bl	80096ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	4413      	add	r3, r2
 800440e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004412:	461a      	mov	r2, r3
 8004414:	2310      	movs	r3, #16
 8004416:	6093      	str	r3, [r2, #8]
}
 8004418:	bf00      	nop
 800441a:	3718      	adds	r7, #24
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}

08004420 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b088      	sub	sp, #32
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	460b      	mov	r3, r1
 800442a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004436:	78fb      	ldrb	r3, [r7, #3]
 8004438:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	4413      	add	r3, r2
 8004442:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f003 0304 	and.w	r3, r3, #4
 800444c:	2b04      	cmp	r3, #4
 800444e:	d11a      	bne.n	8004486 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	015a      	lsls	r2, r3, #5
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	4413      	add	r3, r2
 8004458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800445c:	461a      	mov	r2, r3
 800445e:	2304      	movs	r3, #4
 8004460:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	212c      	movs	r1, #44	; 0x2c
 8004468:	fb01 f303 	mul.w	r3, r1, r3
 800446c:	4413      	add	r3, r2
 800446e:	3361      	adds	r3, #97	; 0x61
 8004470:	2206      	movs	r2, #6
 8004472:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	697a      	ldr	r2, [r7, #20]
 800447a:	b2d2      	uxtb	r2, r2
 800447c:	4611      	mov	r1, r2
 800447e:	4618      	mov	r0, r3
 8004480:	f005 f915 	bl	80096ae <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004484:	e331      	b.n	8004aea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	015a      	lsls	r2, r3, #5
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	4413      	add	r3, r2
 800448e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f003 0320 	and.w	r3, r3, #32
 8004498:	2b20      	cmp	r3, #32
 800449a:	d12e      	bne.n	80044fa <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044a8:	461a      	mov	r2, r3
 80044aa:	2320      	movs	r3, #32
 80044ac:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	212c      	movs	r1, #44	; 0x2c
 80044b4:	fb01 f303 	mul.w	r3, r1, r3
 80044b8:	4413      	add	r3, r2
 80044ba:	333d      	adds	r3, #61	; 0x3d
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	f040 8313 	bne.w	8004aea <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	212c      	movs	r1, #44	; 0x2c
 80044ca:	fb01 f303 	mul.w	r3, r1, r3
 80044ce:	4413      	add	r3, r2
 80044d0:	333d      	adds	r3, #61	; 0x3d
 80044d2:	2200      	movs	r2, #0
 80044d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	212c      	movs	r1, #44	; 0x2c
 80044dc:	fb01 f303 	mul.w	r3, r1, r3
 80044e0:	4413      	add	r3, r2
 80044e2:	3360      	adds	r3, #96	; 0x60
 80044e4:	2202      	movs	r2, #2
 80044e6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	697a      	ldr	r2, [r7, #20]
 80044ee:	b2d2      	uxtb	r2, r2
 80044f0:	4611      	mov	r1, r2
 80044f2:	4618      	mov	r0, r3
 80044f4:	f005 f8db 	bl	80096ae <USB_HC_Halt>
}
 80044f8:	e2f7      	b.n	8004aea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	015a      	lsls	r2, r3, #5
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	4413      	add	r3, r2
 8004502:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800450c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004510:	d112      	bne.n	8004538 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	015a      	lsls	r2, r3, #5
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	4413      	add	r3, r2
 800451a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800451e:	461a      	mov	r2, r3
 8004520:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004524:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	697a      	ldr	r2, [r7, #20]
 800452c:	b2d2      	uxtb	r2, r2
 800452e:	4611      	mov	r1, r2
 8004530:	4618      	mov	r0, r3
 8004532:	f005 f8bc 	bl	80096ae <USB_HC_Halt>
}
 8004536:	e2d8      	b.n	8004aea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	4413      	add	r3, r2
 8004540:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b01      	cmp	r3, #1
 800454c:	d140      	bne.n	80045d0 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	212c      	movs	r1, #44	; 0x2c
 8004554:	fb01 f303 	mul.w	r3, r1, r3
 8004558:	4413      	add	r3, r2
 800455a:	335c      	adds	r3, #92	; 0x5c
 800455c:	2200      	movs	r2, #0
 800455e:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	015a      	lsls	r2, r3, #5
 8004564:	69bb      	ldr	r3, [r7, #24]
 8004566:	4413      	add	r3, r2
 8004568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004572:	2b40      	cmp	r3, #64	; 0x40
 8004574:	d111      	bne.n	800459a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	212c      	movs	r1, #44	; 0x2c
 800457c:	fb01 f303 	mul.w	r3, r1, r3
 8004580:	4413      	add	r3, r2
 8004582:	333d      	adds	r3, #61	; 0x3d
 8004584:	2201      	movs	r2, #1
 8004586:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	015a      	lsls	r2, r3, #5
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	4413      	add	r3, r2
 8004590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004594:	461a      	mov	r2, r3
 8004596:	2340      	movs	r3, #64	; 0x40
 8004598:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	015a      	lsls	r2, r3, #5
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	4413      	add	r3, r2
 80045a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045a6:	461a      	mov	r2, r3
 80045a8:	2301      	movs	r3, #1
 80045aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	212c      	movs	r1, #44	; 0x2c
 80045b2:	fb01 f303 	mul.w	r3, r1, r3
 80045b6:	4413      	add	r3, r2
 80045b8:	3361      	adds	r3, #97	; 0x61
 80045ba:	2201      	movs	r2, #1
 80045bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	b2d2      	uxtb	r2, r2
 80045c6:	4611      	mov	r1, r2
 80045c8:	4618      	mov	r0, r3
 80045ca:	f005 f870 	bl	80096ae <USB_HC_Halt>
}
 80045ce:	e28c      	b.n	8004aea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	015a      	lsls	r2, r3, #5
 80045d4:	69bb      	ldr	r3, [r7, #24]
 80045d6:	4413      	add	r3, r2
 80045d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e2:	2b40      	cmp	r3, #64	; 0x40
 80045e4:	d12c      	bne.n	8004640 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	212c      	movs	r1, #44	; 0x2c
 80045ec:	fb01 f303 	mul.w	r3, r1, r3
 80045f0:	4413      	add	r3, r2
 80045f2:	3361      	adds	r3, #97	; 0x61
 80045f4:	2204      	movs	r2, #4
 80045f6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	212c      	movs	r1, #44	; 0x2c
 80045fe:	fb01 f303 	mul.w	r3, r1, r3
 8004602:	4413      	add	r3, r2
 8004604:	333d      	adds	r3, #61	; 0x3d
 8004606:	2201      	movs	r2, #1
 8004608:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	212c      	movs	r1, #44	; 0x2c
 8004610:	fb01 f303 	mul.w	r3, r1, r3
 8004614:	4413      	add	r3, r2
 8004616:	335c      	adds	r3, #92	; 0x5c
 8004618:	2200      	movs	r2, #0
 800461a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	697a      	ldr	r2, [r7, #20]
 8004622:	b2d2      	uxtb	r2, r2
 8004624:	4611      	mov	r1, r2
 8004626:	4618      	mov	r0, r3
 8004628:	f005 f841 	bl	80096ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	015a      	lsls	r2, r3, #5
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	4413      	add	r3, r2
 8004634:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004638:	461a      	mov	r2, r3
 800463a:	2340      	movs	r3, #64	; 0x40
 800463c:	6093      	str	r3, [r2, #8]
}
 800463e:	e254      	b.n	8004aea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	015a      	lsls	r2, r3, #5
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	4413      	add	r3, r2
 8004648:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f003 0308 	and.w	r3, r3, #8
 8004652:	2b08      	cmp	r3, #8
 8004654:	d11a      	bne.n	800468c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	015a      	lsls	r2, r3, #5
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	4413      	add	r3, r2
 800465e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004662:	461a      	mov	r2, r3
 8004664:	2308      	movs	r3, #8
 8004666:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004668:	687a      	ldr	r2, [r7, #4]
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	212c      	movs	r1, #44	; 0x2c
 800466e:	fb01 f303 	mul.w	r3, r1, r3
 8004672:	4413      	add	r3, r2
 8004674:	3361      	adds	r3, #97	; 0x61
 8004676:	2205      	movs	r2, #5
 8004678:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	b2d2      	uxtb	r2, r2
 8004682:	4611      	mov	r1, r2
 8004684:	4618      	mov	r0, r3
 8004686:	f005 f812 	bl	80096ae <USB_HC_Halt>
}
 800468a:	e22e      	b.n	8004aea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800468c:	697b      	ldr	r3, [r7, #20]
 800468e:	015a      	lsls	r2, r3, #5
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	4413      	add	r3, r2
 8004694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f003 0310 	and.w	r3, r3, #16
 800469e:	2b10      	cmp	r3, #16
 80046a0:	d140      	bne.n	8004724 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	212c      	movs	r1, #44	; 0x2c
 80046a8:	fb01 f303 	mul.w	r3, r1, r3
 80046ac:	4413      	add	r3, r2
 80046ae:	335c      	adds	r3, #92	; 0x5c
 80046b0:	2200      	movs	r2, #0
 80046b2:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	212c      	movs	r1, #44	; 0x2c
 80046ba:	fb01 f303 	mul.w	r3, r1, r3
 80046be:	4413      	add	r3, r2
 80046c0:	3361      	adds	r3, #97	; 0x61
 80046c2:	2203      	movs	r2, #3
 80046c4:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	212c      	movs	r1, #44	; 0x2c
 80046cc:	fb01 f303 	mul.w	r3, r1, r3
 80046d0:	4413      	add	r3, r2
 80046d2:	333d      	adds	r3, #61	; 0x3d
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d112      	bne.n	8004700 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	212c      	movs	r1, #44	; 0x2c
 80046e0:	fb01 f303 	mul.w	r3, r1, r3
 80046e4:	4413      	add	r3, r2
 80046e6:	333c      	adds	r3, #60	; 0x3c
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d108      	bne.n	8004700 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	212c      	movs	r1, #44	; 0x2c
 80046f4:	fb01 f303 	mul.w	r3, r1, r3
 80046f8:	4413      	add	r3, r2
 80046fa:	333d      	adds	r3, #61	; 0x3d
 80046fc:	2201      	movs	r2, #1
 80046fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	697a      	ldr	r2, [r7, #20]
 8004706:	b2d2      	uxtb	r2, r2
 8004708:	4611      	mov	r1, r2
 800470a:	4618      	mov	r0, r3
 800470c:	f004 ffcf 	bl	80096ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	015a      	lsls	r2, r3, #5
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	4413      	add	r3, r2
 8004718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800471c:	461a      	mov	r2, r3
 800471e:	2310      	movs	r3, #16
 8004720:	6093      	str	r3, [r2, #8]
}
 8004722:	e1e2      	b.n	8004aea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	015a      	lsls	r2, r3, #5
 8004728:	69bb      	ldr	r3, [r7, #24]
 800472a:	4413      	add	r3, r2
 800472c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004736:	2b80      	cmp	r3, #128	; 0x80
 8004738:	d164      	bne.n	8004804 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d111      	bne.n	8004766 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	212c      	movs	r1, #44	; 0x2c
 8004748:	fb01 f303 	mul.w	r3, r1, r3
 800474c:	4413      	add	r3, r2
 800474e:	3361      	adds	r3, #97	; 0x61
 8004750:	2206      	movs	r2, #6
 8004752:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	b2d2      	uxtb	r2, r2
 800475c:	4611      	mov	r1, r2
 800475e:	4618      	mov	r0, r3
 8004760:	f004 ffa5 	bl	80096ae <USB_HC_Halt>
 8004764:	e044      	b.n	80047f0 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	212c      	movs	r1, #44	; 0x2c
 800476c:	fb01 f303 	mul.w	r3, r1, r3
 8004770:	4413      	add	r3, r2
 8004772:	335c      	adds	r3, #92	; 0x5c
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	1c5a      	adds	r2, r3, #1
 8004778:	6879      	ldr	r1, [r7, #4]
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	202c      	movs	r0, #44	; 0x2c
 800477e:	fb00 f303 	mul.w	r3, r0, r3
 8004782:	440b      	add	r3, r1
 8004784:	335c      	adds	r3, #92	; 0x5c
 8004786:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	212c      	movs	r1, #44	; 0x2c
 800478e:	fb01 f303 	mul.w	r3, r1, r3
 8004792:	4413      	add	r3, r2
 8004794:	335c      	adds	r3, #92	; 0x5c
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2b02      	cmp	r3, #2
 800479a:	d920      	bls.n	80047de <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	212c      	movs	r1, #44	; 0x2c
 80047a2:	fb01 f303 	mul.w	r3, r1, r3
 80047a6:	4413      	add	r3, r2
 80047a8:	335c      	adds	r3, #92	; 0x5c
 80047aa:	2200      	movs	r2, #0
 80047ac:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	212c      	movs	r1, #44	; 0x2c
 80047b4:	fb01 f303 	mul.w	r3, r1, r3
 80047b8:	4413      	add	r3, r2
 80047ba:	3360      	adds	r3, #96	; 0x60
 80047bc:	2204      	movs	r2, #4
 80047be:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	b2d9      	uxtb	r1, r3
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	202c      	movs	r0, #44	; 0x2c
 80047ca:	fb00 f303 	mul.w	r3, r0, r3
 80047ce:	4413      	add	r3, r2
 80047d0:	3360      	adds	r3, #96	; 0x60
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	461a      	mov	r2, r3
 80047d6:	6878      	ldr	r0, [r7, #4]
 80047d8:	f009 ff00 	bl	800e5dc <HAL_HCD_HC_NotifyURBChange_Callback>
 80047dc:	e008      	b.n	80047f0 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	212c      	movs	r1, #44	; 0x2c
 80047e4:	fb01 f303 	mul.w	r3, r1, r3
 80047e8:	4413      	add	r3, r2
 80047ea:	3360      	adds	r3, #96	; 0x60
 80047ec:	2202      	movs	r2, #2
 80047ee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	015a      	lsls	r2, r3, #5
 80047f4:	69bb      	ldr	r3, [r7, #24]
 80047f6:	4413      	add	r3, r2
 80047f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047fc:	461a      	mov	r2, r3
 80047fe:	2380      	movs	r3, #128	; 0x80
 8004800:	6093      	str	r3, [r2, #8]
}
 8004802:	e172      	b.n	8004aea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	015a      	lsls	r2, r3, #5
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	4413      	add	r3, r2
 800480c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004816:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800481a:	d11b      	bne.n	8004854 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	212c      	movs	r1, #44	; 0x2c
 8004822:	fb01 f303 	mul.w	r3, r1, r3
 8004826:	4413      	add	r3, r2
 8004828:	3361      	adds	r3, #97	; 0x61
 800482a:	2208      	movs	r2, #8
 800482c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	697a      	ldr	r2, [r7, #20]
 8004834:	b2d2      	uxtb	r2, r2
 8004836:	4611      	mov	r1, r2
 8004838:	4618      	mov	r0, r3
 800483a:	f004 ff38 	bl	80096ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	015a      	lsls	r2, r3, #5
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	4413      	add	r3, r2
 8004846:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800484a:	461a      	mov	r2, r3
 800484c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004850:	6093      	str	r3, [r2, #8]
}
 8004852:	e14a      	b.n	8004aea <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	015a      	lsls	r2, r3, #5
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	4413      	add	r3, r2
 800485c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	f003 0302 	and.w	r3, r3, #2
 8004866:	2b02      	cmp	r3, #2
 8004868:	f040 813f 	bne.w	8004aea <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	212c      	movs	r1, #44	; 0x2c
 8004872:	fb01 f303 	mul.w	r3, r1, r3
 8004876:	4413      	add	r3, r2
 8004878:	3361      	adds	r3, #97	; 0x61
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d17d      	bne.n	800497c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	212c      	movs	r1, #44	; 0x2c
 8004886:	fb01 f303 	mul.w	r3, r1, r3
 800488a:	4413      	add	r3, r2
 800488c:	3360      	adds	r3, #96	; 0x60
 800488e:	2201      	movs	r2, #1
 8004890:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004892:	687a      	ldr	r2, [r7, #4]
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	212c      	movs	r1, #44	; 0x2c
 8004898:	fb01 f303 	mul.w	r3, r1, r3
 800489c:	4413      	add	r3, r2
 800489e:	333f      	adds	r3, #63	; 0x3f
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d00a      	beq.n	80048bc <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	212c      	movs	r1, #44	; 0x2c
 80048ac:	fb01 f303 	mul.w	r3, r1, r3
 80048b0:	4413      	add	r3, r2
 80048b2:	333f      	adds	r3, #63	; 0x3f
 80048b4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80048b6:	2b03      	cmp	r3, #3
 80048b8:	f040 8100 	bne.w	8004abc <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d113      	bne.n	80048ec <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	212c      	movs	r1, #44	; 0x2c
 80048ca:	fb01 f303 	mul.w	r3, r1, r3
 80048ce:	4413      	add	r3, r2
 80048d0:	3355      	adds	r3, #85	; 0x55
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	f083 0301 	eor.w	r3, r3, #1
 80048d8:	b2d8      	uxtb	r0, r3
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	212c      	movs	r1, #44	; 0x2c
 80048e0:	fb01 f303 	mul.w	r3, r1, r3
 80048e4:	4413      	add	r3, r2
 80048e6:	3355      	adds	r3, #85	; 0x55
 80048e8:	4602      	mov	r2, r0
 80048ea:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	691b      	ldr	r3, [r3, #16]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	f040 80e3 	bne.w	8004abc <HCD_HC_OUT_IRQHandler+0x69c>
 80048f6:	687a      	ldr	r2, [r7, #4]
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	212c      	movs	r1, #44	; 0x2c
 80048fc:	fb01 f303 	mul.w	r3, r1, r3
 8004900:	4413      	add	r3, r2
 8004902:	334c      	adds	r3, #76	; 0x4c
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	f000 80d8 	beq.w	8004abc <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	212c      	movs	r1, #44	; 0x2c
 8004912:	fb01 f303 	mul.w	r3, r1, r3
 8004916:	4413      	add	r3, r2
 8004918:	334c      	adds	r3, #76	; 0x4c
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6879      	ldr	r1, [r7, #4]
 800491e:	697a      	ldr	r2, [r7, #20]
 8004920:	202c      	movs	r0, #44	; 0x2c
 8004922:	fb00 f202 	mul.w	r2, r0, r2
 8004926:	440a      	add	r2, r1
 8004928:	3240      	adds	r2, #64	; 0x40
 800492a:	8812      	ldrh	r2, [r2, #0]
 800492c:	4413      	add	r3, r2
 800492e:	3b01      	subs	r3, #1
 8004930:	6879      	ldr	r1, [r7, #4]
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	202c      	movs	r0, #44	; 0x2c
 8004936:	fb00 f202 	mul.w	r2, r0, r2
 800493a:	440a      	add	r2, r1
 800493c:	3240      	adds	r2, #64	; 0x40
 800493e:	8812      	ldrh	r2, [r2, #0]
 8004940:	fbb3 f3f2 	udiv	r3, r3, r2
 8004944:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	f000 80b5 	beq.w	8004abc <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	697b      	ldr	r3, [r7, #20]
 8004956:	212c      	movs	r1, #44	; 0x2c
 8004958:	fb01 f303 	mul.w	r3, r1, r3
 800495c:	4413      	add	r3, r2
 800495e:	3355      	adds	r3, #85	; 0x55
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	f083 0301 	eor.w	r3, r3, #1
 8004966:	b2d8      	uxtb	r0, r3
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	212c      	movs	r1, #44	; 0x2c
 800496e:	fb01 f303 	mul.w	r3, r1, r3
 8004972:	4413      	add	r3, r2
 8004974:	3355      	adds	r3, #85	; 0x55
 8004976:	4602      	mov	r2, r0
 8004978:	701a      	strb	r2, [r3, #0]
 800497a:	e09f      	b.n	8004abc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	212c      	movs	r1, #44	; 0x2c
 8004982:	fb01 f303 	mul.w	r3, r1, r3
 8004986:	4413      	add	r3, r2
 8004988:	3361      	adds	r3, #97	; 0x61
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	2b03      	cmp	r3, #3
 800498e:	d109      	bne.n	80049a4 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	212c      	movs	r1, #44	; 0x2c
 8004996:	fb01 f303 	mul.w	r3, r1, r3
 800499a:	4413      	add	r3, r2
 800499c:	3360      	adds	r3, #96	; 0x60
 800499e:	2202      	movs	r2, #2
 80049a0:	701a      	strb	r2, [r3, #0]
 80049a2:	e08b      	b.n	8004abc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	212c      	movs	r1, #44	; 0x2c
 80049aa:	fb01 f303 	mul.w	r3, r1, r3
 80049ae:	4413      	add	r3, r2
 80049b0:	3361      	adds	r3, #97	; 0x61
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	2b04      	cmp	r3, #4
 80049b6:	d109      	bne.n	80049cc <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	212c      	movs	r1, #44	; 0x2c
 80049be:	fb01 f303 	mul.w	r3, r1, r3
 80049c2:	4413      	add	r3, r2
 80049c4:	3360      	adds	r3, #96	; 0x60
 80049c6:	2202      	movs	r2, #2
 80049c8:	701a      	strb	r2, [r3, #0]
 80049ca:	e077      	b.n	8004abc <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	697b      	ldr	r3, [r7, #20]
 80049d0:	212c      	movs	r1, #44	; 0x2c
 80049d2:	fb01 f303 	mul.w	r3, r1, r3
 80049d6:	4413      	add	r3, r2
 80049d8:	3361      	adds	r3, #97	; 0x61
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	2b05      	cmp	r3, #5
 80049de:	d109      	bne.n	80049f4 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80049e0:	687a      	ldr	r2, [r7, #4]
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	212c      	movs	r1, #44	; 0x2c
 80049e6:	fb01 f303 	mul.w	r3, r1, r3
 80049ea:	4413      	add	r3, r2
 80049ec:	3360      	adds	r3, #96	; 0x60
 80049ee:	2205      	movs	r2, #5
 80049f0:	701a      	strb	r2, [r3, #0]
 80049f2:	e063      	b.n	8004abc <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	212c      	movs	r1, #44	; 0x2c
 80049fa:	fb01 f303 	mul.w	r3, r1, r3
 80049fe:	4413      	add	r3, r2
 8004a00:	3361      	adds	r3, #97	; 0x61
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	2b06      	cmp	r3, #6
 8004a06:	d009      	beq.n	8004a1c <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	212c      	movs	r1, #44	; 0x2c
 8004a0e:	fb01 f303 	mul.w	r3, r1, r3
 8004a12:	4413      	add	r3, r2
 8004a14:	3361      	adds	r3, #97	; 0x61
 8004a16:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004a18:	2b08      	cmp	r3, #8
 8004a1a:	d14f      	bne.n	8004abc <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	212c      	movs	r1, #44	; 0x2c
 8004a22:	fb01 f303 	mul.w	r3, r1, r3
 8004a26:	4413      	add	r3, r2
 8004a28:	335c      	adds	r3, #92	; 0x5c
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	1c5a      	adds	r2, r3, #1
 8004a2e:	6879      	ldr	r1, [r7, #4]
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	202c      	movs	r0, #44	; 0x2c
 8004a34:	fb00 f303 	mul.w	r3, r0, r3
 8004a38:	440b      	add	r3, r1
 8004a3a:	335c      	adds	r3, #92	; 0x5c
 8004a3c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	212c      	movs	r1, #44	; 0x2c
 8004a44:	fb01 f303 	mul.w	r3, r1, r3
 8004a48:	4413      	add	r3, r2
 8004a4a:	335c      	adds	r3, #92	; 0x5c
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d912      	bls.n	8004a78 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	212c      	movs	r1, #44	; 0x2c
 8004a58:	fb01 f303 	mul.w	r3, r1, r3
 8004a5c:	4413      	add	r3, r2
 8004a5e:	335c      	adds	r3, #92	; 0x5c
 8004a60:	2200      	movs	r2, #0
 8004a62:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	212c      	movs	r1, #44	; 0x2c
 8004a6a:	fb01 f303 	mul.w	r3, r1, r3
 8004a6e:	4413      	add	r3, r2
 8004a70:	3360      	adds	r3, #96	; 0x60
 8004a72:	2204      	movs	r2, #4
 8004a74:	701a      	strb	r2, [r3, #0]
 8004a76:	e021      	b.n	8004abc <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004a78:	687a      	ldr	r2, [r7, #4]
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	212c      	movs	r1, #44	; 0x2c
 8004a7e:	fb01 f303 	mul.w	r3, r1, r3
 8004a82:	4413      	add	r3, r2
 8004a84:	3360      	adds	r3, #96	; 0x60
 8004a86:	2202      	movs	r2, #2
 8004a88:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	015a      	lsls	r2, r3, #5
 8004a8e:	69bb      	ldr	r3, [r7, #24]
 8004a90:	4413      	add	r3, r2
 8004a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004aa0:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004aa8:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	015a      	lsls	r2, r3, #5
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	015a      	lsls	r2, r3, #5
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	4413      	add	r3, r2
 8004ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ac8:	461a      	mov	r2, r3
 8004aca:	2302      	movs	r3, #2
 8004acc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	b2d9      	uxtb	r1, r3
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	202c      	movs	r0, #44	; 0x2c
 8004ad8:	fb00 f303 	mul.w	r3, r0, r3
 8004adc:	4413      	add	r3, r2
 8004ade:	3360      	adds	r3, #96	; 0x60
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f009 fd79 	bl	800e5dc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004aea:	bf00      	nop
 8004aec:	3720      	adds	r7, #32
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}

08004af2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004af2:	b580      	push	{r7, lr}
 8004af4:	b08a      	sub	sp, #40	; 0x28
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	f003 030f 	and.w	r3, r3, #15
 8004b12:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004b14:	69fb      	ldr	r3, [r7, #28]
 8004b16:	0c5b      	lsrs	r3, r3, #17
 8004b18:	f003 030f 	and.w	r3, r3, #15
 8004b1c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	091b      	lsrs	r3, r3, #4
 8004b22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b26:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	d004      	beq.n	8004b38 <HCD_RXQLVL_IRQHandler+0x46>
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	2b05      	cmp	r3, #5
 8004b32:	f000 80a9 	beq.w	8004c88 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004b36:	e0aa      	b.n	8004c8e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f000 80a6 	beq.w	8004c8c <HCD_RXQLVL_IRQHandler+0x19a>
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	212c      	movs	r1, #44	; 0x2c
 8004b46:	fb01 f303 	mul.w	r3, r1, r3
 8004b4a:	4413      	add	r3, r2
 8004b4c:	3344      	adds	r3, #68	; 0x44
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 809b 	beq.w	8004c8c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	212c      	movs	r1, #44	; 0x2c
 8004b5c:	fb01 f303 	mul.w	r3, r1, r3
 8004b60:	4413      	add	r3, r2
 8004b62:	3350      	adds	r3, #80	; 0x50
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	441a      	add	r2, r3
 8004b6a:	6879      	ldr	r1, [r7, #4]
 8004b6c:	69bb      	ldr	r3, [r7, #24]
 8004b6e:	202c      	movs	r0, #44	; 0x2c
 8004b70:	fb00 f303 	mul.w	r3, r0, r3
 8004b74:	440b      	add	r3, r1
 8004b76:	334c      	adds	r3, #76	; 0x4c
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d87a      	bhi.n	8004c74 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6818      	ldr	r0, [r3, #0]
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	69bb      	ldr	r3, [r7, #24]
 8004b86:	212c      	movs	r1, #44	; 0x2c
 8004b88:	fb01 f303 	mul.w	r3, r1, r3
 8004b8c:	4413      	add	r3, r2
 8004b8e:	3344      	adds	r3, #68	; 0x44
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	693a      	ldr	r2, [r7, #16]
 8004b94:	b292      	uxth	r2, r2
 8004b96:	4619      	mov	r1, r3
 8004b98:	f004 f8e0 	bl	8008d5c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	212c      	movs	r1, #44	; 0x2c
 8004ba2:	fb01 f303 	mul.w	r3, r1, r3
 8004ba6:	4413      	add	r3, r2
 8004ba8:	3344      	adds	r3, #68	; 0x44
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	441a      	add	r2, r3
 8004bb0:	6879      	ldr	r1, [r7, #4]
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	202c      	movs	r0, #44	; 0x2c
 8004bb6:	fb00 f303 	mul.w	r3, r0, r3
 8004bba:	440b      	add	r3, r1
 8004bbc:	3344      	adds	r3, #68	; 0x44
 8004bbe:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	212c      	movs	r1, #44	; 0x2c
 8004bc6:	fb01 f303 	mul.w	r3, r1, r3
 8004bca:	4413      	add	r3, r2
 8004bcc:	3350      	adds	r3, #80	; 0x50
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	441a      	add	r2, r3
 8004bd4:	6879      	ldr	r1, [r7, #4]
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	202c      	movs	r0, #44	; 0x2c
 8004bda:	fb00 f303 	mul.w	r3, r0, r3
 8004bde:	440b      	add	r3, r1
 8004be0:	3350      	adds	r3, #80	; 0x50
 8004be2:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	6a3b      	ldr	r3, [r7, #32]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	0cdb      	lsrs	r3, r3, #19
 8004bf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bf8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	212c      	movs	r1, #44	; 0x2c
 8004c00:	fb01 f303 	mul.w	r3, r1, r3
 8004c04:	4413      	add	r3, r2
 8004c06:	3340      	adds	r3, #64	; 0x40
 8004c08:	881b      	ldrh	r3, [r3, #0]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d13c      	bne.n	8004c8c <HCD_RXQLVL_IRQHandler+0x19a>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d039      	beq.n	8004c8c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	6a3b      	ldr	r3, [r7, #32]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004c2e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004c36:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004c38:	69bb      	ldr	r3, [r7, #24]
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	6a3b      	ldr	r3, [r7, #32]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c44:	461a      	mov	r2, r3
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	212c      	movs	r1, #44	; 0x2c
 8004c50:	fb01 f303 	mul.w	r3, r1, r3
 8004c54:	4413      	add	r3, r2
 8004c56:	3354      	adds	r3, #84	; 0x54
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	f083 0301 	eor.w	r3, r3, #1
 8004c5e:	b2d8      	uxtb	r0, r3
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	212c      	movs	r1, #44	; 0x2c
 8004c66:	fb01 f303 	mul.w	r3, r1, r3
 8004c6a:	4413      	add	r3, r2
 8004c6c:	3354      	adds	r3, #84	; 0x54
 8004c6e:	4602      	mov	r2, r0
 8004c70:	701a      	strb	r2, [r3, #0]
      break;
 8004c72:	e00b      	b.n	8004c8c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	212c      	movs	r1, #44	; 0x2c
 8004c7a:	fb01 f303 	mul.w	r3, r1, r3
 8004c7e:	4413      	add	r3, r2
 8004c80:	3360      	adds	r3, #96	; 0x60
 8004c82:	2204      	movs	r2, #4
 8004c84:	701a      	strb	r2, [r3, #0]
      break;
 8004c86:	e001      	b.n	8004c8c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004c88:	bf00      	nop
 8004c8a:	e000      	b.n	8004c8e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004c8c:	bf00      	nop
  }
}
 8004c8e:	bf00      	nop
 8004c90:	3728      	adds	r7, #40	; 0x28
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}

08004c96 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b086      	sub	sp, #24
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004cc2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d10b      	bne.n	8004ce6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	2b01      	cmp	r3, #1
 8004cd6:	d102      	bne.n	8004cde <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f009 fc63 	bl	800e5a4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	f043 0302 	orr.w	r3, r3, #2
 8004ce4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f003 0308 	and.w	r3, r3, #8
 8004cec:	2b08      	cmp	r3, #8
 8004cee:	d132      	bne.n	8004d56 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	f043 0308 	orr.w	r3, r3, #8
 8004cf6:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f003 0304 	and.w	r3, r3, #4
 8004cfe:	2b04      	cmp	r3, #4
 8004d00:	d126      	bne.n	8004d50 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d113      	bne.n	8004d32 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004d10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d14:	d106      	bne.n	8004d24 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2102      	movs	r1, #2
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f004 f98b 	bl	8009038 <USB_InitFSLSPClkSel>
 8004d22:	e011      	b.n	8004d48 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2101      	movs	r1, #1
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	f004 f984 	bl	8009038 <USB_InitFSLSPClkSel>
 8004d30:	e00a      	b.n	8004d48 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d106      	bne.n	8004d48 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004d40:	461a      	mov	r2, r3
 8004d42:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004d46:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f009 fc59 	bl	800e600 <HAL_HCD_PortEnabled_Callback>
 8004d4e:	e002      	b.n	8004d56 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f009 fc63 	bl	800e61c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f003 0320 	and.w	r3, r3, #32
 8004d5c:	2b20      	cmp	r3, #32
 8004d5e:	d103      	bne.n	8004d68 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	f043 0320 	orr.w	r3, r3, #32
 8004d66:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004d6e:	461a      	mov	r2, r3
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	6013      	str	r3, [r2, #0]
}
 8004d74:	bf00      	nop
 8004d76:	3718      	adds	r7, #24
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e12b      	b.n	8004fe6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d106      	bne.n	8004da8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f7fc f926 	bl	8000ff4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2224      	movs	r2, #36	; 0x24
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681a      	ldr	r2, [r3, #0]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 0201 	bic.w	r2, r2, #1
 8004dbe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004dce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004dde:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004de0:	f001 f964 	bl	80060ac <HAL_RCC_GetPCLK1Freq>
 8004de4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	4a81      	ldr	r2, [pc, #516]	; (8004ff0 <HAL_I2C_Init+0x274>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d807      	bhi.n	8004e00 <HAL_I2C_Init+0x84>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	4a80      	ldr	r2, [pc, #512]	; (8004ff4 <HAL_I2C_Init+0x278>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	bf94      	ite	ls
 8004df8:	2301      	movls	r3, #1
 8004dfa:	2300      	movhi	r3, #0
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	e006      	b.n	8004e0e <HAL_I2C_Init+0x92>
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	4a7d      	ldr	r2, [pc, #500]	; (8004ff8 <HAL_I2C_Init+0x27c>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	bf94      	ite	ls
 8004e08:	2301      	movls	r3, #1
 8004e0a:	2300      	movhi	r3, #0
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e0e7      	b.n	8004fe6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	4a78      	ldr	r2, [pc, #480]	; (8004ffc <HAL_I2C_Init+0x280>)
 8004e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1e:	0c9b      	lsrs	r3, r3, #18
 8004e20:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	4a6a      	ldr	r2, [pc, #424]	; (8004ff0 <HAL_I2C_Init+0x274>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d802      	bhi.n	8004e50 <HAL_I2C_Init+0xd4>
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	e009      	b.n	8004e64 <HAL_I2C_Init+0xe8>
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004e56:	fb02 f303 	mul.w	r3, r2, r3
 8004e5a:	4a69      	ldr	r2, [pc, #420]	; (8005000 <HAL_I2C_Init+0x284>)
 8004e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e60:	099b      	lsrs	r3, r3, #6
 8004e62:	3301      	adds	r3, #1
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	6812      	ldr	r2, [r2, #0]
 8004e68:	430b      	orrs	r3, r1
 8004e6a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	69db      	ldr	r3, [r3, #28]
 8004e72:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004e76:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	495c      	ldr	r1, [pc, #368]	; (8004ff0 <HAL_I2C_Init+0x274>)
 8004e80:	428b      	cmp	r3, r1
 8004e82:	d819      	bhi.n	8004eb8 <HAL_I2C_Init+0x13c>
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	1e59      	subs	r1, r3, #1
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	005b      	lsls	r3, r3, #1
 8004e8e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e92:	1c59      	adds	r1, r3, #1
 8004e94:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004e98:	400b      	ands	r3, r1
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <HAL_I2C_Init+0x138>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	1e59      	subs	r1, r3, #1
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	005b      	lsls	r3, r3, #1
 8004ea8:	fbb1 f3f3 	udiv	r3, r1, r3
 8004eac:	3301      	adds	r3, #1
 8004eae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004eb2:	e051      	b.n	8004f58 <HAL_I2C_Init+0x1dc>
 8004eb4:	2304      	movs	r3, #4
 8004eb6:	e04f      	b.n	8004f58 <HAL_I2C_Init+0x1dc>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	689b      	ldr	r3, [r3, #8]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d111      	bne.n	8004ee4 <HAL_I2C_Init+0x168>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	1e58      	subs	r0, r3, #1
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6859      	ldr	r1, [r3, #4]
 8004ec8:	460b      	mov	r3, r1
 8004eca:	005b      	lsls	r3, r3, #1
 8004ecc:	440b      	add	r3, r1
 8004ece:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	bf0c      	ite	eq
 8004edc:	2301      	moveq	r3, #1
 8004ede:	2300      	movne	r3, #0
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	e012      	b.n	8004f0a <HAL_I2C_Init+0x18e>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	1e58      	subs	r0, r3, #1
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6859      	ldr	r1, [r3, #4]
 8004eec:	460b      	mov	r3, r1
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	440b      	add	r3, r1
 8004ef2:	0099      	lsls	r1, r3, #2
 8004ef4:	440b      	add	r3, r1
 8004ef6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004efa:	3301      	adds	r3, #1
 8004efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	bf0c      	ite	eq
 8004f04:	2301      	moveq	r3, #1
 8004f06:	2300      	movne	r3, #0
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d001      	beq.n	8004f12 <HAL_I2C_Init+0x196>
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e022      	b.n	8004f58 <HAL_I2C_Init+0x1dc>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10e      	bne.n	8004f38 <HAL_I2C_Init+0x1bc>
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	1e58      	subs	r0, r3, #1
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6859      	ldr	r1, [r3, #4]
 8004f22:	460b      	mov	r3, r1
 8004f24:	005b      	lsls	r3, r3, #1
 8004f26:	440b      	add	r3, r1
 8004f28:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f2c:	3301      	adds	r3, #1
 8004f2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f36:	e00f      	b.n	8004f58 <HAL_I2C_Init+0x1dc>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	1e58      	subs	r0, r3, #1
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6859      	ldr	r1, [r3, #4]
 8004f40:	460b      	mov	r3, r1
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	440b      	add	r3, r1
 8004f46:	0099      	lsls	r1, r3, #2
 8004f48:	440b      	add	r3, r1
 8004f4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f4e:	3301      	adds	r3, #1
 8004f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f54:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f58:	6879      	ldr	r1, [r7, #4]
 8004f5a:	6809      	ldr	r1, [r1, #0]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	69da      	ldr	r2, [r3, #28]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	431a      	orrs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	430a      	orrs	r2, r1
 8004f7a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004f86:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	6911      	ldr	r1, [r2, #16]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	68d2      	ldr	r2, [r2, #12]
 8004f92:	4311      	orrs	r1, r2
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	6812      	ldr	r2, [r2, #0]
 8004f98:	430b      	orrs	r3, r1
 8004f9a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	695a      	ldr	r2, [r3, #20]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	430a      	orrs	r2, r1
 8004fb6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 0201 	orr.w	r2, r2, #1
 8004fc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	2200      	movs	r2, #0
 8004fda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	000186a0 	.word	0x000186a0
 8004ff4:	001e847f 	.word	0x001e847f
 8004ff8:	003d08ff 	.word	0x003d08ff
 8004ffc:	431bde83 	.word	0x431bde83
 8005000:	10624dd3 	.word	0x10624dd3

08005004 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005014:	b2db      	uxtb	r3, r3
 8005016:	2b20      	cmp	r3, #32
 8005018:	d129      	bne.n	800506e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2224      	movs	r2, #36	; 0x24
 800501e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f022 0201 	bic.w	r2, r2, #1
 8005030:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f022 0210 	bic.w	r2, r2, #16
 8005040:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	683a      	ldr	r2, [r7, #0]
 800504e:	430a      	orrs	r2, r1
 8005050:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f042 0201 	orr.w	r2, r2, #1
 8005060:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2220      	movs	r2, #32
 8005066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800506a:	2300      	movs	r3, #0
 800506c:	e000      	b.n	8005070 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800506e:	2302      	movs	r3, #2
  }
}
 8005070:	4618      	mov	r0, r3
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800507c:	b480      	push	{r7}
 800507e:	b085      	sub	sp, #20
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005086:	2300      	movs	r3, #0
 8005088:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b20      	cmp	r3, #32
 8005094:	d12a      	bne.n	80050ec <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2224      	movs	r2, #36	; 0x24
 800509a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f022 0201 	bic.w	r2, r2, #1
 80050ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80050b6:	89fb      	ldrh	r3, [r7, #14]
 80050b8:	f023 030f 	bic.w	r3, r3, #15
 80050bc:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	b29a      	uxth	r2, r3
 80050c2:	89fb      	ldrh	r3, [r7, #14]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	89fa      	ldrh	r2, [r7, #14]
 80050ce:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f042 0201 	orr.w	r2, r2, #1
 80050de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2220      	movs	r2, #32
 80050e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80050e8:	2300      	movs	r3, #0
 80050ea:	e000      	b.n	80050ee <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80050ec:	2302      	movs	r3, #2
  }
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3714      	adds	r7, #20
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr
	...

080050fc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d101      	bne.n	800510e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e0bf      	b.n	800528e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	d106      	bne.n	8005128 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f7fb ffd0 	bl	80010c8 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2202      	movs	r2, #2
 800512c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	699a      	ldr	r2, [r3, #24]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800513e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	6999      	ldr	r1, [r3, #24]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	685a      	ldr	r2, [r3, #4]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005154:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	430a      	orrs	r2, r1
 8005162:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	6899      	ldr	r1, [r3, #8]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	4b4a      	ldr	r3, [pc, #296]	; (8005298 <HAL_LTDC_Init+0x19c>)
 8005170:	400b      	ands	r3, r1
 8005172:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	041b      	lsls	r3, r3, #16
 800517a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6899      	ldr	r1, [r3, #8]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	699a      	ldr	r2, [r3, #24]
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	431a      	orrs	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	430a      	orrs	r2, r1
 8005190:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68d9      	ldr	r1, [r3, #12]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	4b3e      	ldr	r3, [pc, #248]	; (8005298 <HAL_LTDC_Init+0x19c>)
 800519e:	400b      	ands	r3, r1
 80051a0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	69db      	ldr	r3, [r3, #28]
 80051a6:	041b      	lsls	r3, r3, #16
 80051a8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68d9      	ldr	r1, [r3, #12]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a1a      	ldr	r2, [r3, #32]
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	431a      	orrs	r2, r3
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	430a      	orrs	r2, r1
 80051be:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	6919      	ldr	r1, [r3, #16]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	4b33      	ldr	r3, [pc, #204]	; (8005298 <HAL_LTDC_Init+0x19c>)
 80051cc:	400b      	ands	r3, r1
 80051ce:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d4:	041b      	lsls	r3, r3, #16
 80051d6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6919      	ldr	r1, [r3, #16]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	431a      	orrs	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	6959      	ldr	r1, [r3, #20]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681a      	ldr	r2, [r3, #0]
 80051f8:	4b27      	ldr	r3, [pc, #156]	; (8005298 <HAL_LTDC_Init+0x19c>)
 80051fa:	400b      	ands	r3, r1
 80051fc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005202:	041b      	lsls	r3, r3, #16
 8005204:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	6959      	ldr	r1, [r3, #20]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	431a      	orrs	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	430a      	orrs	r2, r1
 800521a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005222:	021b      	lsls	r3, r3, #8
 8005224:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800522c:	041b      	lsls	r3, r3, #16
 800522e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800523e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4313      	orrs	r3, r2
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005252:	431a      	orrs	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	430a      	orrs	r2, r1
 800525a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f042 0206 	orr.w	r2, r2, #6
 800526a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	699a      	ldr	r2, [r3, #24]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f042 0201 	orr.w	r2, r2, #1
 800527a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2201      	movs	r2, #1
 8005288:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800528c:	2300      	movs	r3, #0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	f000f800 	.word	0xf000f800

0800529c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052aa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052b2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f003 0304 	and.w	r3, r3, #4
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d023      	beq.n	8005306 <HAL_LTDC_IRQHandler+0x6a>
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	f003 0304 	and.w	r3, r3, #4
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d01e      	beq.n	8005306 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 0204 	bic.w	r2, r2, #4
 80052d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2204      	movs	r2, #4
 80052de:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80052e6:	f043 0201 	orr.w	r2, r3, #1
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2204      	movs	r2, #4
 80052f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2200      	movs	r2, #0
 80052fc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 f86f 	bl	80053e4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	2b00      	cmp	r3, #0
 800530e:	d023      	beq.n	8005358 <HAL_LTDC_IRQHandler+0xbc>
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	f003 0302 	and.w	r3, r3, #2
 8005316:	2b00      	cmp	r3, #0
 8005318:	d01e      	beq.n	8005358 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f022 0202 	bic.w	r2, r2, #2
 8005328:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	2202      	movs	r2, #2
 8005330:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005338:	f043 0202 	orr.w	r2, r3, #2
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2204      	movs	r2, #4
 8005346:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f846 	bl	80053e4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	2b00      	cmp	r3, #0
 8005360:	d01b      	beq.n	800539a <HAL_LTDC_IRQHandler+0xfe>
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	f003 0301 	and.w	r3, r3, #1
 8005368:	2b00      	cmp	r3, #0
 800536a:	d016      	beq.n	800539a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f022 0201 	bic.w	r2, r2, #1
 800537a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2201      	movs	r2, #1
 8005382:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2201      	movs	r2, #1
 8005388:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 f82f 	bl	80053f8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f003 0308 	and.w	r3, r3, #8
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d01b      	beq.n	80053dc <HAL_LTDC_IRQHandler+0x140>
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	f003 0308 	and.w	r3, r3, #8
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d016      	beq.n	80053dc <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f022 0208 	bic.w	r2, r2, #8
 80053bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2208      	movs	r2, #8
 80053c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f000 f818 	bl	800540c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80053dc:	bf00      	nop
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005420:	b5b0      	push	{r4, r5, r7, lr}
 8005422:	b084      	sub	sp, #16
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005432:	2b01      	cmp	r3, #1
 8005434:	d101      	bne.n	800543a <HAL_LTDC_ConfigLayer+0x1a>
 8005436:	2302      	movs	r3, #2
 8005438:	e02c      	b.n	8005494 <HAL_LTDC_ConfigLayer+0x74>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2201      	movs	r2, #1
 800543e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2202      	movs	r2, #2
 8005446:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2134      	movs	r1, #52	; 0x34
 8005450:	fb01 f303 	mul.w	r3, r1, r3
 8005454:	4413      	add	r3, r2
 8005456:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	4614      	mov	r4, r2
 800545e:	461d      	mov	r5, r3
 8005460:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005462:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005464:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005466:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005468:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800546a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800546c:	682b      	ldr	r3, [r5, #0]
 800546e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005470:	687a      	ldr	r2, [r7, #4]
 8005472:	68b9      	ldr	r1, [r7, #8]
 8005474:	68f8      	ldr	r0, [r7, #12]
 8005476:	f000 f811 	bl	800549c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2201      	movs	r2, #1
 8005480:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bdb0      	pop	{r4, r5, r7, pc}

0800549c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800549c:	b480      	push	{r7}
 800549e:	b089      	sub	sp, #36	; 0x24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	0c1b      	lsrs	r3, r3, #16
 80054b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054b8:	4413      	add	r3, r2
 80054ba:	041b      	lsls	r3, r3, #16
 80054bc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	461a      	mov	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	01db      	lsls	r3, r3, #7
 80054c8:	4413      	add	r3, r2
 80054ca:	3384      	adds	r3, #132	; 0x84
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	6812      	ldr	r2, [r2, #0]
 80054d2:	4611      	mov	r1, r2
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	01d2      	lsls	r2, r2, #7
 80054d8:	440a      	add	r2, r1
 80054da:	3284      	adds	r2, #132	; 0x84
 80054dc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80054e0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	0c1b      	lsrs	r3, r3, #16
 80054ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80054f2:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80054f4:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4619      	mov	r1, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	01db      	lsls	r3, r3, #7
 8005500:	440b      	add	r3, r1
 8005502:	3384      	adds	r3, #132	; 0x84
 8005504:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800550a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800550c:	68bb      	ldr	r3, [r7, #8]
 800550e:	68da      	ldr	r2, [r3, #12]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800551a:	4413      	add	r3, r2
 800551c:	041b      	lsls	r3, r3, #16
 800551e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	461a      	mov	r2, r3
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	01db      	lsls	r3, r3, #7
 800552a:	4413      	add	r3, r2
 800552c:	3384      	adds	r3, #132	; 0x84
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	6812      	ldr	r2, [r2, #0]
 8005534:	4611      	mov	r1, r2
 8005536:	687a      	ldr	r2, [r7, #4]
 8005538:	01d2      	lsls	r2, r2, #7
 800553a:	440a      	add	r2, r1
 800553c:	3284      	adds	r2, #132	; 0x84
 800553e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005542:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	689a      	ldr	r2, [r3, #8]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68db      	ldr	r3, [r3, #12]
 800554e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005552:	4413      	add	r3, r2
 8005554:	1c5a      	adds	r2, r3, #1
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4619      	mov	r1, r3
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	01db      	lsls	r3, r3, #7
 8005560:	440b      	add	r3, r1
 8005562:	3384      	adds	r3, #132	; 0x84
 8005564:	4619      	mov	r1, r3
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	4313      	orrs	r3, r2
 800556a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	461a      	mov	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	01db      	lsls	r3, r3, #7
 8005576:	4413      	add	r3, r2
 8005578:	3384      	adds	r3, #132	; 0x84
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	68fa      	ldr	r2, [r7, #12]
 800557e:	6812      	ldr	r2, [r2, #0]
 8005580:	4611      	mov	r1, r2
 8005582:	687a      	ldr	r2, [r7, #4]
 8005584:	01d2      	lsls	r2, r2, #7
 8005586:	440a      	add	r2, r1
 8005588:	3284      	adds	r2, #132	; 0x84
 800558a:	f023 0307 	bic.w	r3, r3, #7
 800558e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	461a      	mov	r2, r3
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	01db      	lsls	r3, r3, #7
 800559a:	4413      	add	r3, r2
 800559c:	3384      	adds	r3, #132	; 0x84
 800559e:	461a      	mov	r2, r3
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	691b      	ldr	r3, [r3, #16]
 80055a4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80055ac:	021b      	lsls	r3, r3, #8
 80055ae:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80055b6:	041b      	lsls	r3, r3, #16
 80055b8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	699b      	ldr	r3, [r3, #24]
 80055be:	061b      	lsls	r3, r3, #24
 80055c0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	461a      	mov	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	01db      	lsls	r3, r3, #7
 80055cc:	4413      	add	r3, r2
 80055ce:	3384      	adds	r3, #132	; 0x84
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	461a      	mov	r2, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	01db      	lsls	r3, r3, #7
 80055dc:	4413      	add	r3, r2
 80055de:	3384      	adds	r3, #132	; 0x84
 80055e0:	461a      	mov	r2, r3
 80055e2:	2300      	movs	r3, #0
 80055e4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80055ec:	461a      	mov	r2, r3
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	431a      	orrs	r2, r3
 80055f2:	69bb      	ldr	r3, [r7, #24]
 80055f4:	431a      	orrs	r2, r3
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4619      	mov	r1, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	01db      	lsls	r3, r3, #7
 8005600:	440b      	add	r3, r1
 8005602:	3384      	adds	r3, #132	; 0x84
 8005604:	4619      	mov	r1, r3
 8005606:	697b      	ldr	r3, [r7, #20]
 8005608:	4313      	orrs	r3, r2
 800560a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	461a      	mov	r2, r3
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	01db      	lsls	r3, r3, #7
 8005616:	4413      	add	r3, r2
 8005618:	3384      	adds	r3, #132	; 0x84
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	6812      	ldr	r2, [r2, #0]
 8005620:	4611      	mov	r1, r2
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	01d2      	lsls	r2, r2, #7
 8005626:	440a      	add	r2, r1
 8005628:	3284      	adds	r2, #132	; 0x84
 800562a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800562e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	461a      	mov	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	01db      	lsls	r3, r3, #7
 800563a:	4413      	add	r3, r2
 800563c:	3384      	adds	r3, #132	; 0x84
 800563e:	461a      	mov	r2, r3
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	695b      	ldr	r3, [r3, #20]
 8005644:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	461a      	mov	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	01db      	lsls	r3, r3, #7
 8005650:	4413      	add	r3, r2
 8005652:	3384      	adds	r3, #132	; 0x84
 8005654:	69db      	ldr	r3, [r3, #28]
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	6812      	ldr	r2, [r2, #0]
 800565a:	4611      	mov	r1, r2
 800565c:	687a      	ldr	r2, [r7, #4]
 800565e:	01d2      	lsls	r2, r2, #7
 8005660:	440a      	add	r2, r1
 8005662:	3284      	adds	r2, #132	; 0x84
 8005664:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005668:	f023 0307 	bic.w	r3, r3, #7
 800566c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	69da      	ldr	r2, [r3, #28]
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	68f9      	ldr	r1, [r7, #12]
 8005678:	6809      	ldr	r1, [r1, #0]
 800567a:	4608      	mov	r0, r1
 800567c:	6879      	ldr	r1, [r7, #4]
 800567e:	01c9      	lsls	r1, r1, #7
 8005680:	4401      	add	r1, r0
 8005682:	3184      	adds	r1, #132	; 0x84
 8005684:	4313      	orrs	r3, r2
 8005686:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	461a      	mov	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	01db      	lsls	r3, r3, #7
 8005692:	4413      	add	r3, r2
 8005694:	3384      	adds	r3, #132	; 0x84
 8005696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	461a      	mov	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	01db      	lsls	r3, r3, #7
 80056a2:	4413      	add	r3, r2
 80056a4:	3384      	adds	r3, #132	; 0x84
 80056a6:	461a      	mov	r2, r3
 80056a8:	2300      	movs	r3, #0
 80056aa:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	461a      	mov	r2, r3
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	01db      	lsls	r3, r3, #7
 80056b6:	4413      	add	r3, r2
 80056b8:	3384      	adds	r3, #132	; 0x84
 80056ba:	461a      	mov	r2, r3
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c0:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	691b      	ldr	r3, [r3, #16]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d102      	bne.n	80056d0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80056ca:	2304      	movs	r3, #4
 80056cc:	61fb      	str	r3, [r7, #28]
 80056ce:	e01b      	b.n	8005708 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d102      	bne.n	80056de <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80056d8:	2303      	movs	r3, #3
 80056da:	61fb      	str	r3, [r7, #28]
 80056dc:	e014      	b.n	8005708 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	2b04      	cmp	r3, #4
 80056e4:	d00b      	beq.n	80056fe <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d007      	beq.n	80056fe <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80056f2:	2b03      	cmp	r3, #3
 80056f4:	d003      	beq.n	80056fe <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80056fa:	2b07      	cmp	r3, #7
 80056fc:	d102      	bne.n	8005704 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80056fe:	2302      	movs	r3, #2
 8005700:	61fb      	str	r3, [r7, #28]
 8005702:	e001      	b.n	8005708 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8005704:	2301      	movs	r3, #1
 8005706:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	461a      	mov	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	01db      	lsls	r3, r3, #7
 8005712:	4413      	add	r3, r2
 8005714:	3384      	adds	r3, #132	; 0x84
 8005716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	6812      	ldr	r2, [r2, #0]
 800571c:	4611      	mov	r1, r2
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	01d2      	lsls	r2, r2, #7
 8005722:	440a      	add	r2, r1
 8005724:	3284      	adds	r2, #132	; 0x84
 8005726:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 800572a:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005730:	69fa      	ldr	r2, [r7, #28]
 8005732:	fb02 f303 	mul.w	r3, r2, r3
 8005736:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	6859      	ldr	r1, [r3, #4]
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	1acb      	subs	r3, r1, r3
 8005742:	69f9      	ldr	r1, [r7, #28]
 8005744:	fb01 f303 	mul.w	r3, r1, r3
 8005748:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800574a:	68f9      	ldr	r1, [r7, #12]
 800574c:	6809      	ldr	r1, [r1, #0]
 800574e:	4608      	mov	r0, r1
 8005750:	6879      	ldr	r1, [r7, #4]
 8005752:	01c9      	lsls	r1, r1, #7
 8005754:	4401      	add	r1, r0
 8005756:	3184      	adds	r1, #132	; 0x84
 8005758:	4313      	orrs	r3, r2
 800575a:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	461a      	mov	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	01db      	lsls	r3, r3, #7
 8005766:	4413      	add	r3, r2
 8005768:	3384      	adds	r3, #132	; 0x84
 800576a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	6812      	ldr	r2, [r2, #0]
 8005770:	4611      	mov	r1, r2
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	01d2      	lsls	r2, r2, #7
 8005776:	440a      	add	r2, r1
 8005778:	3284      	adds	r2, #132	; 0x84
 800577a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800577e:	f023 0307 	bic.w	r3, r3, #7
 8005782:	6313      	str	r3, [r2, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	461a      	mov	r2, r3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	01db      	lsls	r3, r3, #7
 800578e:	4413      	add	r3, r2
 8005790:	3384      	adds	r3, #132	; 0x84
 8005792:	461a      	mov	r2, r3
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005798:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	461a      	mov	r2, r3
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	01db      	lsls	r3, r3, #7
 80057a4:	4413      	add	r3, r2
 80057a6:	3384      	adds	r3, #132	; 0x84
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	6812      	ldr	r2, [r2, #0]
 80057ae:	4611      	mov	r1, r2
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	01d2      	lsls	r2, r2, #7
 80057b4:	440a      	add	r2, r1
 80057b6:	3284      	adds	r2, #132	; 0x84
 80057b8:	f043 0301 	orr.w	r3, r3, #1
 80057bc:	6013      	str	r3, [r2, #0]
}
 80057be:	bf00      	nop
 80057c0:	3724      	adds	r7, #36	; 0x24
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
	...

080057cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	e267      	b.n	8005cae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d075      	beq.n	80058d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057ea:	4b88      	ldr	r3, [pc, #544]	; (8005a0c <HAL_RCC_OscConfig+0x240>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f003 030c 	and.w	r3, r3, #12
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	d00c      	beq.n	8005810 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80057f6:	4b85      	ldr	r3, [pc, #532]	; (8005a0c <HAL_RCC_OscConfig+0x240>)
 80057f8:	689b      	ldr	r3, [r3, #8]
 80057fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80057fe:	2b08      	cmp	r3, #8
 8005800:	d112      	bne.n	8005828 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005802:	4b82      	ldr	r3, [pc, #520]	; (8005a0c <HAL_RCC_OscConfig+0x240>)
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800580a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800580e:	d10b      	bne.n	8005828 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005810:	4b7e      	ldr	r3, [pc, #504]	; (8005a0c <HAL_RCC_OscConfig+0x240>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d05b      	beq.n	80058d4 <HAL_RCC_OscConfig+0x108>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d157      	bne.n	80058d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e242      	b.n	8005cae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005830:	d106      	bne.n	8005840 <HAL_RCC_OscConfig+0x74>
 8005832:	4b76      	ldr	r3, [pc, #472]	; (8005a0c <HAL_RCC_OscConfig+0x240>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a75      	ldr	r2, [pc, #468]	; (8005a0c <HAL_RCC_OscConfig+0x240>)
 8005838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800583c:	6013      	str	r3, [r2, #0]
 800583e:	e01d      	b.n	800587c <HAL_RCC_OscConfig+0xb0>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685b      	ldr	r3, [r3, #4]
 8005844:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005848:	d10c      	bne.n	8005864 <HAL_RCC_OscConfig+0x98>
 800584a:	4b70      	ldr	r3, [pc, #448]	; (8005a0c <HAL_RCC_OscConfig+0x240>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a6f      	ldr	r2, [pc, #444]	; (8005a0c <HAL_RCC_OscConfig+0x240>)
 8005850:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005854:	6013      	str	r3, [r2, #0]
 8005856:	4b6d      	ldr	r3, [pc, #436]	; (8005a0c <HAL_RCC_OscConfig+0x240>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a6c      	ldr	r2, [pc, #432]	; (8005a0c <HAL_RCC_OscConfig+0x240>)
 800585c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005860:	6013      	str	r3, [r2, #0]
 8005862:	e00b      	b.n	800587c <HAL_RCC_OscConfig+0xb0>
 8005864:	4b69      	ldr	r3, [pc, #420]	; (8005a0c <HAL_RCC_OscConfig+0x240>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a68      	ldr	r2, [pc, #416]	; (8005a0c <HAL_RCC_OscConfig+0x240>)
 800586a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800586e:	6013      	str	r3, [r2, #0]
 8005870:	4b66      	ldr	r3, [pc, #408]	; (8005a0c <HAL_RCC_OscConfig+0x240>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a65      	ldr	r2, [pc, #404]	; (8005a0c <HAL_RCC_OscConfig+0x240>)
 8005876:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800587a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d013      	beq.n	80058ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005884:	f7fc fec6 	bl	8002614 <HAL_GetTick>
 8005888:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800588a:	e008      	b.n	800589e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800588c:	f7fc fec2 	bl	8002614 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	2b64      	cmp	r3, #100	; 0x64
 8005898:	d901      	bls.n	800589e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e207      	b.n	8005cae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800589e:	4b5b      	ldr	r3, [pc, #364]	; (8005a0c <HAL_RCC_OscConfig+0x240>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d0f0      	beq.n	800588c <HAL_RCC_OscConfig+0xc0>
 80058aa:	e014      	b.n	80058d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ac:	f7fc feb2 	bl	8002614 <HAL_GetTick>
 80058b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058b2:	e008      	b.n	80058c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058b4:	f7fc feae 	bl	8002614 <HAL_GetTick>
 80058b8:	4602      	mov	r2, r0
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	1ad3      	subs	r3, r2, r3
 80058be:	2b64      	cmp	r3, #100	; 0x64
 80058c0:	d901      	bls.n	80058c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80058c2:	2303      	movs	r3, #3
 80058c4:	e1f3      	b.n	8005cae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80058c6:	4b51      	ldr	r3, [pc, #324]	; (8005a0c <HAL_RCC_OscConfig+0x240>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1f0      	bne.n	80058b4 <HAL_RCC_OscConfig+0xe8>
 80058d2:	e000      	b.n	80058d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80058d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d063      	beq.n	80059aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80058e2:	4b4a      	ldr	r3, [pc, #296]	; (8005a0c <HAL_RCC_OscConfig+0x240>)
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	f003 030c 	and.w	r3, r3, #12
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00b      	beq.n	8005906 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058ee:	4b47      	ldr	r3, [pc, #284]	; (8005a0c <HAL_RCC_OscConfig+0x240>)
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80058f6:	2b08      	cmp	r3, #8
 80058f8:	d11c      	bne.n	8005934 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80058fa:	4b44      	ldr	r3, [pc, #272]	; (8005a0c <HAL_RCC_OscConfig+0x240>)
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005902:	2b00      	cmp	r3, #0
 8005904:	d116      	bne.n	8005934 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005906:	4b41      	ldr	r3, [pc, #260]	; (8005a0c <HAL_RCC_OscConfig+0x240>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0302 	and.w	r3, r3, #2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d005      	beq.n	800591e <HAL_RCC_OscConfig+0x152>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d001      	beq.n	800591e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e1c7      	b.n	8005cae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800591e:	4b3b      	ldr	r3, [pc, #236]	; (8005a0c <HAL_RCC_OscConfig+0x240>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	00db      	lsls	r3, r3, #3
 800592c:	4937      	ldr	r1, [pc, #220]	; (8005a0c <HAL_RCC_OscConfig+0x240>)
 800592e:	4313      	orrs	r3, r2
 8005930:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005932:	e03a      	b.n	80059aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d020      	beq.n	800597e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800593c:	4b34      	ldr	r3, [pc, #208]	; (8005a10 <HAL_RCC_OscConfig+0x244>)
 800593e:	2201      	movs	r2, #1
 8005940:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005942:	f7fc fe67 	bl	8002614 <HAL_GetTick>
 8005946:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005948:	e008      	b.n	800595c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800594a:	f7fc fe63 	bl	8002614 <HAL_GetTick>
 800594e:	4602      	mov	r2, r0
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	2b02      	cmp	r3, #2
 8005956:	d901      	bls.n	800595c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	e1a8      	b.n	8005cae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800595c:	4b2b      	ldr	r3, [pc, #172]	; (8005a0c <HAL_RCC_OscConfig+0x240>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0302 	and.w	r3, r3, #2
 8005964:	2b00      	cmp	r3, #0
 8005966:	d0f0      	beq.n	800594a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005968:	4b28      	ldr	r3, [pc, #160]	; (8005a0c <HAL_RCC_OscConfig+0x240>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	00db      	lsls	r3, r3, #3
 8005976:	4925      	ldr	r1, [pc, #148]	; (8005a0c <HAL_RCC_OscConfig+0x240>)
 8005978:	4313      	orrs	r3, r2
 800597a:	600b      	str	r3, [r1, #0]
 800597c:	e015      	b.n	80059aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800597e:	4b24      	ldr	r3, [pc, #144]	; (8005a10 <HAL_RCC_OscConfig+0x244>)
 8005980:	2200      	movs	r2, #0
 8005982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005984:	f7fc fe46 	bl	8002614 <HAL_GetTick>
 8005988:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800598a:	e008      	b.n	800599e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800598c:	f7fc fe42 	bl	8002614 <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	2b02      	cmp	r3, #2
 8005998:	d901      	bls.n	800599e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e187      	b.n	8005cae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800599e:	4b1b      	ldr	r3, [pc, #108]	; (8005a0c <HAL_RCC_OscConfig+0x240>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0302 	and.w	r3, r3, #2
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1f0      	bne.n	800598c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f003 0308 	and.w	r3, r3, #8
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d036      	beq.n	8005a24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d016      	beq.n	80059ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059be:	4b15      	ldr	r3, [pc, #84]	; (8005a14 <HAL_RCC_OscConfig+0x248>)
 80059c0:	2201      	movs	r2, #1
 80059c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059c4:	f7fc fe26 	bl	8002614 <HAL_GetTick>
 80059c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059ca:	e008      	b.n	80059de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059cc:	f7fc fe22 	bl	8002614 <HAL_GetTick>
 80059d0:	4602      	mov	r2, r0
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	1ad3      	subs	r3, r2, r3
 80059d6:	2b02      	cmp	r3, #2
 80059d8:	d901      	bls.n	80059de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e167      	b.n	8005cae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80059de:	4b0b      	ldr	r3, [pc, #44]	; (8005a0c <HAL_RCC_OscConfig+0x240>)
 80059e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059e2:	f003 0302 	and.w	r3, r3, #2
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d0f0      	beq.n	80059cc <HAL_RCC_OscConfig+0x200>
 80059ea:	e01b      	b.n	8005a24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80059ec:	4b09      	ldr	r3, [pc, #36]	; (8005a14 <HAL_RCC_OscConfig+0x248>)
 80059ee:	2200      	movs	r2, #0
 80059f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80059f2:	f7fc fe0f 	bl	8002614 <HAL_GetTick>
 80059f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059f8:	e00e      	b.n	8005a18 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80059fa:	f7fc fe0b 	bl	8002614 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d907      	bls.n	8005a18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e150      	b.n	8005cae <HAL_RCC_OscConfig+0x4e2>
 8005a0c:	40023800 	.word	0x40023800
 8005a10:	42470000 	.word	0x42470000
 8005a14:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a18:	4b88      	ldr	r3, [pc, #544]	; (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005a1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a1c:	f003 0302 	and.w	r3, r3, #2
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d1ea      	bne.n	80059fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0304 	and.w	r3, r3, #4
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f000 8097 	beq.w	8005b60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a32:	2300      	movs	r3, #0
 8005a34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a36:	4b81      	ldr	r3, [pc, #516]	; (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d10f      	bne.n	8005a62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a42:	2300      	movs	r3, #0
 8005a44:	60bb      	str	r3, [r7, #8]
 8005a46:	4b7d      	ldr	r3, [pc, #500]	; (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4a:	4a7c      	ldr	r2, [pc, #496]	; (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a50:	6413      	str	r3, [r2, #64]	; 0x40
 8005a52:	4b7a      	ldr	r3, [pc, #488]	; (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a5a:	60bb      	str	r3, [r7, #8]
 8005a5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a62:	4b77      	ldr	r3, [pc, #476]	; (8005c40 <HAL_RCC_OscConfig+0x474>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d118      	bne.n	8005aa0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005a6e:	4b74      	ldr	r3, [pc, #464]	; (8005c40 <HAL_RCC_OscConfig+0x474>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a73      	ldr	r2, [pc, #460]	; (8005c40 <HAL_RCC_OscConfig+0x474>)
 8005a74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a7a:	f7fc fdcb 	bl	8002614 <HAL_GetTick>
 8005a7e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a80:	e008      	b.n	8005a94 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a82:	f7fc fdc7 	bl	8002614 <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	2b02      	cmp	r3, #2
 8005a8e:	d901      	bls.n	8005a94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005a90:	2303      	movs	r3, #3
 8005a92:	e10c      	b.n	8005cae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a94:	4b6a      	ldr	r3, [pc, #424]	; (8005c40 <HAL_RCC_OscConfig+0x474>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d0f0      	beq.n	8005a82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	689b      	ldr	r3, [r3, #8]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d106      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x2ea>
 8005aa8:	4b64      	ldr	r3, [pc, #400]	; (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aac:	4a63      	ldr	r2, [pc, #396]	; (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005aae:	f043 0301 	orr.w	r3, r3, #1
 8005ab2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ab4:	e01c      	b.n	8005af0 <HAL_RCC_OscConfig+0x324>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	2b05      	cmp	r3, #5
 8005abc:	d10c      	bne.n	8005ad8 <HAL_RCC_OscConfig+0x30c>
 8005abe:	4b5f      	ldr	r3, [pc, #380]	; (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ac2:	4a5e      	ldr	r2, [pc, #376]	; (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005ac4:	f043 0304 	orr.w	r3, r3, #4
 8005ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8005aca:	4b5c      	ldr	r3, [pc, #368]	; (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ace:	4a5b      	ldr	r2, [pc, #364]	; (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005ad0:	f043 0301 	orr.w	r3, r3, #1
 8005ad4:	6713      	str	r3, [r2, #112]	; 0x70
 8005ad6:	e00b      	b.n	8005af0 <HAL_RCC_OscConfig+0x324>
 8005ad8:	4b58      	ldr	r3, [pc, #352]	; (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005adc:	4a57      	ldr	r2, [pc, #348]	; (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005ade:	f023 0301 	bic.w	r3, r3, #1
 8005ae2:	6713      	str	r3, [r2, #112]	; 0x70
 8005ae4:	4b55      	ldr	r3, [pc, #340]	; (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae8:	4a54      	ldr	r2, [pc, #336]	; (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005aea:	f023 0304 	bic.w	r3, r3, #4
 8005aee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d015      	beq.n	8005b24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005af8:	f7fc fd8c 	bl	8002614 <HAL_GetTick>
 8005afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005afe:	e00a      	b.n	8005b16 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b00:	f7fc fd88 	bl	8002614 <HAL_GetTick>
 8005b04:	4602      	mov	r2, r0
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d901      	bls.n	8005b16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e0cb      	b.n	8005cae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b16:	4b49      	ldr	r3, [pc, #292]	; (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d0ee      	beq.n	8005b00 <HAL_RCC_OscConfig+0x334>
 8005b22:	e014      	b.n	8005b4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b24:	f7fc fd76 	bl	8002614 <HAL_GetTick>
 8005b28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b2a:	e00a      	b.n	8005b42 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b2c:	f7fc fd72 	bl	8002614 <HAL_GetTick>
 8005b30:	4602      	mov	r2, r0
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	1ad3      	subs	r3, r2, r3
 8005b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d901      	bls.n	8005b42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e0b5      	b.n	8005cae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b42:	4b3e      	ldr	r3, [pc, #248]	; (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b46:	f003 0302 	and.w	r3, r3, #2
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1ee      	bne.n	8005b2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005b4e:	7dfb      	ldrb	r3, [r7, #23]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d105      	bne.n	8005b60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005b54:	4b39      	ldr	r3, [pc, #228]	; (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b58:	4a38      	ldr	r2, [pc, #224]	; (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005b5a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b5e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	f000 80a1 	beq.w	8005cac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b6a:	4b34      	ldr	r3, [pc, #208]	; (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	f003 030c 	and.w	r3, r3, #12
 8005b72:	2b08      	cmp	r3, #8
 8005b74:	d05c      	beq.n	8005c30 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	2b02      	cmp	r3, #2
 8005b7c:	d141      	bne.n	8005c02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b7e:	4b31      	ldr	r3, [pc, #196]	; (8005c44 <HAL_RCC_OscConfig+0x478>)
 8005b80:	2200      	movs	r2, #0
 8005b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b84:	f7fc fd46 	bl	8002614 <HAL_GetTick>
 8005b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b8a:	e008      	b.n	8005b9e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b8c:	f7fc fd42 	bl	8002614 <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	2b02      	cmp	r3, #2
 8005b98:	d901      	bls.n	8005b9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	e087      	b.n	8005cae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b9e:	4b27      	ldr	r3, [pc, #156]	; (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d1f0      	bne.n	8005b8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	69da      	ldr	r2, [r3, #28]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb8:	019b      	lsls	r3, r3, #6
 8005bba:	431a      	orrs	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bc0:	085b      	lsrs	r3, r3, #1
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	041b      	lsls	r3, r3, #16
 8005bc6:	431a      	orrs	r2, r3
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bcc:	061b      	lsls	r3, r3, #24
 8005bce:	491b      	ldr	r1, [pc, #108]	; (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bd4:	4b1b      	ldr	r3, [pc, #108]	; (8005c44 <HAL_RCC_OscConfig+0x478>)
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005bda:	f7fc fd1b 	bl	8002614 <HAL_GetTick>
 8005bde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005be0:	e008      	b.n	8005bf4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005be2:	f7fc fd17 	bl	8002614 <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d901      	bls.n	8005bf4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e05c      	b.n	8005cae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005bf4:	4b11      	ldr	r3, [pc, #68]	; (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d0f0      	beq.n	8005be2 <HAL_RCC_OscConfig+0x416>
 8005c00:	e054      	b.n	8005cac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c02:	4b10      	ldr	r3, [pc, #64]	; (8005c44 <HAL_RCC_OscConfig+0x478>)
 8005c04:	2200      	movs	r2, #0
 8005c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c08:	f7fc fd04 	bl	8002614 <HAL_GetTick>
 8005c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c0e:	e008      	b.n	8005c22 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c10:	f7fc fd00 	bl	8002614 <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	2b02      	cmp	r3, #2
 8005c1c:	d901      	bls.n	8005c22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e045      	b.n	8005cae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c22:	4b06      	ldr	r3, [pc, #24]	; (8005c3c <HAL_RCC_OscConfig+0x470>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1f0      	bne.n	8005c10 <HAL_RCC_OscConfig+0x444>
 8005c2e:	e03d      	b.n	8005cac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	699b      	ldr	r3, [r3, #24]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d107      	bne.n	8005c48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e038      	b.n	8005cae <HAL_RCC_OscConfig+0x4e2>
 8005c3c:	40023800 	.word	0x40023800
 8005c40:	40007000 	.word	0x40007000
 8005c44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c48:	4b1b      	ldr	r3, [pc, #108]	; (8005cb8 <HAL_RCC_OscConfig+0x4ec>)
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d028      	beq.n	8005ca8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005c60:	429a      	cmp	r2, r3
 8005c62:	d121      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d11a      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c72:	68fa      	ldr	r2, [r7, #12]
 8005c74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005c78:	4013      	ands	r3, r2
 8005c7a:	687a      	ldr	r2, [r7, #4]
 8005c7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005c7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d111      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c8e:	085b      	lsrs	r3, r3, #1
 8005c90:	3b01      	subs	r3, #1
 8005c92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d107      	bne.n	8005ca8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d001      	beq.n	8005cac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e000      	b.n	8005cae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3718      	adds	r7, #24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	40023800 	.word	0x40023800

08005cbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d101      	bne.n	8005cd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	e0cc      	b.n	8005e6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005cd0:	4b68      	ldr	r3, [pc, #416]	; (8005e74 <HAL_RCC_ClockConfig+0x1b8>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f003 030f 	and.w	r3, r3, #15
 8005cd8:	683a      	ldr	r2, [r7, #0]
 8005cda:	429a      	cmp	r2, r3
 8005cdc:	d90c      	bls.n	8005cf8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cde:	4b65      	ldr	r3, [pc, #404]	; (8005e74 <HAL_RCC_ClockConfig+0x1b8>)
 8005ce0:	683a      	ldr	r2, [r7, #0]
 8005ce2:	b2d2      	uxtb	r2, r2
 8005ce4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ce6:	4b63      	ldr	r3, [pc, #396]	; (8005e74 <HAL_RCC_ClockConfig+0x1b8>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f003 030f 	and.w	r3, r3, #15
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d001      	beq.n	8005cf8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e0b8      	b.n	8005e6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0302 	and.w	r3, r3, #2
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d020      	beq.n	8005d46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f003 0304 	and.w	r3, r3, #4
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d005      	beq.n	8005d1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d10:	4b59      	ldr	r3, [pc, #356]	; (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	4a58      	ldr	r2, [pc, #352]	; (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005d16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 0308 	and.w	r3, r3, #8
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d005      	beq.n	8005d34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d28:	4b53      	ldr	r3, [pc, #332]	; (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	4a52      	ldr	r2, [pc, #328]	; (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005d2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d34:	4b50      	ldr	r3, [pc, #320]	; (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	494d      	ldr	r1, [pc, #308]	; (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d044      	beq.n	8005ddc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d107      	bne.n	8005d6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d5a:	4b47      	ldr	r3, [pc, #284]	; (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d119      	bne.n	8005d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e07f      	b.n	8005e6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d003      	beq.n	8005d7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005d76:	2b03      	cmp	r3, #3
 8005d78:	d107      	bne.n	8005d8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d7a:	4b3f      	ldr	r3, [pc, #252]	; (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d109      	bne.n	8005d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e06f      	b.n	8005e6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d8a:	4b3b      	ldr	r3, [pc, #236]	; (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f003 0302 	and.w	r3, r3, #2
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d101      	bne.n	8005d9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e067      	b.n	8005e6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d9a:	4b37      	ldr	r3, [pc, #220]	; (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f023 0203 	bic.w	r2, r3, #3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	4934      	ldr	r1, [pc, #208]	; (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005da8:	4313      	orrs	r3, r2
 8005daa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005dac:	f7fc fc32 	bl	8002614 <HAL_GetTick>
 8005db0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005db2:	e00a      	b.n	8005dca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005db4:	f7fc fc2e 	bl	8002614 <HAL_GetTick>
 8005db8:	4602      	mov	r2, r0
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d901      	bls.n	8005dca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005dc6:	2303      	movs	r3, #3
 8005dc8:	e04f      	b.n	8005e6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dca:	4b2b      	ldr	r3, [pc, #172]	; (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f003 020c 	and.w	r2, r3, #12
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	685b      	ldr	r3, [r3, #4]
 8005dd6:	009b      	lsls	r3, r3, #2
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d1eb      	bne.n	8005db4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ddc:	4b25      	ldr	r3, [pc, #148]	; (8005e74 <HAL_RCC_ClockConfig+0x1b8>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 030f 	and.w	r3, r3, #15
 8005de4:	683a      	ldr	r2, [r7, #0]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d20c      	bcs.n	8005e04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005dea:	4b22      	ldr	r3, [pc, #136]	; (8005e74 <HAL_RCC_ClockConfig+0x1b8>)
 8005dec:	683a      	ldr	r2, [r7, #0]
 8005dee:	b2d2      	uxtb	r2, r2
 8005df0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005df2:	4b20      	ldr	r3, [pc, #128]	; (8005e74 <HAL_RCC_ClockConfig+0x1b8>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f003 030f 	and.w	r3, r3, #15
 8005dfa:	683a      	ldr	r2, [r7, #0]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d001      	beq.n	8005e04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e032      	b.n	8005e6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0304 	and.w	r3, r3, #4
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d008      	beq.n	8005e22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e10:	4b19      	ldr	r3, [pc, #100]	; (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	4916      	ldr	r1, [pc, #88]	; (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f003 0308 	and.w	r3, r3, #8
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d009      	beq.n	8005e42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e2e:	4b12      	ldr	r3, [pc, #72]	; (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	691b      	ldr	r3, [r3, #16]
 8005e3a:	00db      	lsls	r3, r3, #3
 8005e3c:	490e      	ldr	r1, [pc, #56]	; (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005e3e:	4313      	orrs	r3, r2
 8005e40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005e42:	f000 f821 	bl	8005e88 <HAL_RCC_GetSysClockFreq>
 8005e46:	4602      	mov	r2, r0
 8005e48:	4b0b      	ldr	r3, [pc, #44]	; (8005e78 <HAL_RCC_ClockConfig+0x1bc>)
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	091b      	lsrs	r3, r3, #4
 8005e4e:	f003 030f 	and.w	r3, r3, #15
 8005e52:	490a      	ldr	r1, [pc, #40]	; (8005e7c <HAL_RCC_ClockConfig+0x1c0>)
 8005e54:	5ccb      	ldrb	r3, [r1, r3]
 8005e56:	fa22 f303 	lsr.w	r3, r2, r3
 8005e5a:	4a09      	ldr	r2, [pc, #36]	; (8005e80 <HAL_RCC_ClockConfig+0x1c4>)
 8005e5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005e5e:	4b09      	ldr	r3, [pc, #36]	; (8005e84 <HAL_RCC_ClockConfig+0x1c8>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7fb fbf6 	bl	8001654 <HAL_InitTick>

  return HAL_OK;
 8005e68:	2300      	movs	r3, #0
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	40023c00 	.word	0x40023c00
 8005e78:	40023800 	.word	0x40023800
 8005e7c:	0800f448 	.word	0x0800f448
 8005e80:	20000000 	.word	0x20000000
 8005e84:	2000004c 	.word	0x2000004c

08005e88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e8c:	b094      	sub	sp, #80	; 0x50
 8005e8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005e90:	2300      	movs	r3, #0
 8005e92:	647b      	str	r3, [r7, #68]	; 0x44
 8005e94:	2300      	movs	r3, #0
 8005e96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e98:	2300      	movs	r3, #0
 8005e9a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ea0:	4b79      	ldr	r3, [pc, #484]	; (8006088 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	f003 030c 	and.w	r3, r3, #12
 8005ea8:	2b08      	cmp	r3, #8
 8005eaa:	d00d      	beq.n	8005ec8 <HAL_RCC_GetSysClockFreq+0x40>
 8005eac:	2b08      	cmp	r3, #8
 8005eae:	f200 80e1 	bhi.w	8006074 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d002      	beq.n	8005ebc <HAL_RCC_GetSysClockFreq+0x34>
 8005eb6:	2b04      	cmp	r3, #4
 8005eb8:	d003      	beq.n	8005ec2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005eba:	e0db      	b.n	8006074 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ebc:	4b73      	ldr	r3, [pc, #460]	; (800608c <HAL_RCC_GetSysClockFreq+0x204>)
 8005ebe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005ec0:	e0db      	b.n	800607a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ec2:	4b73      	ldr	r3, [pc, #460]	; (8006090 <HAL_RCC_GetSysClockFreq+0x208>)
 8005ec4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005ec6:	e0d8      	b.n	800607a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ec8:	4b6f      	ldr	r3, [pc, #444]	; (8006088 <HAL_RCC_GetSysClockFreq+0x200>)
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005ed0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ed2:	4b6d      	ldr	r3, [pc, #436]	; (8006088 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d063      	beq.n	8005fa6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ede:	4b6a      	ldr	r3, [pc, #424]	; (8006088 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	099b      	lsrs	r3, r3, #6
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ee8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005eea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ef0:	633b      	str	r3, [r7, #48]	; 0x30
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	637b      	str	r3, [r7, #52]	; 0x34
 8005ef6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005efa:	4622      	mov	r2, r4
 8005efc:	462b      	mov	r3, r5
 8005efe:	f04f 0000 	mov.w	r0, #0
 8005f02:	f04f 0100 	mov.w	r1, #0
 8005f06:	0159      	lsls	r1, r3, #5
 8005f08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f0c:	0150      	lsls	r0, r2, #5
 8005f0e:	4602      	mov	r2, r0
 8005f10:	460b      	mov	r3, r1
 8005f12:	4621      	mov	r1, r4
 8005f14:	1a51      	subs	r1, r2, r1
 8005f16:	6139      	str	r1, [r7, #16]
 8005f18:	4629      	mov	r1, r5
 8005f1a:	eb63 0301 	sbc.w	r3, r3, r1
 8005f1e:	617b      	str	r3, [r7, #20]
 8005f20:	f04f 0200 	mov.w	r2, #0
 8005f24:	f04f 0300 	mov.w	r3, #0
 8005f28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f2c:	4659      	mov	r1, fp
 8005f2e:	018b      	lsls	r3, r1, #6
 8005f30:	4651      	mov	r1, sl
 8005f32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f36:	4651      	mov	r1, sl
 8005f38:	018a      	lsls	r2, r1, #6
 8005f3a:	4651      	mov	r1, sl
 8005f3c:	ebb2 0801 	subs.w	r8, r2, r1
 8005f40:	4659      	mov	r1, fp
 8005f42:	eb63 0901 	sbc.w	r9, r3, r1
 8005f46:	f04f 0200 	mov.w	r2, #0
 8005f4a:	f04f 0300 	mov.w	r3, #0
 8005f4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f5a:	4690      	mov	r8, r2
 8005f5c:	4699      	mov	r9, r3
 8005f5e:	4623      	mov	r3, r4
 8005f60:	eb18 0303 	adds.w	r3, r8, r3
 8005f64:	60bb      	str	r3, [r7, #8]
 8005f66:	462b      	mov	r3, r5
 8005f68:	eb49 0303 	adc.w	r3, r9, r3
 8005f6c:	60fb      	str	r3, [r7, #12]
 8005f6e:	f04f 0200 	mov.w	r2, #0
 8005f72:	f04f 0300 	mov.w	r3, #0
 8005f76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005f7a:	4629      	mov	r1, r5
 8005f7c:	024b      	lsls	r3, r1, #9
 8005f7e:	4621      	mov	r1, r4
 8005f80:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005f84:	4621      	mov	r1, r4
 8005f86:	024a      	lsls	r2, r1, #9
 8005f88:	4610      	mov	r0, r2
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005f8e:	2200      	movs	r2, #0
 8005f90:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005f98:	f7fa f97a 	bl	8000290 <__aeabi_uldivmod>
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fa4:	e058      	b.n	8006058 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005fa6:	4b38      	ldr	r3, [pc, #224]	; (8006088 <HAL_RCC_GetSysClockFreq+0x200>)
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	099b      	lsrs	r3, r3, #6
 8005fac:	2200      	movs	r2, #0
 8005fae:	4618      	mov	r0, r3
 8005fb0:	4611      	mov	r1, r2
 8005fb2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005fb6:	623b      	str	r3, [r7, #32]
 8005fb8:	2300      	movs	r3, #0
 8005fba:	627b      	str	r3, [r7, #36]	; 0x24
 8005fbc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005fc0:	4642      	mov	r2, r8
 8005fc2:	464b      	mov	r3, r9
 8005fc4:	f04f 0000 	mov.w	r0, #0
 8005fc8:	f04f 0100 	mov.w	r1, #0
 8005fcc:	0159      	lsls	r1, r3, #5
 8005fce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005fd2:	0150      	lsls	r0, r2, #5
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	460b      	mov	r3, r1
 8005fd8:	4641      	mov	r1, r8
 8005fda:	ebb2 0a01 	subs.w	sl, r2, r1
 8005fde:	4649      	mov	r1, r9
 8005fe0:	eb63 0b01 	sbc.w	fp, r3, r1
 8005fe4:	f04f 0200 	mov.w	r2, #0
 8005fe8:	f04f 0300 	mov.w	r3, #0
 8005fec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ff0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ff4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005ff8:	ebb2 040a 	subs.w	r4, r2, sl
 8005ffc:	eb63 050b 	sbc.w	r5, r3, fp
 8006000:	f04f 0200 	mov.w	r2, #0
 8006004:	f04f 0300 	mov.w	r3, #0
 8006008:	00eb      	lsls	r3, r5, #3
 800600a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800600e:	00e2      	lsls	r2, r4, #3
 8006010:	4614      	mov	r4, r2
 8006012:	461d      	mov	r5, r3
 8006014:	4643      	mov	r3, r8
 8006016:	18e3      	adds	r3, r4, r3
 8006018:	603b      	str	r3, [r7, #0]
 800601a:	464b      	mov	r3, r9
 800601c:	eb45 0303 	adc.w	r3, r5, r3
 8006020:	607b      	str	r3, [r7, #4]
 8006022:	f04f 0200 	mov.w	r2, #0
 8006026:	f04f 0300 	mov.w	r3, #0
 800602a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800602e:	4629      	mov	r1, r5
 8006030:	028b      	lsls	r3, r1, #10
 8006032:	4621      	mov	r1, r4
 8006034:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006038:	4621      	mov	r1, r4
 800603a:	028a      	lsls	r2, r1, #10
 800603c:	4610      	mov	r0, r2
 800603e:	4619      	mov	r1, r3
 8006040:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006042:	2200      	movs	r2, #0
 8006044:	61bb      	str	r3, [r7, #24]
 8006046:	61fa      	str	r2, [r7, #28]
 8006048:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800604c:	f7fa f920 	bl	8000290 <__aeabi_uldivmod>
 8006050:	4602      	mov	r2, r0
 8006052:	460b      	mov	r3, r1
 8006054:	4613      	mov	r3, r2
 8006056:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006058:	4b0b      	ldr	r3, [pc, #44]	; (8006088 <HAL_RCC_GetSysClockFreq+0x200>)
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	0c1b      	lsrs	r3, r3, #16
 800605e:	f003 0303 	and.w	r3, r3, #3
 8006062:	3301      	adds	r3, #1
 8006064:	005b      	lsls	r3, r3, #1
 8006066:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006068:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800606a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800606c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006070:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006072:	e002      	b.n	800607a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006074:	4b05      	ldr	r3, [pc, #20]	; (800608c <HAL_RCC_GetSysClockFreq+0x204>)
 8006076:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006078:	bf00      	nop
    }
  }
  return sysclockfreq;
 800607a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800607c:	4618      	mov	r0, r3
 800607e:	3750      	adds	r7, #80	; 0x50
 8006080:	46bd      	mov	sp, r7
 8006082:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006086:	bf00      	nop
 8006088:	40023800 	.word	0x40023800
 800608c:	00f42400 	.word	0x00f42400
 8006090:	007a1200 	.word	0x007a1200

08006094 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006094:	b480      	push	{r7}
 8006096:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006098:	4b03      	ldr	r3, [pc, #12]	; (80060a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800609a:	681b      	ldr	r3, [r3, #0]
}
 800609c:	4618      	mov	r0, r3
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	20000000 	.word	0x20000000

080060ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80060b0:	f7ff fff0 	bl	8006094 <HAL_RCC_GetHCLKFreq>
 80060b4:	4602      	mov	r2, r0
 80060b6:	4b05      	ldr	r3, [pc, #20]	; (80060cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	0a9b      	lsrs	r3, r3, #10
 80060bc:	f003 0307 	and.w	r3, r3, #7
 80060c0:	4903      	ldr	r1, [pc, #12]	; (80060d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80060c2:	5ccb      	ldrb	r3, [r1, r3]
 80060c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	bd80      	pop	{r7, pc}
 80060cc:	40023800 	.word	0x40023800
 80060d0:	0800f458 	.word	0x0800f458

080060d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80060d8:	f7ff ffdc 	bl	8006094 <HAL_RCC_GetHCLKFreq>
 80060dc:	4602      	mov	r2, r0
 80060de:	4b05      	ldr	r3, [pc, #20]	; (80060f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	0b5b      	lsrs	r3, r3, #13
 80060e4:	f003 0307 	and.w	r3, r3, #7
 80060e8:	4903      	ldr	r1, [pc, #12]	; (80060f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80060ea:	5ccb      	ldrb	r3, [r1, r3]
 80060ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	bd80      	pop	{r7, pc}
 80060f4:	40023800 	.word	0x40023800
 80060f8:	0800f458 	.word	0x0800f458

080060fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
 8006104:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	220f      	movs	r2, #15
 800610a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800610c:	4b12      	ldr	r3, [pc, #72]	; (8006158 <HAL_RCC_GetClockConfig+0x5c>)
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f003 0203 	and.w	r2, r3, #3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006118:	4b0f      	ldr	r3, [pc, #60]	; (8006158 <HAL_RCC_GetClockConfig+0x5c>)
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006124:	4b0c      	ldr	r3, [pc, #48]	; (8006158 <HAL_RCC_GetClockConfig+0x5c>)
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006130:	4b09      	ldr	r3, [pc, #36]	; (8006158 <HAL_RCC_GetClockConfig+0x5c>)
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	08db      	lsrs	r3, r3, #3
 8006136:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800613e:	4b07      	ldr	r3, [pc, #28]	; (800615c <HAL_RCC_GetClockConfig+0x60>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f003 020f 	and.w	r2, r3, #15
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	601a      	str	r2, [r3, #0]
}
 800614a:	bf00      	nop
 800614c:	370c      	adds	r7, #12
 800614e:	46bd      	mov	sp, r7
 8006150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006154:	4770      	bx	lr
 8006156:	bf00      	nop
 8006158:	40023800 	.word	0x40023800
 800615c:	40023c00 	.word	0x40023c00

08006160 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b086      	sub	sp, #24
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006168:	2300      	movs	r3, #0
 800616a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800616c:	2300      	movs	r3, #0
 800616e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0301 	and.w	r3, r3, #1
 8006178:	2b00      	cmp	r3, #0
 800617a:	d10b      	bne.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006184:	2b00      	cmp	r3, #0
 8006186:	d105      	bne.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006190:	2b00      	cmp	r3, #0
 8006192:	d075      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006194:	4b91      	ldr	r3, [pc, #580]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006196:	2200      	movs	r2, #0
 8006198:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800619a:	f7fc fa3b 	bl	8002614 <HAL_GetTick>
 800619e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80061a0:	e008      	b.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80061a2:	f7fc fa37 	bl	8002614 <HAL_GetTick>
 80061a6:	4602      	mov	r2, r0
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	1ad3      	subs	r3, r2, r3
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d901      	bls.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e189      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80061b4:	4b8a      	ldr	r3, [pc, #552]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d1f0      	bne.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d009      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	019a      	lsls	r2, r3, #6
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	689b      	ldr	r3, [r3, #8]
 80061d6:	071b      	lsls	r3, r3, #28
 80061d8:	4981      	ldr	r1, [pc, #516]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061da:	4313      	orrs	r3, r2
 80061dc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0302 	and.w	r3, r3, #2
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d01f      	beq.n	800622c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80061ec:	4b7c      	ldr	r3, [pc, #496]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80061ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061f2:	0f1b      	lsrs	r3, r3, #28
 80061f4:	f003 0307 	and.w	r3, r3, #7
 80061f8:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	019a      	lsls	r2, r3, #6
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	061b      	lsls	r3, r3, #24
 8006206:	431a      	orrs	r2, r3
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	071b      	lsls	r3, r3, #28
 800620c:	4974      	ldr	r1, [pc, #464]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800620e:	4313      	orrs	r3, r2
 8006210:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006214:	4b72      	ldr	r3, [pc, #456]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006216:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800621a:	f023 021f 	bic.w	r2, r3, #31
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	69db      	ldr	r3, [r3, #28]
 8006222:	3b01      	subs	r3, #1
 8006224:	496e      	ldr	r1, [pc, #440]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006226:	4313      	orrs	r3, r2
 8006228:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00d      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	019a      	lsls	r2, r3, #6
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	061b      	lsls	r3, r3, #24
 8006244:	431a      	orrs	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	071b      	lsls	r3, r3, #28
 800624c:	4964      	ldr	r1, [pc, #400]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800624e:	4313      	orrs	r3, r2
 8006250:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006254:	4b61      	ldr	r3, [pc, #388]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006256:	2201      	movs	r2, #1
 8006258:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800625a:	f7fc f9db 	bl	8002614 <HAL_GetTick>
 800625e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006260:	e008      	b.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006262:	f7fc f9d7 	bl	8002614 <HAL_GetTick>
 8006266:	4602      	mov	r2, r0
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	1ad3      	subs	r3, r2, r3
 800626c:	2b02      	cmp	r3, #2
 800626e:	d901      	bls.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006270:	2303      	movs	r3, #3
 8006272:	e129      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006274:	4b5a      	ldr	r3, [pc, #360]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d0f0      	beq.n	8006262 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f003 0304 	and.w	r3, r3, #4
 8006288:	2b00      	cmp	r3, #0
 800628a:	d105      	bne.n	8006298 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006294:	2b00      	cmp	r3, #0
 8006296:	d079      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006298:	4b52      	ldr	r3, [pc, #328]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800629a:	2200      	movs	r2, #0
 800629c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800629e:	f7fc f9b9 	bl	8002614 <HAL_GetTick>
 80062a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80062a4:	e008      	b.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80062a6:	f7fc f9b5 	bl	8002614 <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	2b02      	cmp	r3, #2
 80062b2:	d901      	bls.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e107      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80062b8:	4b49      	ldr	r3, [pc, #292]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80062c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80062c4:	d0ef      	beq.n	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0304 	and.w	r3, r3, #4
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d020      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80062d2:	4b43      	ldr	r3, [pc, #268]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062d8:	0f1b      	lsrs	r3, r3, #28
 80062da:	f003 0307 	and.w	r3, r3, #7
 80062de:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	019a      	lsls	r2, r3, #6
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	695b      	ldr	r3, [r3, #20]
 80062ea:	061b      	lsls	r3, r3, #24
 80062ec:	431a      	orrs	r2, r3
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	071b      	lsls	r3, r3, #28
 80062f2:	493b      	ldr	r1, [pc, #236]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80062fa:	4b39      	ldr	r3, [pc, #228]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80062fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006300:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6a1b      	ldr	r3, [r3, #32]
 8006308:	3b01      	subs	r3, #1
 800630a:	021b      	lsls	r3, r3, #8
 800630c:	4934      	ldr	r1, [pc, #208]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800630e:	4313      	orrs	r3, r2
 8006310:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0308 	and.w	r3, r3, #8
 800631c:	2b00      	cmp	r3, #0
 800631e:	d01e      	beq.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006320:	4b2f      	ldr	r3, [pc, #188]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006326:	0e1b      	lsrs	r3, r3, #24
 8006328:	f003 030f 	and.w	r3, r3, #15
 800632c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	019a      	lsls	r2, r3, #6
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	061b      	lsls	r3, r3, #24
 8006338:	431a      	orrs	r2, r3
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	699b      	ldr	r3, [r3, #24]
 800633e:	071b      	lsls	r3, r3, #28
 8006340:	4927      	ldr	r1, [pc, #156]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006342:	4313      	orrs	r3, r2
 8006344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006348:	4b25      	ldr	r3, [pc, #148]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800634a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800634e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006356:	4922      	ldr	r1, [pc, #136]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006358:	4313      	orrs	r3, r2
 800635a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800635e:	4b21      	ldr	r3, [pc, #132]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8006360:	2201      	movs	r2, #1
 8006362:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006364:	f7fc f956 	bl	8002614 <HAL_GetTick>
 8006368:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800636a:	e008      	b.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800636c:	f7fc f952 	bl	8002614 <HAL_GetTick>
 8006370:	4602      	mov	r2, r0
 8006372:	697b      	ldr	r3, [r7, #20]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	2b02      	cmp	r3, #2
 8006378:	d901      	bls.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e0a4      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800637e:	4b18      	ldr	r3, [pc, #96]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006386:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800638a:	d1ef      	bne.n	800636c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f003 0320 	and.w	r3, r3, #32
 8006394:	2b00      	cmp	r3, #0
 8006396:	f000 808b 	beq.w	80064b0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800639a:	2300      	movs	r3, #0
 800639c:	60fb      	str	r3, [r7, #12]
 800639e:	4b10      	ldr	r3, [pc, #64]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a2:	4a0f      	ldr	r2, [pc, #60]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063a8:	6413      	str	r3, [r2, #64]	; 0x40
 80063aa:	4b0d      	ldr	r3, [pc, #52]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80063ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063b2:	60fb      	str	r3, [r7, #12]
 80063b4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80063b6:	4b0c      	ldr	r3, [pc, #48]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a0b      	ldr	r2, [pc, #44]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80063bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80063c0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80063c2:	f7fc f927 	bl	8002614 <HAL_GetTick>
 80063c6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80063c8:	e010      	b.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80063ca:	f7fc f923 	bl	8002614 <HAL_GetTick>
 80063ce:	4602      	mov	r2, r0
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d909      	bls.n	80063ec <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	e075      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80063dc:	42470068 	.word	0x42470068
 80063e0:	40023800 	.word	0x40023800
 80063e4:	42470070 	.word	0x42470070
 80063e8:	40007000 	.word	0x40007000
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80063ec:	4b38      	ldr	r3, [pc, #224]	; (80064d0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d0e8      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80063f8:	4b36      	ldr	r3, [pc, #216]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80063fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006400:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d02f      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006410:	693a      	ldr	r2, [r7, #16]
 8006412:	429a      	cmp	r2, r3
 8006414:	d028      	beq.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006416:	4b2f      	ldr	r3, [pc, #188]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800641a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800641e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006420:	4b2d      	ldr	r3, [pc, #180]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006422:	2201      	movs	r2, #1
 8006424:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006426:	4b2c      	ldr	r3, [pc, #176]	; (80064d8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8006428:	2200      	movs	r2, #0
 800642a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800642c:	4a29      	ldr	r2, [pc, #164]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006432:	4b28      	ldr	r3, [pc, #160]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006434:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006436:	f003 0301 	and.w	r3, r3, #1
 800643a:	2b01      	cmp	r3, #1
 800643c:	d114      	bne.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800643e:	f7fc f8e9 	bl	8002614 <HAL_GetTick>
 8006442:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006444:	e00a      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006446:	f7fc f8e5 	bl	8002614 <HAL_GetTick>
 800644a:	4602      	mov	r2, r0
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	1ad3      	subs	r3, r2, r3
 8006450:	f241 3288 	movw	r2, #5000	; 0x1388
 8006454:	4293      	cmp	r3, r2
 8006456:	d901      	bls.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8006458:	2303      	movs	r3, #3
 800645a:	e035      	b.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800645c:	4b1d      	ldr	r3, [pc, #116]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800645e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006460:	f003 0302 	and.w	r3, r3, #2
 8006464:	2b00      	cmp	r3, #0
 8006466:	d0ee      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006470:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006474:	d10d      	bne.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006476:	4b17      	ldr	r3, [pc, #92]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006482:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800648a:	4912      	ldr	r1, [pc, #72]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800648c:	4313      	orrs	r3, r2
 800648e:	608b      	str	r3, [r1, #8]
 8006490:	e005      	b.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8006492:	4b10      	ldr	r3, [pc, #64]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	4a0f      	ldr	r2, [pc, #60]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8006498:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800649c:	6093      	str	r3, [r2, #8]
 800649e:	4b0d      	ldr	r3, [pc, #52]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80064a0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064aa:	490a      	ldr	r1, [pc, #40]	; (80064d4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80064ac:	4313      	orrs	r3, r2
 80064ae:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f003 0310 	and.w	r3, r3, #16
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d004      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 80064c2:	4b06      	ldr	r3, [pc, #24]	; (80064dc <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80064c4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80064c6:	2300      	movs	r3, #0
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3718      	adds	r7, #24
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}
 80064d0:	40007000 	.word	0x40007000
 80064d4:	40023800 	.word	0x40023800
 80064d8:	42470e40 	.word	0x42470e40
 80064dc:	424711e0 	.word	0x424711e0

080064e0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d101      	bne.n	80064f6 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e066      	b.n	80065c4 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	7f5b      	ldrb	r3, [r3, #29]
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d105      	bne.n	800650c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f7fa ff0e 	bl	8001328 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2202      	movs	r2, #2
 8006510:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	22ca      	movs	r2, #202	; 0xca
 8006518:	625a      	str	r2, [r3, #36]	; 0x24
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2253      	movs	r2, #83	; 0x53
 8006520:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 fa45 	bl	80069b2 <RTC_EnterInitMode>
 8006528:	4603      	mov	r3, r0
 800652a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800652c:	7bfb      	ldrb	r3, [r7, #15]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d12c      	bne.n	800658c <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	6812      	ldr	r2, [r2, #0]
 800653c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006540:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006544:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6899      	ldr	r1, [r3, #8]
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685a      	ldr	r2, [r3, #4]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	691b      	ldr	r3, [r3, #16]
 8006554:	431a      	orrs	r2, r3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	431a      	orrs	r2, r3
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	430a      	orrs	r2, r1
 8006562:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	68d2      	ldr	r2, [r2, #12]
 800656c:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6919      	ldr	r1, [r3, #16]
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	041a      	lsls	r2, r3, #16
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	430a      	orrs	r2, r1
 8006580:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 fa4c 	bl	8006a20 <RTC_ExitInitMode>
 8006588:	4603      	mov	r3, r0
 800658a:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 800658c:	7bfb      	ldrb	r3, [r7, #15]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d113      	bne.n	80065ba <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80065a0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	699a      	ldr	r2, [r3, #24]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	430a      	orrs	r2, r1
 80065b2:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	22ff      	movs	r2, #255	; 0xff
 80065c0:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 80065c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80065cc:	b590      	push	{r4, r7, lr}
 80065ce:	b087      	sub	sp, #28
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80065d8:	2300      	movs	r3, #0
 80065da:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	7f1b      	ldrb	r3, [r3, #28]
 80065e0:	2b01      	cmp	r3, #1
 80065e2:	d101      	bne.n	80065e8 <HAL_RTC_SetTime+0x1c>
 80065e4:	2302      	movs	r3, #2
 80065e6:	e087      	b.n	80066f8 <HAL_RTC_SetTime+0x12c>
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2201      	movs	r2, #1
 80065ec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2202      	movs	r2, #2
 80065f2:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d126      	bne.n	8006648 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006604:	2b00      	cmp	r3, #0
 8006606:	d102      	bne.n	800660e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	2200      	movs	r2, #0
 800660c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	781b      	ldrb	r3, [r3, #0]
 8006612:	4618      	mov	r0, r3
 8006614:	f000 fa29 	bl	8006a6a <RTC_ByteToBcd2>
 8006618:	4603      	mov	r3, r0
 800661a:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	785b      	ldrb	r3, [r3, #1]
 8006620:	4618      	mov	r0, r3
 8006622:	f000 fa22 	bl	8006a6a <RTC_ByteToBcd2>
 8006626:	4603      	mov	r3, r0
 8006628:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800662a:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	789b      	ldrb	r3, [r3, #2]
 8006630:	4618      	mov	r0, r3
 8006632:	f000 fa1a 	bl	8006a6a <RTC_ByteToBcd2>
 8006636:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8006638:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	78db      	ldrb	r3, [r3, #3]
 8006640:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8006642:	4313      	orrs	r3, r2
 8006644:	617b      	str	r3, [r7, #20]
 8006646:	e018      	b.n	800667a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006652:	2b00      	cmp	r3, #0
 8006654:	d102      	bne.n	800665c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	2200      	movs	r2, #0
 800665a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	785b      	ldrb	r3, [r3, #1]
 8006666:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006668:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800666a:	68ba      	ldr	r2, [r7, #8]
 800666c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 800666e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	78db      	ldrb	r3, [r3, #3]
 8006674:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8006676:	4313      	orrs	r3, r2
 8006678:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	22ca      	movs	r2, #202	; 0xca
 8006680:	625a      	str	r2, [r3, #36]	; 0x24
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	2253      	movs	r2, #83	; 0x53
 8006688:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f000 f991 	bl	80069b2 <RTC_EnterInitMode>
 8006690:	4603      	mov	r3, r0
 8006692:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006694:	7cfb      	ldrb	r3, [r7, #19]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d120      	bne.n	80066dc <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80066a4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80066a8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	689a      	ldr	r2, [r3, #8]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80066b8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	6899      	ldr	r1, [r3, #8]
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	68da      	ldr	r2, [r3, #12]
 80066c4:	68bb      	ldr	r3, [r7, #8]
 80066c6:	691b      	ldr	r3, [r3, #16]
 80066c8:	431a      	orrs	r2, r3
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	430a      	orrs	r2, r1
 80066d0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f000 f9a4 	bl	8006a20 <RTC_ExitInitMode>
 80066d8:	4603      	mov	r3, r0
 80066da:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80066dc:	7cfb      	ldrb	r3, [r7, #19]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d102      	bne.n	80066e8 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2201      	movs	r2, #1
 80066e6:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	22ff      	movs	r2, #255	; 0xff
 80066ee:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2200      	movs	r2, #0
 80066f4:	771a      	strb	r2, [r3, #28]

  return status;
 80066f6:	7cfb      	ldrb	r3, [r7, #19]
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	371c      	adds	r7, #28
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd90      	pop	{r4, r7, pc}

08006700 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b086      	sub	sp, #24
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800670c:	2300      	movs	r3, #0
 800670e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006732:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006736:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	0c1b      	lsrs	r3, r3, #16
 800673c:	b2db      	uxtb	r3, r3
 800673e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006742:	b2da      	uxtb	r2, r3
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	0a1b      	lsrs	r3, r3, #8
 800674c:	b2db      	uxtb	r3, r3
 800674e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006752:	b2da      	uxtb	r2, r3
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	b2db      	uxtb	r3, r3
 800675c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006760:	b2da      	uxtb	r2, r3
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	0d9b      	lsrs	r3, r3, #22
 800676a:	b2db      	uxtb	r3, r3
 800676c:	f003 0301 	and.w	r3, r3, #1
 8006770:	b2da      	uxtb	r2, r3
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d11a      	bne.n	80067b2 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	4618      	mov	r0, r3
 8006782:	f000 f98f 	bl	8006aa4 <RTC_Bcd2ToByte>
 8006786:	4603      	mov	r3, r0
 8006788:	461a      	mov	r2, r3
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	785b      	ldrb	r3, [r3, #1]
 8006792:	4618      	mov	r0, r3
 8006794:	f000 f986 	bl	8006aa4 <RTC_Bcd2ToByte>
 8006798:	4603      	mov	r3, r0
 800679a:	461a      	mov	r2, r3
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	789b      	ldrb	r3, [r3, #2]
 80067a4:	4618      	mov	r0, r3
 80067a6:	f000 f97d 	bl	8006aa4 <RTC_Bcd2ToByte>
 80067aa:	4603      	mov	r3, r0
 80067ac:	461a      	mov	r2, r3
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3718      	adds	r7, #24
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80067bc:	b590      	push	{r4, r7, lr}
 80067be:	b087      	sub	sp, #28
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	60f8      	str	r0, [r7, #12]
 80067c4:	60b9      	str	r1, [r7, #8]
 80067c6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80067c8:	2300      	movs	r3, #0
 80067ca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	7f1b      	ldrb	r3, [r3, #28]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d101      	bne.n	80067d8 <HAL_RTC_SetDate+0x1c>
 80067d4:	2302      	movs	r3, #2
 80067d6:	e071      	b.n	80068bc <HAL_RTC_SetDate+0x100>
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	2201      	movs	r2, #1
 80067dc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2202      	movs	r2, #2
 80067e2:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d10e      	bne.n	8006808 <HAL_RTC_SetDate+0x4c>
 80067ea:	68bb      	ldr	r3, [r7, #8]
 80067ec:	785b      	ldrb	r3, [r3, #1]
 80067ee:	f003 0310 	and.w	r3, r3, #16
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d008      	beq.n	8006808 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	785b      	ldrb	r3, [r3, #1]
 80067fa:	f023 0310 	bic.w	r3, r3, #16
 80067fe:	b2db      	uxtb	r3, r3
 8006800:	330a      	adds	r3, #10
 8006802:	b2da      	uxtb	r2, r3
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d11c      	bne.n	8006848 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	78db      	ldrb	r3, [r3, #3]
 8006812:	4618      	mov	r0, r3
 8006814:	f000 f929 	bl	8006a6a <RTC_ByteToBcd2>
 8006818:	4603      	mov	r3, r0
 800681a:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	785b      	ldrb	r3, [r3, #1]
 8006820:	4618      	mov	r0, r3
 8006822:	f000 f922 	bl	8006a6a <RTC_ByteToBcd2>
 8006826:	4603      	mov	r3, r0
 8006828:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800682a:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	789b      	ldrb	r3, [r3, #2]
 8006830:	4618      	mov	r0, r3
 8006832:	f000 f91a 	bl	8006a6a <RTC_ByteToBcd2>
 8006836:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8006838:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	781b      	ldrb	r3, [r3, #0]
 8006840:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8006842:	4313      	orrs	r3, r2
 8006844:	617b      	str	r3, [r7, #20]
 8006846:	e00e      	b.n	8006866 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	78db      	ldrb	r3, [r3, #3]
 800684c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	785b      	ldrb	r3, [r3, #1]
 8006852:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006854:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8006856:	68ba      	ldr	r2, [r7, #8]
 8006858:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800685a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	781b      	ldrb	r3, [r3, #0]
 8006860:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8006862:	4313      	orrs	r3, r2
 8006864:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	22ca      	movs	r2, #202	; 0xca
 800686c:	625a      	str	r2, [r3, #36]	; 0x24
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2253      	movs	r2, #83	; 0x53
 8006874:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f000 f89b 	bl	80069b2 <RTC_EnterInitMode>
 800687c:	4603      	mov	r3, r0
 800687e:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8006880:	7cfb      	ldrb	r3, [r7, #19]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10c      	bne.n	80068a0 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006890:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006894:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f000 f8c2 	bl	8006a20 <RTC_ExitInitMode>
 800689c:	4603      	mov	r3, r0
 800689e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80068a0:	7cfb      	ldrb	r3, [r7, #19]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d102      	bne.n	80068ac <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2201      	movs	r2, #1
 80068aa:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	22ff      	movs	r2, #255	; 0xff
 80068b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	771a      	strb	r2, [r3, #28]

  return status;
 80068ba:	7cfb      	ldrb	r3, [r7, #19]
}
 80068bc:	4618      	mov	r0, r3
 80068be:	371c      	adds	r7, #28
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd90      	pop	{r4, r7, pc}

080068c4 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b086      	sub	sp, #24
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	60f8      	str	r0, [r7, #12]
 80068cc:	60b9      	str	r1, [r7, #8]
 80068ce:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80068d0:	2300      	movs	r3, #0
 80068d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80068de:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80068e2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80068e4:	697b      	ldr	r3, [r7, #20]
 80068e6:	0c1b      	lsrs	r3, r3, #16
 80068e8:	b2da      	uxtb	r2, r3
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80068ee:	697b      	ldr	r3, [r7, #20]
 80068f0:	0a1b      	lsrs	r3, r3, #8
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	f003 031f 	and.w	r3, r3, #31
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	b2db      	uxtb	r3, r3
 8006902:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006906:	b2da      	uxtb	r2, r3
 8006908:	68bb      	ldr	r3, [r7, #8]
 800690a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	0b5b      	lsrs	r3, r3, #13
 8006910:	b2db      	uxtb	r3, r3
 8006912:	f003 0307 	and.w	r3, r3, #7
 8006916:	b2da      	uxtb	r2, r3
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d11a      	bne.n	8006958 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006922:	68bb      	ldr	r3, [r7, #8]
 8006924:	78db      	ldrb	r3, [r3, #3]
 8006926:	4618      	mov	r0, r3
 8006928:	f000 f8bc 	bl	8006aa4 <RTC_Bcd2ToByte>
 800692c:	4603      	mov	r3, r0
 800692e:	461a      	mov	r2, r3
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	785b      	ldrb	r3, [r3, #1]
 8006938:	4618      	mov	r0, r3
 800693a:	f000 f8b3 	bl	8006aa4 <RTC_Bcd2ToByte>
 800693e:	4603      	mov	r3, r0
 8006940:	461a      	mov	r2, r3
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	789b      	ldrb	r3, [r3, #2]
 800694a:	4618      	mov	r0, r3
 800694c:	f000 f8aa 	bl	8006aa4 <RTC_Bcd2ToByte>
 8006950:	4603      	mov	r3, r0
 8006952:	461a      	mov	r2, r3
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3718      	adds	r7, #24
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006962:	b580      	push	{r7, lr}
 8006964:	b084      	sub	sp, #16
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800696a:	2300      	movs	r3, #0
 800696c:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	68da      	ldr	r2, [r3, #12]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800697c:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800697e:	f7fb fe49 	bl	8002614 <HAL_GetTick>
 8006982:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006984:	e009      	b.n	800699a <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006986:	f7fb fe45 	bl	8002614 <HAL_GetTick>
 800698a:	4602      	mov	r2, r0
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006994:	d901      	bls.n	800699a <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006996:	2303      	movs	r3, #3
 8006998:	e007      	b.n	80069aa <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	68db      	ldr	r3, [r3, #12]
 80069a0:	f003 0320 	and.w	r3, r3, #32
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d0ee      	beq.n	8006986 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b084      	sub	sp, #16
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80069ba:	2300      	movs	r3, #0
 80069bc:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80069be:	2300      	movs	r3, #0
 80069c0:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d122      	bne.n	8006a16 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	68da      	ldr	r2, [r3, #12]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80069de:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80069e0:	f7fb fe18 	bl	8002614 <HAL_GetTick>
 80069e4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80069e6:	e00c      	b.n	8006a02 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80069e8:	f7fb fe14 	bl	8002614 <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069f6:	d904      	bls.n	8006a02 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2204      	movs	r2, #4
 80069fc:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	68db      	ldr	r3, [r3, #12]
 8006a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d102      	bne.n	8006a16 <RTC_EnterInitMode+0x64>
 8006a10:	7bfb      	ldrb	r3, [r7, #15]
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	d1e8      	bne.n	80069e8 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8006a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3710      	adds	r7, #16
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a28:	2300      	movs	r3, #0
 8006a2a:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	68da      	ldr	r2, [r3, #12]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a3a:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	689b      	ldr	r3, [r3, #8]
 8006a42:	f003 0320 	and.w	r3, r3, #32
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10a      	bne.n	8006a60 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f7ff ff89 	bl	8006962 <HAL_RTC_WaitForSynchro>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d004      	beq.n	8006a60 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2204      	movs	r2, #4
 8006a5a:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8006a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b085      	sub	sp, #20
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	4603      	mov	r3, r0
 8006a72:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8006a74:	2300      	movs	r3, #0
 8006a76:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 8006a78:	e005      	b.n	8006a86 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006a7a:	7bfb      	ldrb	r3, [r7, #15]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8006a80:	79fb      	ldrb	r3, [r7, #7]
 8006a82:	3b0a      	subs	r3, #10
 8006a84:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8006a86:	79fb      	ldrb	r3, [r7, #7]
 8006a88:	2b09      	cmp	r3, #9
 8006a8a:	d8f6      	bhi.n	8006a7a <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8006a8c:	7bfb      	ldrb	r3, [r7, #15]
 8006a8e:	011b      	lsls	r3, r3, #4
 8006a90:	b2da      	uxtb	r2, r3
 8006a92:	79fb      	ldrb	r3, [r7, #7]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	b2db      	uxtb	r3, r3
}
 8006a98:	4618      	mov	r0, r3
 8006a9a:	3714      	adds	r7, #20
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	4603      	mov	r3, r0
 8006aac:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006ab2:	79fb      	ldrb	r3, [r7, #7]
 8006ab4:	091b      	lsrs	r3, r3, #4
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	461a      	mov	r2, r3
 8006aba:	0092      	lsls	r2, r2, #2
 8006abc:	4413      	add	r3, r2
 8006abe:	005b      	lsls	r3, r3, #1
 8006ac0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8006ac2:	79fb      	ldrb	r3, [r7, #7]
 8006ac4:	f003 030f 	and.w	r3, r3, #15
 8006ac8:	b2da      	uxtb	r2, r3
 8006aca:	7bfb      	ldrb	r3, [r7, #15]
 8006acc:	4413      	add	r3, r2
 8006ace:	b2db      	uxtb	r3, r3
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3714      	adds	r7, #20
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ada:	4770      	bx	lr

08006adc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b082      	sub	sp, #8
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d101      	bne.n	8006af0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
 8006aee:	e025      	b.n	8006b3c <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d106      	bne.n	8006b0a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f7fa fd9b 	bl	8001640 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2202      	movs	r2, #2
 8006b0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	3304      	adds	r3, #4
 8006b1a:	4619      	mov	r1, r3
 8006b1c:	4610      	mov	r0, r2
 8006b1e:	f001 fe91 	bl	8008844 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	6818      	ldr	r0, [r3, #0]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	6839      	ldr	r1, [r7, #0]
 8006b2e:	f001 fee6 	bl	80088fe <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3708      	adds	r7, #8
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b086      	sub	sp, #24
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006b56:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8006b58:	7dfb      	ldrb	r3, [r7, #23]
 8006b5a:	2b02      	cmp	r3, #2
 8006b5c:	d101      	bne.n	8006b62 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8006b5e:	2302      	movs	r3, #2
 8006b60:	e021      	b.n	8006ba6 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8006b62:	7dfb      	ldrb	r3, [r7, #23]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d002      	beq.n	8006b6e <HAL_SDRAM_SendCommand+0x2a>
 8006b68:	7dfb      	ldrb	r3, [r7, #23]
 8006b6a:	2b05      	cmp	r3, #5
 8006b6c:	d118      	bne.n	8006ba0 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2202      	movs	r2, #2
 8006b72:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	68b9      	ldr	r1, [r7, #8]
 8006b7e:	4618      	mov	r0, r3
 8006b80:	f001 ff26 	bl	80089d0 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2b02      	cmp	r3, #2
 8006b8a:	d104      	bne.n	8006b96 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	2205      	movs	r2, #5
 8006b90:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006b94:	e006      	b.n	8006ba4 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	2201      	movs	r2, #1
 8006b9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8006b9e:	e001      	b.n	8006ba4 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	e000      	b.n	8006ba6 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	3718      	adds	r7, #24
 8006baa:	46bd      	mov	sp, r7
 8006bac:	bd80      	pop	{r7, pc}

08006bae <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b082      	sub	sp, #8
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
 8006bb6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d101      	bne.n	8006bc8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	e016      	b.n	8006bf6 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d10f      	bne.n	8006bf4 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2202      	movs	r2, #2
 8006bd8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	6839      	ldr	r1, [r7, #0]
 8006be2:	4618      	mov	r0, r3
 8006be4:	f001 ff31 	bl	8008a4a <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2201      	movs	r2, #1
 8006bec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	e000      	b.n	8006bf6 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
}
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	3708      	adds	r7, #8
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	bd80      	pop	{r7, pc}

08006bfe <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006bfe:	b580      	push	{r7, lr}
 8006c00:	b082      	sub	sp, #8
 8006c02:	af00      	add	r7, sp, #0
 8006c04:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d101      	bne.n	8006c10 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	e07b      	b.n	8006d08 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d108      	bne.n	8006c2a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c20:	d009      	beq.n	8006c36 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	61da      	str	r2, [r3, #28]
 8006c28:	e005      	b.n	8006c36 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c42:	b2db      	uxtb	r3, r3
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d106      	bne.n	8006c56 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	f7fa fb93 	bl	800137c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2202      	movs	r2, #2
 8006c5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c6c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006c7e:	431a      	orrs	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	68db      	ldr	r3, [r3, #12]
 8006c84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c88:	431a      	orrs	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	f003 0302 	and.w	r3, r3, #2
 8006c92:	431a      	orrs	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	695b      	ldr	r3, [r3, #20]
 8006c98:	f003 0301 	and.w	r3, r3, #1
 8006c9c:	431a      	orrs	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006ca6:	431a      	orrs	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	69db      	ldr	r3, [r3, #28]
 8006cac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cb0:	431a      	orrs	r2, r3
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	6a1b      	ldr	r3, [r3, #32]
 8006cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cba:	ea42 0103 	orr.w	r1, r2, r3
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cc2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	699b      	ldr	r3, [r3, #24]
 8006cd2:	0c1b      	lsrs	r3, r3, #16
 8006cd4:	f003 0104 	and.w	r1, r3, #4
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cdc:	f003 0210 	and.w	r2, r3, #16
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	430a      	orrs	r2, r1
 8006ce6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	69da      	ldr	r2, [r3, #28]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cf6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2201      	movs	r2, #1
 8006d02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006d06:	2300      	movs	r3, #0
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3708      	adds	r7, #8
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b082      	sub	sp, #8
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d101      	bne.n	8006d22 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8006d1e:	2301      	movs	r3, #1
 8006d20:	e01a      	b.n	8006d58 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2202      	movs	r2, #2
 8006d26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d38:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f7fa fb66 	bl	800140c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8006d56:	2300      	movs	r3, #0
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3708      	adds	r7, #8
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}

08006d60 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b088      	sub	sp, #32
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	60b9      	str	r1, [r7, #8]
 8006d6a:	603b      	str	r3, [r7, #0]
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d70:	2300      	movs	r3, #0
 8006d72:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d101      	bne.n	8006d82 <HAL_SPI_Transmit+0x22>
 8006d7e:	2302      	movs	r3, #2
 8006d80:	e126      	b.n	8006fd0 <HAL_SPI_Transmit+0x270>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2201      	movs	r2, #1
 8006d86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d8a:	f7fb fc43 	bl	8002614 <HAL_GetTick>
 8006d8e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006d90:	88fb      	ldrh	r3, [r7, #6]
 8006d92:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d002      	beq.n	8006da6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006da0:	2302      	movs	r3, #2
 8006da2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006da4:	e10b      	b.n	8006fbe <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d002      	beq.n	8006db2 <HAL_SPI_Transmit+0x52>
 8006dac:	88fb      	ldrh	r3, [r7, #6]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d102      	bne.n	8006db8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006db6:	e102      	b.n	8006fbe <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2203      	movs	r2, #3
 8006dbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	68ba      	ldr	r2, [r7, #8]
 8006dca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	88fa      	ldrh	r2, [r7, #6]
 8006dd0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	88fa      	ldrh	r2, [r7, #6]
 8006dd6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2200      	movs	r2, #0
 8006dee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2200      	movs	r2, #0
 8006df4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dfe:	d10f      	bne.n	8006e20 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	681a      	ldr	r2, [r3, #0]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e0e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006e1e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e2a:	2b40      	cmp	r3, #64	; 0x40
 8006e2c:	d007      	beq.n	8006e3e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e3c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e46:	d14b      	bne.n	8006ee0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d002      	beq.n	8006e56 <HAL_SPI_Transmit+0xf6>
 8006e50:	8afb      	ldrh	r3, [r7, #22]
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d13e      	bne.n	8006ed4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e5a:	881a      	ldrh	r2, [r3, #0]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e66:	1c9a      	adds	r2, r3, #2
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e70:	b29b      	uxth	r3, r3
 8006e72:	3b01      	subs	r3, #1
 8006e74:	b29a      	uxth	r2, r3
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006e7a:	e02b      	b.n	8006ed4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	f003 0302 	and.w	r3, r3, #2
 8006e86:	2b02      	cmp	r3, #2
 8006e88:	d112      	bne.n	8006eb0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e8e:	881a      	ldrh	r2, [r3, #0]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e9a:	1c9a      	adds	r2, r3, #2
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	3b01      	subs	r3, #1
 8006ea8:	b29a      	uxth	r2, r3
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	86da      	strh	r2, [r3, #54]	; 0x36
 8006eae:	e011      	b.n	8006ed4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006eb0:	f7fb fbb0 	bl	8002614 <HAL_GetTick>
 8006eb4:	4602      	mov	r2, r0
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	1ad3      	subs	r3, r2, r3
 8006eba:	683a      	ldr	r2, [r7, #0]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d803      	bhi.n	8006ec8 <HAL_SPI_Transmit+0x168>
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ec6:	d102      	bne.n	8006ece <HAL_SPI_Transmit+0x16e>
 8006ec8:	683b      	ldr	r3, [r7, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d102      	bne.n	8006ed4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006ed2:	e074      	b.n	8006fbe <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ed8:	b29b      	uxth	r3, r3
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d1ce      	bne.n	8006e7c <HAL_SPI_Transmit+0x11c>
 8006ede:	e04c      	b.n	8006f7a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d002      	beq.n	8006eee <HAL_SPI_Transmit+0x18e>
 8006ee8:	8afb      	ldrh	r3, [r7, #22]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d140      	bne.n	8006f70 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	330c      	adds	r3, #12
 8006ef8:	7812      	ldrb	r2, [r2, #0]
 8006efa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f00:	1c5a      	adds	r2, r3, #1
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006f14:	e02c      	b.n	8006f70 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	f003 0302 	and.w	r3, r3, #2
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d113      	bne.n	8006f4c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	330c      	adds	r3, #12
 8006f2e:	7812      	ldrb	r2, [r2, #0]
 8006f30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f36:	1c5a      	adds	r2, r3, #1
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	3b01      	subs	r3, #1
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	86da      	strh	r2, [r3, #54]	; 0x36
 8006f4a:	e011      	b.n	8006f70 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f4c:	f7fb fb62 	bl	8002614 <HAL_GetTick>
 8006f50:	4602      	mov	r2, r0
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	683a      	ldr	r2, [r7, #0]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d803      	bhi.n	8006f64 <HAL_SPI_Transmit+0x204>
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f62:	d102      	bne.n	8006f6a <HAL_SPI_Transmit+0x20a>
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d102      	bne.n	8006f70 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006f6a:	2303      	movs	r3, #3
 8006f6c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006f6e:	e026      	b.n	8006fbe <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1cd      	bne.n	8006f16 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f7a:	69ba      	ldr	r2, [r7, #24]
 8006f7c:	6839      	ldr	r1, [r7, #0]
 8006f7e:	68f8      	ldr	r0, [r7, #12]
 8006f80:	f000 fbda 	bl	8007738 <SPI_EndRxTxTransaction>
 8006f84:	4603      	mov	r3, r0
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d002      	beq.n	8006f90 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2220      	movs	r2, #32
 8006f8e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d10a      	bne.n	8006fae <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f98:	2300      	movs	r3, #0
 8006f9a:	613b      	str	r3, [r7, #16]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	613b      	str	r3, [r7, #16]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	613b      	str	r3, [r7, #16]
 8006fac:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d002      	beq.n	8006fbc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	77fb      	strb	r3, [r7, #31]
 8006fba:	e000      	b.n	8006fbe <HAL_SPI_Transmit+0x25e>
  }

error:
 8006fbc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2201      	movs	r2, #1
 8006fc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006fce:	7ffb      	ldrb	r3, [r7, #31]
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3720      	adds	r7, #32
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b088      	sub	sp, #32
 8006fdc:	af02      	add	r7, sp, #8
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	603b      	str	r3, [r7, #0]
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	685b      	ldr	r3, [r3, #4]
 8006ff0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ff4:	d112      	bne.n	800701c <HAL_SPI_Receive+0x44>
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	689b      	ldr	r3, [r3, #8]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d10e      	bne.n	800701c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2204      	movs	r2, #4
 8007002:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8007006:	88fa      	ldrh	r2, [r7, #6]
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	9300      	str	r3, [sp, #0]
 800700c:	4613      	mov	r3, r2
 800700e:	68ba      	ldr	r2, [r7, #8]
 8007010:	68b9      	ldr	r1, [r7, #8]
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	f000 f8f1 	bl	80071fa <HAL_SPI_TransmitReceive>
 8007018:	4603      	mov	r3, r0
 800701a:	e0ea      	b.n	80071f2 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007022:	2b01      	cmp	r3, #1
 8007024:	d101      	bne.n	800702a <HAL_SPI_Receive+0x52>
 8007026:	2302      	movs	r3, #2
 8007028:	e0e3      	b.n	80071f2 <HAL_SPI_Receive+0x21a>
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	2201      	movs	r2, #1
 800702e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007032:	f7fb faef 	bl	8002614 <HAL_GetTick>
 8007036:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800703e:	b2db      	uxtb	r3, r3
 8007040:	2b01      	cmp	r3, #1
 8007042:	d002      	beq.n	800704a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8007044:	2302      	movs	r3, #2
 8007046:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007048:	e0ca      	b.n	80071e0 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d002      	beq.n	8007056 <HAL_SPI_Receive+0x7e>
 8007050:	88fb      	ldrh	r3, [r7, #6]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d102      	bne.n	800705c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	75fb      	strb	r3, [r7, #23]
    goto error;
 800705a:	e0c1      	b.n	80071e0 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	2204      	movs	r2, #4
 8007060:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	68ba      	ldr	r2, [r7, #8]
 800706e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	88fa      	ldrh	r2, [r7, #6]
 8007074:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	88fa      	ldrh	r2, [r7, #6]
 800707a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2200      	movs	r2, #0
 8007080:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2200      	movs	r2, #0
 800708c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2200      	movs	r2, #0
 8007092:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2200      	movs	r2, #0
 8007098:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80070a2:	d10f      	bne.n	80070c4 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80070b2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681a      	ldr	r2, [r3, #0]
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80070c2:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ce:	2b40      	cmp	r3, #64	; 0x40
 80070d0:	d007      	beq.n	80070e2 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	681a      	ldr	r2, [r3, #0]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070e0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d162      	bne.n	80071b0 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80070ea:	e02e      	b.n	800714a <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	f003 0301 	and.w	r3, r3, #1
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d115      	bne.n	8007126 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f103 020c 	add.w	r2, r3, #12
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007106:	7812      	ldrb	r2, [r2, #0]
 8007108:	b2d2      	uxtb	r2, r2
 800710a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007110:	1c5a      	adds	r2, r3, #1
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800711a:	b29b      	uxth	r3, r3
 800711c:	3b01      	subs	r3, #1
 800711e:	b29a      	uxth	r2, r3
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007124:	e011      	b.n	800714a <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007126:	f7fb fa75 	bl	8002614 <HAL_GetTick>
 800712a:	4602      	mov	r2, r0
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	1ad3      	subs	r3, r2, r3
 8007130:	683a      	ldr	r2, [r7, #0]
 8007132:	429a      	cmp	r2, r3
 8007134:	d803      	bhi.n	800713e <HAL_SPI_Receive+0x166>
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800713c:	d102      	bne.n	8007144 <HAL_SPI_Receive+0x16c>
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d102      	bne.n	800714a <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007148:	e04a      	b.n	80071e0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800714e:	b29b      	uxth	r3, r3
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1cb      	bne.n	80070ec <HAL_SPI_Receive+0x114>
 8007154:	e031      	b.n	80071ba <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	f003 0301 	and.w	r3, r3, #1
 8007160:	2b01      	cmp	r3, #1
 8007162:	d113      	bne.n	800718c <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68da      	ldr	r2, [r3, #12]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716e:	b292      	uxth	r2, r2
 8007170:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007176:	1c9a      	adds	r2, r3, #2
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007180:	b29b      	uxth	r3, r3
 8007182:	3b01      	subs	r3, #1
 8007184:	b29a      	uxth	r2, r3
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	87da      	strh	r2, [r3, #62]	; 0x3e
 800718a:	e011      	b.n	80071b0 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800718c:	f7fb fa42 	bl	8002614 <HAL_GetTick>
 8007190:	4602      	mov	r2, r0
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	1ad3      	subs	r3, r2, r3
 8007196:	683a      	ldr	r2, [r7, #0]
 8007198:	429a      	cmp	r2, r3
 800719a:	d803      	bhi.n	80071a4 <HAL_SPI_Receive+0x1cc>
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071a2:	d102      	bne.n	80071aa <HAL_SPI_Receive+0x1d2>
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d102      	bne.n	80071b0 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 80071aa:	2303      	movs	r3, #3
 80071ac:	75fb      	strb	r3, [r7, #23]
          goto error;
 80071ae:	e017      	b.n	80071e0 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071b4:	b29b      	uxth	r3, r3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d1cd      	bne.n	8007156 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80071ba:	693a      	ldr	r2, [r7, #16]
 80071bc:	6839      	ldr	r1, [r7, #0]
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f000 fa54 	bl	800766c <SPI_EndRxTransaction>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d002      	beq.n	80071d0 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2220      	movs	r2, #32
 80071ce:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d002      	beq.n	80071de <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	75fb      	strb	r3, [r7, #23]
 80071dc:	e000      	b.n	80071e0 <HAL_SPI_Receive+0x208>
  }

error :
 80071de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2200      	movs	r2, #0
 80071ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80071f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3718      	adds	r7, #24
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b08c      	sub	sp, #48	; 0x30
 80071fe:	af00      	add	r7, sp, #0
 8007200:	60f8      	str	r0, [r7, #12]
 8007202:	60b9      	str	r1, [r7, #8]
 8007204:	607a      	str	r2, [r7, #4]
 8007206:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007208:	2301      	movs	r3, #1
 800720a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800720c:	2300      	movs	r3, #0
 800720e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007218:	2b01      	cmp	r3, #1
 800721a:	d101      	bne.n	8007220 <HAL_SPI_TransmitReceive+0x26>
 800721c:	2302      	movs	r3, #2
 800721e:	e18a      	b.n	8007536 <HAL_SPI_TransmitReceive+0x33c>
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007228:	f7fb f9f4 	bl	8002614 <HAL_GetTick>
 800722c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007234:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	685b      	ldr	r3, [r3, #4]
 800723c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800723e:	887b      	ldrh	r3, [r7, #2]
 8007240:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007242:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007246:	2b01      	cmp	r3, #1
 8007248:	d00f      	beq.n	800726a <HAL_SPI_TransmitReceive+0x70>
 800724a:	69fb      	ldr	r3, [r7, #28]
 800724c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007250:	d107      	bne.n	8007262 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d103      	bne.n	8007262 <HAL_SPI_TransmitReceive+0x68>
 800725a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800725e:	2b04      	cmp	r3, #4
 8007260:	d003      	beq.n	800726a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007262:	2302      	movs	r3, #2
 8007264:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007268:	e15b      	b.n	8007522 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d005      	beq.n	800727c <HAL_SPI_TransmitReceive+0x82>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d002      	beq.n	800727c <HAL_SPI_TransmitReceive+0x82>
 8007276:	887b      	ldrh	r3, [r7, #2]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d103      	bne.n	8007284 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800727c:	2301      	movs	r3, #1
 800727e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007282:	e14e      	b.n	8007522 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800728a:	b2db      	uxtb	r3, r3
 800728c:	2b04      	cmp	r3, #4
 800728e:	d003      	beq.n	8007298 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2205      	movs	r2, #5
 8007294:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2200      	movs	r2, #0
 800729c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	887a      	ldrh	r2, [r7, #2]
 80072a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	887a      	ldrh	r2, [r7, #2]
 80072ae:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	887a      	ldrh	r2, [r7, #2]
 80072ba:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	887a      	ldrh	r2, [r7, #2]
 80072c0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2200      	movs	r2, #0
 80072c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2200      	movs	r2, #0
 80072cc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d8:	2b40      	cmp	r3, #64	; 0x40
 80072da:	d007      	beq.n	80072ec <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80072ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072f4:	d178      	bne.n	80073e8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d002      	beq.n	8007304 <HAL_SPI_TransmitReceive+0x10a>
 80072fe:	8b7b      	ldrh	r3, [r7, #26]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d166      	bne.n	80073d2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007308:	881a      	ldrh	r2, [r3, #0]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007314:	1c9a      	adds	r2, r3, #2
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800731e:	b29b      	uxth	r3, r3
 8007320:	3b01      	subs	r3, #1
 8007322:	b29a      	uxth	r2, r3
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007328:	e053      	b.n	80073d2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	f003 0302 	and.w	r3, r3, #2
 8007334:	2b02      	cmp	r3, #2
 8007336:	d11b      	bne.n	8007370 <HAL_SPI_TransmitReceive+0x176>
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800733c:	b29b      	uxth	r3, r3
 800733e:	2b00      	cmp	r3, #0
 8007340:	d016      	beq.n	8007370 <HAL_SPI_TransmitReceive+0x176>
 8007342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007344:	2b01      	cmp	r3, #1
 8007346:	d113      	bne.n	8007370 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800734c:	881a      	ldrh	r2, [r3, #0]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007358:	1c9a      	adds	r2, r3, #2
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007362:	b29b      	uxth	r3, r3
 8007364:	3b01      	subs	r3, #1
 8007366:	b29a      	uxth	r2, r3
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800736c:	2300      	movs	r3, #0
 800736e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	689b      	ldr	r3, [r3, #8]
 8007376:	f003 0301 	and.w	r3, r3, #1
 800737a:	2b01      	cmp	r3, #1
 800737c:	d119      	bne.n	80073b2 <HAL_SPI_TransmitReceive+0x1b8>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007382:	b29b      	uxth	r3, r3
 8007384:	2b00      	cmp	r3, #0
 8007386:	d014      	beq.n	80073b2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	68da      	ldr	r2, [r3, #12]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007392:	b292      	uxth	r2, r2
 8007394:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800739a:	1c9a      	adds	r2, r3, #2
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	3b01      	subs	r3, #1
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80073ae:	2301      	movs	r3, #1
 80073b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80073b2:	f7fb f92f 	bl	8002614 <HAL_GetTick>
 80073b6:	4602      	mov	r2, r0
 80073b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ba:	1ad3      	subs	r3, r2, r3
 80073bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80073be:	429a      	cmp	r2, r3
 80073c0:	d807      	bhi.n	80073d2 <HAL_SPI_TransmitReceive+0x1d8>
 80073c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073c8:	d003      	beq.n	80073d2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80073ca:	2303      	movs	r3, #3
 80073cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80073d0:	e0a7      	b.n	8007522 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d1a6      	bne.n	800732a <HAL_SPI_TransmitReceive+0x130>
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1a1      	bne.n	800732a <HAL_SPI_TransmitReceive+0x130>
 80073e6:	e07c      	b.n	80074e2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	685b      	ldr	r3, [r3, #4]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d002      	beq.n	80073f6 <HAL_SPI_TransmitReceive+0x1fc>
 80073f0:	8b7b      	ldrh	r3, [r7, #26]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d16b      	bne.n	80074ce <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	330c      	adds	r3, #12
 8007400:	7812      	ldrb	r2, [r2, #0]
 8007402:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007408:	1c5a      	adds	r2, r3, #1
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007412:	b29b      	uxth	r3, r3
 8007414:	3b01      	subs	r3, #1
 8007416:	b29a      	uxth	r2, r3
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800741c:	e057      	b.n	80074ce <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	f003 0302 	and.w	r3, r3, #2
 8007428:	2b02      	cmp	r3, #2
 800742a:	d11c      	bne.n	8007466 <HAL_SPI_TransmitReceive+0x26c>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007430:	b29b      	uxth	r3, r3
 8007432:	2b00      	cmp	r3, #0
 8007434:	d017      	beq.n	8007466 <HAL_SPI_TransmitReceive+0x26c>
 8007436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007438:	2b01      	cmp	r3, #1
 800743a:	d114      	bne.n	8007466 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	330c      	adds	r3, #12
 8007446:	7812      	ldrb	r2, [r2, #0]
 8007448:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744e:	1c5a      	adds	r2, r3, #1
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007458:	b29b      	uxth	r3, r3
 800745a:	3b01      	subs	r3, #1
 800745c:	b29a      	uxth	r2, r3
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007462:	2300      	movs	r3, #0
 8007464:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	689b      	ldr	r3, [r3, #8]
 800746c:	f003 0301 	and.w	r3, r3, #1
 8007470:	2b01      	cmp	r3, #1
 8007472:	d119      	bne.n	80074a8 <HAL_SPI_TransmitReceive+0x2ae>
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007478:	b29b      	uxth	r3, r3
 800747a:	2b00      	cmp	r3, #0
 800747c:	d014      	beq.n	80074a8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68da      	ldr	r2, [r3, #12]
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007488:	b2d2      	uxtb	r2, r2
 800748a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007490:	1c5a      	adds	r2, r3, #1
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800749a:	b29b      	uxth	r3, r3
 800749c:	3b01      	subs	r3, #1
 800749e:	b29a      	uxth	r2, r3
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80074a4:	2301      	movs	r3, #1
 80074a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80074a8:	f7fb f8b4 	bl	8002614 <HAL_GetTick>
 80074ac:	4602      	mov	r2, r0
 80074ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b0:	1ad3      	subs	r3, r2, r3
 80074b2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d803      	bhi.n	80074c0 <HAL_SPI_TransmitReceive+0x2c6>
 80074b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074be:	d102      	bne.n	80074c6 <HAL_SPI_TransmitReceive+0x2cc>
 80074c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d103      	bne.n	80074ce <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80074c6:	2303      	movs	r3, #3
 80074c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80074cc:	e029      	b.n	8007522 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d1a2      	bne.n	800741e <HAL_SPI_TransmitReceive+0x224>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80074dc:	b29b      	uxth	r3, r3
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d19d      	bne.n	800741e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80074e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074e4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80074e6:	68f8      	ldr	r0, [r7, #12]
 80074e8:	f000 f926 	bl	8007738 <SPI_EndRxTxTransaction>
 80074ec:	4603      	mov	r3, r0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d006      	beq.n	8007500 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80074f2:	2301      	movs	r3, #1
 80074f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	2220      	movs	r2, #32
 80074fc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80074fe:	e010      	b.n	8007522 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	2b00      	cmp	r3, #0
 8007506:	d10b      	bne.n	8007520 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007508:	2300      	movs	r3, #0
 800750a:	617b      	str	r3, [r7, #20]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	617b      	str	r3, [r7, #20]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	689b      	ldr	r3, [r3, #8]
 800751a:	617b      	str	r3, [r7, #20]
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	e000      	b.n	8007522 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007520:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2200      	movs	r2, #0
 800752e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007532:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007536:	4618      	mov	r0, r3
 8007538:	3730      	adds	r7, #48	; 0x30
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800753e:	b480      	push	{r7}
 8007540:	b083      	sub	sp, #12
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800754c:	b2db      	uxtb	r3, r3
}
 800754e:	4618      	mov	r0, r3
 8007550:	370c      	adds	r7, #12
 8007552:	46bd      	mov	sp, r7
 8007554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007558:	4770      	bx	lr
	...

0800755c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b088      	sub	sp, #32
 8007560:	af00      	add	r7, sp, #0
 8007562:	60f8      	str	r0, [r7, #12]
 8007564:	60b9      	str	r1, [r7, #8]
 8007566:	603b      	str	r3, [r7, #0]
 8007568:	4613      	mov	r3, r2
 800756a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800756c:	f7fb f852 	bl	8002614 <HAL_GetTick>
 8007570:	4602      	mov	r2, r0
 8007572:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007574:	1a9b      	subs	r3, r3, r2
 8007576:	683a      	ldr	r2, [r7, #0]
 8007578:	4413      	add	r3, r2
 800757a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800757c:	f7fb f84a 	bl	8002614 <HAL_GetTick>
 8007580:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007582:	4b39      	ldr	r3, [pc, #228]	; (8007668 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	015b      	lsls	r3, r3, #5
 8007588:	0d1b      	lsrs	r3, r3, #20
 800758a:	69fa      	ldr	r2, [r7, #28]
 800758c:	fb02 f303 	mul.w	r3, r2, r3
 8007590:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007592:	e054      	b.n	800763e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800759a:	d050      	beq.n	800763e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800759c:	f7fb f83a 	bl	8002614 <HAL_GetTick>
 80075a0:	4602      	mov	r2, r0
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	1ad3      	subs	r3, r2, r3
 80075a6:	69fa      	ldr	r2, [r7, #28]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	d902      	bls.n	80075b2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d13d      	bne.n	800762e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	685a      	ldr	r2, [r3, #4]
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80075c0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075ca:	d111      	bne.n	80075f0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	689b      	ldr	r3, [r3, #8]
 80075d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075d4:	d004      	beq.n	80075e0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075de:	d107      	bne.n	80075f0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075ee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80075f8:	d10f      	bne.n	800761a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007608:	601a      	str	r2, [r3, #0]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	681a      	ldr	r2, [r3, #0]
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007618:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2201      	movs	r2, #1
 800761e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800762a:	2303      	movs	r3, #3
 800762c:	e017      	b.n	800765e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d101      	bne.n	8007638 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007634:	2300      	movs	r3, #0
 8007636:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	3b01      	subs	r3, #1
 800763c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	689a      	ldr	r2, [r3, #8]
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	4013      	ands	r3, r2
 8007648:	68ba      	ldr	r2, [r7, #8]
 800764a:	429a      	cmp	r2, r3
 800764c:	bf0c      	ite	eq
 800764e:	2301      	moveq	r3, #1
 8007650:	2300      	movne	r3, #0
 8007652:	b2db      	uxtb	r3, r3
 8007654:	461a      	mov	r2, r3
 8007656:	79fb      	ldrb	r3, [r7, #7]
 8007658:	429a      	cmp	r2, r3
 800765a:	d19b      	bne.n	8007594 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800765c:	2300      	movs	r3, #0
}
 800765e:	4618      	mov	r0, r3
 8007660:	3720      	adds	r7, #32
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	20000000 	.word	0x20000000

0800766c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800766c:	b580      	push	{r7, lr}
 800766e:	b086      	sub	sp, #24
 8007670:	af02      	add	r7, sp, #8
 8007672:	60f8      	str	r0, [r7, #12]
 8007674:	60b9      	str	r1, [r7, #8]
 8007676:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007680:	d111      	bne.n	80076a6 <SPI_EndRxTransaction+0x3a>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800768a:	d004      	beq.n	8007696 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007694:	d107      	bne.n	80076a6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076a4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076ae:	d12a      	bne.n	8007706 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076b8:	d012      	beq.n	80076e0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	9300      	str	r3, [sp, #0]
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	2200      	movs	r2, #0
 80076c2:	2180      	movs	r1, #128	; 0x80
 80076c4:	68f8      	ldr	r0, [r7, #12]
 80076c6:	f7ff ff49 	bl	800755c <SPI_WaitFlagStateUntilTimeout>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d02d      	beq.n	800772c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076d4:	f043 0220 	orr.w	r2, r3, #32
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80076dc:	2303      	movs	r3, #3
 80076de:	e026      	b.n	800772e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	9300      	str	r3, [sp, #0]
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	2200      	movs	r2, #0
 80076e8:	2101      	movs	r1, #1
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f7ff ff36 	bl	800755c <SPI_WaitFlagStateUntilTimeout>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d01a      	beq.n	800772c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076fa:	f043 0220 	orr.w	r2, r3, #32
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007702:	2303      	movs	r3, #3
 8007704:	e013      	b.n	800772e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	9300      	str	r3, [sp, #0]
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	2200      	movs	r2, #0
 800770e:	2101      	movs	r1, #1
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f7ff ff23 	bl	800755c <SPI_WaitFlagStateUntilTimeout>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d007      	beq.n	800772c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007720:	f043 0220 	orr.w	r2, r3, #32
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007728:	2303      	movs	r3, #3
 800772a:	e000      	b.n	800772e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
	...

08007738 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b088      	sub	sp, #32
 800773c:	af02      	add	r7, sp, #8
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007744:	4b1b      	ldr	r3, [pc, #108]	; (80077b4 <SPI_EndRxTxTransaction+0x7c>)
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a1b      	ldr	r2, [pc, #108]	; (80077b8 <SPI_EndRxTxTransaction+0x80>)
 800774a:	fba2 2303 	umull	r2, r3, r2, r3
 800774e:	0d5b      	lsrs	r3, r3, #21
 8007750:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007754:	fb02 f303 	mul.w	r3, r2, r3
 8007758:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007762:	d112      	bne.n	800778a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	9300      	str	r3, [sp, #0]
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	2200      	movs	r2, #0
 800776c:	2180      	movs	r1, #128	; 0x80
 800776e:	68f8      	ldr	r0, [r7, #12]
 8007770:	f7ff fef4 	bl	800755c <SPI_WaitFlagStateUntilTimeout>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d016      	beq.n	80077a8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800777e:	f043 0220 	orr.w	r2, r3, #32
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007786:	2303      	movs	r3, #3
 8007788:	e00f      	b.n	80077aa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d00a      	beq.n	80077a6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	3b01      	subs	r3, #1
 8007794:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	689b      	ldr	r3, [r3, #8]
 800779c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077a0:	2b80      	cmp	r3, #128	; 0x80
 80077a2:	d0f2      	beq.n	800778a <SPI_EndRxTxTransaction+0x52>
 80077a4:	e000      	b.n	80077a8 <SPI_EndRxTxTransaction+0x70>
        break;
 80077a6:	bf00      	nop
  }

  return HAL_OK;
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3718      	adds	r7, #24
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	20000000 	.word	0x20000000
 80077b8:	165e9f81 	.word	0x165e9f81

080077bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d101      	bne.n	80077ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077ca:	2301      	movs	r3, #1
 80077cc:	e041      	b.n	8007852 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077d4:	b2db      	uxtb	r3, r3
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d106      	bne.n	80077e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f7f9 fe30 	bl	8001448 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2202      	movs	r2, #2
 80077ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	3304      	adds	r3, #4
 80077f8:	4619      	mov	r1, r3
 80077fa:	4610      	mov	r0, r2
 80077fc:	f000 fa96 	bl	8007d2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2201      	movs	r2, #1
 800780c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2201      	movs	r2, #1
 800781c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2201      	movs	r2, #1
 8007824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2201      	movs	r2, #1
 8007834:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2201      	movs	r2, #1
 800784c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3708      	adds	r7, #8
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}
	...

0800785c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800786a:	b2db      	uxtb	r3, r3
 800786c:	2b01      	cmp	r3, #1
 800786e:	d001      	beq.n	8007874 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e04e      	b.n	8007912 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	2202      	movs	r2, #2
 8007878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68da      	ldr	r2, [r3, #12]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f042 0201 	orr.w	r2, r2, #1
 800788a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4a23      	ldr	r2, [pc, #140]	; (8007920 <HAL_TIM_Base_Start_IT+0xc4>)
 8007892:	4293      	cmp	r3, r2
 8007894:	d022      	beq.n	80078dc <HAL_TIM_Base_Start_IT+0x80>
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800789e:	d01d      	beq.n	80078dc <HAL_TIM_Base_Start_IT+0x80>
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	4a1f      	ldr	r2, [pc, #124]	; (8007924 <HAL_TIM_Base_Start_IT+0xc8>)
 80078a6:	4293      	cmp	r3, r2
 80078a8:	d018      	beq.n	80078dc <HAL_TIM_Base_Start_IT+0x80>
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a1e      	ldr	r2, [pc, #120]	; (8007928 <HAL_TIM_Base_Start_IT+0xcc>)
 80078b0:	4293      	cmp	r3, r2
 80078b2:	d013      	beq.n	80078dc <HAL_TIM_Base_Start_IT+0x80>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a1c      	ldr	r2, [pc, #112]	; (800792c <HAL_TIM_Base_Start_IT+0xd0>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d00e      	beq.n	80078dc <HAL_TIM_Base_Start_IT+0x80>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a1b      	ldr	r2, [pc, #108]	; (8007930 <HAL_TIM_Base_Start_IT+0xd4>)
 80078c4:	4293      	cmp	r3, r2
 80078c6:	d009      	beq.n	80078dc <HAL_TIM_Base_Start_IT+0x80>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a19      	ldr	r2, [pc, #100]	; (8007934 <HAL_TIM_Base_Start_IT+0xd8>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d004      	beq.n	80078dc <HAL_TIM_Base_Start_IT+0x80>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a18      	ldr	r2, [pc, #96]	; (8007938 <HAL_TIM_Base_Start_IT+0xdc>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d111      	bne.n	8007900 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	689b      	ldr	r3, [r3, #8]
 80078e2:	f003 0307 	and.w	r3, r3, #7
 80078e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2b06      	cmp	r3, #6
 80078ec:	d010      	beq.n	8007910 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f042 0201 	orr.w	r2, r2, #1
 80078fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078fe:	e007      	b.n	8007910 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f042 0201 	orr.w	r2, r2, #1
 800790e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3714      	adds	r7, #20
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr
 800791e:	bf00      	nop
 8007920:	40010000 	.word	0x40010000
 8007924:	40000400 	.word	0x40000400
 8007928:	40000800 	.word	0x40000800
 800792c:	40000c00 	.word	0x40000c00
 8007930:	40010400 	.word	0x40010400
 8007934:	40014000 	.word	0x40014000
 8007938:	40001800 	.word	0x40001800

0800793c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	f003 0302 	and.w	r3, r3, #2
 800794e:	2b02      	cmp	r3, #2
 8007950:	d122      	bne.n	8007998 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	68db      	ldr	r3, [r3, #12]
 8007958:	f003 0302 	and.w	r3, r3, #2
 800795c:	2b02      	cmp	r3, #2
 800795e:	d11b      	bne.n	8007998 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f06f 0202 	mvn.w	r2, #2
 8007968:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2201      	movs	r2, #1
 800796e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	699b      	ldr	r3, [r3, #24]
 8007976:	f003 0303 	and.w	r3, r3, #3
 800797a:	2b00      	cmp	r3, #0
 800797c:	d003      	beq.n	8007986 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 f9b5 	bl	8007cee <HAL_TIM_IC_CaptureCallback>
 8007984:	e005      	b.n	8007992 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f000 f9a7 	bl	8007cda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 f9b8 	bl	8007d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	2200      	movs	r2, #0
 8007996:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	f003 0304 	and.w	r3, r3, #4
 80079a2:	2b04      	cmp	r3, #4
 80079a4:	d122      	bne.n	80079ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	68db      	ldr	r3, [r3, #12]
 80079ac:	f003 0304 	and.w	r3, r3, #4
 80079b0:	2b04      	cmp	r3, #4
 80079b2:	d11b      	bne.n	80079ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f06f 0204 	mvn.w	r2, #4
 80079bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2202      	movs	r2, #2
 80079c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	699b      	ldr	r3, [r3, #24]
 80079ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d003      	beq.n	80079da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 f98b 	bl	8007cee <HAL_TIM_IC_CaptureCallback>
 80079d8:	e005      	b.n	80079e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	f000 f97d 	bl	8007cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f000 f98e 	bl	8007d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	2200      	movs	r2, #0
 80079ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	f003 0308 	and.w	r3, r3, #8
 80079f6:	2b08      	cmp	r3, #8
 80079f8:	d122      	bne.n	8007a40 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	f003 0308 	and.w	r3, r3, #8
 8007a04:	2b08      	cmp	r3, #8
 8007a06:	d11b      	bne.n	8007a40 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f06f 0208 	mvn.w	r2, #8
 8007a10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2204      	movs	r2, #4
 8007a16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	69db      	ldr	r3, [r3, #28]
 8007a1e:	f003 0303 	and.w	r3, r3, #3
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d003      	beq.n	8007a2e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f961 	bl	8007cee <HAL_TIM_IC_CaptureCallback>
 8007a2c:	e005      	b.n	8007a3a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f953 	bl	8007cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 f964 	bl	8007d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	f003 0310 	and.w	r3, r3, #16
 8007a4a:	2b10      	cmp	r3, #16
 8007a4c:	d122      	bne.n	8007a94 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	f003 0310 	and.w	r3, r3, #16
 8007a58:	2b10      	cmp	r3, #16
 8007a5a:	d11b      	bne.n	8007a94 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f06f 0210 	mvn.w	r2, #16
 8007a64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2208      	movs	r2, #8
 8007a6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	69db      	ldr	r3, [r3, #28]
 8007a72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d003      	beq.n	8007a82 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 f937 	bl	8007cee <HAL_TIM_IC_CaptureCallback>
 8007a80:	e005      	b.n	8007a8e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 f929 	bl	8007cda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 f93a 	bl	8007d02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	691b      	ldr	r3, [r3, #16]
 8007a9a:	f003 0301 	and.w	r3, r3, #1
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d10e      	bne.n	8007ac0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	f003 0301 	and.w	r3, r3, #1
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d107      	bne.n	8007ac0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f06f 0201 	mvn.w	r2, #1
 8007ab8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f7f9 fa0c 	bl	8000ed8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	691b      	ldr	r3, [r3, #16]
 8007ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aca:	2b80      	cmp	r3, #128	; 0x80
 8007acc:	d10e      	bne.n	8007aec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ad8:	2b80      	cmp	r3, #128	; 0x80
 8007ada:	d107      	bne.n	8007aec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fae0 	bl	80080ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	691b      	ldr	r3, [r3, #16]
 8007af2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007af6:	2b40      	cmp	r3, #64	; 0x40
 8007af8:	d10e      	bne.n	8007b18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b04:	2b40      	cmp	r3, #64	; 0x40
 8007b06:	d107      	bne.n	8007b18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 f8ff 	bl	8007d16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	f003 0320 	and.w	r3, r3, #32
 8007b22:	2b20      	cmp	r3, #32
 8007b24:	d10e      	bne.n	8007b44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	f003 0320 	and.w	r3, r3, #32
 8007b30:	2b20      	cmp	r3, #32
 8007b32:	d107      	bne.n	8007b44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f06f 0220 	mvn.w	r2, #32
 8007b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 faaa 	bl	8008098 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b44:	bf00      	nop
 8007b46:	3708      	adds	r7, #8
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
 8007b54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b56:	2300      	movs	r3, #0
 8007b58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d101      	bne.n	8007b68 <HAL_TIM_ConfigClockSource+0x1c>
 8007b64:	2302      	movs	r3, #2
 8007b66:	e0b4      	b.n	8007cd2 <HAL_TIM_ConfigClockSource+0x186>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2202      	movs	r2, #2
 8007b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007b86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	68ba      	ldr	r2, [r7, #8]
 8007b96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ba0:	d03e      	beq.n	8007c20 <HAL_TIM_ConfigClockSource+0xd4>
 8007ba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ba6:	f200 8087 	bhi.w	8007cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8007baa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bae:	f000 8086 	beq.w	8007cbe <HAL_TIM_ConfigClockSource+0x172>
 8007bb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bb6:	d87f      	bhi.n	8007cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8007bb8:	2b70      	cmp	r3, #112	; 0x70
 8007bba:	d01a      	beq.n	8007bf2 <HAL_TIM_ConfigClockSource+0xa6>
 8007bbc:	2b70      	cmp	r3, #112	; 0x70
 8007bbe:	d87b      	bhi.n	8007cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8007bc0:	2b60      	cmp	r3, #96	; 0x60
 8007bc2:	d050      	beq.n	8007c66 <HAL_TIM_ConfigClockSource+0x11a>
 8007bc4:	2b60      	cmp	r3, #96	; 0x60
 8007bc6:	d877      	bhi.n	8007cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8007bc8:	2b50      	cmp	r3, #80	; 0x50
 8007bca:	d03c      	beq.n	8007c46 <HAL_TIM_ConfigClockSource+0xfa>
 8007bcc:	2b50      	cmp	r3, #80	; 0x50
 8007bce:	d873      	bhi.n	8007cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8007bd0:	2b40      	cmp	r3, #64	; 0x40
 8007bd2:	d058      	beq.n	8007c86 <HAL_TIM_ConfigClockSource+0x13a>
 8007bd4:	2b40      	cmp	r3, #64	; 0x40
 8007bd6:	d86f      	bhi.n	8007cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8007bd8:	2b30      	cmp	r3, #48	; 0x30
 8007bda:	d064      	beq.n	8007ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8007bdc:	2b30      	cmp	r3, #48	; 0x30
 8007bde:	d86b      	bhi.n	8007cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8007be0:	2b20      	cmp	r3, #32
 8007be2:	d060      	beq.n	8007ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8007be4:	2b20      	cmp	r3, #32
 8007be6:	d867      	bhi.n	8007cb8 <HAL_TIM_ConfigClockSource+0x16c>
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d05c      	beq.n	8007ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8007bec:	2b10      	cmp	r3, #16
 8007bee:	d05a      	beq.n	8007ca6 <HAL_TIM_ConfigClockSource+0x15a>
 8007bf0:	e062      	b.n	8007cb8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6818      	ldr	r0, [r3, #0]
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	6899      	ldr	r1, [r3, #8]
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	685a      	ldr	r2, [r3, #4]
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	f000 f9ad 	bl	8007f60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007c14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	68ba      	ldr	r2, [r7, #8]
 8007c1c:	609a      	str	r2, [r3, #8]
      break;
 8007c1e:	e04f      	b.n	8007cc0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6818      	ldr	r0, [r3, #0]
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	6899      	ldr	r1, [r3, #8]
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	685a      	ldr	r2, [r3, #4]
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	68db      	ldr	r3, [r3, #12]
 8007c30:	f000 f996 	bl	8007f60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	689a      	ldr	r2, [r3, #8]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c42:	609a      	str	r2, [r3, #8]
      break;
 8007c44:	e03c      	b.n	8007cc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6818      	ldr	r0, [r3, #0]
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	6859      	ldr	r1, [r3, #4]
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	461a      	mov	r2, r3
 8007c54:	f000 f90a 	bl	8007e6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2150      	movs	r1, #80	; 0x50
 8007c5e:	4618      	mov	r0, r3
 8007c60:	f000 f963 	bl	8007f2a <TIM_ITRx_SetConfig>
      break;
 8007c64:	e02c      	b.n	8007cc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6818      	ldr	r0, [r3, #0]
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	6859      	ldr	r1, [r3, #4]
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	461a      	mov	r2, r3
 8007c74:	f000 f929 	bl	8007eca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2160      	movs	r1, #96	; 0x60
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f000 f953 	bl	8007f2a <TIM_ITRx_SetConfig>
      break;
 8007c84:	e01c      	b.n	8007cc0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6818      	ldr	r0, [r3, #0]
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	6859      	ldr	r1, [r3, #4]
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	68db      	ldr	r3, [r3, #12]
 8007c92:	461a      	mov	r2, r3
 8007c94:	f000 f8ea 	bl	8007e6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	2140      	movs	r1, #64	; 0x40
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f000 f943 	bl	8007f2a <TIM_ITRx_SetConfig>
      break;
 8007ca4:	e00c      	b.n	8007cc0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	4619      	mov	r1, r3
 8007cb0:	4610      	mov	r0, r2
 8007cb2:	f000 f93a 	bl	8007f2a <TIM_ITRx_SetConfig>
      break;
 8007cb6:	e003      	b.n	8007cc0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	73fb      	strb	r3, [r7, #15]
      break;
 8007cbc:	e000      	b.n	8007cc0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007cbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cd2:	4618      	mov	r0, r3
 8007cd4:	3710      	adds	r7, #16
 8007cd6:	46bd      	mov	sp, r7
 8007cd8:	bd80      	pop	{r7, pc}

08007cda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007cda:	b480      	push	{r7}
 8007cdc:	b083      	sub	sp, #12
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ce2:	bf00      	nop
 8007ce4:	370c      	adds	r7, #12
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr

08007cee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007cee:	b480      	push	{r7}
 8007cf0:	b083      	sub	sp, #12
 8007cf2:	af00      	add	r7, sp, #0
 8007cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007cf6:	bf00      	nop
 8007cf8:	370c      	adds	r7, #12
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d00:	4770      	bx	lr

08007d02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d02:	b480      	push	{r7}
 8007d04:	b083      	sub	sp, #12
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d0a:	bf00      	nop
 8007d0c:	370c      	adds	r7, #12
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d14:	4770      	bx	lr

08007d16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d16:	b480      	push	{r7}
 8007d18:	b083      	sub	sp, #12
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d1e:	bf00      	nop
 8007d20:	370c      	adds	r7, #12
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
	...

08007d2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b085      	sub	sp, #20
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
 8007d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a40      	ldr	r2, [pc, #256]	; (8007e40 <TIM_Base_SetConfig+0x114>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d013      	beq.n	8007d6c <TIM_Base_SetConfig+0x40>
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d4a:	d00f      	beq.n	8007d6c <TIM_Base_SetConfig+0x40>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	4a3d      	ldr	r2, [pc, #244]	; (8007e44 <TIM_Base_SetConfig+0x118>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d00b      	beq.n	8007d6c <TIM_Base_SetConfig+0x40>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a3c      	ldr	r2, [pc, #240]	; (8007e48 <TIM_Base_SetConfig+0x11c>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d007      	beq.n	8007d6c <TIM_Base_SetConfig+0x40>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	4a3b      	ldr	r2, [pc, #236]	; (8007e4c <TIM_Base_SetConfig+0x120>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d003      	beq.n	8007d6c <TIM_Base_SetConfig+0x40>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	4a3a      	ldr	r2, [pc, #232]	; (8007e50 <TIM_Base_SetConfig+0x124>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d108      	bne.n	8007d7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007d74:	683b      	ldr	r3, [r7, #0]
 8007d76:	685b      	ldr	r3, [r3, #4]
 8007d78:	68fa      	ldr	r2, [r7, #12]
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4a2f      	ldr	r2, [pc, #188]	; (8007e40 <TIM_Base_SetConfig+0x114>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d02b      	beq.n	8007dde <TIM_Base_SetConfig+0xb2>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d8c:	d027      	beq.n	8007dde <TIM_Base_SetConfig+0xb2>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	4a2c      	ldr	r2, [pc, #176]	; (8007e44 <TIM_Base_SetConfig+0x118>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d023      	beq.n	8007dde <TIM_Base_SetConfig+0xb2>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	4a2b      	ldr	r2, [pc, #172]	; (8007e48 <TIM_Base_SetConfig+0x11c>)
 8007d9a:	4293      	cmp	r3, r2
 8007d9c:	d01f      	beq.n	8007dde <TIM_Base_SetConfig+0xb2>
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	4a2a      	ldr	r2, [pc, #168]	; (8007e4c <TIM_Base_SetConfig+0x120>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d01b      	beq.n	8007dde <TIM_Base_SetConfig+0xb2>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	4a29      	ldr	r2, [pc, #164]	; (8007e50 <TIM_Base_SetConfig+0x124>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d017      	beq.n	8007dde <TIM_Base_SetConfig+0xb2>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	4a28      	ldr	r2, [pc, #160]	; (8007e54 <TIM_Base_SetConfig+0x128>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d013      	beq.n	8007dde <TIM_Base_SetConfig+0xb2>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4a27      	ldr	r2, [pc, #156]	; (8007e58 <TIM_Base_SetConfig+0x12c>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d00f      	beq.n	8007dde <TIM_Base_SetConfig+0xb2>
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	4a26      	ldr	r2, [pc, #152]	; (8007e5c <TIM_Base_SetConfig+0x130>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d00b      	beq.n	8007dde <TIM_Base_SetConfig+0xb2>
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	4a25      	ldr	r2, [pc, #148]	; (8007e60 <TIM_Base_SetConfig+0x134>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d007      	beq.n	8007dde <TIM_Base_SetConfig+0xb2>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	4a24      	ldr	r2, [pc, #144]	; (8007e64 <TIM_Base_SetConfig+0x138>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d003      	beq.n	8007dde <TIM_Base_SetConfig+0xb2>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	4a23      	ldr	r2, [pc, #140]	; (8007e68 <TIM_Base_SetConfig+0x13c>)
 8007dda:	4293      	cmp	r3, r2
 8007ddc:	d108      	bne.n	8007df0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007de4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	68db      	ldr	r3, [r3, #12]
 8007dea:	68fa      	ldr	r2, [r7, #12]
 8007dec:	4313      	orrs	r3, r2
 8007dee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007df6:	683b      	ldr	r3, [r7, #0]
 8007df8:	695b      	ldr	r3, [r3, #20]
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	689a      	ldr	r2, [r3, #8]
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e0c:	683b      	ldr	r3, [r7, #0]
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	4a0a      	ldr	r2, [pc, #40]	; (8007e40 <TIM_Base_SetConfig+0x114>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d003      	beq.n	8007e24 <TIM_Base_SetConfig+0xf8>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	4a0c      	ldr	r2, [pc, #48]	; (8007e50 <TIM_Base_SetConfig+0x124>)
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d103      	bne.n	8007e2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	691a      	ldr	r2, [r3, #16]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2201      	movs	r2, #1
 8007e30:	615a      	str	r2, [r3, #20]
}
 8007e32:	bf00      	nop
 8007e34:	3714      	adds	r7, #20
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	40010000 	.word	0x40010000
 8007e44:	40000400 	.word	0x40000400
 8007e48:	40000800 	.word	0x40000800
 8007e4c:	40000c00 	.word	0x40000c00
 8007e50:	40010400 	.word	0x40010400
 8007e54:	40014000 	.word	0x40014000
 8007e58:	40014400 	.word	0x40014400
 8007e5c:	40014800 	.word	0x40014800
 8007e60:	40001800 	.word	0x40001800
 8007e64:	40001c00 	.word	0x40001c00
 8007e68:	40002000 	.word	0x40002000

08007e6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b087      	sub	sp, #28
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6a1b      	ldr	r3, [r3, #32]
 8007e7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	6a1b      	ldr	r3, [r3, #32]
 8007e82:	f023 0201 	bic.w	r2, r3, #1
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	699b      	ldr	r3, [r3, #24]
 8007e8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	011b      	lsls	r3, r3, #4
 8007e9c:	693a      	ldr	r2, [r7, #16]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	f023 030a 	bic.w	r3, r3, #10
 8007ea8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	693a      	ldr	r2, [r7, #16]
 8007eb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	697a      	ldr	r2, [r7, #20]
 8007ebc:	621a      	str	r2, [r3, #32]
}
 8007ebe:	bf00      	nop
 8007ec0:	371c      	adds	r7, #28
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr

08007eca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007eca:	b480      	push	{r7}
 8007ecc:	b087      	sub	sp, #28
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	60f8      	str	r0, [r7, #12]
 8007ed2:	60b9      	str	r1, [r7, #8]
 8007ed4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
 8007eda:	f023 0210 	bic.w	r2, r3, #16
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	699b      	ldr	r3, [r3, #24]
 8007ee6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6a1b      	ldr	r3, [r3, #32]
 8007eec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007eee:	697b      	ldr	r3, [r7, #20]
 8007ef0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007ef4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	031b      	lsls	r3, r3, #12
 8007efa:	697a      	ldr	r2, [r7, #20]
 8007efc:	4313      	orrs	r3, r2
 8007efe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007f08:	68bb      	ldr	r3, [r7, #8]
 8007f0a:	011b      	lsls	r3, r3, #4
 8007f0c:	693a      	ldr	r2, [r7, #16]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	697a      	ldr	r2, [r7, #20]
 8007f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	693a      	ldr	r2, [r7, #16]
 8007f1c:	621a      	str	r2, [r3, #32]
}
 8007f1e:	bf00      	nop
 8007f20:	371c      	adds	r7, #28
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr

08007f2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b085      	sub	sp, #20
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
 8007f32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	689b      	ldr	r3, [r3, #8]
 8007f38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007f42:	683a      	ldr	r2, [r7, #0]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	4313      	orrs	r3, r2
 8007f48:	f043 0307 	orr.w	r3, r3, #7
 8007f4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	68fa      	ldr	r2, [r7, #12]
 8007f52:	609a      	str	r2, [r3, #8]
}
 8007f54:	bf00      	nop
 8007f56:	3714      	adds	r7, #20
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5e:	4770      	bx	lr

08007f60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007f60:	b480      	push	{r7}
 8007f62:	b087      	sub	sp, #28
 8007f64:	af00      	add	r7, sp, #0
 8007f66:	60f8      	str	r0, [r7, #12]
 8007f68:	60b9      	str	r1, [r7, #8]
 8007f6a:	607a      	str	r2, [r7, #4]
 8007f6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	021a      	lsls	r2, r3, #8
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	431a      	orrs	r2, r3
 8007f84:	68bb      	ldr	r3, [r7, #8]
 8007f86:	4313      	orrs	r3, r2
 8007f88:	697a      	ldr	r2, [r7, #20]
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	697a      	ldr	r2, [r7, #20]
 8007f92:	609a      	str	r2, [r3, #8]
}
 8007f94:	bf00      	nop
 8007f96:	371c      	adds	r7, #28
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9e:	4770      	bx	lr

08007fa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b085      	sub	sp, #20
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d101      	bne.n	8007fb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007fb4:	2302      	movs	r3, #2
 8007fb6:	e05a      	b.n	800806e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2201      	movs	r2, #1
 8007fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2202      	movs	r2, #2
 8007fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007fde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	68fa      	ldr	r2, [r7, #12]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	68fa      	ldr	r2, [r7, #12]
 8007ff0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a21      	ldr	r2, [pc, #132]	; (800807c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d022      	beq.n	8008042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008004:	d01d      	beq.n	8008042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a1d      	ldr	r2, [pc, #116]	; (8008080 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d018      	beq.n	8008042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a1b      	ldr	r2, [pc, #108]	; (8008084 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d013      	beq.n	8008042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4a1a      	ldr	r2, [pc, #104]	; (8008088 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d00e      	beq.n	8008042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	4a18      	ldr	r2, [pc, #96]	; (800808c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d009      	beq.n	8008042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a17      	ldr	r2, [pc, #92]	; (8008090 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008034:	4293      	cmp	r3, r2
 8008036:	d004      	beq.n	8008042 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a15      	ldr	r2, [pc, #84]	; (8008094 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800803e:	4293      	cmp	r3, r2
 8008040:	d10c      	bne.n	800805c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008048:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800804a:	683b      	ldr	r3, [r7, #0]
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	68ba      	ldr	r2, [r7, #8]
 8008050:	4313      	orrs	r3, r2
 8008052:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	68ba      	ldr	r2, [r7, #8]
 800805a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800806c:	2300      	movs	r3, #0
}
 800806e:	4618      	mov	r0, r3
 8008070:	3714      	adds	r7, #20
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr
 800807a:	bf00      	nop
 800807c:	40010000 	.word	0x40010000
 8008080:	40000400 	.word	0x40000400
 8008084:	40000800 	.word	0x40000800
 8008088:	40000c00 	.word	0x40000c00
 800808c:	40010400 	.word	0x40010400
 8008090:	40014000 	.word	0x40014000
 8008094:	40001800 	.word	0x40001800

08008098 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80080a0:	bf00      	nop
 80080a2:	370c      	adds	r7, #12
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr

080080ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80080ac:	b480      	push	{r7}
 80080ae:	b083      	sub	sp, #12
 80080b0:	af00      	add	r7, sp, #0
 80080b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80080b4:	bf00      	nop
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d101      	bne.n	80080d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	e03f      	b.n	8008152 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d106      	bne.n	80080ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f7f9 f9d0 	bl	800148c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2224      	movs	r2, #36	; 0x24
 80080f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	68da      	ldr	r2, [r3, #12]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008102:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 f929 	bl	800835c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	691a      	ldr	r2, [r3, #16]
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008118:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	695a      	ldr	r2, [r3, #20]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008128:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	68da      	ldr	r2, [r3, #12]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008138:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2220      	movs	r2, #32
 8008144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2220      	movs	r2, #32
 800814c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3708      	adds	r7, #8
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}

0800815a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800815a:	b580      	push	{r7, lr}
 800815c:	b08a      	sub	sp, #40	; 0x28
 800815e:	af02      	add	r7, sp, #8
 8008160:	60f8      	str	r0, [r7, #12]
 8008162:	60b9      	str	r1, [r7, #8]
 8008164:	603b      	str	r3, [r7, #0]
 8008166:	4613      	mov	r3, r2
 8008168:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800816a:	2300      	movs	r3, #0
 800816c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008174:	b2db      	uxtb	r3, r3
 8008176:	2b20      	cmp	r3, #32
 8008178:	d17c      	bne.n	8008274 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d002      	beq.n	8008186 <HAL_UART_Transmit+0x2c>
 8008180:	88fb      	ldrh	r3, [r7, #6]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d101      	bne.n	800818a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	e075      	b.n	8008276 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008190:	2b01      	cmp	r3, #1
 8008192:	d101      	bne.n	8008198 <HAL_UART_Transmit+0x3e>
 8008194:	2302      	movs	r3, #2
 8008196:	e06e      	b.n	8008276 <HAL_UART_Transmit+0x11c>
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	2201      	movs	r2, #1
 800819c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2200      	movs	r2, #0
 80081a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2221      	movs	r2, #33	; 0x21
 80081aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80081ae:	f7fa fa31 	bl	8002614 <HAL_GetTick>
 80081b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	88fa      	ldrh	r2, [r7, #6]
 80081b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	88fa      	ldrh	r2, [r7, #6]
 80081be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	689b      	ldr	r3, [r3, #8]
 80081c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081c8:	d108      	bne.n	80081dc <HAL_UART_Transmit+0x82>
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	691b      	ldr	r3, [r3, #16]
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d104      	bne.n	80081dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80081d2:	2300      	movs	r3, #0
 80081d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	61bb      	str	r3, [r7, #24]
 80081da:	e003      	b.n	80081e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80081e0:	2300      	movs	r3, #0
 80081e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80081ec:	e02a      	b.n	8008244 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	9300      	str	r3, [sp, #0]
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	2200      	movs	r2, #0
 80081f6:	2180      	movs	r1, #128	; 0x80
 80081f8:	68f8      	ldr	r0, [r7, #12]
 80081fa:	f000 f840 	bl	800827e <UART_WaitOnFlagUntilTimeout>
 80081fe:	4603      	mov	r3, r0
 8008200:	2b00      	cmp	r3, #0
 8008202:	d001      	beq.n	8008208 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008204:	2303      	movs	r3, #3
 8008206:	e036      	b.n	8008276 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d10b      	bne.n	8008226 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800820e:	69bb      	ldr	r3, [r7, #24]
 8008210:	881b      	ldrh	r3, [r3, #0]
 8008212:	461a      	mov	r2, r3
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800821c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800821e:	69bb      	ldr	r3, [r7, #24]
 8008220:	3302      	adds	r3, #2
 8008222:	61bb      	str	r3, [r7, #24]
 8008224:	e007      	b.n	8008236 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008226:	69fb      	ldr	r3, [r7, #28]
 8008228:	781a      	ldrb	r2, [r3, #0]
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008230:	69fb      	ldr	r3, [r7, #28]
 8008232:	3301      	adds	r3, #1
 8008234:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800823a:	b29b      	uxth	r3, r3
 800823c:	3b01      	subs	r3, #1
 800823e:	b29a      	uxth	r2, r3
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008248:	b29b      	uxth	r3, r3
 800824a:	2b00      	cmp	r3, #0
 800824c:	d1cf      	bne.n	80081ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	9300      	str	r3, [sp, #0]
 8008252:	697b      	ldr	r3, [r7, #20]
 8008254:	2200      	movs	r2, #0
 8008256:	2140      	movs	r1, #64	; 0x40
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	f000 f810 	bl	800827e <UART_WaitOnFlagUntilTimeout>
 800825e:	4603      	mov	r3, r0
 8008260:	2b00      	cmp	r3, #0
 8008262:	d001      	beq.n	8008268 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008264:	2303      	movs	r3, #3
 8008266:	e006      	b.n	8008276 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	2220      	movs	r2, #32
 800826c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008270:	2300      	movs	r3, #0
 8008272:	e000      	b.n	8008276 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008274:	2302      	movs	r3, #2
  }
}
 8008276:	4618      	mov	r0, r3
 8008278:	3720      	adds	r7, #32
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}

0800827e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800827e:	b580      	push	{r7, lr}
 8008280:	b090      	sub	sp, #64	; 0x40
 8008282:	af00      	add	r7, sp, #0
 8008284:	60f8      	str	r0, [r7, #12]
 8008286:	60b9      	str	r1, [r7, #8]
 8008288:	603b      	str	r3, [r7, #0]
 800828a:	4613      	mov	r3, r2
 800828c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800828e:	e050      	b.n	8008332 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008290:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008292:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008296:	d04c      	beq.n	8008332 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008298:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800829a:	2b00      	cmp	r3, #0
 800829c:	d007      	beq.n	80082ae <UART_WaitOnFlagUntilTimeout+0x30>
 800829e:	f7fa f9b9 	bl	8002614 <HAL_GetTick>
 80082a2:	4602      	mov	r2, r0
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	1ad3      	subs	r3, r2, r3
 80082a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d241      	bcs.n	8008332 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	330c      	adds	r3, #12
 80082b4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082b8:	e853 3f00 	ldrex	r3, [r3]
 80082bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80082c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	330c      	adds	r3, #12
 80082cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80082ce:	637a      	str	r2, [r7, #52]	; 0x34
 80082d0:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082d6:	e841 2300 	strex	r3, r2, [r1]
 80082da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80082dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d1e5      	bne.n	80082ae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	3314      	adds	r3, #20
 80082e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	e853 3f00 	ldrex	r3, [r3]
 80082f0:	613b      	str	r3, [r7, #16]
   return(result);
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	f023 0301 	bic.w	r3, r3, #1
 80082f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	3314      	adds	r3, #20
 8008300:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008302:	623a      	str	r2, [r7, #32]
 8008304:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008306:	69f9      	ldr	r1, [r7, #28]
 8008308:	6a3a      	ldr	r2, [r7, #32]
 800830a:	e841 2300 	strex	r3, r2, [r1]
 800830e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008310:	69bb      	ldr	r3, [r7, #24]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1e5      	bne.n	80082e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2220      	movs	r2, #32
 800831a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2220      	movs	r2, #32
 8008322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2200      	movs	r2, #0
 800832a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800832e:	2303      	movs	r3, #3
 8008330:	e00f      	b.n	8008352 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	4013      	ands	r3, r2
 800833c:	68ba      	ldr	r2, [r7, #8]
 800833e:	429a      	cmp	r2, r3
 8008340:	bf0c      	ite	eq
 8008342:	2301      	moveq	r3, #1
 8008344:	2300      	movne	r3, #0
 8008346:	b2db      	uxtb	r3, r3
 8008348:	461a      	mov	r2, r3
 800834a:	79fb      	ldrb	r3, [r7, #7]
 800834c:	429a      	cmp	r2, r3
 800834e:	d09f      	beq.n	8008290 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3740      	adds	r7, #64	; 0x40
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
	...

0800835c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800835c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008360:	b0c0      	sub	sp, #256	; 0x100
 8008362:	af00      	add	r7, sp, #0
 8008364:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008378:	68d9      	ldr	r1, [r3, #12]
 800837a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	ea40 0301 	orr.w	r3, r0, r1
 8008384:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800838a:	689a      	ldr	r2, [r3, #8]
 800838c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	431a      	orrs	r2, r3
 8008394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008398:	695b      	ldr	r3, [r3, #20]
 800839a:	431a      	orrs	r2, r3
 800839c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083a0:	69db      	ldr	r3, [r3, #28]
 80083a2:	4313      	orrs	r3, r2
 80083a4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80083a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80083b4:	f021 010c 	bic.w	r1, r1, #12
 80083b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80083c2:	430b      	orrs	r3, r1
 80083c4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80083c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	695b      	ldr	r3, [r3, #20]
 80083ce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80083d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083d6:	6999      	ldr	r1, [r3, #24]
 80083d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083dc:	681a      	ldr	r2, [r3, #0]
 80083de:	ea40 0301 	orr.w	r3, r0, r1
 80083e2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80083e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083e8:	681a      	ldr	r2, [r3, #0]
 80083ea:	4b8f      	ldr	r3, [pc, #572]	; (8008628 <UART_SetConfig+0x2cc>)
 80083ec:	429a      	cmp	r2, r3
 80083ee:	d005      	beq.n	80083fc <UART_SetConfig+0xa0>
 80083f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	4b8d      	ldr	r3, [pc, #564]	; (800862c <UART_SetConfig+0x2d0>)
 80083f8:	429a      	cmp	r2, r3
 80083fa:	d104      	bne.n	8008406 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80083fc:	f7fd fe6a 	bl	80060d4 <HAL_RCC_GetPCLK2Freq>
 8008400:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008404:	e003      	b.n	800840e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008406:	f7fd fe51 	bl	80060ac <HAL_RCC_GetPCLK1Freq>
 800840a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800840e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008412:	69db      	ldr	r3, [r3, #28]
 8008414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008418:	f040 810c 	bne.w	8008634 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800841c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008420:	2200      	movs	r2, #0
 8008422:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008426:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800842a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800842e:	4622      	mov	r2, r4
 8008430:	462b      	mov	r3, r5
 8008432:	1891      	adds	r1, r2, r2
 8008434:	65b9      	str	r1, [r7, #88]	; 0x58
 8008436:	415b      	adcs	r3, r3
 8008438:	65fb      	str	r3, [r7, #92]	; 0x5c
 800843a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800843e:	4621      	mov	r1, r4
 8008440:	eb12 0801 	adds.w	r8, r2, r1
 8008444:	4629      	mov	r1, r5
 8008446:	eb43 0901 	adc.w	r9, r3, r1
 800844a:	f04f 0200 	mov.w	r2, #0
 800844e:	f04f 0300 	mov.w	r3, #0
 8008452:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008456:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800845a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800845e:	4690      	mov	r8, r2
 8008460:	4699      	mov	r9, r3
 8008462:	4623      	mov	r3, r4
 8008464:	eb18 0303 	adds.w	r3, r8, r3
 8008468:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800846c:	462b      	mov	r3, r5
 800846e:	eb49 0303 	adc.w	r3, r9, r3
 8008472:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008482:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008486:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800848a:	460b      	mov	r3, r1
 800848c:	18db      	adds	r3, r3, r3
 800848e:	653b      	str	r3, [r7, #80]	; 0x50
 8008490:	4613      	mov	r3, r2
 8008492:	eb42 0303 	adc.w	r3, r2, r3
 8008496:	657b      	str	r3, [r7, #84]	; 0x54
 8008498:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800849c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80084a0:	f7f7 fef6 	bl	8000290 <__aeabi_uldivmod>
 80084a4:	4602      	mov	r2, r0
 80084a6:	460b      	mov	r3, r1
 80084a8:	4b61      	ldr	r3, [pc, #388]	; (8008630 <UART_SetConfig+0x2d4>)
 80084aa:	fba3 2302 	umull	r2, r3, r3, r2
 80084ae:	095b      	lsrs	r3, r3, #5
 80084b0:	011c      	lsls	r4, r3, #4
 80084b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80084b6:	2200      	movs	r2, #0
 80084b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80084bc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80084c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80084c4:	4642      	mov	r2, r8
 80084c6:	464b      	mov	r3, r9
 80084c8:	1891      	adds	r1, r2, r2
 80084ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80084cc:	415b      	adcs	r3, r3
 80084ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80084d4:	4641      	mov	r1, r8
 80084d6:	eb12 0a01 	adds.w	sl, r2, r1
 80084da:	4649      	mov	r1, r9
 80084dc:	eb43 0b01 	adc.w	fp, r3, r1
 80084e0:	f04f 0200 	mov.w	r2, #0
 80084e4:	f04f 0300 	mov.w	r3, #0
 80084e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80084ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80084f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80084f4:	4692      	mov	sl, r2
 80084f6:	469b      	mov	fp, r3
 80084f8:	4643      	mov	r3, r8
 80084fa:	eb1a 0303 	adds.w	r3, sl, r3
 80084fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008502:	464b      	mov	r3, r9
 8008504:	eb4b 0303 	adc.w	r3, fp, r3
 8008508:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800850c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	2200      	movs	r2, #0
 8008514:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008518:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800851c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008520:	460b      	mov	r3, r1
 8008522:	18db      	adds	r3, r3, r3
 8008524:	643b      	str	r3, [r7, #64]	; 0x40
 8008526:	4613      	mov	r3, r2
 8008528:	eb42 0303 	adc.w	r3, r2, r3
 800852c:	647b      	str	r3, [r7, #68]	; 0x44
 800852e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008532:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008536:	f7f7 feab 	bl	8000290 <__aeabi_uldivmod>
 800853a:	4602      	mov	r2, r0
 800853c:	460b      	mov	r3, r1
 800853e:	4611      	mov	r1, r2
 8008540:	4b3b      	ldr	r3, [pc, #236]	; (8008630 <UART_SetConfig+0x2d4>)
 8008542:	fba3 2301 	umull	r2, r3, r3, r1
 8008546:	095b      	lsrs	r3, r3, #5
 8008548:	2264      	movs	r2, #100	; 0x64
 800854a:	fb02 f303 	mul.w	r3, r2, r3
 800854e:	1acb      	subs	r3, r1, r3
 8008550:	00db      	lsls	r3, r3, #3
 8008552:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008556:	4b36      	ldr	r3, [pc, #216]	; (8008630 <UART_SetConfig+0x2d4>)
 8008558:	fba3 2302 	umull	r2, r3, r3, r2
 800855c:	095b      	lsrs	r3, r3, #5
 800855e:	005b      	lsls	r3, r3, #1
 8008560:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008564:	441c      	add	r4, r3
 8008566:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800856a:	2200      	movs	r2, #0
 800856c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008570:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008574:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008578:	4642      	mov	r2, r8
 800857a:	464b      	mov	r3, r9
 800857c:	1891      	adds	r1, r2, r2
 800857e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008580:	415b      	adcs	r3, r3
 8008582:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008584:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008588:	4641      	mov	r1, r8
 800858a:	1851      	adds	r1, r2, r1
 800858c:	6339      	str	r1, [r7, #48]	; 0x30
 800858e:	4649      	mov	r1, r9
 8008590:	414b      	adcs	r3, r1
 8008592:	637b      	str	r3, [r7, #52]	; 0x34
 8008594:	f04f 0200 	mov.w	r2, #0
 8008598:	f04f 0300 	mov.w	r3, #0
 800859c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80085a0:	4659      	mov	r1, fp
 80085a2:	00cb      	lsls	r3, r1, #3
 80085a4:	4651      	mov	r1, sl
 80085a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085aa:	4651      	mov	r1, sl
 80085ac:	00ca      	lsls	r2, r1, #3
 80085ae:	4610      	mov	r0, r2
 80085b0:	4619      	mov	r1, r3
 80085b2:	4603      	mov	r3, r0
 80085b4:	4642      	mov	r2, r8
 80085b6:	189b      	adds	r3, r3, r2
 80085b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80085bc:	464b      	mov	r3, r9
 80085be:	460a      	mov	r2, r1
 80085c0:	eb42 0303 	adc.w	r3, r2, r3
 80085c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80085c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	2200      	movs	r2, #0
 80085d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80085d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80085d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80085dc:	460b      	mov	r3, r1
 80085de:	18db      	adds	r3, r3, r3
 80085e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80085e2:	4613      	mov	r3, r2
 80085e4:	eb42 0303 	adc.w	r3, r2, r3
 80085e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80085ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80085f2:	f7f7 fe4d 	bl	8000290 <__aeabi_uldivmod>
 80085f6:	4602      	mov	r2, r0
 80085f8:	460b      	mov	r3, r1
 80085fa:	4b0d      	ldr	r3, [pc, #52]	; (8008630 <UART_SetConfig+0x2d4>)
 80085fc:	fba3 1302 	umull	r1, r3, r3, r2
 8008600:	095b      	lsrs	r3, r3, #5
 8008602:	2164      	movs	r1, #100	; 0x64
 8008604:	fb01 f303 	mul.w	r3, r1, r3
 8008608:	1ad3      	subs	r3, r2, r3
 800860a:	00db      	lsls	r3, r3, #3
 800860c:	3332      	adds	r3, #50	; 0x32
 800860e:	4a08      	ldr	r2, [pc, #32]	; (8008630 <UART_SetConfig+0x2d4>)
 8008610:	fba2 2303 	umull	r2, r3, r2, r3
 8008614:	095b      	lsrs	r3, r3, #5
 8008616:	f003 0207 	and.w	r2, r3, #7
 800861a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4422      	add	r2, r4
 8008622:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008624:	e105      	b.n	8008832 <UART_SetConfig+0x4d6>
 8008626:	bf00      	nop
 8008628:	40011000 	.word	0x40011000
 800862c:	40011400 	.word	0x40011400
 8008630:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008634:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008638:	2200      	movs	r2, #0
 800863a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800863e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008642:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008646:	4642      	mov	r2, r8
 8008648:	464b      	mov	r3, r9
 800864a:	1891      	adds	r1, r2, r2
 800864c:	6239      	str	r1, [r7, #32]
 800864e:	415b      	adcs	r3, r3
 8008650:	627b      	str	r3, [r7, #36]	; 0x24
 8008652:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008656:	4641      	mov	r1, r8
 8008658:	1854      	adds	r4, r2, r1
 800865a:	4649      	mov	r1, r9
 800865c:	eb43 0501 	adc.w	r5, r3, r1
 8008660:	f04f 0200 	mov.w	r2, #0
 8008664:	f04f 0300 	mov.w	r3, #0
 8008668:	00eb      	lsls	r3, r5, #3
 800866a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800866e:	00e2      	lsls	r2, r4, #3
 8008670:	4614      	mov	r4, r2
 8008672:	461d      	mov	r5, r3
 8008674:	4643      	mov	r3, r8
 8008676:	18e3      	adds	r3, r4, r3
 8008678:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800867c:	464b      	mov	r3, r9
 800867e:	eb45 0303 	adc.w	r3, r5, r3
 8008682:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008686:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800868a:	685b      	ldr	r3, [r3, #4]
 800868c:	2200      	movs	r2, #0
 800868e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008692:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008696:	f04f 0200 	mov.w	r2, #0
 800869a:	f04f 0300 	mov.w	r3, #0
 800869e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80086a2:	4629      	mov	r1, r5
 80086a4:	008b      	lsls	r3, r1, #2
 80086a6:	4621      	mov	r1, r4
 80086a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086ac:	4621      	mov	r1, r4
 80086ae:	008a      	lsls	r2, r1, #2
 80086b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80086b4:	f7f7 fdec 	bl	8000290 <__aeabi_uldivmod>
 80086b8:	4602      	mov	r2, r0
 80086ba:	460b      	mov	r3, r1
 80086bc:	4b60      	ldr	r3, [pc, #384]	; (8008840 <UART_SetConfig+0x4e4>)
 80086be:	fba3 2302 	umull	r2, r3, r3, r2
 80086c2:	095b      	lsrs	r3, r3, #5
 80086c4:	011c      	lsls	r4, r3, #4
 80086c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086ca:	2200      	movs	r2, #0
 80086cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80086d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80086d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80086d8:	4642      	mov	r2, r8
 80086da:	464b      	mov	r3, r9
 80086dc:	1891      	adds	r1, r2, r2
 80086de:	61b9      	str	r1, [r7, #24]
 80086e0:	415b      	adcs	r3, r3
 80086e2:	61fb      	str	r3, [r7, #28]
 80086e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80086e8:	4641      	mov	r1, r8
 80086ea:	1851      	adds	r1, r2, r1
 80086ec:	6139      	str	r1, [r7, #16]
 80086ee:	4649      	mov	r1, r9
 80086f0:	414b      	adcs	r3, r1
 80086f2:	617b      	str	r3, [r7, #20]
 80086f4:	f04f 0200 	mov.w	r2, #0
 80086f8:	f04f 0300 	mov.w	r3, #0
 80086fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008700:	4659      	mov	r1, fp
 8008702:	00cb      	lsls	r3, r1, #3
 8008704:	4651      	mov	r1, sl
 8008706:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800870a:	4651      	mov	r1, sl
 800870c:	00ca      	lsls	r2, r1, #3
 800870e:	4610      	mov	r0, r2
 8008710:	4619      	mov	r1, r3
 8008712:	4603      	mov	r3, r0
 8008714:	4642      	mov	r2, r8
 8008716:	189b      	adds	r3, r3, r2
 8008718:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800871c:	464b      	mov	r3, r9
 800871e:	460a      	mov	r2, r1
 8008720:	eb42 0303 	adc.w	r3, r2, r3
 8008724:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	2200      	movs	r2, #0
 8008730:	67bb      	str	r3, [r7, #120]	; 0x78
 8008732:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008734:	f04f 0200 	mov.w	r2, #0
 8008738:	f04f 0300 	mov.w	r3, #0
 800873c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008740:	4649      	mov	r1, r9
 8008742:	008b      	lsls	r3, r1, #2
 8008744:	4641      	mov	r1, r8
 8008746:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800874a:	4641      	mov	r1, r8
 800874c:	008a      	lsls	r2, r1, #2
 800874e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008752:	f7f7 fd9d 	bl	8000290 <__aeabi_uldivmod>
 8008756:	4602      	mov	r2, r0
 8008758:	460b      	mov	r3, r1
 800875a:	4b39      	ldr	r3, [pc, #228]	; (8008840 <UART_SetConfig+0x4e4>)
 800875c:	fba3 1302 	umull	r1, r3, r3, r2
 8008760:	095b      	lsrs	r3, r3, #5
 8008762:	2164      	movs	r1, #100	; 0x64
 8008764:	fb01 f303 	mul.w	r3, r1, r3
 8008768:	1ad3      	subs	r3, r2, r3
 800876a:	011b      	lsls	r3, r3, #4
 800876c:	3332      	adds	r3, #50	; 0x32
 800876e:	4a34      	ldr	r2, [pc, #208]	; (8008840 <UART_SetConfig+0x4e4>)
 8008770:	fba2 2303 	umull	r2, r3, r2, r3
 8008774:	095b      	lsrs	r3, r3, #5
 8008776:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800877a:	441c      	add	r4, r3
 800877c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008780:	2200      	movs	r2, #0
 8008782:	673b      	str	r3, [r7, #112]	; 0x70
 8008784:	677a      	str	r2, [r7, #116]	; 0x74
 8008786:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800878a:	4642      	mov	r2, r8
 800878c:	464b      	mov	r3, r9
 800878e:	1891      	adds	r1, r2, r2
 8008790:	60b9      	str	r1, [r7, #8]
 8008792:	415b      	adcs	r3, r3
 8008794:	60fb      	str	r3, [r7, #12]
 8008796:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800879a:	4641      	mov	r1, r8
 800879c:	1851      	adds	r1, r2, r1
 800879e:	6039      	str	r1, [r7, #0]
 80087a0:	4649      	mov	r1, r9
 80087a2:	414b      	adcs	r3, r1
 80087a4:	607b      	str	r3, [r7, #4]
 80087a6:	f04f 0200 	mov.w	r2, #0
 80087aa:	f04f 0300 	mov.w	r3, #0
 80087ae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80087b2:	4659      	mov	r1, fp
 80087b4:	00cb      	lsls	r3, r1, #3
 80087b6:	4651      	mov	r1, sl
 80087b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80087bc:	4651      	mov	r1, sl
 80087be:	00ca      	lsls	r2, r1, #3
 80087c0:	4610      	mov	r0, r2
 80087c2:	4619      	mov	r1, r3
 80087c4:	4603      	mov	r3, r0
 80087c6:	4642      	mov	r2, r8
 80087c8:	189b      	adds	r3, r3, r2
 80087ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80087cc:	464b      	mov	r3, r9
 80087ce:	460a      	mov	r2, r1
 80087d0:	eb42 0303 	adc.w	r3, r2, r3
 80087d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80087d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	663b      	str	r3, [r7, #96]	; 0x60
 80087e0:	667a      	str	r2, [r7, #100]	; 0x64
 80087e2:	f04f 0200 	mov.w	r2, #0
 80087e6:	f04f 0300 	mov.w	r3, #0
 80087ea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80087ee:	4649      	mov	r1, r9
 80087f0:	008b      	lsls	r3, r1, #2
 80087f2:	4641      	mov	r1, r8
 80087f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087f8:	4641      	mov	r1, r8
 80087fa:	008a      	lsls	r2, r1, #2
 80087fc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008800:	f7f7 fd46 	bl	8000290 <__aeabi_uldivmod>
 8008804:	4602      	mov	r2, r0
 8008806:	460b      	mov	r3, r1
 8008808:	4b0d      	ldr	r3, [pc, #52]	; (8008840 <UART_SetConfig+0x4e4>)
 800880a:	fba3 1302 	umull	r1, r3, r3, r2
 800880e:	095b      	lsrs	r3, r3, #5
 8008810:	2164      	movs	r1, #100	; 0x64
 8008812:	fb01 f303 	mul.w	r3, r1, r3
 8008816:	1ad3      	subs	r3, r2, r3
 8008818:	011b      	lsls	r3, r3, #4
 800881a:	3332      	adds	r3, #50	; 0x32
 800881c:	4a08      	ldr	r2, [pc, #32]	; (8008840 <UART_SetConfig+0x4e4>)
 800881e:	fba2 2303 	umull	r2, r3, r2, r3
 8008822:	095b      	lsrs	r3, r3, #5
 8008824:	f003 020f 	and.w	r2, r3, #15
 8008828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4422      	add	r2, r4
 8008830:	609a      	str	r2, [r3, #8]
}
 8008832:	bf00      	nop
 8008834:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008838:	46bd      	mov	sp, r7
 800883a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800883e:	bf00      	nop
 8008840:	51eb851f 	.word	0x51eb851f

08008844 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	2b00      	cmp	r3, #0
 8008854:	d123      	bne.n	800889e <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800885e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008862:	683a      	ldr	r2, [r7, #0]
 8008864:	6851      	ldr	r1, [r2, #4]
 8008866:	683a      	ldr	r2, [r7, #0]
 8008868:	6892      	ldr	r2, [r2, #8]
 800886a:	4311      	orrs	r1, r2
 800886c:	683a      	ldr	r2, [r7, #0]
 800886e:	68d2      	ldr	r2, [r2, #12]
 8008870:	4311      	orrs	r1, r2
 8008872:	683a      	ldr	r2, [r7, #0]
 8008874:	6912      	ldr	r2, [r2, #16]
 8008876:	4311      	orrs	r1, r2
 8008878:	683a      	ldr	r2, [r7, #0]
 800887a:	6952      	ldr	r2, [r2, #20]
 800887c:	4311      	orrs	r1, r2
 800887e:	683a      	ldr	r2, [r7, #0]
 8008880:	6992      	ldr	r2, [r2, #24]
 8008882:	4311      	orrs	r1, r2
 8008884:	683a      	ldr	r2, [r7, #0]
 8008886:	69d2      	ldr	r2, [r2, #28]
 8008888:	4311      	orrs	r1, r2
 800888a:	683a      	ldr	r2, [r7, #0]
 800888c:	6a12      	ldr	r2, [r2, #32]
 800888e:	4311      	orrs	r1, r2
 8008890:	683a      	ldr	r2, [r7, #0]
 8008892:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008894:	430a      	orrs	r2, r1
 8008896:	431a      	orrs	r2, r3
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	601a      	str	r2, [r3, #0]
 800889c:	e028      	b.n	80088f0 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	69d9      	ldr	r1, [r3, #28]
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	6a1b      	ldr	r3, [r3, #32]
 80088ae:	4319      	orrs	r1, r3
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088b4:	430b      	orrs	r3, r1
 80088b6:	431a      	orrs	r2, r3
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80088c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80088c8:	683a      	ldr	r2, [r7, #0]
 80088ca:	6851      	ldr	r1, [r2, #4]
 80088cc:	683a      	ldr	r2, [r7, #0]
 80088ce:	6892      	ldr	r2, [r2, #8]
 80088d0:	4311      	orrs	r1, r2
 80088d2:	683a      	ldr	r2, [r7, #0]
 80088d4:	68d2      	ldr	r2, [r2, #12]
 80088d6:	4311      	orrs	r1, r2
 80088d8:	683a      	ldr	r2, [r7, #0]
 80088da:	6912      	ldr	r2, [r2, #16]
 80088dc:	4311      	orrs	r1, r2
 80088de:	683a      	ldr	r2, [r7, #0]
 80088e0:	6952      	ldr	r2, [r2, #20]
 80088e2:	4311      	orrs	r1, r2
 80088e4:	683a      	ldr	r2, [r7, #0]
 80088e6:	6992      	ldr	r2, [r2, #24]
 80088e8:	430a      	orrs	r2, r1
 80088ea:	431a      	orrs	r2, r3
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80088f0:	2300      	movs	r3, #0
}
 80088f2:	4618      	mov	r0, r3
 80088f4:	370c      	adds	r7, #12
 80088f6:	46bd      	mov	sp, r7
 80088f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fc:	4770      	bx	lr

080088fe <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80088fe:	b480      	push	{r7}
 8008900:	b085      	sub	sp, #20
 8008902:	af00      	add	r7, sp, #0
 8008904:	60f8      	str	r0, [r7, #12]
 8008906:	60b9      	str	r1, [r7, #8]
 8008908:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d128      	bne.n	8008962 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	689b      	ldr	r3, [r3, #8]
 8008914:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8008918:	68bb      	ldr	r3, [r7, #8]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	1e59      	subs	r1, r3, #1
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	685b      	ldr	r3, [r3, #4]
 8008922:	3b01      	subs	r3, #1
 8008924:	011b      	lsls	r3, r3, #4
 8008926:	4319      	orrs	r1, r3
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	3b01      	subs	r3, #1
 800892e:	021b      	lsls	r3, r3, #8
 8008930:	4319      	orrs	r1, r3
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	68db      	ldr	r3, [r3, #12]
 8008936:	3b01      	subs	r3, #1
 8008938:	031b      	lsls	r3, r3, #12
 800893a:	4319      	orrs	r1, r3
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	691b      	ldr	r3, [r3, #16]
 8008940:	3b01      	subs	r3, #1
 8008942:	041b      	lsls	r3, r3, #16
 8008944:	4319      	orrs	r1, r3
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	695b      	ldr	r3, [r3, #20]
 800894a:	3b01      	subs	r3, #1
 800894c:	051b      	lsls	r3, r3, #20
 800894e:	4319      	orrs	r1, r3
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	699b      	ldr	r3, [r3, #24]
 8008954:	3b01      	subs	r3, #1
 8008956:	061b      	lsls	r3, r3, #24
 8008958:	430b      	orrs	r3, r1
 800895a:	431a      	orrs	r2, r3
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	609a      	str	r2, [r3, #8]
 8008960:	e02f      	b.n	80089c2 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	689b      	ldr	r3, [r3, #8]
 8008966:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800896a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800896e:	68ba      	ldr	r2, [r7, #8]
 8008970:	68d2      	ldr	r2, [r2, #12]
 8008972:	3a01      	subs	r2, #1
 8008974:	0311      	lsls	r1, r2, #12
 8008976:	68ba      	ldr	r2, [r7, #8]
 8008978:	6952      	ldr	r2, [r2, #20]
 800897a:	3a01      	subs	r2, #1
 800897c:	0512      	lsls	r2, r2, #20
 800897e:	430a      	orrs	r2, r1
 8008980:	431a      	orrs	r2, r3
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	1e59      	subs	r1, r3, #1
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	3b01      	subs	r3, #1
 800899a:	011b      	lsls	r3, r3, #4
 800899c:	4319      	orrs	r1, r3
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	3b01      	subs	r3, #1
 80089a4:	021b      	lsls	r3, r3, #8
 80089a6:	4319      	orrs	r1, r3
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	691b      	ldr	r3, [r3, #16]
 80089ac:	3b01      	subs	r3, #1
 80089ae:	041b      	lsls	r3, r3, #16
 80089b0:	4319      	orrs	r1, r3
 80089b2:	68bb      	ldr	r3, [r7, #8]
 80089b4:	699b      	ldr	r3, [r3, #24]
 80089b6:	3b01      	subs	r3, #1
 80089b8:	061b      	lsls	r3, r3, #24
 80089ba:	430b      	orrs	r3, r1
 80089bc:	431a      	orrs	r2, r3
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80089c2:	2300      	movs	r3, #0
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3714      	adds	r7, #20
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b086      	sub	sp, #24
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	60f8      	str	r0, [r7, #12]
 80089d8:	60b9      	str	r1, [r7, #8]
 80089da:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80089dc:	2300      	movs	r3, #0
 80089de:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	691b      	ldr	r3, [r3, #16]
 80089e4:	0d9b      	lsrs	r3, r3, #22
 80089e6:	059b      	lsls	r3, r3, #22
 80089e8:	68ba      	ldr	r2, [r7, #8]
 80089ea:	6811      	ldr	r1, [r2, #0]
 80089ec:	68ba      	ldr	r2, [r7, #8]
 80089ee:	6852      	ldr	r2, [r2, #4]
 80089f0:	4311      	orrs	r1, r2
 80089f2:	68ba      	ldr	r2, [r7, #8]
 80089f4:	6892      	ldr	r2, [r2, #8]
 80089f6:	3a01      	subs	r2, #1
 80089f8:	0152      	lsls	r2, r2, #5
 80089fa:	4311      	orrs	r1, r2
 80089fc:	68ba      	ldr	r2, [r7, #8]
 80089fe:	68d2      	ldr	r2, [r2, #12]
 8008a00:	0252      	lsls	r2, r2, #9
 8008a02:	430a      	orrs	r2, r1
 8008a04:	431a      	orrs	r2, r3
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8008a0a:	f7f9 fe03 	bl	8002614 <HAL_GetTick>
 8008a0e:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008a10:	e010      	b.n	8008a34 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008a18:	d00c      	beq.n	8008a34 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d007      	beq.n	8008a30 <FMC_SDRAM_SendCommand+0x60>
 8008a20:	f7f9 fdf8 	bl	8002614 <HAL_GetTick>
 8008a24:	4602      	mov	r2, r0
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	1ad3      	subs	r3, r2, r3
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d201      	bcs.n	8008a34 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8008a30:	2303      	movs	r3, #3
 8008a32:	e006      	b.n	8008a42 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	699b      	ldr	r3, [r3, #24]
 8008a38:	f003 0320 	and.w	r3, r3, #32
 8008a3c:	2b20      	cmp	r3, #32
 8008a3e:	d0e8      	beq.n	8008a12 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3718      	adds	r7, #24
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8008a4a:	b480      	push	{r7}
 8008a4c:	b083      	sub	sp, #12
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
 8008a52:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	695b      	ldr	r3, [r3, #20]
 8008a58:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008a5c:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 8008a60:	683a      	ldr	r2, [r7, #0]
 8008a62:	0052      	lsls	r2, r2, #1
 8008a64:	431a      	orrs	r2, r3
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	370c      	adds	r7, #12
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a78:	b084      	sub	sp, #16
 8008a7a:	b580      	push	{r7, lr}
 8008a7c:	b084      	sub	sp, #16
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
 8008a82:	f107 001c 	add.w	r0, r7, #28
 8008a86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d122      	bne.n	8008ad6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	68db      	ldr	r3, [r3, #12]
 8008aa0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008aa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008aa8:	687a      	ldr	r2, [r7, #4]
 8008aaa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008ab8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d105      	bne.n	8008aca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	68db      	ldr	r3, [r3, #12]
 8008ac2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 f9c0 	bl	8008e50 <USB_CoreReset>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	73fb      	strb	r3, [r7, #15]
 8008ad4:	e01a      	b.n	8008b0c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 f9b4 	bl	8008e50 <USB_CoreReset>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008aec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d106      	bne.n	8008b00 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	639a      	str	r2, [r3, #56]	; 0x38
 8008afe:	e005      	b.n	8008b0c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d10b      	bne.n	8008b2a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	689b      	ldr	r3, [r3, #8]
 8008b16:	f043 0206 	orr.w	r2, r3, #6
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	f043 0220 	orr.w	r2, r3, #32
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	3710      	adds	r7, #16
 8008b30:	46bd      	mov	sp, r7
 8008b32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b36:	b004      	add	sp, #16
 8008b38:	4770      	bx	lr

08008b3a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b3a:	b480      	push	{r7}
 8008b3c:	b083      	sub	sp, #12
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	f043 0201 	orr.w	r2, r3, #1
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008b4e:	2300      	movs	r3, #0
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	370c      	adds	r7, #12
 8008b54:	46bd      	mov	sp, r7
 8008b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5a:	4770      	bx	lr

08008b5c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	f023 0201 	bic.w	r2, r3, #1
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008b70:	2300      	movs	r3, #0
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	370c      	adds	r7, #12
 8008b76:	46bd      	mov	sp, r7
 8008b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7c:	4770      	bx	lr

08008b7e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b084      	sub	sp, #16
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
 8008b86:	460b      	mov	r3, r1
 8008b88:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008b9a:	78fb      	ldrb	r3, [r7, #3]
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d115      	bne.n	8008bcc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	68db      	ldr	r3, [r3, #12]
 8008ba4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008bac:	2001      	movs	r0, #1
 8008bae:	f7f9 fd3d 	bl	800262c <HAL_Delay>
      ms++;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 f93a 	bl	8008e32 <USB_GetMode>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d01e      	beq.n	8008c02 <USB_SetCurrentMode+0x84>
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2b31      	cmp	r3, #49	; 0x31
 8008bc8:	d9f0      	bls.n	8008bac <USB_SetCurrentMode+0x2e>
 8008bca:	e01a      	b.n	8008c02 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008bcc:	78fb      	ldrb	r3, [r7, #3]
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d115      	bne.n	8008bfe <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	68db      	ldr	r3, [r3, #12]
 8008bd6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008bde:	2001      	movs	r0, #1
 8008be0:	f7f9 fd24 	bl	800262c <HAL_Delay>
      ms++;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	3301      	adds	r3, #1
 8008be8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008bea:	6878      	ldr	r0, [r7, #4]
 8008bec:	f000 f921 	bl	8008e32 <USB_GetMode>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d005      	beq.n	8008c02 <USB_SetCurrentMode+0x84>
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2b31      	cmp	r3, #49	; 0x31
 8008bfa:	d9f0      	bls.n	8008bde <USB_SetCurrentMode+0x60>
 8008bfc:	e001      	b.n	8008c02 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e005      	b.n	8008c0e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	2b32      	cmp	r3, #50	; 0x32
 8008c06:	d101      	bne.n	8008c0c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e000      	b.n	8008c0e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008c0c:	2300      	movs	r3, #0
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3710      	adds	r7, #16
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
	...

08008c18 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b085      	sub	sp, #20
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008c22:	2300      	movs	r3, #0
 8008c24:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	3301      	adds	r3, #1
 8008c2a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	4a13      	ldr	r2, [pc, #76]	; (8008c7c <USB_FlushTxFifo+0x64>)
 8008c30:	4293      	cmp	r3, r2
 8008c32:	d901      	bls.n	8008c38 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008c34:	2303      	movs	r3, #3
 8008c36:	e01b      	b.n	8008c70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	691b      	ldr	r3, [r3, #16]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	daf2      	bge.n	8008c26 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008c40:	2300      	movs	r3, #0
 8008c42:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	019b      	lsls	r3, r3, #6
 8008c48:	f043 0220 	orr.w	r2, r3, #32
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	3301      	adds	r3, #1
 8008c54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	4a08      	ldr	r2, [pc, #32]	; (8008c7c <USB_FlushTxFifo+0x64>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d901      	bls.n	8008c62 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008c5e:	2303      	movs	r3, #3
 8008c60:	e006      	b.n	8008c70 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	691b      	ldr	r3, [r3, #16]
 8008c66:	f003 0320 	and.w	r3, r3, #32
 8008c6a:	2b20      	cmp	r3, #32
 8008c6c:	d0f0      	beq.n	8008c50 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008c6e:	2300      	movs	r3, #0
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3714      	adds	r7, #20
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr
 8008c7c:	00030d40 	.word	0x00030d40

08008c80 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b085      	sub	sp, #20
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	3301      	adds	r3, #1
 8008c90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	4a11      	ldr	r2, [pc, #68]	; (8008cdc <USB_FlushRxFifo+0x5c>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d901      	bls.n	8008c9e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008c9a:	2303      	movs	r3, #3
 8008c9c:	e018      	b.n	8008cd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	691b      	ldr	r3, [r3, #16]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	daf2      	bge.n	8008c8c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2210      	movs	r2, #16
 8008cae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	4a08      	ldr	r2, [pc, #32]	; (8008cdc <USB_FlushRxFifo+0x5c>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d901      	bls.n	8008cc2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	e006      	b.n	8008cd0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	f003 0310 	and.w	r3, r3, #16
 8008cca:	2b10      	cmp	r3, #16
 8008ccc:	d0f0      	beq.n	8008cb0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008cce:	2300      	movs	r3, #0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3714      	adds	r7, #20
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cda:	4770      	bx	lr
 8008cdc:	00030d40 	.word	0x00030d40

08008ce0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b089      	sub	sp, #36	; 0x24
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	4611      	mov	r1, r2
 8008cec:	461a      	mov	r2, r3
 8008cee:	460b      	mov	r3, r1
 8008cf0:	71fb      	strb	r3, [r7, #7]
 8008cf2:	4613      	mov	r3, r2
 8008cf4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008cfe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d123      	bne.n	8008d4e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008d06:	88bb      	ldrh	r3, [r7, #4]
 8008d08:	3303      	adds	r3, #3
 8008d0a:	089b      	lsrs	r3, r3, #2
 8008d0c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008d0e:	2300      	movs	r3, #0
 8008d10:	61bb      	str	r3, [r7, #24]
 8008d12:	e018      	b.n	8008d46 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008d14:	79fb      	ldrb	r3, [r7, #7]
 8008d16:	031a      	lsls	r2, r3, #12
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	4413      	add	r3, r2
 8008d1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d20:	461a      	mov	r2, r3
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008d28:	69fb      	ldr	r3, [r7, #28]
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	3301      	adds	r3, #1
 8008d32:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	3301      	adds	r3, #1
 8008d38:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008d3a:	69fb      	ldr	r3, [r7, #28]
 8008d3c:	3301      	adds	r3, #1
 8008d3e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008d40:	69bb      	ldr	r3, [r7, #24]
 8008d42:	3301      	adds	r3, #1
 8008d44:	61bb      	str	r3, [r7, #24]
 8008d46:	69ba      	ldr	r2, [r7, #24]
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d3e2      	bcc.n	8008d14 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008d4e:	2300      	movs	r3, #0
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3724      	adds	r7, #36	; 0x24
 8008d54:	46bd      	mov	sp, r7
 8008d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5a:	4770      	bx	lr

08008d5c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b08b      	sub	sp, #44	; 0x2c
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	4613      	mov	r3, r2
 8008d68:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008d72:	88fb      	ldrh	r3, [r7, #6]
 8008d74:	089b      	lsrs	r3, r3, #2
 8008d76:	b29b      	uxth	r3, r3
 8008d78:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008d7a:	88fb      	ldrh	r3, [r7, #6]
 8008d7c:	f003 0303 	and.w	r3, r3, #3
 8008d80:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008d82:	2300      	movs	r3, #0
 8008d84:	623b      	str	r3, [r7, #32]
 8008d86:	e014      	b.n	8008db2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008d88:	69bb      	ldr	r3, [r7, #24]
 8008d8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d8e:	681a      	ldr	r2, [r3, #0]
 8008d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d92:	601a      	str	r2, [r3, #0]
    pDest++;
 8008d94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d96:	3301      	adds	r3, #1
 8008d98:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da2:	3301      	adds	r3, #1
 8008da4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da8:	3301      	adds	r3, #1
 8008daa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8008dac:	6a3b      	ldr	r3, [r7, #32]
 8008dae:	3301      	adds	r3, #1
 8008db0:	623b      	str	r3, [r7, #32]
 8008db2:	6a3a      	ldr	r2, [r7, #32]
 8008db4:	697b      	ldr	r3, [r7, #20]
 8008db6:	429a      	cmp	r2, r3
 8008db8:	d3e6      	bcc.n	8008d88 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008dba:	8bfb      	ldrh	r3, [r7, #30]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d01e      	beq.n	8008dfe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008dc4:	69bb      	ldr	r3, [r7, #24]
 8008dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008dca:	461a      	mov	r2, r3
 8008dcc:	f107 0310 	add.w	r3, r7, #16
 8008dd0:	6812      	ldr	r2, [r2, #0]
 8008dd2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008dd4:	693a      	ldr	r2, [r7, #16]
 8008dd6:	6a3b      	ldr	r3, [r7, #32]
 8008dd8:	b2db      	uxtb	r3, r3
 8008dda:	00db      	lsls	r3, r3, #3
 8008ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8008de0:	b2da      	uxtb	r2, r3
 8008de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de4:	701a      	strb	r2, [r3, #0]
      i++;
 8008de6:	6a3b      	ldr	r3, [r7, #32]
 8008de8:	3301      	adds	r3, #1
 8008dea:	623b      	str	r3, [r7, #32]
      pDest++;
 8008dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dee:	3301      	adds	r3, #1
 8008df0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008df2:	8bfb      	ldrh	r3, [r7, #30]
 8008df4:	3b01      	subs	r3, #1
 8008df6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008df8:	8bfb      	ldrh	r3, [r7, #30]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d1ea      	bne.n	8008dd4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	372c      	adds	r7, #44	; 0x2c
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b085      	sub	sp, #20
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	695b      	ldr	r3, [r3, #20]
 8008e18:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	699b      	ldr	r3, [r3, #24]
 8008e1e:	68fa      	ldr	r2, [r7, #12]
 8008e20:	4013      	ands	r3, r2
 8008e22:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008e24:	68fb      	ldr	r3, [r7, #12]
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3714      	adds	r7, #20
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr

08008e32 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008e32:	b480      	push	{r7}
 8008e34:	b083      	sub	sp, #12
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	695b      	ldr	r3, [r3, #20]
 8008e3e:	f003 0301 	and.w	r3, r3, #1
}
 8008e42:	4618      	mov	r0, r3
 8008e44:	370c      	adds	r7, #12
 8008e46:	46bd      	mov	sp, r7
 8008e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4c:	4770      	bx	lr
	...

08008e50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b085      	sub	sp, #20
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e58:	2300      	movs	r3, #0
 8008e5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	3301      	adds	r3, #1
 8008e60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	4a13      	ldr	r2, [pc, #76]	; (8008eb4 <USB_CoreReset+0x64>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d901      	bls.n	8008e6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008e6a:	2303      	movs	r3, #3
 8008e6c:	e01b      	b.n	8008ea6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	691b      	ldr	r3, [r3, #16]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	daf2      	bge.n	8008e5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008e76:	2300      	movs	r3, #0
 8008e78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	f043 0201 	orr.w	r2, r3, #1
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	3301      	adds	r3, #1
 8008e8a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	4a09      	ldr	r2, [pc, #36]	; (8008eb4 <USB_CoreReset+0x64>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d901      	bls.n	8008e98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008e94:	2303      	movs	r3, #3
 8008e96:	e006      	b.n	8008ea6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	691b      	ldr	r3, [r3, #16]
 8008e9c:	f003 0301 	and.w	r3, r3, #1
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d0f0      	beq.n	8008e86 <USB_CoreReset+0x36>

  return HAL_OK;
 8008ea4:	2300      	movs	r3, #0
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3714      	adds	r7, #20
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eb0:	4770      	bx	lr
 8008eb2:	bf00      	nop
 8008eb4:	00030d40 	.word	0x00030d40

08008eb8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008eb8:	b084      	sub	sp, #16
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b086      	sub	sp, #24
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
 8008ec2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008ec6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ed8:	461a      	mov	r2, r3
 8008eda:	2300      	movs	r3, #0
 8008edc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ee2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008eee:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008efa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d018      	beq.n	8008f40 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f10:	2b01      	cmp	r3, #1
 8008f12:	d10a      	bne.n	8008f2a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008f22:	f043 0304 	orr.w	r3, r3, #4
 8008f26:	6013      	str	r3, [r2, #0]
 8008f28:	e014      	b.n	8008f54 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008f38:	f023 0304 	bic.w	r3, r3, #4
 8008f3c:	6013      	str	r3, [r2, #0]
 8008f3e:	e009      	b.n	8008f54 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	68fa      	ldr	r2, [r7, #12]
 8008f4a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008f4e:	f023 0304 	bic.w	r3, r3, #4
 8008f52:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008f54:	2110      	movs	r1, #16
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f7ff fe5e 	bl	8008c18 <USB_FlushTxFifo>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d001      	beq.n	8008f66 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8008f62:	2301      	movs	r3, #1
 8008f64:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f7ff fe8a 	bl	8008c80 <USB_FlushRxFifo>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d001      	beq.n	8008f76 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8008f72:	2301      	movs	r3, #1
 8008f74:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008f76:	2300      	movs	r3, #0
 8008f78:	613b      	str	r3, [r7, #16]
 8008f7a:	e015      	b.n	8008fa8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8008f7c:	693b      	ldr	r3, [r7, #16]
 8008f7e:	015a      	lsls	r2, r3, #5
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	4413      	add	r3, r2
 8008f84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f88:	461a      	mov	r2, r3
 8008f8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f8e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008f90:	693b      	ldr	r3, [r7, #16]
 8008f92:	015a      	lsls	r2, r3, #5
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	4413      	add	r3, r2
 8008f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008f9c:	461a      	mov	r2, r3
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	613b      	str	r3, [r7, #16]
 8008fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008faa:	693a      	ldr	r2, [r7, #16]
 8008fac:	429a      	cmp	r2, r3
 8008fae:	d3e5      	bcc.n	8008f7c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008fbc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d00b      	beq.n	8008fe2 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008fd0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	4a13      	ldr	r2, [pc, #76]	; (8009024 <USB_HostInit+0x16c>)
 8008fd6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	4a13      	ldr	r2, [pc, #76]	; (8009028 <USB_HostInit+0x170>)
 8008fdc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8008fe0:	e009      	b.n	8008ff6 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	2280      	movs	r2, #128	; 0x80
 8008fe6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	4a10      	ldr	r2, [pc, #64]	; (800902c <USB_HostInit+0x174>)
 8008fec:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	4a0f      	ldr	r2, [pc, #60]	; (8009030 <USB_HostInit+0x178>)
 8008ff2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d105      	bne.n	8009008 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	699b      	ldr	r3, [r3, #24]
 8009000:	f043 0210 	orr.w	r2, r3, #16
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	699a      	ldr	r2, [r3, #24]
 800900c:	4b09      	ldr	r3, [pc, #36]	; (8009034 <USB_HostInit+0x17c>)
 800900e:	4313      	orrs	r3, r2
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8009014:	7dfb      	ldrb	r3, [r7, #23]
}
 8009016:	4618      	mov	r0, r3
 8009018:	3718      	adds	r7, #24
 800901a:	46bd      	mov	sp, r7
 800901c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009020:	b004      	add	sp, #16
 8009022:	4770      	bx	lr
 8009024:	01000200 	.word	0x01000200
 8009028:	00e00300 	.word	0x00e00300
 800902c:	00600080 	.word	0x00600080
 8009030:	004000e0 	.word	0x004000e0
 8009034:	a3200008 	.word	0xa3200008

08009038 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009038:	b480      	push	{r7}
 800903a:	b085      	sub	sp, #20
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	460b      	mov	r3, r1
 8009042:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	68fa      	ldr	r2, [r7, #12]
 8009052:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8009056:	f023 0303 	bic.w	r3, r3, #3
 800905a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	78fb      	ldrb	r3, [r7, #3]
 8009066:	f003 0303 	and.w	r3, r3, #3
 800906a:	68f9      	ldr	r1, [r7, #12]
 800906c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8009070:	4313      	orrs	r3, r2
 8009072:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009074:	78fb      	ldrb	r3, [r7, #3]
 8009076:	2b01      	cmp	r3, #1
 8009078:	d107      	bne.n	800908a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009080:	461a      	mov	r2, r3
 8009082:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8009086:	6053      	str	r3, [r2, #4]
 8009088:	e009      	b.n	800909e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800908a:	78fb      	ldrb	r3, [r7, #3]
 800908c:	2b02      	cmp	r3, #2
 800908e:	d106      	bne.n	800909e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009096:	461a      	mov	r2, r3
 8009098:	f241 7370 	movw	r3, #6000	; 0x1770
 800909c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800909e:	2300      	movs	r3, #0
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3714      	adds	r7, #20
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr

080090ac <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b084      	sub	sp, #16
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80090b8:	2300      	movs	r3, #0
 80090ba:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80090cc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80090ce:	68bb      	ldr	r3, [r7, #8]
 80090d0:	68fa      	ldr	r2, [r7, #12]
 80090d2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80090d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80090da:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80090dc:	2064      	movs	r0, #100	; 0x64
 80090de:	f7f9 faa5 	bl	800262c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	68fa      	ldr	r2, [r7, #12]
 80090e6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80090ea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090ee:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80090f0:	200a      	movs	r0, #10
 80090f2:	f7f9 fa9b 	bl	800262c <HAL_Delay>

  return HAL_OK;
 80090f6:	2300      	movs	r3, #0
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3710      	adds	r7, #16
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}

08009100 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009100:	b480      	push	{r7}
 8009102:	b085      	sub	sp, #20
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	460b      	mov	r3, r1
 800910a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009110:	2300      	movs	r3, #0
 8009112:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800911e:	68bb      	ldr	r3, [r7, #8]
 8009120:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8009124:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009126:	68bb      	ldr	r3, [r7, #8]
 8009128:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800912c:	2b00      	cmp	r3, #0
 800912e:	d109      	bne.n	8009144 <USB_DriveVbus+0x44>
 8009130:	78fb      	ldrb	r3, [r7, #3]
 8009132:	2b01      	cmp	r3, #1
 8009134:	d106      	bne.n	8009144 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800913e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009142:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800914a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800914e:	d109      	bne.n	8009164 <USB_DriveVbus+0x64>
 8009150:	78fb      	ldrb	r3, [r7, #3]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d106      	bne.n	8009164 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009156:	68bb      	ldr	r3, [r7, #8]
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800915e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009162:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009164:	2300      	movs	r3, #0
}
 8009166:	4618      	mov	r0, r3
 8009168:	3714      	adds	r7, #20
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr

08009172 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009172:	b480      	push	{r7}
 8009174:	b085      	sub	sp, #20
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800917e:	2300      	movs	r3, #0
 8009180:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	0c5b      	lsrs	r3, r3, #17
 8009190:	f003 0303 	and.w	r3, r3, #3
}
 8009194:	4618      	mov	r0, r3
 8009196:	3714      	adds	r7, #20
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr

080091a0 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b085      	sub	sp, #20
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80091b2:	689b      	ldr	r3, [r3, #8]
 80091b4:	b29b      	uxth	r3, r3
}
 80091b6:	4618      	mov	r0, r3
 80091b8:	3714      	adds	r7, #20
 80091ba:	46bd      	mov	sp, r7
 80091bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c0:	4770      	bx	lr
	...

080091c4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b088      	sub	sp, #32
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	4608      	mov	r0, r1
 80091ce:	4611      	mov	r1, r2
 80091d0:	461a      	mov	r2, r3
 80091d2:	4603      	mov	r3, r0
 80091d4:	70fb      	strb	r3, [r7, #3]
 80091d6:	460b      	mov	r3, r1
 80091d8:	70bb      	strb	r3, [r7, #2]
 80091da:	4613      	mov	r3, r2
 80091dc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80091de:	2300      	movs	r3, #0
 80091e0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80091e6:	78fb      	ldrb	r3, [r7, #3]
 80091e8:	015a      	lsls	r2, r3, #5
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	4413      	add	r3, r2
 80091ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80091f2:	461a      	mov	r2, r3
 80091f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80091f8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80091fa:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80091fe:	2b03      	cmp	r3, #3
 8009200:	d87e      	bhi.n	8009300 <USB_HC_Init+0x13c>
 8009202:	a201      	add	r2, pc, #4	; (adr r2, 8009208 <USB_HC_Init+0x44>)
 8009204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009208:	08009219 	.word	0x08009219
 800920c:	080092c3 	.word	0x080092c3
 8009210:	08009219 	.word	0x08009219
 8009214:	08009285 	.word	0x08009285
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009218:	78fb      	ldrb	r3, [r7, #3]
 800921a:	015a      	lsls	r2, r3, #5
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	4413      	add	r3, r2
 8009220:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009224:	461a      	mov	r2, r3
 8009226:	f240 439d 	movw	r3, #1181	; 0x49d
 800922a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800922c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009230:	2b00      	cmp	r3, #0
 8009232:	da10      	bge.n	8009256 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009234:	78fb      	ldrb	r3, [r7, #3]
 8009236:	015a      	lsls	r2, r3, #5
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	4413      	add	r3, r2
 800923c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009240:	68db      	ldr	r3, [r3, #12]
 8009242:	78fa      	ldrb	r2, [r7, #3]
 8009244:	0151      	lsls	r1, r2, #5
 8009246:	693a      	ldr	r2, [r7, #16]
 8009248:	440a      	add	r2, r1
 800924a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800924e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009252:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8009254:	e057      	b.n	8009306 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800925a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800925e:	2b00      	cmp	r3, #0
 8009260:	d051      	beq.n	8009306 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009262:	78fb      	ldrb	r3, [r7, #3]
 8009264:	015a      	lsls	r2, r3, #5
 8009266:	693b      	ldr	r3, [r7, #16]
 8009268:	4413      	add	r3, r2
 800926a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800926e:	68db      	ldr	r3, [r3, #12]
 8009270:	78fa      	ldrb	r2, [r7, #3]
 8009272:	0151      	lsls	r1, r2, #5
 8009274:	693a      	ldr	r2, [r7, #16]
 8009276:	440a      	add	r2, r1
 8009278:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800927c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009280:	60d3      	str	r3, [r2, #12]
      break;
 8009282:	e040      	b.n	8009306 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009284:	78fb      	ldrb	r3, [r7, #3]
 8009286:	015a      	lsls	r2, r3, #5
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	4413      	add	r3, r2
 800928c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009290:	461a      	mov	r2, r3
 8009292:	f240 639d 	movw	r3, #1693	; 0x69d
 8009296:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009298:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800929c:	2b00      	cmp	r3, #0
 800929e:	da34      	bge.n	800930a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80092a0:	78fb      	ldrb	r3, [r7, #3]
 80092a2:	015a      	lsls	r2, r3, #5
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	4413      	add	r3, r2
 80092a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092ac:	68db      	ldr	r3, [r3, #12]
 80092ae:	78fa      	ldrb	r2, [r7, #3]
 80092b0:	0151      	lsls	r1, r2, #5
 80092b2:	693a      	ldr	r2, [r7, #16]
 80092b4:	440a      	add	r2, r1
 80092b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092be:	60d3      	str	r3, [r2, #12]
      }

      break;
 80092c0:	e023      	b.n	800930a <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80092c2:	78fb      	ldrb	r3, [r7, #3]
 80092c4:	015a      	lsls	r2, r3, #5
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	4413      	add	r3, r2
 80092ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092ce:	461a      	mov	r2, r3
 80092d0:	f240 2325 	movw	r3, #549	; 0x225
 80092d4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80092d6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	da17      	bge.n	800930e <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80092de:	78fb      	ldrb	r3, [r7, #3]
 80092e0:	015a      	lsls	r2, r3, #5
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	4413      	add	r3, r2
 80092e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	78fa      	ldrb	r2, [r7, #3]
 80092ee:	0151      	lsls	r1, r2, #5
 80092f0:	693a      	ldr	r2, [r7, #16]
 80092f2:	440a      	add	r2, r1
 80092f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80092f8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80092fc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80092fe:	e006      	b.n	800930e <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8009300:	2301      	movs	r3, #1
 8009302:	77fb      	strb	r3, [r7, #31]
      break;
 8009304:	e004      	b.n	8009310 <USB_HC_Init+0x14c>
      break;
 8009306:	bf00      	nop
 8009308:	e002      	b.n	8009310 <USB_HC_Init+0x14c>
      break;
 800930a:	bf00      	nop
 800930c:	e000      	b.n	8009310 <USB_HC_Init+0x14c>
      break;
 800930e:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009310:	78fb      	ldrb	r3, [r7, #3]
 8009312:	015a      	lsls	r2, r3, #5
 8009314:	693b      	ldr	r3, [r7, #16]
 8009316:	4413      	add	r3, r2
 8009318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	78fa      	ldrb	r2, [r7, #3]
 8009320:	0151      	lsls	r1, r2, #5
 8009322:	693a      	ldr	r2, [r7, #16]
 8009324:	440a      	add	r2, r1
 8009326:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800932a:	f043 0302 	orr.w	r3, r3, #2
 800932e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009336:	699a      	ldr	r2, [r3, #24]
 8009338:	78fb      	ldrb	r3, [r7, #3]
 800933a:	f003 030f 	and.w	r3, r3, #15
 800933e:	2101      	movs	r1, #1
 8009340:	fa01 f303 	lsl.w	r3, r1, r3
 8009344:	6939      	ldr	r1, [r7, #16]
 8009346:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800934a:	4313      	orrs	r3, r2
 800934c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	699b      	ldr	r3, [r3, #24]
 8009352:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800935a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800935e:	2b00      	cmp	r3, #0
 8009360:	da03      	bge.n	800936a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009362:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009366:	61bb      	str	r3, [r7, #24]
 8009368:	e001      	b.n	800936e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800936a:	2300      	movs	r3, #0
 800936c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f7ff feff 	bl	8009172 <USB_GetHostSpeed>
 8009374:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009376:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800937a:	2b02      	cmp	r3, #2
 800937c:	d106      	bne.n	800938c <USB_HC_Init+0x1c8>
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2b02      	cmp	r3, #2
 8009382:	d003      	beq.n	800938c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009384:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009388:	617b      	str	r3, [r7, #20]
 800938a:	e001      	b.n	8009390 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800938c:	2300      	movs	r3, #0
 800938e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009390:	787b      	ldrb	r3, [r7, #1]
 8009392:	059b      	lsls	r3, r3, #22
 8009394:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009398:	78bb      	ldrb	r3, [r7, #2]
 800939a:	02db      	lsls	r3, r3, #11
 800939c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80093a0:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80093a2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80093a6:	049b      	lsls	r3, r3, #18
 80093a8:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80093ac:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80093ae:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80093b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80093b4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80093ba:	78fb      	ldrb	r3, [r7, #3]
 80093bc:	0159      	lsls	r1, r3, #5
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	440b      	add	r3, r1
 80093c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093c6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80093cc:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80093ce:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80093d2:	2b03      	cmp	r3, #3
 80093d4:	d003      	beq.n	80093de <USB_HC_Init+0x21a>
 80093d6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80093da:	2b01      	cmp	r3, #1
 80093dc:	d10f      	bne.n	80093fe <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80093de:	78fb      	ldrb	r3, [r7, #3]
 80093e0:	015a      	lsls	r2, r3, #5
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	4413      	add	r3, r2
 80093e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	78fa      	ldrb	r2, [r7, #3]
 80093ee:	0151      	lsls	r1, r2, #5
 80093f0:	693a      	ldr	r2, [r7, #16]
 80093f2:	440a      	add	r2, r1
 80093f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80093f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80093fc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80093fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8009400:	4618      	mov	r0, r3
 8009402:	3720      	adds	r7, #32
 8009404:	46bd      	mov	sp, r7
 8009406:	bd80      	pop	{r7, pc}

08009408 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b08c      	sub	sp, #48	; 0x30
 800940c:	af02      	add	r7, sp, #8
 800940e:	60f8      	str	r0, [r7, #12]
 8009410:	60b9      	str	r1, [r7, #8]
 8009412:	4613      	mov	r3, r2
 8009414:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	785b      	ldrb	r3, [r3, #1]
 800941e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8009420:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009424:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800942a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800942e:	2b00      	cmp	r3, #0
 8009430:	d02d      	beq.n	800948e <USB_HC_StartXfer+0x86>
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	791b      	ldrb	r3, [r3, #4]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d129      	bne.n	800948e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800943a:	79fb      	ldrb	r3, [r7, #7]
 800943c:	2b01      	cmp	r3, #1
 800943e:	d117      	bne.n	8009470 <USB_HC_StartXfer+0x68>
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	79db      	ldrb	r3, [r3, #7]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d003      	beq.n	8009450 <USB_HC_StartXfer+0x48>
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	79db      	ldrb	r3, [r3, #7]
 800944c:	2b02      	cmp	r3, #2
 800944e:	d10f      	bne.n	8009470 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009450:	69fb      	ldr	r3, [r7, #28]
 8009452:	015a      	lsls	r2, r3, #5
 8009454:	6a3b      	ldr	r3, [r7, #32]
 8009456:	4413      	add	r3, r2
 8009458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800945c:	68db      	ldr	r3, [r3, #12]
 800945e:	69fa      	ldr	r2, [r7, #28]
 8009460:	0151      	lsls	r1, r2, #5
 8009462:	6a3a      	ldr	r2, [r7, #32]
 8009464:	440a      	add	r2, r1
 8009466:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800946a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800946e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8009470:	79fb      	ldrb	r3, [r7, #7]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d10b      	bne.n	800948e <USB_HC_StartXfer+0x86>
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	795b      	ldrb	r3, [r3, #5]
 800947a:	2b01      	cmp	r3, #1
 800947c:	d107      	bne.n	800948e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	785b      	ldrb	r3, [r3, #1]
 8009482:	4619      	mov	r1, r3
 8009484:	68f8      	ldr	r0, [r7, #12]
 8009486:	f000 fa0f 	bl	80098a8 <USB_DoPing>
      return HAL_OK;
 800948a:	2300      	movs	r3, #0
 800948c:	e0f8      	b.n	8009680 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	695b      	ldr	r3, [r3, #20]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d018      	beq.n	80094c8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	695b      	ldr	r3, [r3, #20]
 800949a:	68ba      	ldr	r2, [r7, #8]
 800949c:	8912      	ldrh	r2, [r2, #8]
 800949e:	4413      	add	r3, r2
 80094a0:	3b01      	subs	r3, #1
 80094a2:	68ba      	ldr	r2, [r7, #8]
 80094a4:	8912      	ldrh	r2, [r2, #8]
 80094a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80094aa:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80094ac:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80094ae:	8b7b      	ldrh	r3, [r7, #26]
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d90b      	bls.n	80094cc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80094b4:	8b7b      	ldrh	r3, [r7, #26]
 80094b6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80094b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80094ba:	68ba      	ldr	r2, [r7, #8]
 80094bc:	8912      	ldrh	r2, [r2, #8]
 80094be:	fb03 f202 	mul.w	r2, r3, r2
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	611a      	str	r2, [r3, #16]
 80094c6:	e001      	b.n	80094cc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80094c8:	2301      	movs	r3, #1
 80094ca:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	78db      	ldrb	r3, [r3, #3]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d007      	beq.n	80094e4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80094d4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80094d6:	68ba      	ldr	r2, [r7, #8]
 80094d8:	8912      	ldrh	r2, [r2, #8]
 80094da:	fb03 f202 	mul.w	r2, r3, r2
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	611a      	str	r2, [r3, #16]
 80094e2:	e003      	b.n	80094ec <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	695a      	ldr	r2, [r3, #20]
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	691b      	ldr	r3, [r3, #16]
 80094f0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80094f4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80094f6:	04d9      	lsls	r1, r3, #19
 80094f8:	4b63      	ldr	r3, [pc, #396]	; (8009688 <USB_HC_StartXfer+0x280>)
 80094fa:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80094fc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	7a9b      	ldrb	r3, [r3, #10]
 8009502:	075b      	lsls	r3, r3, #29
 8009504:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009508:	69f9      	ldr	r1, [r7, #28]
 800950a:	0148      	lsls	r0, r1, #5
 800950c:	6a39      	ldr	r1, [r7, #32]
 800950e:	4401      	add	r1, r0
 8009510:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009514:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009516:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8009518:	79fb      	ldrb	r3, [r7, #7]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d009      	beq.n	8009532 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	68d9      	ldr	r1, [r3, #12]
 8009522:	69fb      	ldr	r3, [r7, #28]
 8009524:	015a      	lsls	r2, r3, #5
 8009526:	6a3b      	ldr	r3, [r7, #32]
 8009528:	4413      	add	r3, r2
 800952a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800952e:	460a      	mov	r2, r1
 8009530:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8009532:	6a3b      	ldr	r3, [r7, #32]
 8009534:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	f003 0301 	and.w	r3, r3, #1
 800953e:	2b00      	cmp	r3, #0
 8009540:	bf0c      	ite	eq
 8009542:	2301      	moveq	r3, #1
 8009544:	2300      	movne	r3, #0
 8009546:	b2db      	uxtb	r3, r3
 8009548:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800954a:	69fb      	ldr	r3, [r7, #28]
 800954c:	015a      	lsls	r2, r3, #5
 800954e:	6a3b      	ldr	r3, [r7, #32]
 8009550:	4413      	add	r3, r2
 8009552:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	69fa      	ldr	r2, [r7, #28]
 800955a:	0151      	lsls	r1, r2, #5
 800955c:	6a3a      	ldr	r2, [r7, #32]
 800955e:	440a      	add	r2, r1
 8009560:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009564:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009568:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800956a:	69fb      	ldr	r3, [r7, #28]
 800956c:	015a      	lsls	r2, r3, #5
 800956e:	6a3b      	ldr	r3, [r7, #32]
 8009570:	4413      	add	r3, r2
 8009572:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009576:	681a      	ldr	r2, [r3, #0]
 8009578:	7e7b      	ldrb	r3, [r7, #25]
 800957a:	075b      	lsls	r3, r3, #29
 800957c:	69f9      	ldr	r1, [r7, #28]
 800957e:	0148      	lsls	r0, r1, #5
 8009580:	6a39      	ldr	r1, [r7, #32]
 8009582:	4401      	add	r1, r0
 8009584:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8009588:	4313      	orrs	r3, r2
 800958a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800958c:	69fb      	ldr	r3, [r7, #28]
 800958e:	015a      	lsls	r2, r3, #5
 8009590:	6a3b      	ldr	r3, [r7, #32]
 8009592:	4413      	add	r3, r2
 8009594:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800959c:	693b      	ldr	r3, [r7, #16]
 800959e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80095a2:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	78db      	ldrb	r3, [r3, #3]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d004      	beq.n	80095b6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095b2:	613b      	str	r3, [r7, #16]
 80095b4:	e003      	b.n	80095be <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80095b6:	693b      	ldr	r3, [r7, #16]
 80095b8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80095bc:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80095be:	693b      	ldr	r3, [r7, #16]
 80095c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80095c4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80095c6:	69fb      	ldr	r3, [r7, #28]
 80095c8:	015a      	lsls	r2, r3, #5
 80095ca:	6a3b      	ldr	r3, [r7, #32]
 80095cc:	4413      	add	r3, r2
 80095ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80095d2:	461a      	mov	r2, r3
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80095d8:	79fb      	ldrb	r3, [r7, #7]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d001      	beq.n	80095e2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80095de:	2300      	movs	r3, #0
 80095e0:	e04e      	b.n	8009680 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80095e2:	68bb      	ldr	r3, [r7, #8]
 80095e4:	78db      	ldrb	r3, [r3, #3]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d149      	bne.n	800967e <USB_HC_StartXfer+0x276>
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	695b      	ldr	r3, [r3, #20]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d045      	beq.n	800967e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	79db      	ldrb	r3, [r3, #7]
 80095f6:	2b03      	cmp	r3, #3
 80095f8:	d830      	bhi.n	800965c <USB_HC_StartXfer+0x254>
 80095fa:	a201      	add	r2, pc, #4	; (adr r2, 8009600 <USB_HC_StartXfer+0x1f8>)
 80095fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009600:	08009611 	.word	0x08009611
 8009604:	08009635 	.word	0x08009635
 8009608:	08009611 	.word	0x08009611
 800960c:	08009635 	.word	0x08009635
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	695b      	ldr	r3, [r3, #20]
 8009614:	3303      	adds	r3, #3
 8009616:	089b      	lsrs	r3, r3, #2
 8009618:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800961a:	8afa      	ldrh	r2, [r7, #22]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009620:	b29b      	uxth	r3, r3
 8009622:	429a      	cmp	r2, r3
 8009624:	d91c      	bls.n	8009660 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	699b      	ldr	r3, [r3, #24]
 800962a:	f043 0220 	orr.w	r2, r3, #32
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	619a      	str	r2, [r3, #24]
        }
        break;
 8009632:	e015      	b.n	8009660 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	695b      	ldr	r3, [r3, #20]
 8009638:	3303      	adds	r3, #3
 800963a:	089b      	lsrs	r3, r3, #2
 800963c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800963e:	8afa      	ldrh	r2, [r7, #22]
 8009640:	6a3b      	ldr	r3, [r7, #32]
 8009642:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009646:	691b      	ldr	r3, [r3, #16]
 8009648:	b29b      	uxth	r3, r3
 800964a:	429a      	cmp	r2, r3
 800964c:	d90a      	bls.n	8009664 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	699b      	ldr	r3, [r3, #24]
 8009652:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	619a      	str	r2, [r3, #24]
        }
        break;
 800965a:	e003      	b.n	8009664 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800965c:	bf00      	nop
 800965e:	e002      	b.n	8009666 <USB_HC_StartXfer+0x25e>
        break;
 8009660:	bf00      	nop
 8009662:	e000      	b.n	8009666 <USB_HC_StartXfer+0x25e>
        break;
 8009664:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8009666:	68bb      	ldr	r3, [r7, #8]
 8009668:	68d9      	ldr	r1, [r3, #12]
 800966a:	68bb      	ldr	r3, [r7, #8]
 800966c:	785a      	ldrb	r2, [r3, #1]
 800966e:	68bb      	ldr	r3, [r7, #8]
 8009670:	695b      	ldr	r3, [r3, #20]
 8009672:	b29b      	uxth	r3, r3
 8009674:	2000      	movs	r0, #0
 8009676:	9000      	str	r0, [sp, #0]
 8009678:	68f8      	ldr	r0, [r7, #12]
 800967a:	f7ff fb31 	bl	8008ce0 <USB_WritePacket>
  }

  return HAL_OK;
 800967e:	2300      	movs	r3, #0
}
 8009680:	4618      	mov	r0, r3
 8009682:	3728      	adds	r7, #40	; 0x28
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}
 8009688:	1ff80000 	.word	0x1ff80000

0800968c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800968c:	b480      	push	{r7}
 800968e:	b085      	sub	sp, #20
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800969e:	695b      	ldr	r3, [r3, #20]
 80096a0:	b29b      	uxth	r3, r3
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3714      	adds	r7, #20
 80096a6:	46bd      	mov	sp, r7
 80096a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ac:	4770      	bx	lr

080096ae <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80096ae:	b480      	push	{r7}
 80096b0:	b089      	sub	sp, #36	; 0x24
 80096b2:	af00      	add	r7, sp, #0
 80096b4:	6078      	str	r0, [r7, #4]
 80096b6:	460b      	mov	r3, r1
 80096b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80096be:	78fb      	ldrb	r3, [r7, #3]
 80096c0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80096c2:	2300      	movs	r3, #0
 80096c4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80096c6:	69bb      	ldr	r3, [r7, #24]
 80096c8:	015a      	lsls	r2, r3, #5
 80096ca:	69fb      	ldr	r3, [r7, #28]
 80096cc:	4413      	add	r3, r2
 80096ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	0c9b      	lsrs	r3, r3, #18
 80096d6:	f003 0303 	and.w	r3, r3, #3
 80096da:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80096dc:	69bb      	ldr	r3, [r7, #24]
 80096de:	015a      	lsls	r2, r3, #5
 80096e0:	69fb      	ldr	r3, [r7, #28]
 80096e2:	4413      	add	r3, r2
 80096e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	0fdb      	lsrs	r3, r3, #31
 80096ec:	f003 0301 	and.w	r3, r3, #1
 80096f0:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	689b      	ldr	r3, [r3, #8]
 80096f6:	f003 0320 	and.w	r3, r3, #32
 80096fa:	2b20      	cmp	r3, #32
 80096fc:	d104      	bne.n	8009708 <USB_HC_Halt+0x5a>
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d101      	bne.n	8009708 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8009704:	2300      	movs	r3, #0
 8009706:	e0c8      	b.n	800989a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d002      	beq.n	8009714 <USB_HC_Halt+0x66>
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	2b02      	cmp	r3, #2
 8009712:	d163      	bne.n	80097dc <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009714:	69bb      	ldr	r3, [r7, #24]
 8009716:	015a      	lsls	r2, r3, #5
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	4413      	add	r3, r2
 800971c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	69ba      	ldr	r2, [r7, #24]
 8009724:	0151      	lsls	r1, r2, #5
 8009726:	69fa      	ldr	r2, [r7, #28]
 8009728:	440a      	add	r2, r1
 800972a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800972e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009732:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	f003 0320 	and.w	r3, r3, #32
 800973c:	2b00      	cmp	r3, #0
 800973e:	f040 80ab 	bne.w	8009898 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009746:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800974a:	2b00      	cmp	r3, #0
 800974c:	d133      	bne.n	80097b6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800974e:	69bb      	ldr	r3, [r7, #24]
 8009750:	015a      	lsls	r2, r3, #5
 8009752:	69fb      	ldr	r3, [r7, #28]
 8009754:	4413      	add	r3, r2
 8009756:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	69ba      	ldr	r2, [r7, #24]
 800975e:	0151      	lsls	r1, r2, #5
 8009760:	69fa      	ldr	r2, [r7, #28]
 8009762:	440a      	add	r2, r1
 8009764:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009768:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800976c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800976e:	69bb      	ldr	r3, [r7, #24]
 8009770:	015a      	lsls	r2, r3, #5
 8009772:	69fb      	ldr	r3, [r7, #28]
 8009774:	4413      	add	r3, r2
 8009776:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	69ba      	ldr	r2, [r7, #24]
 800977e:	0151      	lsls	r1, r2, #5
 8009780:	69fa      	ldr	r2, [r7, #28]
 8009782:	440a      	add	r2, r1
 8009784:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009788:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800978c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	3301      	adds	r3, #1
 8009792:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800979a:	d81d      	bhi.n	80097d8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800979c:	69bb      	ldr	r3, [r7, #24]
 800979e:	015a      	lsls	r2, r3, #5
 80097a0:	69fb      	ldr	r3, [r7, #28]
 80097a2:	4413      	add	r3, r2
 80097a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80097ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80097b2:	d0ec      	beq.n	800978e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80097b4:	e070      	b.n	8009898 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80097b6:	69bb      	ldr	r3, [r7, #24]
 80097b8:	015a      	lsls	r2, r3, #5
 80097ba:	69fb      	ldr	r3, [r7, #28]
 80097bc:	4413      	add	r3, r2
 80097be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	69ba      	ldr	r2, [r7, #24]
 80097c6:	0151      	lsls	r1, r2, #5
 80097c8:	69fa      	ldr	r2, [r7, #28]
 80097ca:	440a      	add	r2, r1
 80097cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80097d4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80097d6:	e05f      	b.n	8009898 <USB_HC_Halt+0x1ea>
            break;
 80097d8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80097da:	e05d      	b.n	8009898 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80097dc:	69bb      	ldr	r3, [r7, #24]
 80097de:	015a      	lsls	r2, r3, #5
 80097e0:	69fb      	ldr	r3, [r7, #28]
 80097e2:	4413      	add	r3, r2
 80097e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	69ba      	ldr	r2, [r7, #24]
 80097ec:	0151      	lsls	r1, r2, #5
 80097ee:	69fa      	ldr	r2, [r7, #28]
 80097f0:	440a      	add	r2, r1
 80097f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80097f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80097fa:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80097fc:	69fb      	ldr	r3, [r7, #28]
 80097fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009802:	691b      	ldr	r3, [r3, #16]
 8009804:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009808:	2b00      	cmp	r3, #0
 800980a:	d133      	bne.n	8009874 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800980c:	69bb      	ldr	r3, [r7, #24]
 800980e:	015a      	lsls	r2, r3, #5
 8009810:	69fb      	ldr	r3, [r7, #28]
 8009812:	4413      	add	r3, r2
 8009814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	69ba      	ldr	r2, [r7, #24]
 800981c:	0151      	lsls	r1, r2, #5
 800981e:	69fa      	ldr	r2, [r7, #28]
 8009820:	440a      	add	r2, r1
 8009822:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009826:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800982a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800982c:	69bb      	ldr	r3, [r7, #24]
 800982e:	015a      	lsls	r2, r3, #5
 8009830:	69fb      	ldr	r3, [r7, #28]
 8009832:	4413      	add	r3, r2
 8009834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	69ba      	ldr	r2, [r7, #24]
 800983c:	0151      	lsls	r1, r2, #5
 800983e:	69fa      	ldr	r2, [r7, #28]
 8009840:	440a      	add	r2, r1
 8009842:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8009846:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800984a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	3301      	adds	r3, #1
 8009850:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009858:	d81d      	bhi.n	8009896 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800985a:	69bb      	ldr	r3, [r7, #24]
 800985c:	015a      	lsls	r2, r3, #5
 800985e:	69fb      	ldr	r3, [r7, #28]
 8009860:	4413      	add	r3, r2
 8009862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800986c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009870:	d0ec      	beq.n	800984c <USB_HC_Halt+0x19e>
 8009872:	e011      	b.n	8009898 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009874:	69bb      	ldr	r3, [r7, #24]
 8009876:	015a      	lsls	r2, r3, #5
 8009878:	69fb      	ldr	r3, [r7, #28]
 800987a:	4413      	add	r3, r2
 800987c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	69ba      	ldr	r2, [r7, #24]
 8009884:	0151      	lsls	r1, r2, #5
 8009886:	69fa      	ldr	r2, [r7, #28]
 8009888:	440a      	add	r2, r1
 800988a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800988e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009892:	6013      	str	r3, [r2, #0]
 8009894:	e000      	b.n	8009898 <USB_HC_Halt+0x1ea>
          break;
 8009896:	bf00      	nop
    }
  }

  return HAL_OK;
 8009898:	2300      	movs	r3, #0
}
 800989a:	4618      	mov	r0, r3
 800989c:	3724      	adds	r7, #36	; 0x24
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr
	...

080098a8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b087      	sub	sp, #28
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
 80098b0:	460b      	mov	r3, r1
 80098b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80098b8:	78fb      	ldrb	r3, [r7, #3]
 80098ba:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80098bc:	2301      	movs	r3, #1
 80098be:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	04da      	lsls	r2, r3, #19
 80098c4:	4b15      	ldr	r3, [pc, #84]	; (800991c <USB_DoPing+0x74>)
 80098c6:	4013      	ands	r3, r2
 80098c8:	693a      	ldr	r2, [r7, #16]
 80098ca:	0151      	lsls	r1, r2, #5
 80098cc:	697a      	ldr	r2, [r7, #20]
 80098ce:	440a      	add	r2, r1
 80098d0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80098d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80098d8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	015a      	lsls	r2, r3, #5
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	4413      	add	r3, r2
 80098e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80098f0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80098f8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	015a      	lsls	r2, r3, #5
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	4413      	add	r3, r2
 8009902:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009906:	461a      	mov	r2, r3
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800990c:	2300      	movs	r3, #0
}
 800990e:	4618      	mov	r0, r3
 8009910:	371c      	adds	r7, #28
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr
 800991a:	bf00      	nop
 800991c:	1ff80000 	.word	0x1ff80000

08009920 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b088      	sub	sp, #32
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8009928:	2300      	movs	r3, #0
 800992a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8009930:	2300      	movs	r3, #0
 8009932:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8009934:	6878      	ldr	r0, [r7, #4]
 8009936:	f7ff f911 	bl	8008b5c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800993a:	2110      	movs	r1, #16
 800993c:	6878      	ldr	r0, [r7, #4]
 800993e:	f7ff f96b 	bl	8008c18 <USB_FlushTxFifo>
 8009942:	4603      	mov	r3, r0
 8009944:	2b00      	cmp	r3, #0
 8009946:	d001      	beq.n	800994c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8009948:	2301      	movs	r3, #1
 800994a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f7ff f997 	bl	8008c80 <USB_FlushRxFifo>
 8009952:	4603      	mov	r3, r0
 8009954:	2b00      	cmp	r3, #0
 8009956:	d001      	beq.n	800995c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8009958:	2301      	movs	r3, #1
 800995a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800995c:	2300      	movs	r3, #0
 800995e:	61bb      	str	r3, [r7, #24]
 8009960:	e01f      	b.n	80099a2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	015a      	lsls	r2, r3, #5
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	4413      	add	r3, r2
 800996a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009978:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009980:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009988:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	015a      	lsls	r2, r3, #5
 800998e:	697b      	ldr	r3, [r7, #20]
 8009990:	4413      	add	r3, r2
 8009992:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009996:	461a      	mov	r2, r3
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800999c:	69bb      	ldr	r3, [r7, #24]
 800999e:	3301      	adds	r3, #1
 80099a0:	61bb      	str	r3, [r7, #24]
 80099a2:	69bb      	ldr	r3, [r7, #24]
 80099a4:	2b0f      	cmp	r3, #15
 80099a6:	d9dc      	bls.n	8009962 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80099a8:	2300      	movs	r3, #0
 80099aa:	61bb      	str	r3, [r7, #24]
 80099ac:	e034      	b.n	8009a18 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80099ae:	69bb      	ldr	r3, [r7, #24]
 80099b0:	015a      	lsls	r2, r3, #5
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	4413      	add	r3, r2
 80099b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80099be:	693b      	ldr	r3, [r7, #16]
 80099c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80099c4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80099cc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80099ce:	693b      	ldr	r3, [r7, #16]
 80099d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80099d4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80099d6:	69bb      	ldr	r3, [r7, #24]
 80099d8:	015a      	lsls	r2, r3, #5
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	4413      	add	r3, r2
 80099de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80099e2:	461a      	mov	r2, r3
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	3301      	adds	r3, #1
 80099ec:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80099f4:	d80c      	bhi.n	8009a10 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80099f6:	69bb      	ldr	r3, [r7, #24]
 80099f8:	015a      	lsls	r2, r3, #5
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	4413      	add	r3, r2
 80099fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009a08:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a0c:	d0ec      	beq.n	80099e8 <USB_StopHost+0xc8>
 8009a0e:	e000      	b.n	8009a12 <USB_StopHost+0xf2>
        break;
 8009a10:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8009a12:	69bb      	ldr	r3, [r7, #24]
 8009a14:	3301      	adds	r3, #1
 8009a16:	61bb      	str	r3, [r7, #24]
 8009a18:	69bb      	ldr	r3, [r7, #24]
 8009a1a:	2b0f      	cmp	r3, #15
 8009a1c:	d9c7      	bls.n	80099ae <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8009a1e:	697b      	ldr	r3, [r7, #20]
 8009a20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a24:	461a      	mov	r2, r3
 8009a26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009a2a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009a32:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f7ff f880 	bl	8008b3a <USB_EnableGlobalInt>

  return ret;
 8009a3a:	7ffb      	ldrb	r3, [r7, #31]
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3720      	adds	r7, #32
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009a44:	b590      	push	{r4, r7, lr}
 8009a46:	b089      	sub	sp, #36	; 0x24
 8009a48:	af04      	add	r7, sp, #16
 8009a4a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8009a4c:	2301      	movs	r3, #1
 8009a4e:	2202      	movs	r2, #2
 8009a50:	2102      	movs	r1, #2
 8009a52:	6878      	ldr	r0, [r7, #4]
 8009a54:	f000 fcb8 	bl	800a3c8 <USBH_FindInterface>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009a5c:	7bfb      	ldrb	r3, [r7, #15]
 8009a5e:	2bff      	cmp	r3, #255	; 0xff
 8009a60:	d002      	beq.n	8009a68 <USBH_CDC_InterfaceInit+0x24>
 8009a62:	7bfb      	ldrb	r3, [r7, #15]
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d901      	bls.n	8009a6c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009a68:	2302      	movs	r3, #2
 8009a6a:	e13d      	b.n	8009ce8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009a6c:	7bfb      	ldrb	r3, [r7, #15]
 8009a6e:	4619      	mov	r1, r3
 8009a70:	6878      	ldr	r0, [r7, #4]
 8009a72:	f000 fc8d 	bl	800a390 <USBH_SelectInterface>
 8009a76:	4603      	mov	r3, r0
 8009a78:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009a7a:	7bbb      	ldrb	r3, [r7, #14]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d001      	beq.n	8009a84 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009a80:	2302      	movs	r3, #2
 8009a82:	e131      	b.n	8009ce8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8009a8a:	2050      	movs	r0, #80	; 0x50
 8009a8c:	f004 fffc 	bl	800ea88 <malloc>
 8009a90:	4603      	mov	r3, r0
 8009a92:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a9a:	69db      	ldr	r3, [r3, #28]
 8009a9c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d101      	bne.n	8009aa8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009aa4:	2302      	movs	r3, #2
 8009aa6:	e11f      	b.n	8009ce8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009aa8:	2250      	movs	r2, #80	; 0x50
 8009aaa:	2100      	movs	r1, #0
 8009aac:	68b8      	ldr	r0, [r7, #8]
 8009aae:	f005 f809 	bl	800eac4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009ab2:	7bfb      	ldrb	r3, [r7, #15]
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	211a      	movs	r1, #26
 8009ab8:	fb01 f303 	mul.w	r3, r1, r3
 8009abc:	4413      	add	r3, r2
 8009abe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009ac2:	781b      	ldrb	r3, [r3, #0]
 8009ac4:	b25b      	sxtb	r3, r3
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	da15      	bge.n	8009af6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009aca:	7bfb      	ldrb	r3, [r7, #15]
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	211a      	movs	r1, #26
 8009ad0:	fb01 f303 	mul.w	r3, r1, r3
 8009ad4:	4413      	add	r3, r2
 8009ad6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009ada:	781a      	ldrb	r2, [r3, #0]
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009ae0:	7bfb      	ldrb	r3, [r7, #15]
 8009ae2:	687a      	ldr	r2, [r7, #4]
 8009ae4:	211a      	movs	r1, #26
 8009ae6:	fb01 f303 	mul.w	r3, r1, r3
 8009aea:	4413      	add	r3, r2
 8009aec:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009af0:	881a      	ldrh	r2, [r3, #0]
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009af6:	68bb      	ldr	r3, [r7, #8]
 8009af8:	785b      	ldrb	r3, [r3, #1]
 8009afa:	4619      	mov	r1, r3
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f002 f988 	bl	800be12 <USBH_AllocPipe>
 8009b02:	4603      	mov	r3, r0
 8009b04:	461a      	mov	r2, r3
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	7819      	ldrb	r1, [r3, #0]
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	7858      	ldrb	r0, [r3, #1]
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009b1e:	68ba      	ldr	r2, [r7, #8]
 8009b20:	8952      	ldrh	r2, [r2, #10]
 8009b22:	9202      	str	r2, [sp, #8]
 8009b24:	2203      	movs	r2, #3
 8009b26:	9201      	str	r2, [sp, #4]
 8009b28:	9300      	str	r3, [sp, #0]
 8009b2a:	4623      	mov	r3, r4
 8009b2c:	4602      	mov	r2, r0
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f002 f940 	bl	800bdb4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	781b      	ldrb	r3, [r3, #0]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f004 fef5 	bl	800e92c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009b42:	2300      	movs	r3, #0
 8009b44:	2200      	movs	r2, #0
 8009b46:	210a      	movs	r1, #10
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	f000 fc3d 	bl	800a3c8 <USBH_FindInterface>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009b52:	7bfb      	ldrb	r3, [r7, #15]
 8009b54:	2bff      	cmp	r3, #255	; 0xff
 8009b56:	d002      	beq.n	8009b5e <USBH_CDC_InterfaceInit+0x11a>
 8009b58:	7bfb      	ldrb	r3, [r7, #15]
 8009b5a:	2b01      	cmp	r3, #1
 8009b5c:	d901      	bls.n	8009b62 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009b5e:	2302      	movs	r3, #2
 8009b60:	e0c2      	b.n	8009ce8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009b62:	7bfb      	ldrb	r3, [r7, #15]
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	211a      	movs	r1, #26
 8009b68:	fb01 f303 	mul.w	r3, r1, r3
 8009b6c:	4413      	add	r3, r2
 8009b6e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	b25b      	sxtb	r3, r3
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	da16      	bge.n	8009ba8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009b7a:	7bfb      	ldrb	r3, [r7, #15]
 8009b7c:	687a      	ldr	r2, [r7, #4]
 8009b7e:	211a      	movs	r1, #26
 8009b80:	fb01 f303 	mul.w	r3, r1, r3
 8009b84:	4413      	add	r3, r2
 8009b86:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009b8a:	781a      	ldrb	r2, [r3, #0]
 8009b8c:	68bb      	ldr	r3, [r7, #8]
 8009b8e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009b90:	7bfb      	ldrb	r3, [r7, #15]
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	211a      	movs	r1, #26
 8009b96:	fb01 f303 	mul.w	r3, r1, r3
 8009b9a:	4413      	add	r3, r2
 8009b9c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009ba0:	881a      	ldrh	r2, [r3, #0]
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	835a      	strh	r2, [r3, #26]
 8009ba6:	e015      	b.n	8009bd4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009ba8:	7bfb      	ldrb	r3, [r7, #15]
 8009baa:	687a      	ldr	r2, [r7, #4]
 8009bac:	211a      	movs	r1, #26
 8009bae:	fb01 f303 	mul.w	r3, r1, r3
 8009bb2:	4413      	add	r3, r2
 8009bb4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8009bb8:	781a      	ldrb	r2, [r3, #0]
 8009bba:	68bb      	ldr	r3, [r7, #8]
 8009bbc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009bbe:	7bfb      	ldrb	r3, [r7, #15]
 8009bc0:	687a      	ldr	r2, [r7, #4]
 8009bc2:	211a      	movs	r1, #26
 8009bc4:	fb01 f303 	mul.w	r3, r1, r3
 8009bc8:	4413      	add	r3, r2
 8009bca:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8009bce:	881a      	ldrh	r2, [r3, #0]
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009bd4:	7bfb      	ldrb	r3, [r7, #15]
 8009bd6:	687a      	ldr	r2, [r7, #4]
 8009bd8:	211a      	movs	r1, #26
 8009bda:	fb01 f303 	mul.w	r3, r1, r3
 8009bde:	4413      	add	r3, r2
 8009be0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	b25b      	sxtb	r3, r3
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	da16      	bge.n	8009c1a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009bec:	7bfb      	ldrb	r3, [r7, #15]
 8009bee:	687a      	ldr	r2, [r7, #4]
 8009bf0:	211a      	movs	r1, #26
 8009bf2:	fb01 f303 	mul.w	r3, r1, r3
 8009bf6:	4413      	add	r3, r2
 8009bf8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009bfc:	781a      	ldrb	r2, [r3, #0]
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009c02:	7bfb      	ldrb	r3, [r7, #15]
 8009c04:	687a      	ldr	r2, [r7, #4]
 8009c06:	211a      	movs	r1, #26
 8009c08:	fb01 f303 	mul.w	r3, r1, r3
 8009c0c:	4413      	add	r3, r2
 8009c0e:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009c12:	881a      	ldrh	r2, [r3, #0]
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	835a      	strh	r2, [r3, #26]
 8009c18:	e015      	b.n	8009c46 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009c1a:	7bfb      	ldrb	r3, [r7, #15]
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	211a      	movs	r1, #26
 8009c20:	fb01 f303 	mul.w	r3, r1, r3
 8009c24:	4413      	add	r3, r2
 8009c26:	f203 3356 	addw	r3, r3, #854	; 0x356
 8009c2a:	781a      	ldrb	r2, [r3, #0]
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009c30:	7bfb      	ldrb	r3, [r7, #15]
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	211a      	movs	r1, #26
 8009c36:	fb01 f303 	mul.w	r3, r1, r3
 8009c3a:	4413      	add	r3, r2
 8009c3c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009c40:	881a      	ldrh	r2, [r3, #0]
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	7b9b      	ldrb	r3, [r3, #14]
 8009c4a:	4619      	mov	r1, r3
 8009c4c:	6878      	ldr	r0, [r7, #4]
 8009c4e:	f002 f8e0 	bl	800be12 <USBH_AllocPipe>
 8009c52:	4603      	mov	r3, r0
 8009c54:	461a      	mov	r2, r3
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	7bdb      	ldrb	r3, [r3, #15]
 8009c5e:	4619      	mov	r1, r3
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f002 f8d6 	bl	800be12 <USBH_AllocPipe>
 8009c66:	4603      	mov	r3, r0
 8009c68:	461a      	mov	r2, r3
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	7b59      	ldrb	r1, [r3, #13]
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	7b98      	ldrb	r0, [r3, #14]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009c82:	68ba      	ldr	r2, [r7, #8]
 8009c84:	8b12      	ldrh	r2, [r2, #24]
 8009c86:	9202      	str	r2, [sp, #8]
 8009c88:	2202      	movs	r2, #2
 8009c8a:	9201      	str	r2, [sp, #4]
 8009c8c:	9300      	str	r3, [sp, #0]
 8009c8e:	4623      	mov	r3, r4
 8009c90:	4602      	mov	r2, r0
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f002 f88e 	bl	800bdb4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	7b19      	ldrb	r1, [r3, #12]
 8009c9c:	68bb      	ldr	r3, [r7, #8]
 8009c9e:	7bd8      	ldrb	r0, [r3, #15]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009cac:	68ba      	ldr	r2, [r7, #8]
 8009cae:	8b52      	ldrh	r2, [r2, #26]
 8009cb0:	9202      	str	r2, [sp, #8]
 8009cb2:	2202      	movs	r2, #2
 8009cb4:	9201      	str	r2, [sp, #4]
 8009cb6:	9300      	str	r3, [sp, #0]
 8009cb8:	4623      	mov	r3, r4
 8009cba:	4602      	mov	r2, r0
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f002 f879 	bl	800bdb4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	7b5b      	ldrb	r3, [r3, #13]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f004 fe2a 	bl	800e92c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	7b1b      	ldrb	r3, [r3, #12]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	4619      	mov	r1, r3
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f004 fe23 	bl	800e92c <USBH_LL_SetToggle>

  return USBH_OK;
 8009ce6:	2300      	movs	r3, #0
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3714      	adds	r7, #20
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd90      	pop	{r4, r7, pc}

08009cf0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b084      	sub	sp, #16
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009cfe:	69db      	ldr	r3, [r3, #28]
 8009d00:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	781b      	ldrb	r3, [r3, #0]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d00e      	beq.n	8009d28 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	781b      	ldrb	r3, [r3, #0]
 8009d0e:	4619      	mov	r1, r3
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f002 f86e 	bl	800bdf2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	781b      	ldrb	r3, [r3, #0]
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f002 f899 	bl	800be54 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	2200      	movs	r2, #0
 8009d26:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	7b1b      	ldrb	r3, [r3, #12]
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	d00e      	beq.n	8009d4e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	7b1b      	ldrb	r3, [r3, #12]
 8009d34:	4619      	mov	r1, r3
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f002 f85b 	bl	800bdf2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	7b1b      	ldrb	r3, [r3, #12]
 8009d40:	4619      	mov	r1, r3
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f002 f886 	bl	800be54 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	7b5b      	ldrb	r3, [r3, #13]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d00e      	beq.n	8009d74 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	7b5b      	ldrb	r3, [r3, #13]
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f002 f848 	bl	800bdf2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	7b5b      	ldrb	r3, [r3, #13]
 8009d66:	4619      	mov	r1, r3
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	f002 f873 	bl	800be54 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2200      	movs	r2, #0
 8009d72:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d7a:	69db      	ldr	r3, [r3, #28]
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d00b      	beq.n	8009d98 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d86:	69db      	ldr	r3, [r3, #28]
 8009d88:	4618      	mov	r0, r3
 8009d8a:	f004 fe85 	bl	800ea98 <free>
    phost->pActiveClass->pData = 0U;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009d94:	2200      	movs	r2, #0
 8009d96:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009d98:	2300      	movs	r3, #0
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	3710      	adds	r7, #16
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	bd80      	pop	{r7, pc}

08009da2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009da2:	b580      	push	{r7, lr}
 8009da4:	b084      	sub	sp, #16
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009db0:	69db      	ldr	r3, [r3, #28]
 8009db2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	3340      	adds	r3, #64	; 0x40
 8009db8:	4619      	mov	r1, r3
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 f8b1 	bl	8009f22 <GetLineCoding>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009dc4:	7afb      	ldrb	r3, [r7, #11]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d105      	bne.n	8009dd6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009dd0:	2102      	movs	r1, #2
 8009dd2:	6878      	ldr	r0, [r7, #4]
 8009dd4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009dd6:	7afb      	ldrb	r3, [r7, #11]
}
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3710      	adds	r7, #16
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009de0:	b580      	push	{r7, lr}
 8009de2:	b084      	sub	sp, #16
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009de8:	2301      	movs	r3, #1
 8009dea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009dec:	2300      	movs	r3, #0
 8009dee:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009df6:	69db      	ldr	r3, [r3, #28]
 8009df8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009dfa:	68bb      	ldr	r3, [r7, #8]
 8009dfc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8009e00:	2b04      	cmp	r3, #4
 8009e02:	d877      	bhi.n	8009ef4 <USBH_CDC_Process+0x114>
 8009e04:	a201      	add	r2, pc, #4	; (adr r2, 8009e0c <USBH_CDC_Process+0x2c>)
 8009e06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e0a:	bf00      	nop
 8009e0c:	08009e21 	.word	0x08009e21
 8009e10:	08009e27 	.word	0x08009e27
 8009e14:	08009e57 	.word	0x08009e57
 8009e18:	08009ecb 	.word	0x08009ecb
 8009e1c:	08009ed9 	.word	0x08009ed9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009e20:	2300      	movs	r3, #0
 8009e22:	73fb      	strb	r3, [r7, #15]
      break;
 8009e24:	e06d      	b.n	8009f02 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e2a:	4619      	mov	r1, r3
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 f897 	bl	8009f60 <SetLineCoding>
 8009e32:	4603      	mov	r3, r0
 8009e34:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009e36:	7bbb      	ldrb	r3, [r7, #14]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d104      	bne.n	8009e46 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	2202      	movs	r2, #2
 8009e40:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009e44:	e058      	b.n	8009ef8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009e46:	7bbb      	ldrb	r3, [r7, #14]
 8009e48:	2b01      	cmp	r3, #1
 8009e4a:	d055      	beq.n	8009ef8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009e4c:	68bb      	ldr	r3, [r7, #8]
 8009e4e:	2204      	movs	r2, #4
 8009e50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009e54:	e050      	b.n	8009ef8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	3340      	adds	r3, #64	; 0x40
 8009e5a:	4619      	mov	r1, r3
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	f000 f860 	bl	8009f22 <GetLineCoding>
 8009e62:	4603      	mov	r3, r0
 8009e64:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009e66:	7bbb      	ldrb	r3, [r7, #14]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d126      	bne.n	8009eba <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e7e:	791b      	ldrb	r3, [r3, #4]
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d13b      	bne.n	8009efc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e8e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d133      	bne.n	8009efc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009e9e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009ea0:	429a      	cmp	r2, r3
 8009ea2:	d12b      	bne.n	8009efc <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009ea4:	68bb      	ldr	r3, [r7, #8]
 8009ea6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009eac:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	d124      	bne.n	8009efc <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f000 f982 	bl	800a1bc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009eb8:	e020      	b.n	8009efc <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009eba:	7bbb      	ldrb	r3, [r7, #14]
 8009ebc:	2b01      	cmp	r3, #1
 8009ebe:	d01d      	beq.n	8009efc <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	2204      	movs	r2, #4
 8009ec4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009ec8:	e018      	b.n	8009efc <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f000 f867 	bl	8009f9e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f000 f8f6 	bl	800a0c2 <CDC_ProcessReception>
      break;
 8009ed6:	e014      	b.n	8009f02 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009ed8:	2100      	movs	r1, #0
 8009eda:	6878      	ldr	r0, [r7, #4]
 8009edc:	f001 f95b 	bl	800b196 <USBH_ClrFeature>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009ee4:	7bbb      	ldrb	r3, [r7, #14]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d10a      	bne.n	8009f00 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	2200      	movs	r2, #0
 8009eee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8009ef2:	e005      	b.n	8009f00 <USBH_CDC_Process+0x120>

    default:
      break;
 8009ef4:	bf00      	nop
 8009ef6:	e004      	b.n	8009f02 <USBH_CDC_Process+0x122>
      break;
 8009ef8:	bf00      	nop
 8009efa:	e002      	b.n	8009f02 <USBH_CDC_Process+0x122>
      break;
 8009efc:	bf00      	nop
 8009efe:	e000      	b.n	8009f02 <USBH_CDC_Process+0x122>
      break;
 8009f00:	bf00      	nop

  }

  return status;
 8009f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f04:	4618      	mov	r0, r3
 8009f06:	3710      	adds	r7, #16
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009f0c:	b480      	push	{r7}
 8009f0e:	b083      	sub	sp, #12
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009f14:	2300      	movs	r3, #0
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	370c      	adds	r7, #12
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f20:	4770      	bx	lr

08009f22 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009f22:	b580      	push	{r7, lr}
 8009f24:	b082      	sub	sp, #8
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	6078      	str	r0, [r7, #4]
 8009f2a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	22a1      	movs	r2, #161	; 0xa1
 8009f30:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2221      	movs	r2, #33	; 0x21
 8009f36:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2200      	movs	r2, #0
 8009f42:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2207      	movs	r2, #7
 8009f48:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	2207      	movs	r2, #7
 8009f4e:	4619      	mov	r1, r3
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f001 fbed 	bl	800b730 <USBH_CtlReq>
 8009f56:	4603      	mov	r3, r0
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3708      	adds	r7, #8
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b082      	sub	sp, #8
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2221      	movs	r2, #33	; 0x21
 8009f6e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	2220      	movs	r2, #32
 8009f74:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	2200      	movs	r2, #0
 8009f7a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2207      	movs	r2, #7
 8009f86:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	2207      	movs	r2, #7
 8009f8c:	4619      	mov	r1, r3
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f001 fbce 	bl	800b730 <USBH_CtlReq>
 8009f94:	4603      	mov	r3, r0
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3708      	adds	r7, #8
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}

08009f9e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b086      	sub	sp, #24
 8009fa2:	af02      	add	r7, sp, #8
 8009fa4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009fac:	69db      	ldr	r3, [r3, #28]
 8009fae:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8009fba:	2b01      	cmp	r3, #1
 8009fbc:	d002      	beq.n	8009fc4 <CDC_ProcessTransmission+0x26>
 8009fbe:	2b02      	cmp	r3, #2
 8009fc0:	d023      	beq.n	800a00a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009fc2:	e07a      	b.n	800a0ba <CDC_ProcessTransmission+0x11c>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fc8:	68fa      	ldr	r2, [r7, #12]
 8009fca:	8b12      	ldrh	r2, [r2, #24]
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	d90b      	bls.n	8009fe8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	69d9      	ldr	r1, [r3, #28]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	8b1a      	ldrh	r2, [r3, #24]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	7b5b      	ldrb	r3, [r3, #13]
 8009fdc:	2001      	movs	r0, #1
 8009fde:	9000      	str	r0, [sp, #0]
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f001 fea4 	bl	800bd2e <USBH_BulkSendData>
 8009fe6:	e00b      	b.n	800a000 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8009ff0:	b29a      	uxth	r2, r3
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	7b5b      	ldrb	r3, [r3, #13]
 8009ff6:	2001      	movs	r0, #1
 8009ff8:	9000      	str	r0, [sp, #0]
 8009ffa:	6878      	ldr	r0, [r7, #4]
 8009ffc:	f001 fe97 	bl	800bd2e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	2202      	movs	r2, #2
 800a004:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800a008:	e057      	b.n	800a0ba <CDC_ProcessTransmission+0x11c>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	7b5b      	ldrb	r3, [r3, #13]
 800a00e:	4619      	mov	r1, r3
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f004 fc61 	bl	800e8d8 <USBH_LL_GetURBState>
 800a016:	4603      	mov	r3, r0
 800a018:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800a01a:	7afb      	ldrb	r3, [r7, #11]
 800a01c:	2b01      	cmp	r3, #1
 800a01e:	d136      	bne.n	800a08e <CDC_ProcessTransmission+0xf0>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a024:	68fa      	ldr	r2, [r7, #12]
 800a026:	8b12      	ldrh	r2, [r2, #24]
 800a028:	4293      	cmp	r3, r2
 800a02a:	d90e      	bls.n	800a04a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a030:	68fa      	ldr	r2, [r7, #12]
 800a032:	8b12      	ldrh	r2, [r2, #24]
 800a034:	1a9a      	subs	r2, r3, r2
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	69db      	ldr	r3, [r3, #28]
 800a03e:	68fa      	ldr	r2, [r7, #12]
 800a040:	8b12      	ldrh	r2, [r2, #24]
 800a042:	441a      	add	r2, r3
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	61da      	str	r2, [r3, #28]
 800a048:	e002      	b.n	800a050 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	2200      	movs	r2, #0
 800a04e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a054:	2b00      	cmp	r3, #0
 800a056:	d004      	beq.n	800a062 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	2201      	movs	r2, #1
 800a05c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800a060:	e006      	b.n	800a070 <CDC_ProcessTransmission+0xd2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	2200      	movs	r2, #0
 800a066:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 f892 	bl	800a194 <USBH_CDC_TransmitCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2204      	movs	r2, #4
 800a074:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a084:	2200      	movs	r2, #0
 800a086:	4619      	mov	r1, r3
 800a088:	f001 ffe0 	bl	800c04c <osMessagePut>
      break;
 800a08c:	e014      	b.n	800a0b8 <CDC_ProcessTransmission+0x11a>
        if (URB_Status == USBH_URB_NOTREADY)
 800a08e:	7afb      	ldrb	r3, [r7, #11]
 800a090:	2b02      	cmp	r3, #2
 800a092:	d111      	bne.n	800a0b8 <CDC_ProcessTransmission+0x11a>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2201      	movs	r2, #1
 800a098:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2204      	movs	r2, #4
 800a0a0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	4619      	mov	r1, r3
 800a0b4:	f001 ffca 	bl	800c04c <osMessagePut>
      break;
 800a0b8:	bf00      	nop
  }
}
 800a0ba:	bf00      	nop
 800a0bc:	3710      	adds	r7, #16
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	bd80      	pop	{r7, pc}

0800a0c2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a0c2:	b580      	push	{r7, lr}
 800a0c4:	b086      	sub	sp, #24
 800a0c6:	af00      	add	r7, sp, #0
 800a0c8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a0d0:	69db      	ldr	r3, [r3, #28]
 800a0d2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a0d4:	2300      	movs	r3, #0
 800a0d6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a0d8:	697b      	ldr	r3, [r7, #20]
 800a0da:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800a0de:	2b03      	cmp	r3, #3
 800a0e0:	d002      	beq.n	800a0e8 <CDC_ProcessReception+0x26>
 800a0e2:	2b04      	cmp	r3, #4
 800a0e4:	d00e      	beq.n	800a104 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a0e6:	e051      	b.n	800a18c <CDC_ProcessReception+0xca>
      (void)USBH_BulkReceiveData(phost,
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	6a19      	ldr	r1, [r3, #32]
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	8b5a      	ldrh	r2, [r3, #26]
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	7b1b      	ldrb	r3, [r3, #12]
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f001 fe3f 	bl	800bd78 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a0fa:	697b      	ldr	r3, [r7, #20]
 800a0fc:	2204      	movs	r2, #4
 800a0fe:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800a102:	e043      	b.n	800a18c <CDC_ProcessReception+0xca>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	7b1b      	ldrb	r3, [r3, #12]
 800a108:	4619      	mov	r1, r3
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f004 fbe4 	bl	800e8d8 <USBH_LL_GetURBState>
 800a110:	4603      	mov	r3, r0
 800a112:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a114:	7cfb      	ldrb	r3, [r7, #19]
 800a116:	2b01      	cmp	r3, #1
 800a118:	d137      	bne.n	800a18a <CDC_ProcessReception+0xc8>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a11a:	697b      	ldr	r3, [r7, #20]
 800a11c:	7b1b      	ldrb	r3, [r3, #12]
 800a11e:	4619      	mov	r1, r3
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f004 fb47 	bl	800e7b4 <USBH_LL_GetLastXferSize>
 800a126:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800a128:	697b      	ldr	r3, [r7, #20]
 800a12a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a12c:	68fa      	ldr	r2, [r7, #12]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d016      	beq.n	800a160 <CDC_ProcessReception+0x9e>
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	8b5b      	ldrh	r3, [r3, #26]
 800a136:	461a      	mov	r2, r3
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d910      	bls.n	800a160 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	1ad2      	subs	r2, r2, r3
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	6a1a      	ldr	r2, [r3, #32]
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	441a      	add	r2, r3
 800a152:	697b      	ldr	r3, [r7, #20]
 800a154:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a156:	697b      	ldr	r3, [r7, #20]
 800a158:	2203      	movs	r2, #3
 800a15a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800a15e:	e006      	b.n	800a16e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a160:	697b      	ldr	r3, [r7, #20]
 800a162:	2200      	movs	r2, #0
 800a164:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 f81d 	bl	800a1a8 <USBH_CDC_ReceiveCallback>
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2204      	movs	r2, #4
 800a172:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a182:	2200      	movs	r2, #0
 800a184:	4619      	mov	r1, r3
 800a186:	f001 ff61 	bl	800c04c <osMessagePut>
      break;
 800a18a:	bf00      	nop
  }
}
 800a18c:	bf00      	nop
 800a18e:	3718      	adds	r7, #24
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}

0800a194 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a194:	b480      	push	{r7}
 800a196:	b083      	sub	sp, #12
 800a198:	af00      	add	r7, sp, #0
 800a19a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a19c:	bf00      	nop
 800a19e:	370c      	adds	r7, #12
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a6:	4770      	bx	lr

0800a1a8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b083      	sub	sp, #12
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a1b0:	bf00      	nop
 800a1b2:	370c      	adds	r7, #12
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr

0800a1bc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b083      	sub	sp, #12
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a1c4:	bf00      	nop
 800a1c6:	370c      	adds	r7, #12
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800a1d0:	b5b0      	push	{r4, r5, r7, lr}
 800a1d2:	b090      	sub	sp, #64	; 0x40
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	60f8      	str	r0, [r7, #12]
 800a1d8:	60b9      	str	r1, [r7, #8]
 800a1da:	4613      	mov	r3, r2
 800a1dc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d101      	bne.n	800a1e8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a1e4:	2302      	movs	r3, #2
 800a1e6:	e04d      	b.n	800a284 <USBH_Init+0xb4>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	79fa      	ldrb	r2, [r7, #7]
 800a1ec:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a200:	68f8      	ldr	r0, [r7, #12]
 800a202:	f000 f847 	bl	800a294 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	2200      	movs	r2, #0
 800a20a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	2200      	movs	r2, #0
 800a212:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2200      	movs	r2, #0
 800a21a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	2200      	movs	r2, #0
 800a222:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d003      	beq.n	800a234 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	68ba      	ldr	r2, [r7, #8]
 800a230:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800a234:	4b15      	ldr	r3, [pc, #84]	; (800a28c <USBH_Init+0xbc>)
 800a236:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800a23a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800a23c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  phost->os_event = osMessageCreate(osMessageQ(USBH_Queue), NULL);
 800a240:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800a244:	2100      	movs	r1, #0
 800a246:	4618      	mov	r0, r3
 800a248:	f001 fed7 	bl	800bffa <osMessageCreate>
 800a24c:	4602      	mov	r2, r0
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f8c3 23d8 	str.w	r2, [r3, #984]	; 0x3d8

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800a254:	4b0e      	ldr	r3, [pc, #56]	; (800a290 <USBH_Init+0xc0>)
 800a256:	f107 0414 	add.w	r4, r7, #20
 800a25a:	461d      	mov	r5, r3
 800a25c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a25e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a260:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a264:	e884 0007 	stmia.w	r4, {r0, r1, r2}
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate(osThread(USBH_Thread), phost);
 800a268:	f107 0314 	add.w	r3, r7, #20
 800a26c:	68f9      	ldr	r1, [r7, #12]
 800a26e:	4618      	mov	r0, r3
 800a270:	f001 fe63 	bl	800bf3a <osThreadCreate>
 800a274:	4602      	mov	r2, r0
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f8c3 23dc 	str.w	r2, [r3, #988]	; 0x3dc

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a27c:	68f8      	ldr	r0, [r7, #12]
 800a27e:	f004 f9db 	bl	800e638 <USBH_LL_Init>

  return USBH_OK;
 800a282:	2300      	movs	r3, #0
}
 800a284:	4618      	mov	r0, r3
 800a286:	3740      	adds	r7, #64	; 0x40
 800a288:	46bd      	mov	sp, r7
 800a28a:	bdb0      	pop	{r4, r5, r7, pc}
 800a28c:	0800f414 	.word	0x0800f414
 800a290:	0800f424 	.word	0x0800f424

0800a294 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a294:	b480      	push	{r7}
 800a296:	b085      	sub	sp, #20
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a29c:	2300      	movs	r3, #0
 800a29e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	60fb      	str	r3, [r7, #12]
 800a2a4:	e009      	b.n	800a2ba <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a2a6:	687a      	ldr	r2, [r7, #4]
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	33e0      	adds	r3, #224	; 0xe0
 800a2ac:	009b      	lsls	r3, r3, #2
 800a2ae:	4413      	add	r3, r2
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	3301      	adds	r3, #1
 800a2b8:	60fb      	str	r3, [r7, #12]
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	2b0f      	cmp	r3, #15
 800a2be:	d9f2      	bls.n	800a2a6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	60fb      	str	r3, [r7, #12]
 800a2c4:	e009      	b.n	800a2da <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a2c6:	687a      	ldr	r2, [r7, #4]
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	4413      	add	r3, r2
 800a2cc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	3301      	adds	r3, #1
 800a2d8:	60fb      	str	r3, [r7, #12]
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2e0:	d3f1      	bcc.n	800a2c6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2200      	movs	r2, #0
 800a2ec:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2201      	movs	r2, #1
 800a2f2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2201      	movs	r2, #1
 800a300:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2240      	movs	r2, #64	; 0x40
 800a306:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	2200      	movs	r2, #0
 800a30c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2200      	movs	r2, #0
 800a312:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	2201      	movs	r2, #1
 800a31a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	2200      	movs	r2, #0
 800a322:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2200      	movs	r2, #0
 800a32a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800a32e:	2300      	movs	r3, #0
}
 800a330:	4618      	mov	r0, r3
 800a332:	3714      	adds	r7, #20
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr

0800a33c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a33c:	b480      	push	{r7}
 800a33e:	b085      	sub	sp, #20
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
 800a344:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a346:	2300      	movs	r3, #0
 800a348:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d016      	beq.n	800a37e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a356:	2b00      	cmp	r3, #0
 800a358:	d10e      	bne.n	800a378 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a360:	1c59      	adds	r1, r3, #1
 800a362:	687a      	ldr	r2, [r7, #4]
 800a364:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	33de      	adds	r3, #222	; 0xde
 800a36c:	6839      	ldr	r1, [r7, #0]
 800a36e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a372:	2300      	movs	r3, #0
 800a374:	73fb      	strb	r3, [r7, #15]
 800a376:	e004      	b.n	800a382 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a378:	2302      	movs	r3, #2
 800a37a:	73fb      	strb	r3, [r7, #15]
 800a37c:	e001      	b.n	800a382 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a37e:	2302      	movs	r3, #2
 800a380:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a382:	7bfb      	ldrb	r3, [r7, #15]
}
 800a384:	4618      	mov	r0, r3
 800a386:	3714      	adds	r7, #20
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr

0800a390 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a390:	b480      	push	{r7}
 800a392:	b085      	sub	sp, #20
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
 800a398:	460b      	mov	r3, r1
 800a39a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a39c:	2300      	movs	r3, #0
 800a39e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800a3a6:	78fa      	ldrb	r2, [r7, #3]
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d204      	bcs.n	800a3b6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	78fa      	ldrb	r2, [r7, #3]
 800a3b0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800a3b4:	e001      	b.n	800a3ba <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a3b6:	2302      	movs	r3, #2
 800a3b8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a3ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3bc:	4618      	mov	r0, r3
 800a3be:	3714      	adds	r7, #20
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c6:	4770      	bx	lr

0800a3c8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b087      	sub	sp, #28
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	4608      	mov	r0, r1
 800a3d2:	4611      	mov	r1, r2
 800a3d4:	461a      	mov	r2, r3
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	70fb      	strb	r3, [r7, #3]
 800a3da:	460b      	mov	r3, r1
 800a3dc:	70bb      	strb	r3, [r7, #2]
 800a3de:	4613      	mov	r3, r2
 800a3e0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a3e6:	2300      	movs	r3, #0
 800a3e8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a3f0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a3f2:	e025      	b.n	800a440 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a3f4:	7dfb      	ldrb	r3, [r7, #23]
 800a3f6:	221a      	movs	r2, #26
 800a3f8:	fb02 f303 	mul.w	r3, r2, r3
 800a3fc:	3308      	adds	r3, #8
 800a3fe:	68fa      	ldr	r2, [r7, #12]
 800a400:	4413      	add	r3, r2
 800a402:	3302      	adds	r3, #2
 800a404:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a406:	693b      	ldr	r3, [r7, #16]
 800a408:	795b      	ldrb	r3, [r3, #5]
 800a40a:	78fa      	ldrb	r2, [r7, #3]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d002      	beq.n	800a416 <USBH_FindInterface+0x4e>
 800a410:	78fb      	ldrb	r3, [r7, #3]
 800a412:	2bff      	cmp	r3, #255	; 0xff
 800a414:	d111      	bne.n	800a43a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a416:	693b      	ldr	r3, [r7, #16]
 800a418:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a41a:	78ba      	ldrb	r2, [r7, #2]
 800a41c:	429a      	cmp	r2, r3
 800a41e:	d002      	beq.n	800a426 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a420:	78bb      	ldrb	r3, [r7, #2]
 800a422:	2bff      	cmp	r3, #255	; 0xff
 800a424:	d109      	bne.n	800a43a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a426:	693b      	ldr	r3, [r7, #16]
 800a428:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a42a:	787a      	ldrb	r2, [r7, #1]
 800a42c:	429a      	cmp	r2, r3
 800a42e:	d002      	beq.n	800a436 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a430:	787b      	ldrb	r3, [r7, #1]
 800a432:	2bff      	cmp	r3, #255	; 0xff
 800a434:	d101      	bne.n	800a43a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a436:	7dfb      	ldrb	r3, [r7, #23]
 800a438:	e006      	b.n	800a448 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a43a:	7dfb      	ldrb	r3, [r7, #23]
 800a43c:	3301      	adds	r3, #1
 800a43e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a440:	7dfb      	ldrb	r3, [r7, #23]
 800a442:	2b01      	cmp	r3, #1
 800a444:	d9d6      	bls.n	800a3f4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a446:	23ff      	movs	r3, #255	; 0xff
}
 800a448:	4618      	mov	r0, r3
 800a44a:	371c      	adds	r7, #28
 800a44c:	46bd      	mov	sp, r7
 800a44e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a452:	4770      	bx	lr

0800a454 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b082      	sub	sp, #8
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f004 f931 	bl	800e6c4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a462:	2101      	movs	r1, #1
 800a464:	6878      	ldr	r0, [r7, #4]
 800a466:	f004 fa4a 	bl	800e8fe <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a46a:	2300      	movs	r3, #0
}
 800a46c:	4618      	mov	r0, r3
 800a46e:	3708      	adds	r7, #8
 800a470:	46bd      	mov	sp, r7
 800a472:	bd80      	pop	{r7, pc}

0800a474 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b088      	sub	sp, #32
 800a478:	af04      	add	r7, sp, #16
 800a47a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a47c:	2302      	movs	r3, #2
 800a47e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a480:	2300      	movs	r3, #0
 800a482:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a48a:	b2db      	uxtb	r3, r3
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d102      	bne.n	800a496 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2203      	movs	r2, #3
 800a494:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	781b      	ldrb	r3, [r3, #0]
 800a49a:	b2db      	uxtb	r3, r3
 800a49c:	2b0b      	cmp	r3, #11
 800a49e:	f200 8247 	bhi.w	800a930 <USBH_Process+0x4bc>
 800a4a2:	a201      	add	r2, pc, #4	; (adr r2, 800a4a8 <USBH_Process+0x34>)
 800a4a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a8:	0800a4d9 	.word	0x0800a4d9
 800a4ac:	0800a527 	.word	0x0800a527
 800a4b0:	0800a5ab 	.word	0x0800a5ab
 800a4b4:	0800a8af 	.word	0x0800a8af
 800a4b8:	0800a931 	.word	0x0800a931
 800a4bc:	0800a66b 	.word	0x0800a66b
 800a4c0:	0800a839 	.word	0x0800a839
 800a4c4:	0800a6bd 	.word	0x0800a6bd
 800a4c8:	0800a6f9 	.word	0x0800a6f9
 800a4cc:	0800a733 	.word	0x0800a733
 800a4d0:	0800a791 	.word	0x0800a791
 800a4d4:	0800a897 	.word	0x0800a897
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a4de:	b2db      	uxtb	r3, r3
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	f000 8227 	beq.w	800a934 <USBH_Process+0x4c0>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	2201      	movs	r2, #1
 800a4ea:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a4ec:	20c8      	movs	r0, #200	; 0xc8
 800a4ee:	f004 fa4d 	bl	800e98c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a4f2:	6878      	ldr	r0, [r7, #4]
 800a4f4:	f004 f943 	bl	800e77e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2200      	movs	r2, #0
 800a4fc:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2200      	movs	r2, #0
 800a504:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2201      	movs	r2, #1
 800a50c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a51c:	2200      	movs	r2, #0
 800a51e:	4619      	mov	r1, r3
 800a520:	f001 fd94 	bl	800c04c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a524:	e206      	b.n	800a934 <USBH_Process+0x4c0>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d107      	bne.n	800a540 <USBH_Process+0xcc>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2200      	movs	r2, #0
 800a534:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2202      	movs	r2, #2
 800a53c:	701a      	strb	r2, [r3, #0]
 800a53e:	e025      	b.n	800a58c <USBH_Process+0x118>
      }
      else
      {
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a546:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a54a:	d914      	bls.n	800a576 <USBH_Process+0x102>
        {
          phost->device.RstCnt++;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a552:	3301      	adds	r3, #1
 800a554:	b2da      	uxtb	r2, r3
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800a562:	2b03      	cmp	r3, #3
 800a564:	d903      	bls.n	800a56e <USBH_Process+0xfa>
          {
            /* Buggy Device can't complete reset */
            USBH_UsrLog("USB Reset Failed, Please unplug the Device.");
            phost->gState = HOST_ABORT_STATE;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	220d      	movs	r2, #13
 800a56a:	701a      	strb	r2, [r3, #0]
 800a56c:	e00e      	b.n	800a58c <USBH_Process+0x118>
          }
          else
          {
            phost->gState = HOST_IDLE;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	2200      	movs	r2, #0
 800a572:	701a      	strb	r2, [r3, #0]
 800a574:	e00a      	b.n	800a58c <USBH_Process+0x118>
          }
        }
        else
        {
          phost->Timeout += 10U;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800a57c:	f103 020a 	add.w	r2, r3, #10
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800a586:	200a      	movs	r0, #10
 800a588:	f004 fa00 	bl	800e98c <USBH_Delay>
        }
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2201      	movs	r2, #1
 800a590:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	4619      	mov	r1, r3
 800a5a4:	f001 fd52 	bl	800c04c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a5a8:	e1cb      	b.n	800a942 <USBH_Process+0x4ce>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d005      	beq.n	800a5c0 <USBH_Process+0x14c>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a5ba:	2104      	movs	r1, #4
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a5c0:	2064      	movs	r0, #100	; 0x64
 800a5c2:	f004 f9e3 	bl	800e98c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a5c6:	6878      	ldr	r0, [r7, #4]
 800a5c8:	f004 f8b2 	bl	800e730 <USBH_LL_GetSpeed>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	461a      	mov	r2, r3
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2205      	movs	r2, #5
 800a5da:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a5dc:	2100      	movs	r1, #0
 800a5de:	6878      	ldr	r0, [r7, #4]
 800a5e0:	f001 fc17 	bl	800be12 <USBH_AllocPipe>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	461a      	mov	r2, r3
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a5ec:	2180      	movs	r1, #128	; 0x80
 800a5ee:	6878      	ldr	r0, [r7, #4]
 800a5f0:	f001 fc0f 	bl	800be12 <USBH_AllocPipe>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	7919      	ldrb	r1, [r3, #4]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a60c:	687a      	ldr	r2, [r7, #4]
 800a60e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a610:	b292      	uxth	r2, r2
 800a612:	9202      	str	r2, [sp, #8]
 800a614:	2200      	movs	r2, #0
 800a616:	9201      	str	r2, [sp, #4]
 800a618:	9300      	str	r3, [sp, #0]
 800a61a:	4603      	mov	r3, r0
 800a61c:	2280      	movs	r2, #128	; 0x80
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f001 fbc8 	bl	800bdb4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	7959      	ldrb	r1, [r3, #5]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a634:	687a      	ldr	r2, [r7, #4]
 800a636:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a638:	b292      	uxth	r2, r2
 800a63a:	9202      	str	r2, [sp, #8]
 800a63c:	2200      	movs	r2, #0
 800a63e:	9201      	str	r2, [sp, #4]
 800a640:	9300      	str	r3, [sp, #0]
 800a642:	4603      	mov	r3, r0
 800a644:	2200      	movs	r2, #0
 800a646:	6878      	ldr	r0, [r7, #4]
 800a648:	f001 fbb4 	bl	800bdb4 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2201      	movs	r2, #1
 800a650:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a660:	2200      	movs	r2, #0
 800a662:	4619      	mov	r1, r3
 800a664:	f001 fcf2 	bl	800c04c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a668:	e16b      	b.n	800a942 <USBH_Process+0x4ce>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a66a:	6878      	ldr	r0, [r7, #4]
 800a66c:	f000 f96e 	bl	800a94c <USBH_HandleEnum>
 800a670:	4603      	mov	r3, r0
 800a672:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a674:	7bbb      	ldrb	r3, [r7, #14]
 800a676:	b2db      	uxtb	r3, r3
 800a678:	2b00      	cmp	r3, #0
 800a67a:	f040 815d 	bne.w	800a938 <USBH_Process+0x4c4>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2200      	movs	r2, #0
 800a682:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800a68c:	2b01      	cmp	r3, #1
 800a68e:	d103      	bne.n	800a698 <USBH_Process+0x224>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	2208      	movs	r2, #8
 800a694:	701a      	strb	r2, [r3, #0]
 800a696:	e002      	b.n	800a69e <USBH_Process+0x22a>
        }
        else
        {
          phost->gState = HOST_INPUT;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2207      	movs	r2, #7
 800a69c:	701a      	strb	r2, [r3, #0]
        }
#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2205      	movs	r2, #5
 800a6a2:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	4619      	mov	r1, r3
 800a6b6:	f001 fcc9 	bl	800c04c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a6ba:	e13d      	b.n	800a938 <USBH_Process+0x4c4>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	f000 813a 	beq.w	800a93c <USBH_Process+0x4c8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a6ce:	2101      	movs	r1, #1
 800a6d0:	6878      	ldr	r0, [r7, #4]
 800a6d2:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	2208      	movs	r2, #8
 800a6d8:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2205      	movs	r2, #5
 800a6de:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	4619      	mov	r1, r3
 800a6f2:	f001 fcab 	bl	800c04c <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800a6f6:	e121      	b.n	800a93c <USBH_Process+0x4c8>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	4619      	mov	r1, r3
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 fd00 	bl	800b108 <USBH_SetCfg>
 800a708:	4603      	mov	r3, r0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d102      	bne.n	800a714 <USBH_Process+0x2a0>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2209      	movs	r2, #9
 800a712:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Default configuration set.");
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2201      	movs	r2, #1
 800a718:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a728:	2200      	movs	r2, #0
 800a72a:	4619      	mov	r1, r3
 800a72c:	f001 fc8e 	bl	800c04c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a730:	e107      	b.n	800a942 <USBH_Process+0x4ce>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800a738:	f003 0320 	and.w	r3, r3, #32
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d015      	beq.n	800a76c <USBH_Process+0x2f8>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a740:	2101      	movs	r1, #1
 800a742:	6878      	ldr	r0, [r7, #4]
 800a744:	f000 fd03 	bl	800b14e <USBH_SetFeature>
 800a748:	4603      	mov	r3, r0
 800a74a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a74c:	7bbb      	ldrb	r3, [r7, #14]
 800a74e:	b2db      	uxtb	r3, r3
 800a750:	2b00      	cmp	r3, #0
 800a752:	d103      	bne.n	800a75c <USBH_Process+0x2e8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	220a      	movs	r2, #10
 800a758:	701a      	strb	r2, [r3, #0]
 800a75a:	e00a      	b.n	800a772 <USBH_Process+0x2fe>
        }
        else if (status == USBH_NOT_SUPPORTED)
 800a75c:	7bbb      	ldrb	r3, [r7, #14]
 800a75e:	b2db      	uxtb	r3, r3
 800a760:	2b03      	cmp	r3, #3
 800a762:	d106      	bne.n	800a772 <USBH_Process+0x2fe>
        {
          USBH_UsrLog("Remote wakeup not supported by the device");
          phost->gState = HOST_CHECK_CLASS;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	220a      	movs	r2, #10
 800a768:	701a      	strb	r2, [r3, #0]
 800a76a:	e002      	b.n	800a772 <USBH_Process+0x2fe>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_CHECK_CLASS;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	220a      	movs	r2, #10
 800a770:	701a      	strb	r2, [r3, #0]
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2201      	movs	r2, #1
 800a776:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a786:	2200      	movs	r2, #0
 800a788:	4619      	mov	r1, r3
 800a78a:	f001 fc5f 	bl	800c04c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a78e:	e0d8      	b.n	800a942 <USBH_Process+0x4ce>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800a796:	2b00      	cmp	r3, #0
 800a798:	d03f      	beq.n	800a81a <USBH_Process+0x3a6>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2200      	movs	r2, #0
 800a79e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	73fb      	strb	r3, [r7, #15]
 800a7a6:	e016      	b.n	800a7d6 <USBH_Process+0x362>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a7a8:	7bfa      	ldrb	r2, [r7, #15]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	32de      	adds	r2, #222	; 0xde
 800a7ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7b2:	791a      	ldrb	r2, [r3, #4]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d108      	bne.n	800a7d0 <USBH_Process+0x35c>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a7be:	7bfa      	ldrb	r2, [r7, #15]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	32de      	adds	r2, #222	; 0xde
 800a7c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800a7ce:	e005      	b.n	800a7dc <USBH_Process+0x368>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a7d0:	7bfb      	ldrb	r3, [r7, #15]
 800a7d2:	3301      	adds	r3, #1
 800a7d4:	73fb      	strb	r3, [r7, #15]
 800a7d6:	7bfb      	ldrb	r3, [r7, #15]
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d0e5      	beq.n	800a7a8 <USBH_Process+0x334>
          }
        }

        if (phost->pActiveClass != NULL)
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d016      	beq.n	800a814 <USBH_Process+0x3a0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a7ec:	689b      	ldr	r3, [r3, #8]
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	4798      	blx	r3
 800a7f2:	4603      	mov	r3, r0
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d109      	bne.n	800a80c <USBH_Process+0x398>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2206      	movs	r2, #6
 800a7fc:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a804:	2103      	movs	r1, #3
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	4798      	blx	r3
 800a80a:	e006      	b.n	800a81a <USBH_Process+0x3a6>
          }
          else
          {
            phost->gState = HOST_ABORT_STATE;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	220d      	movs	r2, #13
 800a810:	701a      	strb	r2, [r3, #0]
 800a812:	e002      	b.n	800a81a <USBH_Process+0x3a6>
            USBH_UsrLog("Device not supporting %s class.", phost->pActiveClass->Name);
          }
        }
        else
        {
          phost->gState = HOST_ABORT_STATE;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	220d      	movs	r2, #13
 800a818:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog("No registered class for this device.");
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	2205      	movs	r2, #5
 800a81e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a82e:	2200      	movs	r2, #0
 800a830:	4619      	mov	r1, r3
 800a832:	f001 fc0b 	bl	800c04c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a836:	e084      	b.n	800a942 <USBH_Process+0x4ce>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d017      	beq.n	800a872 <USBH_Process+0x3fe>
      {
        status = phost->pActiveClass->Requests(phost);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a848:	691b      	ldr	r3, [r3, #16]
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	4798      	blx	r3
 800a84e:	4603      	mov	r3, r0
 800a850:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a852:	7bbb      	ldrb	r3, [r7, #14]
 800a854:	b2db      	uxtb	r3, r3
 800a856:	2b00      	cmp	r3, #0
 800a858:	d103      	bne.n	800a862 <USBH_Process+0x3ee>
        {
          phost->gState = HOST_CLASS;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	220b      	movs	r2, #11
 800a85e:	701a      	strb	r2, [r3, #0]
 800a860:	e00a      	b.n	800a878 <USBH_Process+0x404>
        }
        else if (status == USBH_FAIL)
 800a862:	7bbb      	ldrb	r3, [r7, #14]
 800a864:	b2db      	uxtb	r3, r3
 800a866:	2b02      	cmp	r3, #2
 800a868:	d106      	bne.n	800a878 <USBH_Process+0x404>
        {
          phost->gState = HOST_ABORT_STATE;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	220d      	movs	r2, #13
 800a86e:	701a      	strb	r2, [r3, #0]
 800a870:	e002      	b.n	800a878 <USBH_Process+0x404>
          /* .. */
        }
      }
      else
      {
        phost->gState = HOST_ABORT_STATE;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	220d      	movs	r2, #13
 800a876:	701a      	strb	r2, [r3, #0]
        USBH_ErrLog("Invalid Class Driver.");
      }
#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	2205      	movs	r2, #5
 800a87c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a88c:	2200      	movs	r2, #0
 800a88e:	4619      	mov	r1, r3
 800a890:	f001 fbdc 	bl	800c04c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a894:	e055      	b.n	800a942 <USBH_Process+0x4ce>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d04f      	beq.n	800a940 <USBH_Process+0x4cc>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8a6:	695b      	ldr	r3, [r3, #20]
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	4798      	blx	r3
      }
      break;
 800a8ac:	e048      	b.n	800a940 <USBH_Process+0x4cc>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800a8b6:	6878      	ldr	r0, [r7, #4]
 800a8b8:	f7ff fcec 	bl	800a294 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d009      	beq.n	800a8da <USBH_Process+0x466>
      {
        phost->pActiveClass->DeInit(phost);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800a8cc:	68db      	ldr	r3, [r3, #12]
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d005      	beq.n	800a8f0 <USBH_Process+0x47c>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a8ea:	2105      	movs	r1, #5
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d107      	bne.n	800a90c <USBH_Process+0x498>
      {
        phost->device.is_ReEnumerated = 0U;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f7ff fda5 	bl	800a454 <USBH_Start>
 800a90a:	e002      	b.n	800a912 <USBH_Process+0x49e>
      }
      else
      {
        /* Device Disconnection Completed, start USB Driver */
        (void)USBH_LL_Start(phost);
 800a90c:	6878      	ldr	r0, [r7, #4]
 800a90e:	f003 fed9 	bl	800e6c4 <USBH_LL_Start>
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2201      	movs	r2, #1
 800a916:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800a926:	2200      	movs	r2, #0
 800a928:	4619      	mov	r1, r3
 800a92a:	f001 fb8f 	bl	800c04c <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a92e:	e008      	b.n	800a942 <USBH_Process+0x4ce>

    case HOST_ABORT_STATE:
    default :
      break;
 800a930:	bf00      	nop
 800a932:	e006      	b.n	800a942 <USBH_Process+0x4ce>
      break;
 800a934:	bf00      	nop
 800a936:	e004      	b.n	800a942 <USBH_Process+0x4ce>
      break;
 800a938:	bf00      	nop
 800a93a:	e002      	b.n	800a942 <USBH_Process+0x4ce>
    break;
 800a93c:	bf00      	nop
 800a93e:	e000      	b.n	800a942 <USBH_Process+0x4ce>
      break;
 800a940:	bf00      	nop
  }
  return USBH_OK;
 800a942:	2300      	movs	r3, #0
}
 800a944:	4618      	mov	r0, r3
 800a946:	3710      	adds	r7, #16
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}

0800a94c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b088      	sub	sp, #32
 800a950:	af04      	add	r7, sp, #16
 800a952:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a954:	2301      	movs	r3, #1
 800a956:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a958:	2301      	movs	r3, #1
 800a95a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	785b      	ldrb	r3, [r3, #1]
 800a960:	2b07      	cmp	r3, #7
 800a962:	f200 8208 	bhi.w	800ad76 <USBH_HandleEnum+0x42a>
 800a966:	a201      	add	r2, pc, #4	; (adr r2, 800a96c <USBH_HandleEnum+0x20>)
 800a968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a96c:	0800a98d 	.word	0x0800a98d
 800a970:	0800aa4b 	.word	0x0800aa4b
 800a974:	0800aab5 	.word	0x0800aab5
 800a978:	0800ab43 	.word	0x0800ab43
 800a97c:	0800abad 	.word	0x0800abad
 800a980:	0800ac1d 	.word	0x0800ac1d
 800a984:	0800acb9 	.word	0x0800acb9
 800a988:	0800ad37 	.word	0x0800ad37
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a98c:	2108      	movs	r1, #8
 800a98e:	6878      	ldr	r0, [r7, #4]
 800a990:	f000 faea 	bl	800af68 <USBH_Get_DevDesc>
 800a994:	4603      	mov	r3, r0
 800a996:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a998:	7bbb      	ldrb	r3, [r7, #14]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d130      	bne.n	800aa00 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	7919      	ldrb	r1, [r3, #4]
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a9be:	687a      	ldr	r2, [r7, #4]
 800a9c0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a9c2:	b292      	uxth	r2, r2
 800a9c4:	9202      	str	r2, [sp, #8]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	9201      	str	r2, [sp, #4]
 800a9ca:	9300      	str	r3, [sp, #0]
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	2280      	movs	r2, #128	; 0x80
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f001 f9ef 	bl	800bdb4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	7959      	ldrb	r1, [r3, #5]
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a9e6:	687a      	ldr	r2, [r7, #4]
 800a9e8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a9ea:	b292      	uxth	r2, r2
 800a9ec:	9202      	str	r2, [sp, #8]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	9201      	str	r2, [sp, #4]
 800a9f2:	9300      	str	r3, [sp, #0]
 800a9f4:	4603      	mov	r3, r0
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	6878      	ldr	r0, [r7, #4]
 800a9fa:	f001 f9db 	bl	800bdb4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a9fe:	e1bc      	b.n	800ad7a <USBH_HandleEnum+0x42e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa00:	7bbb      	ldrb	r3, [r7, #14]
 800aa02:	2b03      	cmp	r3, #3
 800aa04:	f040 81b9 	bne.w	800ad7a <USBH_HandleEnum+0x42e>
        phost->device.EnumCnt++;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aa0e:	3301      	adds	r3, #1
 800aa10:	b2da      	uxtb	r2, r3
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aa1e:	2b03      	cmp	r3, #3
 800aa20:	d903      	bls.n	800aa2a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	220d      	movs	r2, #13
 800aa26:	701a      	strb	r2, [r3, #0]
      break;
 800aa28:	e1a7      	b.n	800ad7a <USBH_HandleEnum+0x42e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	795b      	ldrb	r3, [r3, #5]
 800aa2e:	4619      	mov	r1, r3
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f001 fa0f 	bl	800be54 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	791b      	ldrb	r3, [r3, #4]
 800aa3a:	4619      	mov	r1, r3
 800aa3c:	6878      	ldr	r0, [r7, #4]
 800aa3e:	f001 fa09 	bl	800be54 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	2200      	movs	r2, #0
 800aa46:	701a      	strb	r2, [r3, #0]
      break;
 800aa48:	e197      	b.n	800ad7a <USBH_HandleEnum+0x42e>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800aa4a:	2112      	movs	r1, #18
 800aa4c:	6878      	ldr	r0, [r7, #4]
 800aa4e:	f000 fa8b 	bl	800af68 <USBH_Get_DevDesc>
 800aa52:	4603      	mov	r3, r0
 800aa54:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aa56:	7bbb      	ldrb	r3, [r7, #14]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d103      	bne.n	800aa64 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2202      	movs	r2, #2
 800aa60:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800aa62:	e18c      	b.n	800ad7e <USBH_HandleEnum+0x432>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa64:	7bbb      	ldrb	r3, [r7, #14]
 800aa66:	2b03      	cmp	r3, #3
 800aa68:	f040 8189 	bne.w	800ad7e <USBH_HandleEnum+0x432>
        phost->device.EnumCnt++;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aa72:	3301      	adds	r3, #1
 800aa74:	b2da      	uxtb	r2, r3
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800aa82:	2b03      	cmp	r3, #3
 800aa84:	d903      	bls.n	800aa8e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	220d      	movs	r2, #13
 800aa8a:	701a      	strb	r2, [r3, #0]
      break;
 800aa8c:	e177      	b.n	800ad7e <USBH_HandleEnum+0x432>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	795b      	ldrb	r3, [r3, #5]
 800aa92:	4619      	mov	r1, r3
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f001 f9dd 	bl	800be54 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	791b      	ldrb	r3, [r3, #4]
 800aa9e:	4619      	mov	r1, r3
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	f001 f9d7 	bl	800be54 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2200      	movs	r2, #0
 800aab0:	701a      	strb	r2, [r3, #0]
      break;
 800aab2:	e164      	b.n	800ad7e <USBH_HandleEnum+0x432>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800aab4:	2101      	movs	r1, #1
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f000 fb02 	bl	800b0c0 <USBH_SetAddress>
 800aabc:	4603      	mov	r3, r0
 800aabe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800aac0:	7bbb      	ldrb	r3, [r7, #14]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d132      	bne.n	800ab2c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800aac6:	2002      	movs	r0, #2
 800aac8:	f003 ff60 	bl	800e98c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	2201      	movs	r2, #1
 800aad0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	2203      	movs	r2, #3
 800aad8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	7919      	ldrb	r1, [r3, #4]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800aaea:	687a      	ldr	r2, [r7, #4]
 800aaec:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800aaee:	b292      	uxth	r2, r2
 800aaf0:	9202      	str	r2, [sp, #8]
 800aaf2:	2200      	movs	r2, #0
 800aaf4:	9201      	str	r2, [sp, #4]
 800aaf6:	9300      	str	r3, [sp, #0]
 800aaf8:	4603      	mov	r3, r0
 800aafa:	2280      	movs	r2, #128	; 0x80
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f001 f959 	bl	800bdb4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	7959      	ldrb	r1, [r3, #5]
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ab12:	687a      	ldr	r2, [r7, #4]
 800ab14:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ab16:	b292      	uxth	r2, r2
 800ab18:	9202      	str	r2, [sp, #8]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	9201      	str	r2, [sp, #4]
 800ab1e:	9300      	str	r3, [sp, #0]
 800ab20:	4603      	mov	r3, r0
 800ab22:	2200      	movs	r2, #0
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f001 f945 	bl	800bdb4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ab2a:	e12a      	b.n	800ad82 <USBH_HandleEnum+0x436>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab2c:	7bbb      	ldrb	r3, [r7, #14]
 800ab2e:	2b03      	cmp	r3, #3
 800ab30:	f040 8127 	bne.w	800ad82 <USBH_HandleEnum+0x436>
        phost->gState = HOST_ABORT_STATE;
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	220d      	movs	r2, #13
 800ab38:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	705a      	strb	r2, [r3, #1]
      break;
 800ab40:	e11f      	b.n	800ad82 <USBH_HandleEnum+0x436>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800ab42:	2109      	movs	r1, #9
 800ab44:	6878      	ldr	r0, [r7, #4]
 800ab46:	f000 fa37 	bl	800afb8 <USBH_Get_CfgDesc>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ab4e:	7bbb      	ldrb	r3, [r7, #14]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d103      	bne.n	800ab5c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2204      	movs	r2, #4
 800ab58:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ab5a:	e114      	b.n	800ad86 <USBH_HandleEnum+0x43a>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ab5c:	7bbb      	ldrb	r3, [r7, #14]
 800ab5e:	2b03      	cmp	r3, #3
 800ab60:	f040 8111 	bne.w	800ad86 <USBH_HandleEnum+0x43a>
        phost->device.EnumCnt++;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	b2da      	uxtb	r2, r3
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ab7a:	2b03      	cmp	r3, #3
 800ab7c:	d903      	bls.n	800ab86 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	220d      	movs	r2, #13
 800ab82:	701a      	strb	r2, [r3, #0]
      break;
 800ab84:	e0ff      	b.n	800ad86 <USBH_HandleEnum+0x43a>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	795b      	ldrb	r3, [r3, #5]
 800ab8a:	4619      	mov	r1, r3
 800ab8c:	6878      	ldr	r0, [r7, #4]
 800ab8e:	f001 f961 	bl	800be54 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	791b      	ldrb	r3, [r3, #4]
 800ab96:	4619      	mov	r1, r3
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	f001 f95b 	bl	800be54 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2200      	movs	r2, #0
 800aba2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2200      	movs	r2, #0
 800aba8:	701a      	strb	r2, [r3, #0]
      break;
 800abaa:	e0ec      	b.n	800ad86 <USBH_HandleEnum+0x43a>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800abb2:	4619      	mov	r1, r3
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f000 f9ff 	bl	800afb8 <USBH_Get_CfgDesc>
 800abba:	4603      	mov	r3, r0
 800abbc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800abbe:	7bbb      	ldrb	r3, [r7, #14]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d103      	bne.n	800abcc <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2205      	movs	r2, #5
 800abc8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800abca:	e0de      	b.n	800ad8a <USBH_HandleEnum+0x43e>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800abcc:	7bbb      	ldrb	r3, [r7, #14]
 800abce:	2b03      	cmp	r3, #3
 800abd0:	f040 80db 	bne.w	800ad8a <USBH_HandleEnum+0x43e>
        phost->device.EnumCnt++;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800abda:	3301      	adds	r3, #1
 800abdc:	b2da      	uxtb	r2, r3
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800abea:	2b03      	cmp	r3, #3
 800abec:	d903      	bls.n	800abf6 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	220d      	movs	r2, #13
 800abf2:	701a      	strb	r2, [r3, #0]
      break;
 800abf4:	e0c9      	b.n	800ad8a <USBH_HandleEnum+0x43e>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	795b      	ldrb	r3, [r3, #5]
 800abfa:	4619      	mov	r1, r3
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f001 f929 	bl	800be54 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	791b      	ldrb	r3, [r3, #4]
 800ac06:	4619      	mov	r1, r3
 800ac08:	6878      	ldr	r0, [r7, #4]
 800ac0a:	f001 f923 	bl	800be54 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	2200      	movs	r2, #0
 800ac12:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2200      	movs	r2, #0
 800ac18:	701a      	strb	r2, [r3, #0]
      break;
 800ac1a:	e0b6      	b.n	800ad8a <USBH_HandleEnum+0x43e>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d036      	beq.n	800ac94 <USBH_HandleEnum+0x348>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800ac32:	23ff      	movs	r3, #255	; 0xff
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f000 f9e3 	bl	800b000 <USBH_Get_StringDesc>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ac3e:	7bbb      	ldrb	r3, [r7, #14]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d111      	bne.n	800ac68 <USBH_HandleEnum+0x31c>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2206      	movs	r2, #6
 800ac48:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	2205      	movs	r2, #5
 800ac4e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ac5e:	2200      	movs	r2, #0
 800ac60:	4619      	mov	r1, r3
 800ac62:	f001 f9f3 	bl	800c04c <osMessagePut>
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ac66:	e092      	b.n	800ad8e <USBH_HandleEnum+0x442>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ac68:	7bbb      	ldrb	r3, [r7, #14]
 800ac6a:	2b03      	cmp	r3, #3
 800ac6c:	f040 808f 	bne.w	800ad8e <USBH_HandleEnum+0x442>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2206      	movs	r2, #6
 800ac74:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2205      	movs	r2, #5
 800ac7a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	4619      	mov	r1, r3
 800ac8e:	f001 f9dd 	bl	800c04c <osMessagePut>
      break;
 800ac92:	e07c      	b.n	800ad8e <USBH_HandleEnum+0x442>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2206      	movs	r2, #6
 800ac98:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2205      	movs	r2, #5
 800ac9e:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800acae:	2200      	movs	r2, #0
 800acb0:	4619      	mov	r1, r3
 800acb2:	f001 f9cb 	bl	800c04c <osMessagePut>
      break;
 800acb6:	e06a      	b.n	800ad8e <USBH_HandleEnum+0x442>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d027      	beq.n	800ad12 <USBH_HandleEnum+0x3c6>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800acce:	23ff      	movs	r3, #255	; 0xff
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f000 f995 	bl	800b000 <USBH_Get_StringDesc>
 800acd6:	4603      	mov	r3, r0
 800acd8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800acda:	7bbb      	ldrb	r3, [r7, #14]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d103      	bne.n	800ace8 <USBH_HandleEnum+0x39c>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2207      	movs	r2, #7
 800ace4:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ace6:	e054      	b.n	800ad92 <USBH_HandleEnum+0x446>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ace8:	7bbb      	ldrb	r3, [r7, #14]
 800acea:	2b03      	cmp	r3, #3
 800acec:	d151      	bne.n	800ad92 <USBH_HandleEnum+0x446>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2207      	movs	r2, #7
 800acf2:	705a      	strb	r2, [r3, #1]
          phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	2205      	movs	r2, #5
 800acf8:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ad08:	2200      	movs	r2, #0
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	f001 f99e 	bl	800c04c <osMessagePut>
      break;
 800ad10:	e03f      	b.n	800ad92 <USBH_HandleEnum+0x446>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2207      	movs	r2, #7
 800ad16:	705a      	strb	r2, [r3, #1]
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2205      	movs	r2, #5
 800ad1c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ad2c:	2200      	movs	r2, #0
 800ad2e:	4619      	mov	r1, r3
 800ad30:	f001 f98c 	bl	800c04c <osMessagePut>
      break;
 800ad34:	e02d      	b.n	800ad92 <USBH_HandleEnum+0x446>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d017      	beq.n	800ad70 <USBH_HandleEnum+0x424>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800ad4c:	23ff      	movs	r3, #255	; 0xff
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f000 f956 	bl	800b000 <USBH_Get_StringDesc>
 800ad54:	4603      	mov	r3, r0
 800ad56:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800ad58:	7bbb      	ldrb	r3, [r7, #14]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d102      	bne.n	800ad64 <USBH_HandleEnum+0x418>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800ad62:	e018      	b.n	800ad96 <USBH_HandleEnum+0x44a>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ad64:	7bbb      	ldrb	r3, [r7, #14]
 800ad66:	2b03      	cmp	r3, #3
 800ad68:	d115      	bne.n	800ad96 <USBH_HandleEnum+0x44a>
          Status = USBH_OK;
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	73fb      	strb	r3, [r7, #15]
      break;
 800ad6e:	e012      	b.n	800ad96 <USBH_HandleEnum+0x44a>
        Status = USBH_OK;
 800ad70:	2300      	movs	r3, #0
 800ad72:	73fb      	strb	r3, [r7, #15]
      break;
 800ad74:	e00f      	b.n	800ad96 <USBH_HandleEnum+0x44a>

    default:
      break;
 800ad76:	bf00      	nop
 800ad78:	e00e      	b.n	800ad98 <USBH_HandleEnum+0x44c>
      break;
 800ad7a:	bf00      	nop
 800ad7c:	e00c      	b.n	800ad98 <USBH_HandleEnum+0x44c>
      break;
 800ad7e:	bf00      	nop
 800ad80:	e00a      	b.n	800ad98 <USBH_HandleEnum+0x44c>
      break;
 800ad82:	bf00      	nop
 800ad84:	e008      	b.n	800ad98 <USBH_HandleEnum+0x44c>
      break;
 800ad86:	bf00      	nop
 800ad88:	e006      	b.n	800ad98 <USBH_HandleEnum+0x44c>
      break;
 800ad8a:	bf00      	nop
 800ad8c:	e004      	b.n	800ad98 <USBH_HandleEnum+0x44c>
      break;
 800ad8e:	bf00      	nop
 800ad90:	e002      	b.n	800ad98 <USBH_HandleEnum+0x44c>
      break;
 800ad92:	bf00      	nop
 800ad94:	e000      	b.n	800ad98 <USBH_HandleEnum+0x44c>
      break;
 800ad96:	bf00      	nop
  }
  return Status;
 800ad98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3710      	adds	r7, #16
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	bf00      	nop

0800ada4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ada4:	b480      	push	{r7}
 800ada6:	b083      	sub	sp, #12
 800ada8:	af00      	add	r7, sp, #0
 800adaa:	6078      	str	r0, [r7, #4]
 800adac:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	683a      	ldr	r2, [r7, #0]
 800adb2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800adb6:	bf00      	nop
 800adb8:	370c      	adds	r7, #12
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr

0800adc2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800adc2:	b580      	push	{r7, lr}
 800adc4:	b082      	sub	sp, #8
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800add0:	1c5a      	adds	r2, r3, #1
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f000 f804 	bl	800ade6 <USBH_HandleSof>
}
 800adde:	bf00      	nop
 800ade0:	3708      	adds	r7, #8
 800ade2:	46bd      	mov	sp, r7
 800ade4:	bd80      	pop	{r7, pc}

0800ade6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ade6:	b580      	push	{r7, lr}
 800ade8:	b082      	sub	sp, #8
 800adea:	af00      	add	r7, sp, #0
 800adec:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	b2db      	uxtb	r3, r3
 800adf4:	2b0b      	cmp	r3, #11
 800adf6:	d10a      	bne.n	800ae0e <USBH_HandleSof+0x28>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d005      	beq.n	800ae0e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ae08:	699b      	ldr	r3, [r3, #24]
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	4798      	blx	r3
  }
}
 800ae0e:	bf00      	nop
 800ae10:	3708      	adds	r7, #8
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}

0800ae16 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ae16:	b580      	push	{r7, lr}
 800ae18:	b082      	sub	sp, #8
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2201      	movs	r2, #1
 800ae22:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2201      	movs	r2, #1
 800ae2a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	f001 f905 	bl	800c04c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800ae42:	bf00      	nop
}
 800ae44:	3708      	adds	r7, #8
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800ae4a:	b480      	push	{r7}
 800ae4c:	b083      	sub	sp, #12
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	2200      	movs	r2, #0
 800ae56:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800ae5a:	bf00      	nop
}
 800ae5c:	370c      	adds	r7, #12
 800ae5e:	46bd      	mov	sp, r7
 800ae60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae64:	4770      	bx	lr

0800ae66 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ae66:	b580      	push	{r7, lr}
 800ae68:	b082      	sub	sp, #8
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2201      	movs	r2, #1
 800ae72:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2200      	movs	r2, #0
 800ae7a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	2200      	movs	r2, #0
 800ae82:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322


#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	2201      	movs	r2, #1
 800ae8a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	4619      	mov	r1, r3
 800ae9e:	f001 f8d5 	bl	800c04c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800aea2:	2300      	movs	r3, #0
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3708      	adds	r7, #8
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	bd80      	pop	{r7, pc}

0800aeac <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800aeac:	b580      	push	{r7, lr}
 800aeae:	b082      	sub	sp, #8
 800aeb0:	af00      	add	r7, sp, #0
 800aeb2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2200      	movs	r2, #0
 800aec0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2200      	movs	r2, #0
 800aec8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f003 fc14 	bl	800e6fa <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	791b      	ldrb	r3, [r3, #4]
 800aed6:	4619      	mov	r1, r3
 800aed8:	6878      	ldr	r0, [r7, #4]
 800aeda:	f000 ffbb 	bl	800be54 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	795b      	ldrb	r3, [r3, #5]
 800aee2:	4619      	mov	r1, r3
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 ffb5 	bl	800be54 <USBH_FreePipe>
#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2201      	movs	r2, #1
 800aeee:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800aefe:	2200      	movs	r2, #0
 800af00:	4619      	mov	r1, r3
 800af02:	f001 f8a3 	bl	800c04c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800af06:	2300      	movs	r3, #0
}
 800af08:	4618      	mov	r0, r3
 800af0a:	3708      	adds	r7, #8
 800af0c:	46bd      	mov	sp, r7
 800af0e:	bd80      	pop	{r7, pc}

0800af10 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800af10:	b580      	push	{r7, lr}
 800af12:	b086      	sub	sp, #24
 800af14:	af00      	add	r7, sp, #0
 800af16:	6078      	str	r0, [r7, #4]
  osEvent event;

  for (;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f8d3 13d8 	ldr.w	r1, [r3, #984]	; 0x3d8
 800af1e:	f107 030c 	add.w	r3, r7, #12
 800af22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af26:	4618      	mov	r0, r3
 800af28:	f001 f8d0 	bl	800c0cc <osMessageGet>
    if (event.status == osEventMessage)
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	2b10      	cmp	r3, #16
 800af30:	d1f2      	bne.n	800af18 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800af32:	6878      	ldr	r0, [r7, #4]
 800af34:	f7ff fa9e 	bl	800a474 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800af38:	e7ee      	b.n	800af18 <USBH_Process_OS+0x8>

0800af3a <USBH_LL_NotifyURBChange>:
  *         Notify URB state Change
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_LL_NotifyURBChange(USBH_HandleTypeDef *phost)
{
 800af3a:	b580      	push	{r7, lr}
 800af3c:	b082      	sub	sp, #8
 800af3e:	af00      	add	r7, sp, #0
 800af40:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2201      	movs	r2, #1
 800af46:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800af56:	2200      	movs	r2, #0
 800af58:	4619      	mov	r1, r3
 800af5a:	f001 f877 	bl	800c04c <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif

  return USBH_OK;
 800af5e:	2300      	movs	r3, #0
}
 800af60:	4618      	mov	r0, r3
 800af62:	3708      	adds	r7, #8
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}

0800af68 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b086      	sub	sp, #24
 800af6c:	af02      	add	r7, sp, #8
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	460b      	mov	r3, r1
 800af72:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800af7a:	78fb      	ldrb	r3, [r7, #3]
 800af7c:	b29b      	uxth	r3, r3
 800af7e:	9300      	str	r3, [sp, #0]
 800af80:	4613      	mov	r3, r2
 800af82:	f44f 7280 	mov.w	r2, #256	; 0x100
 800af86:	2100      	movs	r1, #0
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f000 f864 	bl	800b056 <USBH_GetDescriptor>
 800af8e:	4603      	mov	r3, r0
 800af90:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800af92:	7bfb      	ldrb	r3, [r7, #15]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d10a      	bne.n	800afae <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	f203 3026 	addw	r0, r3, #806	; 0x326
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800afa4:	78fa      	ldrb	r2, [r7, #3]
 800afa6:	b292      	uxth	r2, r2
 800afa8:	4619      	mov	r1, r3
 800afaa:	f000 f918 	bl	800b1de <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800afae:	7bfb      	ldrb	r3, [r7, #15]
}
 800afb0:	4618      	mov	r0, r3
 800afb2:	3710      	adds	r7, #16
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800afb8:	b580      	push	{r7, lr}
 800afba:	b086      	sub	sp, #24
 800afbc:	af02      	add	r7, sp, #8
 800afbe:	6078      	str	r0, [r7, #4]
 800afc0:	460b      	mov	r3, r1
 800afc2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	331c      	adds	r3, #28
 800afc8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800afca:	887b      	ldrh	r3, [r7, #2]
 800afcc:	9300      	str	r3, [sp, #0]
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800afd4:	2100      	movs	r1, #0
 800afd6:	6878      	ldr	r0, [r7, #4]
 800afd8:	f000 f83d 	bl	800b056 <USBH_GetDescriptor>
 800afdc:	4603      	mov	r3, r0
 800afde:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800afe0:	7bfb      	ldrb	r3, [r7, #15]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d107      	bne.n	800aff6 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800afe6:	887b      	ldrh	r3, [r7, #2]
 800afe8:	461a      	mov	r2, r3
 800afea:	68b9      	ldr	r1, [r7, #8]
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f000 f987 	bl	800b300 <USBH_ParseCfgDesc>
 800aff2:	4603      	mov	r3, r0
 800aff4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800aff6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3710      	adds	r7, #16
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}

0800b000 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b088      	sub	sp, #32
 800b004:	af02      	add	r7, sp, #8
 800b006:	60f8      	str	r0, [r7, #12]
 800b008:	607a      	str	r2, [r7, #4]
 800b00a:	461a      	mov	r2, r3
 800b00c:	460b      	mov	r3, r1
 800b00e:	72fb      	strb	r3, [r7, #11]
 800b010:	4613      	mov	r3, r2
 800b012:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800b014:	7afb      	ldrb	r3, [r7, #11]
 800b016:	b29b      	uxth	r3, r3
 800b018:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800b01c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800b024:	893b      	ldrh	r3, [r7, #8]
 800b026:	9300      	str	r3, [sp, #0]
 800b028:	460b      	mov	r3, r1
 800b02a:	2100      	movs	r1, #0
 800b02c:	68f8      	ldr	r0, [r7, #12]
 800b02e:	f000 f812 	bl	800b056 <USBH_GetDescriptor>
 800b032:	4603      	mov	r3, r0
 800b034:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800b036:	7dfb      	ldrb	r3, [r7, #23]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d107      	bne.n	800b04c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800b042:	893a      	ldrh	r2, [r7, #8]
 800b044:	6879      	ldr	r1, [r7, #4]
 800b046:	4618      	mov	r0, r3
 800b048:	f000 fb24 	bl	800b694 <USBH_ParseStringDesc>
  }

  return status;
 800b04c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b04e:	4618      	mov	r0, r3
 800b050:	3718      	adds	r7, #24
 800b052:	46bd      	mov	sp, r7
 800b054:	bd80      	pop	{r7, pc}

0800b056 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800b056:	b580      	push	{r7, lr}
 800b058:	b084      	sub	sp, #16
 800b05a:	af00      	add	r7, sp, #0
 800b05c:	60f8      	str	r0, [r7, #12]
 800b05e:	607b      	str	r3, [r7, #4]
 800b060:	460b      	mov	r3, r1
 800b062:	72fb      	strb	r3, [r7, #11]
 800b064:	4613      	mov	r3, r2
 800b066:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	789b      	ldrb	r3, [r3, #2]
 800b06c:	2b01      	cmp	r3, #1
 800b06e:	d11c      	bne.n	800b0aa <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800b070:	7afb      	ldrb	r3, [r7, #11]
 800b072:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b076:	b2da      	uxtb	r2, r3
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2206      	movs	r2, #6
 800b080:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	893a      	ldrh	r2, [r7, #8]
 800b086:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800b088:	893b      	ldrh	r3, [r7, #8]
 800b08a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800b08e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b092:	d104      	bne.n	800b09e <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f240 4209 	movw	r2, #1033	; 0x409
 800b09a:	829a      	strh	r2, [r3, #20]
 800b09c:	e002      	b.n	800b0a4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	8b3a      	ldrh	r2, [r7, #24]
 800b0a8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800b0aa:	8b3b      	ldrh	r3, [r7, #24]
 800b0ac:	461a      	mov	r2, r3
 800b0ae:	6879      	ldr	r1, [r7, #4]
 800b0b0:	68f8      	ldr	r0, [r7, #12]
 800b0b2:	f000 fb3d 	bl	800b730 <USBH_CtlReq>
 800b0b6:	4603      	mov	r3, r0
}
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	3710      	adds	r7, #16
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}

0800b0c0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800b0c0:	b580      	push	{r7, lr}
 800b0c2:	b082      	sub	sp, #8
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
 800b0c8:	460b      	mov	r3, r1
 800b0ca:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	789b      	ldrb	r3, [r3, #2]
 800b0d0:	2b01      	cmp	r3, #1
 800b0d2:	d10f      	bne.n	800b0f4 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	2205      	movs	r2, #5
 800b0de:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800b0e0:	78fb      	ldrb	r3, [r7, #3]
 800b0e2:	b29a      	uxth	r2, r3
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	2100      	movs	r1, #0
 800b0f8:	6878      	ldr	r0, [r7, #4]
 800b0fa:	f000 fb19 	bl	800b730 <USBH_CtlReq>
 800b0fe:	4603      	mov	r3, r0
}
 800b100:	4618      	mov	r0, r3
 800b102:	3708      	adds	r7, #8
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b082      	sub	sp, #8
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
 800b110:	460b      	mov	r3, r1
 800b112:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	789b      	ldrb	r3, [r3, #2]
 800b118:	2b01      	cmp	r3, #1
 800b11a:	d10e      	bne.n	800b13a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2200      	movs	r2, #0
 800b120:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2209      	movs	r2, #9
 800b126:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	887a      	ldrh	r2, [r7, #2]
 800b12c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2200      	movs	r2, #0
 800b132:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2200      	movs	r2, #0
 800b138:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b13a:	2200      	movs	r2, #0
 800b13c:	2100      	movs	r1, #0
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f000 faf6 	bl	800b730 <USBH_CtlReq>
 800b144:	4603      	mov	r3, r0
}
 800b146:	4618      	mov	r0, r3
 800b148:	3708      	adds	r7, #8
 800b14a:	46bd      	mov	sp, r7
 800b14c:	bd80      	pop	{r7, pc}

0800b14e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800b14e:	b580      	push	{r7, lr}
 800b150:	b082      	sub	sp, #8
 800b152:	af00      	add	r7, sp, #0
 800b154:	6078      	str	r0, [r7, #4]
 800b156:	460b      	mov	r3, r1
 800b158:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	789b      	ldrb	r3, [r3, #2]
 800b15e:	2b01      	cmp	r3, #1
 800b160:	d10f      	bne.n	800b182 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2200      	movs	r2, #0
 800b166:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	2203      	movs	r2, #3
 800b16c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800b16e:	78fb      	ldrb	r3, [r7, #3]
 800b170:	b29a      	uxth	r2, r3
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2200      	movs	r2, #0
 800b17a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2200      	movs	r2, #0
 800b180:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800b182:	2200      	movs	r2, #0
 800b184:	2100      	movs	r1, #0
 800b186:	6878      	ldr	r0, [r7, #4]
 800b188:	f000 fad2 	bl	800b730 <USBH_CtlReq>
 800b18c:	4603      	mov	r3, r0
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3708      	adds	r7, #8
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}

0800b196 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800b196:	b580      	push	{r7, lr}
 800b198:	b082      	sub	sp, #8
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	6078      	str	r0, [r7, #4]
 800b19e:	460b      	mov	r3, r1
 800b1a0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	789b      	ldrb	r3, [r3, #2]
 800b1a6:	2b01      	cmp	r3, #1
 800b1a8:	d10f      	bne.n	800b1ca <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2202      	movs	r2, #2
 800b1ae:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	2201      	movs	r2, #1
 800b1b4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800b1bc:	78fb      	ldrb	r3, [r7, #3]
 800b1be:	b29a      	uxth	r2, r3
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	2100      	movs	r1, #0
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f000 faae 	bl	800b730 <USBH_CtlReq>
 800b1d4:	4603      	mov	r3, r0
}
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	3708      	adds	r7, #8
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}

0800b1de <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800b1de:	b480      	push	{r7}
 800b1e0:	b085      	sub	sp, #20
 800b1e2:	af00      	add	r7, sp, #0
 800b1e4:	60f8      	str	r0, [r7, #12]
 800b1e6:	60b9      	str	r1, [r7, #8]
 800b1e8:	4613      	mov	r3, r2
 800b1ea:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	781a      	ldrb	r2, [r3, #0]
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800b1f4:	68bb      	ldr	r3, [r7, #8]
 800b1f6:	785a      	ldrb	r2, [r3, #1]
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	3302      	adds	r3, #2
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	b29a      	uxth	r2, r3
 800b204:	68bb      	ldr	r3, [r7, #8]
 800b206:	3303      	adds	r3, #3
 800b208:	781b      	ldrb	r3, [r3, #0]
 800b20a:	b29b      	uxth	r3, r3
 800b20c:	021b      	lsls	r3, r3, #8
 800b20e:	b29b      	uxth	r3, r3
 800b210:	4313      	orrs	r3, r2
 800b212:	b29a      	uxth	r2, r3
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	791a      	ldrb	r2, [r3, #4]
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	795a      	ldrb	r2, [r3, #5]
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	799a      	ldrb	r2, [r3, #6]
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	79da      	ldrb	r2, [r3, #7]
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	79db      	ldrb	r3, [r3, #7]
 800b23c:	2b20      	cmp	r3, #32
 800b23e:	dc11      	bgt.n	800b264 <USBH_ParseDevDesc+0x86>
 800b240:	2b08      	cmp	r3, #8
 800b242:	db16      	blt.n	800b272 <USBH_ParseDevDesc+0x94>
 800b244:	3b08      	subs	r3, #8
 800b246:	2201      	movs	r2, #1
 800b248:	fa02 f303 	lsl.w	r3, r2, r3
 800b24c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 800b250:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b254:	2b00      	cmp	r3, #0
 800b256:	bf14      	ite	ne
 800b258:	2301      	movne	r3, #1
 800b25a:	2300      	moveq	r3, #0
 800b25c:	b2db      	uxtb	r3, r3
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d102      	bne.n	800b268 <USBH_ParseDevDesc+0x8a>
 800b262:	e006      	b.n	800b272 <USBH_ParseDevDesc+0x94>
 800b264:	2b40      	cmp	r3, #64	; 0x40
 800b266:	d104      	bne.n	800b272 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	79da      	ldrb	r2, [r3, #7]
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	71da      	strb	r2, [r3, #7]
      break;
 800b270:	e003      	b.n	800b27a <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	2240      	movs	r2, #64	; 0x40
 800b276:	71da      	strb	r2, [r3, #7]
      break;
 800b278:	bf00      	nop
  }

  if (length > 8U)
 800b27a:	88fb      	ldrh	r3, [r7, #6]
 800b27c:	2b08      	cmp	r3, #8
 800b27e:	d939      	bls.n	800b2f4 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	3308      	adds	r3, #8
 800b284:	781b      	ldrb	r3, [r3, #0]
 800b286:	b29a      	uxth	r2, r3
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	3309      	adds	r3, #9
 800b28c:	781b      	ldrb	r3, [r3, #0]
 800b28e:	b29b      	uxth	r3, r3
 800b290:	021b      	lsls	r3, r3, #8
 800b292:	b29b      	uxth	r3, r3
 800b294:	4313      	orrs	r3, r2
 800b296:	b29a      	uxth	r2, r3
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	330a      	adds	r3, #10
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	b29a      	uxth	r2, r3
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	330b      	adds	r3, #11
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	b29b      	uxth	r3, r3
 800b2ac:	021b      	lsls	r3, r3, #8
 800b2ae:	b29b      	uxth	r3, r3
 800b2b0:	4313      	orrs	r3, r2
 800b2b2:	b29a      	uxth	r2, r3
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	330c      	adds	r3, #12
 800b2bc:	781b      	ldrb	r3, [r3, #0]
 800b2be:	b29a      	uxth	r2, r3
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	330d      	adds	r3, #13
 800b2c4:	781b      	ldrb	r3, [r3, #0]
 800b2c6:	b29b      	uxth	r3, r3
 800b2c8:	021b      	lsls	r3, r3, #8
 800b2ca:	b29b      	uxth	r3, r3
 800b2cc:	4313      	orrs	r3, r2
 800b2ce:	b29a      	uxth	r2, r3
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	7b9a      	ldrb	r2, [r3, #14]
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	7bda      	ldrb	r2, [r3, #15]
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	7c1a      	ldrb	r2, [r3, #16]
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800b2ec:	68bb      	ldr	r3, [r7, #8]
 800b2ee:	7c5a      	ldrb	r2, [r3, #17]
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	745a      	strb	r2, [r3, #17]
  }
}
 800b2f4:	bf00      	nop
 800b2f6:	3714      	adds	r7, #20
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fe:	4770      	bx	lr

0800b300 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b08c      	sub	sp, #48	; 0x30
 800b304:	af00      	add	r7, sp, #0
 800b306:	60f8      	str	r0, [r7, #12]
 800b308:	60b9      	str	r1, [r7, #8]
 800b30a:	4613      	mov	r3, r2
 800b30c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800b314:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b316:	2300      	movs	r3, #0
 800b318:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b320:	2300      	movs	r3, #0
 800b322:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800b326:	2300      	movs	r3, #0
 800b328:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	781a      	ldrb	r2, [r3, #0]
 800b334:	6a3b      	ldr	r3, [r7, #32]
 800b336:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	785a      	ldrb	r2, [r3, #1]
 800b33c:	6a3b      	ldr	r3, [r7, #32]
 800b33e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b340:	68bb      	ldr	r3, [r7, #8]
 800b342:	3302      	adds	r3, #2
 800b344:	781b      	ldrb	r3, [r3, #0]
 800b346:	b29a      	uxth	r2, r3
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	3303      	adds	r3, #3
 800b34c:	781b      	ldrb	r3, [r3, #0]
 800b34e:	b29b      	uxth	r3, r3
 800b350:	021b      	lsls	r3, r3, #8
 800b352:	b29b      	uxth	r3, r3
 800b354:	4313      	orrs	r3, r2
 800b356:	b29b      	uxth	r3, r3
 800b358:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b35c:	bf28      	it	cs
 800b35e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800b362:	b29a      	uxth	r2, r3
 800b364:	6a3b      	ldr	r3, [r7, #32]
 800b366:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	791a      	ldrb	r2, [r3, #4]
 800b36c:	6a3b      	ldr	r3, [r7, #32]
 800b36e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800b370:	68bb      	ldr	r3, [r7, #8]
 800b372:	795a      	ldrb	r2, [r3, #5]
 800b374:	6a3b      	ldr	r3, [r7, #32]
 800b376:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	799a      	ldrb	r2, [r3, #6]
 800b37c:	6a3b      	ldr	r3, [r7, #32]
 800b37e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	79da      	ldrb	r2, [r3, #7]
 800b384:	6a3b      	ldr	r3, [r7, #32]
 800b386:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	7a1a      	ldrb	r2, [r3, #8]
 800b38c:	6a3b      	ldr	r3, [r7, #32]
 800b38e:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800b390:	6a3b      	ldr	r3, [r7, #32]
 800b392:	781b      	ldrb	r3, [r3, #0]
 800b394:	2b09      	cmp	r3, #9
 800b396:	d002      	beq.n	800b39e <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b398:	6a3b      	ldr	r3, [r7, #32]
 800b39a:	2209      	movs	r2, #9
 800b39c:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b39e:	88fb      	ldrh	r3, [r7, #6]
 800b3a0:	2b09      	cmp	r3, #9
 800b3a2:	f240 809d 	bls.w	800b4e0 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800b3a6:	2309      	movs	r3, #9
 800b3a8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b3ae:	e081      	b.n	800b4b4 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b3b0:	f107 0316 	add.w	r3, r7, #22
 800b3b4:	4619      	mov	r1, r3
 800b3b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b3b8:	f000 f99f 	bl	800b6fa <USBH_GetNextDesc>
 800b3bc:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c0:	785b      	ldrb	r3, [r3, #1]
 800b3c2:	2b04      	cmp	r3, #4
 800b3c4:	d176      	bne.n	800b4b4 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c8:	781b      	ldrb	r3, [r3, #0]
 800b3ca:	2b09      	cmp	r3, #9
 800b3cc:	d002      	beq.n	800b3d4 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d0:	2209      	movs	r2, #9
 800b3d2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b3d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b3d8:	221a      	movs	r2, #26
 800b3da:	fb02 f303 	mul.w	r3, r2, r3
 800b3de:	3308      	adds	r3, #8
 800b3e0:	6a3a      	ldr	r2, [r7, #32]
 800b3e2:	4413      	add	r3, r2
 800b3e4:	3302      	adds	r3, #2
 800b3e6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b3e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b3ea:	69f8      	ldr	r0, [r7, #28]
 800b3ec:	f000 f87e 	bl	800b4ec <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b3f0:	2300      	movs	r3, #0
 800b3f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b3fa:	e043      	b.n	800b484 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b3fc:	f107 0316 	add.w	r3, r7, #22
 800b400:	4619      	mov	r1, r3
 800b402:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b404:	f000 f979 	bl	800b6fa <USBH_GetNextDesc>
 800b408:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b40a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b40c:	785b      	ldrb	r3, [r3, #1]
 800b40e:	2b05      	cmp	r3, #5
 800b410:	d138      	bne.n	800b484 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800b412:	69fb      	ldr	r3, [r7, #28]
 800b414:	795b      	ldrb	r3, [r3, #5]
 800b416:	2b01      	cmp	r3, #1
 800b418:	d10f      	bne.n	800b43a <USBH_ParseCfgDesc+0x13a>
 800b41a:	69fb      	ldr	r3, [r7, #28]
 800b41c:	799b      	ldrb	r3, [r3, #6]
 800b41e:	2b02      	cmp	r3, #2
 800b420:	d10b      	bne.n	800b43a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b422:	69fb      	ldr	r3, [r7, #28]
 800b424:	79db      	ldrb	r3, [r3, #7]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d10f      	bne.n	800b44a <USBH_ParseCfgDesc+0x14a>
 800b42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b42c:	781b      	ldrb	r3, [r3, #0]
 800b42e:	2b09      	cmp	r3, #9
 800b430:	d00b      	beq.n	800b44a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800b432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b434:	2209      	movs	r2, #9
 800b436:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b438:	e007      	b.n	800b44a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800b43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b43c:	781b      	ldrb	r3, [r3, #0]
 800b43e:	2b07      	cmp	r3, #7
 800b440:	d004      	beq.n	800b44c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b444:	2207      	movs	r2, #7
 800b446:	701a      	strb	r2, [r3, #0]
 800b448:	e000      	b.n	800b44c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b44a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b44c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b450:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b454:	3201      	adds	r2, #1
 800b456:	00d2      	lsls	r2, r2, #3
 800b458:	211a      	movs	r1, #26
 800b45a:	fb01 f303 	mul.w	r3, r1, r3
 800b45e:	4413      	add	r3, r2
 800b460:	3308      	adds	r3, #8
 800b462:	6a3a      	ldr	r2, [r7, #32]
 800b464:	4413      	add	r3, r2
 800b466:	3304      	adds	r3, #4
 800b468:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b46a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b46c:	69b9      	ldr	r1, [r7, #24]
 800b46e:	68f8      	ldr	r0, [r7, #12]
 800b470:	f000 f86b 	bl	800b54a <USBH_ParseEPDesc>
 800b474:	4603      	mov	r3, r0
 800b476:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800b47a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b47e:	3301      	adds	r3, #1
 800b480:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b484:	69fb      	ldr	r3, [r7, #28]
 800b486:	791b      	ldrb	r3, [r3, #4]
 800b488:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b48c:	429a      	cmp	r2, r3
 800b48e:	d204      	bcs.n	800b49a <USBH_ParseCfgDesc+0x19a>
 800b490:	6a3b      	ldr	r3, [r7, #32]
 800b492:	885a      	ldrh	r2, [r3, #2]
 800b494:	8afb      	ldrh	r3, [r7, #22]
 800b496:	429a      	cmp	r2, r3
 800b498:	d8b0      	bhi.n	800b3fc <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b49a:	69fb      	ldr	r3, [r7, #28]
 800b49c:	791b      	ldrb	r3, [r3, #4]
 800b49e:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d201      	bcs.n	800b4aa <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800b4a6:	2303      	movs	r3, #3
 800b4a8:	e01c      	b.n	800b4e4 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800b4aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4ae:	3301      	adds	r3, #1
 800b4b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b4b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	d805      	bhi.n	800b4c8 <USBH_ParseCfgDesc+0x1c8>
 800b4bc:	6a3b      	ldr	r3, [r7, #32]
 800b4be:	885a      	ldrh	r2, [r3, #2]
 800b4c0:	8afb      	ldrh	r3, [r7, #22]
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	f63f af74 	bhi.w	800b3b0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b4c8:	6a3b      	ldr	r3, [r7, #32]
 800b4ca:	791b      	ldrb	r3, [r3, #4]
 800b4cc:	2b02      	cmp	r3, #2
 800b4ce:	bf28      	it	cs
 800b4d0:	2302      	movcs	r3, #2
 800b4d2:	b2db      	uxtb	r3, r3
 800b4d4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800b4d8:	429a      	cmp	r2, r3
 800b4da:	d201      	bcs.n	800b4e0 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800b4dc:	2303      	movs	r3, #3
 800b4de:	e001      	b.n	800b4e4 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800b4e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3730      	adds	r7, #48	; 0x30
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}

0800b4ec <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b083      	sub	sp, #12
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
 800b4f4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800b4f6:	683b      	ldr	r3, [r7, #0]
 800b4f8:	781a      	ldrb	r2, [r3, #0]
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	785a      	ldrb	r2, [r3, #1]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	789a      	ldrb	r2, [r3, #2]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	78da      	ldrb	r2, [r3, #3]
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	791a      	ldrb	r2, [r3, #4]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800b51e:	683b      	ldr	r3, [r7, #0]
 800b520:	795a      	ldrb	r2, [r3, #5]
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	799a      	ldrb	r2, [r3, #6]
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800b52e:	683b      	ldr	r3, [r7, #0]
 800b530:	79da      	ldrb	r2, [r3, #7]
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	7a1a      	ldrb	r2, [r3, #8]
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	721a      	strb	r2, [r3, #8]
}
 800b53e:	bf00      	nop
 800b540:	370c      	adds	r7, #12
 800b542:	46bd      	mov	sp, r7
 800b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b548:	4770      	bx	lr

0800b54a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800b54a:	b480      	push	{r7}
 800b54c:	b087      	sub	sp, #28
 800b54e:	af00      	add	r7, sp, #0
 800b550:	60f8      	str	r0, [r7, #12]
 800b552:	60b9      	str	r1, [r7, #8]
 800b554:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b556:	2300      	movs	r3, #0
 800b558:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	781a      	ldrb	r2, [r3, #0]
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	785a      	ldrb	r2, [r3, #1]
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	789a      	ldrb	r2, [r3, #2]
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	78da      	ldrb	r2, [r3, #3]
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	3304      	adds	r3, #4
 800b57e:	781b      	ldrb	r3, [r3, #0]
 800b580:	b29a      	uxth	r2, r3
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	3305      	adds	r3, #5
 800b586:	781b      	ldrb	r3, [r3, #0]
 800b588:	b29b      	uxth	r3, r3
 800b58a:	021b      	lsls	r3, r3, #8
 800b58c:	b29b      	uxth	r3, r3
 800b58e:	4313      	orrs	r3, r2
 800b590:	b29a      	uxth	r2, r3
 800b592:	68bb      	ldr	r3, [r7, #8]
 800b594:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	799a      	ldrb	r2, [r3, #6]
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	889b      	ldrh	r3, [r3, #4]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d102      	bne.n	800b5ac <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800b5a6:	2303      	movs	r3, #3
 800b5a8:	75fb      	strb	r3, [r7, #23]
 800b5aa:	e033      	b.n	800b614 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	889b      	ldrh	r3, [r3, #4]
 800b5b0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b5b4:	f023 0307 	bic.w	r3, r3, #7
 800b5b8:	b29a      	uxth	r2, r3
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800b5be:	68bb      	ldr	r3, [r7, #8]
 800b5c0:	889b      	ldrh	r3, [r3, #4]
 800b5c2:	b21a      	sxth	r2, r3
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	3304      	adds	r3, #4
 800b5c8:	781b      	ldrb	r3, [r3, #0]
 800b5ca:	b299      	uxth	r1, r3
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	3305      	adds	r3, #5
 800b5d0:	781b      	ldrb	r3, [r3, #0]
 800b5d2:	b29b      	uxth	r3, r3
 800b5d4:	021b      	lsls	r3, r3, #8
 800b5d6:	b29b      	uxth	r3, r3
 800b5d8:	430b      	orrs	r3, r1
 800b5da:	b29b      	uxth	r3, r3
 800b5dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d110      	bne.n	800b606 <USBH_ParseEPDesc+0xbc>
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	3304      	adds	r3, #4
 800b5e8:	781b      	ldrb	r3, [r3, #0]
 800b5ea:	b299      	uxth	r1, r3
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	3305      	adds	r3, #5
 800b5f0:	781b      	ldrb	r3, [r3, #0]
 800b5f2:	b29b      	uxth	r3, r3
 800b5f4:	021b      	lsls	r3, r3, #8
 800b5f6:	b29b      	uxth	r3, r3
 800b5f8:	430b      	orrs	r3, r1
 800b5fa:	b29b      	uxth	r3, r3
 800b5fc:	b21b      	sxth	r3, r3
 800b5fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b602:	b21b      	sxth	r3, r3
 800b604:	e001      	b.n	800b60a <USBH_ParseEPDesc+0xc0>
 800b606:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b60a:	4313      	orrs	r3, r2
 800b60c:	b21b      	sxth	r3, r3
 800b60e:	b29a      	uxth	r2, r3
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d116      	bne.n	800b64c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	78db      	ldrb	r3, [r3, #3]
 800b622:	f003 0303 	and.w	r3, r3, #3
 800b626:	2b01      	cmp	r3, #1
 800b628:	d005      	beq.n	800b636 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	78db      	ldrb	r3, [r3, #3]
 800b62e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b632:	2b03      	cmp	r3, #3
 800b634:	d127      	bne.n	800b686 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	799b      	ldrb	r3, [r3, #6]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d003      	beq.n	800b646 <USBH_ParseEPDesc+0xfc>
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	799b      	ldrb	r3, [r3, #6]
 800b642:	2b10      	cmp	r3, #16
 800b644:	d91f      	bls.n	800b686 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b646:	2303      	movs	r3, #3
 800b648:	75fb      	strb	r3, [r7, #23]
 800b64a:	e01c      	b.n	800b686 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	78db      	ldrb	r3, [r3, #3]
 800b650:	f003 0303 	and.w	r3, r3, #3
 800b654:	2b01      	cmp	r3, #1
 800b656:	d10a      	bne.n	800b66e <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b658:	68bb      	ldr	r3, [r7, #8]
 800b65a:	799b      	ldrb	r3, [r3, #6]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	d003      	beq.n	800b668 <USBH_ParseEPDesc+0x11e>
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	799b      	ldrb	r3, [r3, #6]
 800b664:	2b10      	cmp	r3, #16
 800b666:	d90e      	bls.n	800b686 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b668:	2303      	movs	r3, #3
 800b66a:	75fb      	strb	r3, [r7, #23]
 800b66c:	e00b      	b.n	800b686 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	78db      	ldrb	r3, [r3, #3]
 800b672:	f003 0303 	and.w	r3, r3, #3
 800b676:	2b03      	cmp	r3, #3
 800b678:	d105      	bne.n	800b686 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	799b      	ldrb	r3, [r3, #6]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d101      	bne.n	800b686 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800b682:	2303      	movs	r3, #3
 800b684:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800b686:	7dfb      	ldrb	r3, [r7, #23]
}
 800b688:	4618      	mov	r0, r3
 800b68a:	371c      	adds	r7, #28
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr

0800b694 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b694:	b480      	push	{r7}
 800b696:	b087      	sub	sp, #28
 800b698:	af00      	add	r7, sp, #0
 800b69a:	60f8      	str	r0, [r7, #12]
 800b69c:	60b9      	str	r1, [r7, #8]
 800b69e:	4613      	mov	r3, r2
 800b6a0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	3301      	adds	r3, #1
 800b6a6:	781b      	ldrb	r3, [r3, #0]
 800b6a8:	2b03      	cmp	r3, #3
 800b6aa:	d120      	bne.n	800b6ee <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	781b      	ldrb	r3, [r3, #0]
 800b6b0:	1e9a      	subs	r2, r3, #2
 800b6b2:	88fb      	ldrh	r3, [r7, #6]
 800b6b4:	4293      	cmp	r3, r2
 800b6b6:	bf28      	it	cs
 800b6b8:	4613      	movcs	r3, r2
 800b6ba:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	3302      	adds	r3, #2
 800b6c0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	82fb      	strh	r3, [r7, #22]
 800b6c6:	e00b      	b.n	800b6e0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b6c8:	8afb      	ldrh	r3, [r7, #22]
 800b6ca:	68fa      	ldr	r2, [r7, #12]
 800b6cc:	4413      	add	r3, r2
 800b6ce:	781a      	ldrb	r2, [r3, #0]
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	3301      	adds	r3, #1
 800b6d8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b6da:	8afb      	ldrh	r3, [r7, #22]
 800b6dc:	3302      	adds	r3, #2
 800b6de:	82fb      	strh	r3, [r7, #22]
 800b6e0:	8afa      	ldrh	r2, [r7, #22]
 800b6e2:	8abb      	ldrh	r3, [r7, #20]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d3ef      	bcc.n	800b6c8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	701a      	strb	r2, [r3, #0]
  }
}
 800b6ee:	bf00      	nop
 800b6f0:	371c      	adds	r7, #28
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f8:	4770      	bx	lr

0800b6fa <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800b6fa:	b480      	push	{r7}
 800b6fc:	b085      	sub	sp, #20
 800b6fe:	af00      	add	r7, sp, #0
 800b700:	6078      	str	r0, [r7, #4]
 800b702:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	881a      	ldrh	r2, [r3, #0]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	781b      	ldrb	r3, [r3, #0]
 800b70c:	b29b      	uxth	r3, r3
 800b70e:	4413      	add	r3, r2
 800b710:	b29a      	uxth	r2, r3
 800b712:	683b      	ldr	r3, [r7, #0]
 800b714:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	781b      	ldrb	r3, [r3, #0]
 800b71a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	4413      	add	r3, r2
 800b720:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b722:	68fb      	ldr	r3, [r7, #12]
}
 800b724:	4618      	mov	r0, r3
 800b726:	3714      	adds	r7, #20
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr

0800b730 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b730:	b580      	push	{r7, lr}
 800b732:	b086      	sub	sp, #24
 800b734:	af00      	add	r7, sp, #0
 800b736:	60f8      	str	r0, [r7, #12]
 800b738:	60b9      	str	r1, [r7, #8]
 800b73a:	4613      	mov	r3, r2
 800b73c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b73e:	2301      	movs	r3, #1
 800b740:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	789b      	ldrb	r3, [r3, #2]
 800b746:	2b01      	cmp	r3, #1
 800b748:	d002      	beq.n	800b750 <USBH_CtlReq+0x20>
 800b74a:	2b02      	cmp	r3, #2
 800b74c:	d01d      	beq.n	800b78a <USBH_CtlReq+0x5a>
#endif
#endif
      break;

    default:
      break;
 800b74e:	e043      	b.n	800b7d8 <USBH_CtlReq+0xa8>
      phost->Control.buff = buff;
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	68ba      	ldr	r2, [r7, #8]
 800b754:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b756:	68fb      	ldr	r3, [r7, #12]
 800b758:	88fa      	ldrh	r2, [r7, #6]
 800b75a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	2201      	movs	r2, #1
 800b760:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	2202      	movs	r2, #2
 800b766:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b768:	2301      	movs	r3, #1
 800b76a:	75fb      	strb	r3, [r7, #23]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	2203      	movs	r2, #3
 800b770:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b780:	2200      	movs	r2, #0
 800b782:	4619      	mov	r1, r3
 800b784:	f000 fc62 	bl	800c04c <osMessagePut>
      break;
 800b788:	e026      	b.n	800b7d8 <USBH_CtlReq+0xa8>
      status = USBH_HandleControl(phost);
 800b78a:	68f8      	ldr	r0, [r7, #12]
 800b78c:	f000 f82a 	bl	800b7e4 <USBH_HandleControl>
 800b790:	4603      	mov	r3, r0
 800b792:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b794:	7dfb      	ldrb	r3, [r7, #23]
 800b796:	2b00      	cmp	r3, #0
 800b798:	d002      	beq.n	800b7a0 <USBH_CtlReq+0x70>
 800b79a:	7dfb      	ldrb	r3, [r7, #23]
 800b79c:	2b03      	cmp	r3, #3
 800b79e:	d106      	bne.n	800b7ae <USBH_CtlReq+0x7e>
        phost->RequestState = CMD_SEND;
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	761a      	strb	r2, [r3, #24]
 800b7ac:	e005      	b.n	800b7ba <USBH_CtlReq+0x8a>
      else if (status == USBH_FAIL)
 800b7ae:	7dfb      	ldrb	r3, [r7, #23]
 800b7b0:	2b02      	cmp	r3, #2
 800b7b2:	d102      	bne.n	800b7ba <USBH_CtlReq+0x8a>
        phost->RequestState = CMD_SEND;
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	709a      	strb	r2, [r3, #2]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	2203      	movs	r2, #3
 800b7be:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b7ce:	2200      	movs	r2, #0
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	f000 fc3b 	bl	800c04c <osMessagePut>
      break;
 800b7d6:	bf00      	nop
  }
  return status;
 800b7d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7da:	4618      	mov	r0, r3
 800b7dc:	3718      	adds	r7, #24
 800b7de:	46bd      	mov	sp, r7
 800b7e0:	bd80      	pop	{r7, pc}
	...

0800b7e4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b086      	sub	sp, #24
 800b7e8:	af02      	add	r7, sp, #8
 800b7ea:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	7e1b      	ldrb	r3, [r3, #24]
 800b7f8:	3b01      	subs	r3, #1
 800b7fa:	2b0a      	cmp	r3, #10
 800b7fc:	f200 8229 	bhi.w	800bc52 <USBH_HandleControl+0x46e>
 800b800:	a201      	add	r2, pc, #4	; (adr r2, 800b808 <USBH_HandleControl+0x24>)
 800b802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b806:	bf00      	nop
 800b808:	0800b835 	.word	0x0800b835
 800b80c:	0800b84f 	.word	0x0800b84f
 800b810:	0800b8f1 	.word	0x0800b8f1
 800b814:	0800b917 	.word	0x0800b917
 800b818:	0800b9a3 	.word	0x0800b9a3
 800b81c:	0800b9cd 	.word	0x0800b9cd
 800b820:	0800ba8f 	.word	0x0800ba8f
 800b824:	0800bab1 	.word	0x0800bab1
 800b828:	0800bb43 	.word	0x0800bb43
 800b82c:	0800bb69 	.word	0x0800bb69
 800b830:	0800bbfb 	.word	0x0800bbfb
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	f103 0110 	add.w	r1, r3, #16
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	795b      	ldrb	r3, [r3, #5]
 800b83e:	461a      	mov	r2, r3
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f000 fa17 	bl	800bc74 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2202      	movs	r2, #2
 800b84a:	761a      	strb	r2, [r3, #24]
      break;
 800b84c:	e20c      	b.n	800bc68 <USBH_HandleControl+0x484>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	795b      	ldrb	r3, [r3, #5]
 800b852:	4619      	mov	r1, r3
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f003 f83f 	bl	800e8d8 <USBH_LL_GetURBState>
 800b85a:	4603      	mov	r3, r0
 800b85c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b85e:	7bbb      	ldrb	r3, [r7, #14]
 800b860:	2b01      	cmp	r3, #1
 800b862:	d12c      	bne.n	800b8be <USBH_HandleControl+0xda>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	7c1b      	ldrb	r3, [r3, #16]
 800b868:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800b86c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	8adb      	ldrh	r3, [r3, #22]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d00a      	beq.n	800b88c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b876:	7b7b      	ldrb	r3, [r7, #13]
 800b878:	2b80      	cmp	r3, #128	; 0x80
 800b87a:	d103      	bne.n	800b884 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2203      	movs	r2, #3
 800b880:	761a      	strb	r2, [r3, #24]
 800b882:	e00d      	b.n	800b8a0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_DATA_OUT;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	2205      	movs	r2, #5
 800b888:	761a      	strb	r2, [r3, #24]
 800b88a:	e009      	b.n	800b8a0 <USBH_HandleControl+0xbc>
        }
        /* No DATA stage */
        else
        {
          /* If there is No Data Transfer Stage */
          if (direction == USB_D2H)
 800b88c:	7b7b      	ldrb	r3, [r7, #13]
 800b88e:	2b80      	cmp	r3, #128	; 0x80
 800b890:	d103      	bne.n	800b89a <USBH_HandleControl+0xb6>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_STATUS_OUT;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	2209      	movs	r2, #9
 800b896:	761a      	strb	r2, [r3, #24]
 800b898:	e002      	b.n	800b8a0 <USBH_HandleControl+0xbc>
          }
          else
          {
            /* Data Direction is OUT */
            phost->Control.state = CTRL_STATUS_IN;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2207      	movs	r2, #7
 800b89e:	761a      	strb	r2, [r3, #24]
          }
        }

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2203      	movs	r2, #3
 800b8a4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	f000 fbc8 	bl	800c04c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b8bc:	e1cb      	b.n	800bc56 <USBH_HandleControl+0x472>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b8be:	7bbb      	ldrb	r3, [r7, #14]
 800b8c0:	2b04      	cmp	r3, #4
 800b8c2:	d003      	beq.n	800b8cc <USBH_HandleControl+0xe8>
 800b8c4:	7bbb      	ldrb	r3, [r7, #14]
 800b8c6:	2b02      	cmp	r3, #2
 800b8c8:	f040 81c5 	bne.w	800bc56 <USBH_HandleControl+0x472>
          phost->Control.state = CTRL_ERROR;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	220b      	movs	r2, #11
 800b8d0:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2203      	movs	r2, #3
 800b8d6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b8e6:	2200      	movs	r2, #0
 800b8e8:	4619      	mov	r1, r3
 800b8ea:	f000 fbaf 	bl	800c04c <osMessagePut>
      break;
 800b8ee:	e1b2      	b.n	800bc56 <USBH_HandleControl+0x472>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b8f6:	b29a      	uxth	r2, r3
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	6899      	ldr	r1, [r3, #8]
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	899a      	ldrh	r2, [r3, #12]
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	791b      	ldrb	r3, [r3, #4]
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 f9f2 	bl	800bcf2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2204      	movs	r2, #4
 800b912:	761a      	strb	r2, [r3, #24]
      break;
 800b914:	e1a8      	b.n	800bc68 <USBH_HandleControl+0x484>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	791b      	ldrb	r3, [r3, #4]
 800b91a:	4619      	mov	r1, r3
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f002 ffdb 	bl	800e8d8 <USBH_LL_GetURBState>
 800b922:	4603      	mov	r3, r0
 800b924:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b926:	7bbb      	ldrb	r3, [r7, #14]
 800b928:	2b01      	cmp	r3, #1
 800b92a:	d110      	bne.n	800b94e <USBH_HandleControl+0x16a>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2209      	movs	r2, #9
 800b930:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2203      	movs	r2, #3
 800b936:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b946:	2200      	movs	r2, #0
 800b948:	4619      	mov	r1, r3
 800b94a:	f000 fb7f 	bl	800c04c <osMessagePut>
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b94e:	7bbb      	ldrb	r3, [r7, #14]
 800b950:	2b05      	cmp	r3, #5
 800b952:	d110      	bne.n	800b976 <USBH_HandleControl+0x192>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b954:	2303      	movs	r3, #3
 800b956:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2203      	movs	r2, #3
 800b95c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b96c:	2200      	movs	r2, #0
 800b96e:	4619      	mov	r1, r3
 800b970:	f000 fb6c 	bl	800c04c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b974:	e171      	b.n	800bc5a <USBH_HandleControl+0x476>
        if (URB_Status == USBH_URB_ERROR)
 800b976:	7bbb      	ldrb	r3, [r7, #14]
 800b978:	2b04      	cmp	r3, #4
 800b97a:	f040 816e 	bne.w	800bc5a <USBH_HandleControl+0x476>
          phost->Control.state = CTRL_ERROR;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	220b      	movs	r2, #11
 800b982:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2203      	movs	r2, #3
 800b988:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b998:	2200      	movs	r2, #0
 800b99a:	4619      	mov	r1, r3
 800b99c:	f000 fb56 	bl	800c04c <osMessagePut>
      break;
 800b9a0:	e15b      	b.n	800bc5a <USBH_HandleControl+0x476>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	6899      	ldr	r1, [r3, #8]
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	899a      	ldrh	r2, [r3, #12]
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	795b      	ldrb	r3, [r3, #5]
 800b9ae:	2001      	movs	r0, #1
 800b9b0:	9000      	str	r0, [sp, #0]
 800b9b2:	6878      	ldr	r0, [r7, #4]
 800b9b4:	f000 f978 	bl	800bca8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800b9be:	b29a      	uxth	r2, r3
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	2206      	movs	r2, #6
 800b9c8:	761a      	strb	r2, [r3, #24]
      break;
 800b9ca:	e14d      	b.n	800bc68 <USBH_HandleControl+0x484>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	795b      	ldrb	r3, [r3, #5]
 800b9d0:	4619      	mov	r1, r3
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f002 ff80 	bl	800e8d8 <USBH_LL_GetURBState>
 800b9d8:	4603      	mov	r3, r0
 800b9da:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b9dc:	7bbb      	ldrb	r3, [r7, #14]
 800b9de:	2b01      	cmp	r3, #1
 800b9e0:	d111      	bne.n	800ba06 <USBH_HandleControl+0x222>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2207      	movs	r2, #7
 800b9e6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2203      	movs	r2, #3
 800b9ec:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800b9fc:	2200      	movs	r2, #0
 800b9fe:	4619      	mov	r1, r3
 800ba00:	f000 fb24 	bl	800c04c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ba04:	e12b      	b.n	800bc5e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_STALL)
 800ba06:	7bbb      	ldrb	r3, [r7, #14]
 800ba08:	2b05      	cmp	r3, #5
 800ba0a:	d113      	bne.n	800ba34 <USBH_HandleControl+0x250>
        phost->Control.state = CTRL_STALLED;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	220c      	movs	r2, #12
 800ba10:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ba12:	2303      	movs	r3, #3
 800ba14:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2203      	movs	r2, #3
 800ba1a:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	4619      	mov	r1, r3
 800ba2e:	f000 fb0d 	bl	800c04c <osMessagePut>
      break;
 800ba32:	e114      	b.n	800bc5e <USBH_HandleControl+0x47a>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ba34:	7bbb      	ldrb	r3, [r7, #14]
 800ba36:	2b02      	cmp	r3, #2
 800ba38:	d111      	bne.n	800ba5e <USBH_HandleControl+0x27a>
        phost->Control.state = CTRL_DATA_OUT;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2205      	movs	r2, #5
 800ba3e:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2203      	movs	r2, #3
 800ba44:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ba54:	2200      	movs	r2, #0
 800ba56:	4619      	mov	r1, r3
 800ba58:	f000 faf8 	bl	800c04c <osMessagePut>
      break;
 800ba5c:	e0ff      	b.n	800bc5e <USBH_HandleControl+0x47a>
        if (URB_Status == USBH_URB_ERROR)
 800ba5e:	7bbb      	ldrb	r3, [r7, #14]
 800ba60:	2b04      	cmp	r3, #4
 800ba62:	f040 80fc 	bne.w	800bc5e <USBH_HandleControl+0x47a>
          phost->Control.state = CTRL_ERROR;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	220b      	movs	r2, #11
 800ba6a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ba6c:	2302      	movs	r3, #2
 800ba6e:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	2203      	movs	r2, #3
 800ba74:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800ba84:	2200      	movs	r2, #0
 800ba86:	4619      	mov	r1, r3
 800ba88:	f000 fae0 	bl	800c04c <osMessagePut>
      break;
 800ba8c:	e0e7      	b.n	800bc5e <USBH_HandleControl+0x47a>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	791b      	ldrb	r3, [r3, #4]
 800ba92:	2200      	movs	r2, #0
 800ba94:	2100      	movs	r1, #0
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f000 f92b 	bl	800bcf2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800baa2:	b29a      	uxth	r2, r3
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2208      	movs	r2, #8
 800baac:	761a      	strb	r2, [r3, #24]

      break;
 800baae:	e0db      	b.n	800bc68 <USBH_HandleControl+0x484>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	791b      	ldrb	r3, [r3, #4]
 800bab4:	4619      	mov	r1, r3
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f002 ff0e 	bl	800e8d8 <USBH_LL_GetURBState>
 800babc:	4603      	mov	r3, r0
 800babe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800bac0:	7bbb      	ldrb	r3, [r7, #14]
 800bac2:	2b01      	cmp	r3, #1
 800bac4:	d113      	bne.n	800baee <USBH_HandleControl+0x30a>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	220d      	movs	r2, #13
 800baca:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800bacc:	2300      	movs	r3, #0
 800bace:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	2203      	movs	r2, #3
 800bad4:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bae4:	2200      	movs	r2, #0
 800bae6:	4619      	mov	r1, r3
 800bae8:	f000 fab0 	bl	800c04c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800baec:	e0b9      	b.n	800bc62 <USBH_HandleControl+0x47e>
      else if (URB_Status == USBH_URB_ERROR)
 800baee:	7bbb      	ldrb	r3, [r7, #14]
 800baf0:	2b04      	cmp	r3, #4
 800baf2:	d111      	bne.n	800bb18 <USBH_HandleControl+0x334>
        phost->Control.state = CTRL_ERROR;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	220b      	movs	r2, #11
 800baf8:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	2203      	movs	r2, #3
 800bafe:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bb0e:	2200      	movs	r2, #0
 800bb10:	4619      	mov	r1, r3
 800bb12:	f000 fa9b 	bl	800c04c <osMessagePut>
      break;
 800bb16:	e0a4      	b.n	800bc62 <USBH_HandleControl+0x47e>
        if (URB_Status == USBH_URB_STALL)
 800bb18:	7bbb      	ldrb	r3, [r7, #14]
 800bb1a:	2b05      	cmp	r3, #5
 800bb1c:	f040 80a1 	bne.w	800bc62 <USBH_HandleControl+0x47e>
          status = USBH_NOT_SUPPORTED;
 800bb20:	2303      	movs	r3, #3
 800bb22:	73fb      	strb	r3, [r7, #15]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2203      	movs	r2, #3
 800bb28:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bb38:	2200      	movs	r2, #0
 800bb3a:	4619      	mov	r1, r3
 800bb3c:	f000 fa86 	bl	800c04c <osMessagePut>
      break;
 800bb40:	e08f      	b.n	800bc62 <USBH_HandleControl+0x47e>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	795b      	ldrb	r3, [r3, #5]
 800bb46:	2201      	movs	r2, #1
 800bb48:	9200      	str	r2, [sp, #0]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	2100      	movs	r1, #0
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f000 f8aa 	bl	800bca8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800bb5a:	b29a      	uxth	r2, r3
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	220a      	movs	r2, #10
 800bb64:	761a      	strb	r2, [r3, #24]
      break;
 800bb66:	e07f      	b.n	800bc68 <USBH_HandleControl+0x484>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	795b      	ldrb	r3, [r3, #5]
 800bb6c:	4619      	mov	r1, r3
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f002 feb2 	bl	800e8d8 <USBH_LL_GetURBState>
 800bb74:	4603      	mov	r3, r0
 800bb76:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800bb78:	7bbb      	ldrb	r3, [r7, #14]
 800bb7a:	2b01      	cmp	r3, #1
 800bb7c:	d113      	bne.n	800bba6 <USBH_HandleControl+0x3c2>
      {
        status = USBH_OK;
 800bb7e:	2300      	movs	r3, #0
 800bb80:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	220d      	movs	r2, #13
 800bb86:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2203      	movs	r2, #3
 800bb8c:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bb9c:	2200      	movs	r2, #0
 800bb9e:	4619      	mov	r1, r3
 800bba0:	f000 fa54 	bl	800c04c <osMessagePut>
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800bba4:	e05f      	b.n	800bc66 <USBH_HandleControl+0x482>
      else if (URB_Status == USBH_URB_NOTREADY)
 800bba6:	7bbb      	ldrb	r3, [r7, #14]
 800bba8:	2b02      	cmp	r3, #2
 800bbaa:	d111      	bne.n	800bbd0 <USBH_HandleControl+0x3ec>
        phost->Control.state = CTRL_STATUS_OUT;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2209      	movs	r2, #9
 800bbb0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	2203      	movs	r2, #3
 800bbb6:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	4619      	mov	r1, r3
 800bbca:	f000 fa3f 	bl	800c04c <osMessagePut>
      break;
 800bbce:	e04a      	b.n	800bc66 <USBH_HandleControl+0x482>
        if (URB_Status == USBH_URB_ERROR)
 800bbd0:	7bbb      	ldrb	r3, [r7, #14]
 800bbd2:	2b04      	cmp	r3, #4
 800bbd4:	d147      	bne.n	800bc66 <USBH_HandleControl+0x482>
          phost->Control.state = CTRL_ERROR;
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	220b      	movs	r2, #11
 800bbda:	761a      	strb	r2, [r3, #24]
          phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2203      	movs	r2, #3
 800bbe0:	f8c3 23e0 	str.w	r2, [r3, #992]	; 0x3e0
          (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	f8d3 03d8 	ldr.w	r0, [r3, #984]	; 0x3d8
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	f8d3 33e0 	ldr.w	r3, [r3, #992]	; 0x3e0
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	4619      	mov	r1, r3
 800bbf4:	f000 fa2a 	bl	800c04c <osMessagePut>
      break;
 800bbf8:	e035      	b.n	800bc66 <USBH_HandleControl+0x482>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	7e5b      	ldrb	r3, [r3, #25]
 800bbfe:	3301      	adds	r3, #1
 800bc00:	b2da      	uxtb	r2, r3
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	765a      	strb	r2, [r3, #25]
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	7e5b      	ldrb	r3, [r3, #25]
 800bc0a:	2b02      	cmp	r3, #2
 800bc0c:	d806      	bhi.n	800bc1c <USBH_HandleControl+0x438>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2201      	movs	r2, #1
 800bc12:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2201      	movs	r2, #1
 800bc18:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800bc1a:	e025      	b.n	800bc68 <USBH_HandleControl+0x484>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800bc22:	2106      	movs	r1, #6
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	795b      	ldrb	r3, [r3, #5]
 800bc32:	4619      	mov	r1, r3
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f000 f90d 	bl	800be54 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	791b      	ldrb	r3, [r3, #4]
 800bc3e:	4619      	mov	r1, r3
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f000 f907 	bl	800be54 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800bc4c:	2302      	movs	r3, #2
 800bc4e:	73fb      	strb	r3, [r7, #15]
      break;
 800bc50:	e00a      	b.n	800bc68 <USBH_HandleControl+0x484>

    default:
      break;
 800bc52:	bf00      	nop
 800bc54:	e008      	b.n	800bc68 <USBH_HandleControl+0x484>
      break;
 800bc56:	bf00      	nop
 800bc58:	e006      	b.n	800bc68 <USBH_HandleControl+0x484>
      break;
 800bc5a:	bf00      	nop
 800bc5c:	e004      	b.n	800bc68 <USBH_HandleControl+0x484>
      break;
 800bc5e:	bf00      	nop
 800bc60:	e002      	b.n	800bc68 <USBH_HandleControl+0x484>
      break;
 800bc62:	bf00      	nop
 800bc64:	e000      	b.n	800bc68 <USBH_HandleControl+0x484>
      break;
 800bc66:	bf00      	nop
  }

  return status;
 800bc68:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3710      	adds	r7, #16
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}
 800bc72:	bf00      	nop

0800bc74 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b088      	sub	sp, #32
 800bc78:	af04      	add	r7, sp, #16
 800bc7a:	60f8      	str	r0, [r7, #12]
 800bc7c:	60b9      	str	r1, [r7, #8]
 800bc7e:	4613      	mov	r3, r2
 800bc80:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bc82:	79f9      	ldrb	r1, [r7, #7]
 800bc84:	2300      	movs	r3, #0
 800bc86:	9303      	str	r3, [sp, #12]
 800bc88:	2308      	movs	r3, #8
 800bc8a:	9302      	str	r3, [sp, #8]
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	9301      	str	r3, [sp, #4]
 800bc90:	2300      	movs	r3, #0
 800bc92:	9300      	str	r3, [sp, #0]
 800bc94:	2300      	movs	r3, #0
 800bc96:	2200      	movs	r2, #0
 800bc98:	68f8      	ldr	r0, [r7, #12]
 800bc9a:	f002 fdec 	bl	800e876 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800bc9e:	2300      	movs	r3, #0
}
 800bca0:	4618      	mov	r0, r3
 800bca2:	3710      	adds	r7, #16
 800bca4:	46bd      	mov	sp, r7
 800bca6:	bd80      	pop	{r7, pc}

0800bca8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b088      	sub	sp, #32
 800bcac:	af04      	add	r7, sp, #16
 800bcae:	60f8      	str	r0, [r7, #12]
 800bcb0:	60b9      	str	r1, [r7, #8]
 800bcb2:	4611      	mov	r1, r2
 800bcb4:	461a      	mov	r2, r3
 800bcb6:	460b      	mov	r3, r1
 800bcb8:	80fb      	strh	r3, [r7, #6]
 800bcba:	4613      	mov	r3, r2
 800bcbc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d001      	beq.n	800bccc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800bcc8:	2300      	movs	r3, #0
 800bcca:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bccc:	7979      	ldrb	r1, [r7, #5]
 800bcce:	7e3b      	ldrb	r3, [r7, #24]
 800bcd0:	9303      	str	r3, [sp, #12]
 800bcd2:	88fb      	ldrh	r3, [r7, #6]
 800bcd4:	9302      	str	r3, [sp, #8]
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	9301      	str	r3, [sp, #4]
 800bcda:	2301      	movs	r3, #1
 800bcdc:	9300      	str	r3, [sp, #0]
 800bcde:	2300      	movs	r3, #0
 800bce0:	2200      	movs	r2, #0
 800bce2:	68f8      	ldr	r0, [r7, #12]
 800bce4:	f002 fdc7 	bl	800e876 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800bce8:	2300      	movs	r3, #0
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3710      	adds	r7, #16
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	bd80      	pop	{r7, pc}

0800bcf2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800bcf2:	b580      	push	{r7, lr}
 800bcf4:	b088      	sub	sp, #32
 800bcf6:	af04      	add	r7, sp, #16
 800bcf8:	60f8      	str	r0, [r7, #12]
 800bcfa:	60b9      	str	r1, [r7, #8]
 800bcfc:	4611      	mov	r1, r2
 800bcfe:	461a      	mov	r2, r3
 800bd00:	460b      	mov	r3, r1
 800bd02:	80fb      	strh	r3, [r7, #6]
 800bd04:	4613      	mov	r3, r2
 800bd06:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bd08:	7979      	ldrb	r1, [r7, #5]
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	9303      	str	r3, [sp, #12]
 800bd0e:	88fb      	ldrh	r3, [r7, #6]
 800bd10:	9302      	str	r3, [sp, #8]
 800bd12:	68bb      	ldr	r3, [r7, #8]
 800bd14:	9301      	str	r3, [sp, #4]
 800bd16:	2301      	movs	r3, #1
 800bd18:	9300      	str	r3, [sp, #0]
 800bd1a:	2300      	movs	r3, #0
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	68f8      	ldr	r0, [r7, #12]
 800bd20:	f002 fda9 	bl	800e876 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800bd24:	2300      	movs	r3, #0

}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3710      	adds	r7, #16
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}

0800bd2e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800bd2e:	b580      	push	{r7, lr}
 800bd30:	b088      	sub	sp, #32
 800bd32:	af04      	add	r7, sp, #16
 800bd34:	60f8      	str	r0, [r7, #12]
 800bd36:	60b9      	str	r1, [r7, #8]
 800bd38:	4611      	mov	r1, r2
 800bd3a:	461a      	mov	r2, r3
 800bd3c:	460b      	mov	r3, r1
 800bd3e:	80fb      	strh	r3, [r7, #6]
 800bd40:	4613      	mov	r3, r2
 800bd42:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800bd44:	68fb      	ldr	r3, [r7, #12]
 800bd46:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d001      	beq.n	800bd52 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800bd4e:	2300      	movs	r3, #0
 800bd50:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bd52:	7979      	ldrb	r1, [r7, #5]
 800bd54:	7e3b      	ldrb	r3, [r7, #24]
 800bd56:	9303      	str	r3, [sp, #12]
 800bd58:	88fb      	ldrh	r3, [r7, #6]
 800bd5a:	9302      	str	r3, [sp, #8]
 800bd5c:	68bb      	ldr	r3, [r7, #8]
 800bd5e:	9301      	str	r3, [sp, #4]
 800bd60:	2301      	movs	r3, #1
 800bd62:	9300      	str	r3, [sp, #0]
 800bd64:	2302      	movs	r3, #2
 800bd66:	2200      	movs	r2, #0
 800bd68:	68f8      	ldr	r0, [r7, #12]
 800bd6a:	f002 fd84 	bl	800e876 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800bd6e:	2300      	movs	r3, #0
}
 800bd70:	4618      	mov	r0, r3
 800bd72:	3710      	adds	r7, #16
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b088      	sub	sp, #32
 800bd7c:	af04      	add	r7, sp, #16
 800bd7e:	60f8      	str	r0, [r7, #12]
 800bd80:	60b9      	str	r1, [r7, #8]
 800bd82:	4611      	mov	r1, r2
 800bd84:	461a      	mov	r2, r3
 800bd86:	460b      	mov	r3, r1
 800bd88:	80fb      	strh	r3, [r7, #6]
 800bd8a:	4613      	mov	r3, r2
 800bd8c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800bd8e:	7979      	ldrb	r1, [r7, #5]
 800bd90:	2300      	movs	r3, #0
 800bd92:	9303      	str	r3, [sp, #12]
 800bd94:	88fb      	ldrh	r3, [r7, #6]
 800bd96:	9302      	str	r3, [sp, #8]
 800bd98:	68bb      	ldr	r3, [r7, #8]
 800bd9a:	9301      	str	r3, [sp, #4]
 800bd9c:	2301      	movs	r3, #1
 800bd9e:	9300      	str	r3, [sp, #0]
 800bda0:	2302      	movs	r3, #2
 800bda2:	2201      	movs	r2, #1
 800bda4:	68f8      	ldr	r0, [r7, #12]
 800bda6:	f002 fd66 	bl	800e876 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800bdaa:	2300      	movs	r3, #0
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3710      	adds	r7, #16
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b086      	sub	sp, #24
 800bdb8:	af04      	add	r7, sp, #16
 800bdba:	6078      	str	r0, [r7, #4]
 800bdbc:	4608      	mov	r0, r1
 800bdbe:	4611      	mov	r1, r2
 800bdc0:	461a      	mov	r2, r3
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	70fb      	strb	r3, [r7, #3]
 800bdc6:	460b      	mov	r3, r1
 800bdc8:	70bb      	strb	r3, [r7, #2]
 800bdca:	4613      	mov	r3, r2
 800bdcc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800bdce:	7878      	ldrb	r0, [r7, #1]
 800bdd0:	78ba      	ldrb	r2, [r7, #2]
 800bdd2:	78f9      	ldrb	r1, [r7, #3]
 800bdd4:	8b3b      	ldrh	r3, [r7, #24]
 800bdd6:	9302      	str	r3, [sp, #8]
 800bdd8:	7d3b      	ldrb	r3, [r7, #20]
 800bdda:	9301      	str	r3, [sp, #4]
 800bddc:	7c3b      	ldrb	r3, [r7, #16]
 800bdde:	9300      	str	r3, [sp, #0]
 800bde0:	4603      	mov	r3, r0
 800bde2:	6878      	ldr	r0, [r7, #4]
 800bde4:	f002 fcf9 	bl	800e7da <USBH_LL_OpenPipe>

  return USBH_OK;
 800bde8:	2300      	movs	r3, #0
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	3708      	adds	r7, #8
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	bd80      	pop	{r7, pc}

0800bdf2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800bdf2:	b580      	push	{r7, lr}
 800bdf4:	b082      	sub	sp, #8
 800bdf6:	af00      	add	r7, sp, #0
 800bdf8:	6078      	str	r0, [r7, #4]
 800bdfa:	460b      	mov	r3, r1
 800bdfc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800bdfe:	78fb      	ldrb	r3, [r7, #3]
 800be00:	4619      	mov	r1, r3
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f002 fd18 	bl	800e838 <USBH_LL_ClosePipe>

  return USBH_OK;
 800be08:	2300      	movs	r3, #0
}
 800be0a:	4618      	mov	r0, r3
 800be0c:	3708      	adds	r7, #8
 800be0e:	46bd      	mov	sp, r7
 800be10:	bd80      	pop	{r7, pc}

0800be12 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800be12:	b580      	push	{r7, lr}
 800be14:	b084      	sub	sp, #16
 800be16:	af00      	add	r7, sp, #0
 800be18:	6078      	str	r0, [r7, #4]
 800be1a:	460b      	mov	r3, r1
 800be1c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f000 f836 	bl	800be90 <USBH_GetFreePipe>
 800be24:	4603      	mov	r3, r0
 800be26:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800be28:	89fb      	ldrh	r3, [r7, #14]
 800be2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800be2e:	4293      	cmp	r3, r2
 800be30:	d00a      	beq.n	800be48 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800be32:	78fa      	ldrb	r2, [r7, #3]
 800be34:	89fb      	ldrh	r3, [r7, #14]
 800be36:	f003 030f 	and.w	r3, r3, #15
 800be3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800be3e:	6879      	ldr	r1, [r7, #4]
 800be40:	33e0      	adds	r3, #224	; 0xe0
 800be42:	009b      	lsls	r3, r3, #2
 800be44:	440b      	add	r3, r1
 800be46:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800be48:	89fb      	ldrh	r3, [r7, #14]
 800be4a:	b2db      	uxtb	r3, r3
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3710      	adds	r7, #16
 800be50:	46bd      	mov	sp, r7
 800be52:	bd80      	pop	{r7, pc}

0800be54 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800be54:	b480      	push	{r7}
 800be56:	b083      	sub	sp, #12
 800be58:	af00      	add	r7, sp, #0
 800be5a:	6078      	str	r0, [r7, #4]
 800be5c:	460b      	mov	r3, r1
 800be5e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800be60:	78fb      	ldrb	r3, [r7, #3]
 800be62:	2b0f      	cmp	r3, #15
 800be64:	d80d      	bhi.n	800be82 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800be66:	78fb      	ldrb	r3, [r7, #3]
 800be68:	687a      	ldr	r2, [r7, #4]
 800be6a:	33e0      	adds	r3, #224	; 0xe0
 800be6c:	009b      	lsls	r3, r3, #2
 800be6e:	4413      	add	r3, r2
 800be70:	685a      	ldr	r2, [r3, #4]
 800be72:	78fb      	ldrb	r3, [r7, #3]
 800be74:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800be78:	6879      	ldr	r1, [r7, #4]
 800be7a:	33e0      	adds	r3, #224	; 0xe0
 800be7c:	009b      	lsls	r3, r3, #2
 800be7e:	440b      	add	r3, r1
 800be80:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800be82:	2300      	movs	r3, #0
}
 800be84:	4618      	mov	r0, r3
 800be86:	370c      	adds	r7, #12
 800be88:	46bd      	mov	sp, r7
 800be8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be8e:	4770      	bx	lr

0800be90 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800be90:	b480      	push	{r7}
 800be92:	b085      	sub	sp, #20
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800be98:	2300      	movs	r3, #0
 800be9a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800be9c:	2300      	movs	r3, #0
 800be9e:	73fb      	strb	r3, [r7, #15]
 800bea0:	e00f      	b.n	800bec2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800bea2:	7bfb      	ldrb	r3, [r7, #15]
 800bea4:	687a      	ldr	r2, [r7, #4]
 800bea6:	33e0      	adds	r3, #224	; 0xe0
 800bea8:	009b      	lsls	r3, r3, #2
 800beaa:	4413      	add	r3, r2
 800beac:	685b      	ldr	r3, [r3, #4]
 800beae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d102      	bne.n	800bebc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800beb6:	7bfb      	ldrb	r3, [r7, #15]
 800beb8:	b29b      	uxth	r3, r3
 800beba:	e007      	b.n	800becc <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800bebc:	7bfb      	ldrb	r3, [r7, #15]
 800bebe:	3301      	adds	r3, #1
 800bec0:	73fb      	strb	r3, [r7, #15]
 800bec2:	7bfb      	ldrb	r3, [r7, #15]
 800bec4:	2b0f      	cmp	r3, #15
 800bec6:	d9ec      	bls.n	800bea2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800bec8:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800becc:	4618      	mov	r0, r3
 800bece:	3714      	adds	r7, #20
 800bed0:	46bd      	mov	sp, r7
 800bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed6:	4770      	bx	lr

0800bed8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800bed8:	b480      	push	{r7}
 800beda:	b085      	sub	sp, #20
 800bedc:	af00      	add	r7, sp, #0
 800bede:	4603      	mov	r3, r0
 800bee0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bee2:	2300      	movs	r3, #0
 800bee4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800bee6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800beea:	2b84      	cmp	r3, #132	; 0x84
 800beec:	d005      	beq.n	800befa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800beee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	4413      	add	r3, r2
 800bef6:	3303      	adds	r3, #3
 800bef8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800befa:	68fb      	ldr	r3, [r7, #12]
}
 800befc:	4618      	mov	r0, r3
 800befe:	3714      	adds	r7, #20
 800bf00:	46bd      	mov	sp, r7
 800bf02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf06:	4770      	bx	lr

0800bf08 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b083      	sub	sp, #12
 800bf0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf0e:	f3ef 8305 	mrs	r3, IPSR
 800bf12:	607b      	str	r3, [r7, #4]
  return(result);
 800bf14:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	bf14      	ite	ne
 800bf1a:	2301      	movne	r3, #1
 800bf1c:	2300      	moveq	r3, #0
 800bf1e:	b2db      	uxtb	r3, r3
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	370c      	adds	r7, #12
 800bf24:	46bd      	mov	sp, r7
 800bf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2a:	4770      	bx	lr

0800bf2c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800bf30:	f001 f90a 	bl	800d148 <vTaskStartScheduler>
  
  return osOK;
 800bf34:	2300      	movs	r3, #0
}
 800bf36:	4618      	mov	r0, r3
 800bf38:	bd80      	pop	{r7, pc}

0800bf3a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bf3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf3c:	b089      	sub	sp, #36	; 0x24
 800bf3e:	af04      	add	r7, sp, #16
 800bf40:	6078      	str	r0, [r7, #4]
 800bf42:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	695b      	ldr	r3, [r3, #20]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d020      	beq.n	800bf8e <osThreadCreate+0x54>
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	699b      	ldr	r3, [r3, #24]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d01c      	beq.n	800bf8e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	685c      	ldr	r4, [r3, #4]
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681d      	ldr	r5, [r3, #0]
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	691e      	ldr	r6, [r3, #16]
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bf66:	4618      	mov	r0, r3
 800bf68:	f7ff ffb6 	bl	800bed8 <makeFreeRtosPriority>
 800bf6c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	695b      	ldr	r3, [r3, #20]
 800bf72:	687a      	ldr	r2, [r7, #4]
 800bf74:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bf76:	9202      	str	r2, [sp, #8]
 800bf78:	9301      	str	r3, [sp, #4]
 800bf7a:	9100      	str	r1, [sp, #0]
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	4632      	mov	r2, r6
 800bf80:	4629      	mov	r1, r5
 800bf82:	4620      	mov	r0, r4
 800bf84:	f000 ff0e 	bl	800cda4 <xTaskCreateStatic>
 800bf88:	4603      	mov	r3, r0
 800bf8a:	60fb      	str	r3, [r7, #12]
 800bf8c:	e01c      	b.n	800bfc8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	685c      	ldr	r4, [r3, #4]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bf9a:	b29e      	uxth	r6, r3
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f7ff ff98 	bl	800bed8 <makeFreeRtosPriority>
 800bfa8:	4602      	mov	r2, r0
 800bfaa:	f107 030c 	add.w	r3, r7, #12
 800bfae:	9301      	str	r3, [sp, #4]
 800bfb0:	9200      	str	r2, [sp, #0]
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	4632      	mov	r2, r6
 800bfb6:	4629      	mov	r1, r5
 800bfb8:	4620      	mov	r0, r4
 800bfba:	f000 ff50 	bl	800ce5e <xTaskCreate>
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	2b01      	cmp	r3, #1
 800bfc2:	d001      	beq.n	800bfc8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	e000      	b.n	800bfca <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3714      	adds	r7, #20
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bfd2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bfd2:	b580      	push	{r7, lr}
 800bfd4:	b084      	sub	sp, #16
 800bfd6:	af00      	add	r7, sp, #0
 800bfd8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d001      	beq.n	800bfe8 <osDelay+0x16>
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	e000      	b.n	800bfea <osDelay+0x18>
 800bfe8:	2301      	movs	r3, #1
 800bfea:	4618      	mov	r0, r3
 800bfec:	f001 f878 	bl	800d0e0 <vTaskDelay>
  
  return osOK;
 800bff0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bff2:	4618      	mov	r0, r3
 800bff4:	3710      	adds	r7, #16
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}

0800bffa <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800bffa:	b590      	push	{r4, r7, lr}
 800bffc:	b085      	sub	sp, #20
 800bffe:	af02      	add	r7, sp, #8
 800c000:	6078      	str	r0, [r7, #4]
 800c002:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	689b      	ldr	r3, [r3, #8]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d011      	beq.n	800c030 <osMessageCreate+0x36>
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	68db      	ldr	r3, [r3, #12]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d00d      	beq.n	800c030 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6818      	ldr	r0, [r3, #0]
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6859      	ldr	r1, [r3, #4]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	689a      	ldr	r2, [r3, #8]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	68db      	ldr	r3, [r3, #12]
 800c024:	2400      	movs	r4, #0
 800c026:	9400      	str	r4, [sp, #0]
 800c028:	f000 f9e0 	bl	800c3ec <xQueueGenericCreateStatic>
 800c02c:	4603      	mov	r3, r0
 800c02e:	e008      	b.n	800c042 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6818      	ldr	r0, [r3, #0]
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	685b      	ldr	r3, [r3, #4]
 800c038:	2200      	movs	r2, #0
 800c03a:	4619      	mov	r1, r3
 800c03c:	f000 fa4e 	bl	800c4dc <xQueueGenericCreate>
 800c040:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c042:	4618      	mov	r0, r3
 800c044:	370c      	adds	r7, #12
 800c046:	46bd      	mov	sp, r7
 800c048:	bd90      	pop	{r4, r7, pc}
	...

0800c04c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b086      	sub	sp, #24
 800c050:	af00      	add	r7, sp, #0
 800c052:	60f8      	str	r0, [r7, #12]
 800c054:	60b9      	str	r1, [r7, #8]
 800c056:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800c058:	2300      	movs	r3, #0
 800c05a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800c060:	697b      	ldr	r3, [r7, #20]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d101      	bne.n	800c06a <osMessagePut+0x1e>
    ticks = 1;
 800c066:	2301      	movs	r3, #1
 800c068:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800c06a:	f7ff ff4d 	bl	800bf08 <inHandlerMode>
 800c06e:	4603      	mov	r3, r0
 800c070:	2b00      	cmp	r3, #0
 800c072:	d018      	beq.n	800c0a6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800c074:	f107 0210 	add.w	r2, r7, #16
 800c078:	f107 0108 	add.w	r1, r7, #8
 800c07c:	2300      	movs	r3, #0
 800c07e:	68f8      	ldr	r0, [r7, #12]
 800c080:	f000 fb84 	bl	800c78c <xQueueGenericSendFromISR>
 800c084:	4603      	mov	r3, r0
 800c086:	2b01      	cmp	r3, #1
 800c088:	d001      	beq.n	800c08e <osMessagePut+0x42>
      return osErrorOS;
 800c08a:	23ff      	movs	r3, #255	; 0xff
 800c08c:	e018      	b.n	800c0c0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d014      	beq.n	800c0be <osMessagePut+0x72>
 800c094:	4b0c      	ldr	r3, [pc, #48]	; (800c0c8 <osMessagePut+0x7c>)
 800c096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c09a:	601a      	str	r2, [r3, #0]
 800c09c:	f3bf 8f4f 	dsb	sy
 800c0a0:	f3bf 8f6f 	isb	sy
 800c0a4:	e00b      	b.n	800c0be <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800c0a6:	f107 0108 	add.w	r1, r7, #8
 800c0aa:	2300      	movs	r3, #0
 800c0ac:	697a      	ldr	r2, [r7, #20]
 800c0ae:	68f8      	ldr	r0, [r7, #12]
 800c0b0:	f000 fa6e 	bl	800c590 <xQueueGenericSend>
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	2b01      	cmp	r3, #1
 800c0b8:	d001      	beq.n	800c0be <osMessagePut+0x72>
      return osErrorOS;
 800c0ba:	23ff      	movs	r3, #255	; 0xff
 800c0bc:	e000      	b.n	800c0c0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800c0be:	2300      	movs	r3, #0
}
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	3718      	adds	r7, #24
 800c0c4:	46bd      	mov	sp, r7
 800c0c6:	bd80      	pop	{r7, pc}
 800c0c8:	e000ed04 	.word	0xe000ed04

0800c0cc <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800c0cc:	b590      	push	{r4, r7, lr}
 800c0ce:	b08b      	sub	sp, #44	; 0x2c
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	60f8      	str	r0, [r7, #12]
 800c0d4:	60b9      	str	r1, [r7, #8]
 800c0d6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d10a      	bne.n	800c0fc <osMessageGet+0x30>
    event.status = osErrorParameter;
 800c0e6:	2380      	movs	r3, #128	; 0x80
 800c0e8:	617b      	str	r3, [r7, #20]
    return event;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	461c      	mov	r4, r3
 800c0ee:	f107 0314 	add.w	r3, r7, #20
 800c0f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c0f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c0fa:	e054      	b.n	800c1a6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800c100:	2300      	movs	r3, #0
 800c102:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c10a:	d103      	bne.n	800c114 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800c10c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c110:	627b      	str	r3, [r7, #36]	; 0x24
 800c112:	e009      	b.n	800c128 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d006      	beq.n	800c128 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800c11e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c120:	2b00      	cmp	r3, #0
 800c122:	d101      	bne.n	800c128 <osMessageGet+0x5c>
      ticks = 1;
 800c124:	2301      	movs	r3, #1
 800c126:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800c128:	f7ff feee 	bl	800bf08 <inHandlerMode>
 800c12c:	4603      	mov	r3, r0
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d01c      	beq.n	800c16c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800c132:	f107 0220 	add.w	r2, r7, #32
 800c136:	f107 0314 	add.w	r3, r7, #20
 800c13a:	3304      	adds	r3, #4
 800c13c:	4619      	mov	r1, r3
 800c13e:	68b8      	ldr	r0, [r7, #8]
 800c140:	f000 fca0 	bl	800ca84 <xQueueReceiveFromISR>
 800c144:	4603      	mov	r3, r0
 800c146:	2b01      	cmp	r3, #1
 800c148:	d102      	bne.n	800c150 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800c14a:	2310      	movs	r3, #16
 800c14c:	617b      	str	r3, [r7, #20]
 800c14e:	e001      	b.n	800c154 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800c150:	2300      	movs	r3, #0
 800c152:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c154:	6a3b      	ldr	r3, [r7, #32]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d01d      	beq.n	800c196 <osMessageGet+0xca>
 800c15a:	4b15      	ldr	r3, [pc, #84]	; (800c1b0 <osMessageGet+0xe4>)
 800c15c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c160:	601a      	str	r2, [r3, #0]
 800c162:	f3bf 8f4f 	dsb	sy
 800c166:	f3bf 8f6f 	isb	sy
 800c16a:	e014      	b.n	800c196 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800c16c:	f107 0314 	add.w	r3, r7, #20
 800c170:	3304      	adds	r3, #4
 800c172:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c174:	4619      	mov	r1, r3
 800c176:	68b8      	ldr	r0, [r7, #8]
 800c178:	f000 fba4 	bl	800c8c4 <xQueueReceive>
 800c17c:	4603      	mov	r3, r0
 800c17e:	2b01      	cmp	r3, #1
 800c180:	d102      	bne.n	800c188 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800c182:	2310      	movs	r3, #16
 800c184:	617b      	str	r3, [r7, #20]
 800c186:	e006      	b.n	800c196 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800c188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d101      	bne.n	800c192 <osMessageGet+0xc6>
 800c18e:	2300      	movs	r3, #0
 800c190:	e000      	b.n	800c194 <osMessageGet+0xc8>
 800c192:	2340      	movs	r3, #64	; 0x40
 800c194:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	461c      	mov	r4, r3
 800c19a:	f107 0314 	add.w	r3, r7, #20
 800c19e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c1a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800c1a6:	68f8      	ldr	r0, [r7, #12]
 800c1a8:	372c      	adds	r7, #44	; 0x2c
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd90      	pop	{r4, r7, pc}
 800c1ae:	bf00      	nop
 800c1b0:	e000ed04 	.word	0xe000ed04

0800c1b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c1b4:	b480      	push	{r7}
 800c1b6:	b083      	sub	sp, #12
 800c1b8:	af00      	add	r7, sp, #0
 800c1ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	f103 0208 	add.w	r2, r3, #8
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c1cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f103 0208 	add.w	r2, r3, #8
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	f103 0208 	add.w	r2, r3, #8
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c1e8:	bf00      	nop
 800c1ea:	370c      	adds	r7, #12
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f2:	4770      	bx	lr

0800c1f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b083      	sub	sp, #12
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2200      	movs	r2, #0
 800c200:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c202:	bf00      	nop
 800c204:	370c      	adds	r7, #12
 800c206:	46bd      	mov	sp, r7
 800c208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20c:	4770      	bx	lr

0800c20e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c20e:	b480      	push	{r7}
 800c210:	b085      	sub	sp, #20
 800c212:	af00      	add	r7, sp, #0
 800c214:	6078      	str	r0, [r7, #4]
 800c216:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	685b      	ldr	r3, [r3, #4]
 800c21c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	68fa      	ldr	r2, [r7, #12]
 800c222:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	689a      	ldr	r2, [r3, #8]
 800c228:	683b      	ldr	r3, [r7, #0]
 800c22a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	689b      	ldr	r3, [r3, #8]
 800c230:	683a      	ldr	r2, [r7, #0]
 800c232:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	683a      	ldr	r2, [r7, #0]
 800c238:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	687a      	ldr	r2, [r7, #4]
 800c23e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	1c5a      	adds	r2, r3, #1
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	601a      	str	r2, [r3, #0]
}
 800c24a:	bf00      	nop
 800c24c:	3714      	adds	r7, #20
 800c24e:	46bd      	mov	sp, r7
 800c250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c254:	4770      	bx	lr

0800c256 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c256:	b480      	push	{r7}
 800c258:	b085      	sub	sp, #20
 800c25a:	af00      	add	r7, sp, #0
 800c25c:	6078      	str	r0, [r7, #4]
 800c25e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c26c:	d103      	bne.n	800c276 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	691b      	ldr	r3, [r3, #16]
 800c272:	60fb      	str	r3, [r7, #12]
 800c274:	e00c      	b.n	800c290 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	3308      	adds	r3, #8
 800c27a:	60fb      	str	r3, [r7, #12]
 800c27c:	e002      	b.n	800c284 <vListInsert+0x2e>
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	685b      	ldr	r3, [r3, #4]
 800c282:	60fb      	str	r3, [r7, #12]
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	685b      	ldr	r3, [r3, #4]
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	68ba      	ldr	r2, [r7, #8]
 800c28c:	429a      	cmp	r2, r3
 800c28e:	d2f6      	bcs.n	800c27e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	685a      	ldr	r2, [r3, #4]
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	685b      	ldr	r3, [r3, #4]
 800c29c:	683a      	ldr	r2, [r7, #0]
 800c29e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c2a0:	683b      	ldr	r3, [r7, #0]
 800c2a2:	68fa      	ldr	r2, [r7, #12]
 800c2a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	683a      	ldr	r2, [r7, #0]
 800c2aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c2ac:	683b      	ldr	r3, [r7, #0]
 800c2ae:	687a      	ldr	r2, [r7, #4]
 800c2b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	1c5a      	adds	r2, r3, #1
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	601a      	str	r2, [r3, #0]
}
 800c2bc:	bf00      	nop
 800c2be:	3714      	adds	r7, #20
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c6:	4770      	bx	lr

0800c2c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	b085      	sub	sp, #20
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	691b      	ldr	r3, [r3, #16]
 800c2d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	685b      	ldr	r3, [r3, #4]
 800c2da:	687a      	ldr	r2, [r7, #4]
 800c2dc:	6892      	ldr	r2, [r2, #8]
 800c2de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	689b      	ldr	r3, [r3, #8]
 800c2e4:	687a      	ldr	r2, [r7, #4]
 800c2e6:	6852      	ldr	r2, [r2, #4]
 800c2e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c2ea:	68fb      	ldr	r3, [r7, #12]
 800c2ec:	685b      	ldr	r3, [r3, #4]
 800c2ee:	687a      	ldr	r2, [r7, #4]
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d103      	bne.n	800c2fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	689a      	ldr	r2, [r3, #8]
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2200      	movs	r2, #0
 800c300:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	1e5a      	subs	r2, r3, #1
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	681b      	ldr	r3, [r3, #0]
}
 800c310:	4618      	mov	r0, r3
 800c312:	3714      	adds	r7, #20
 800c314:	46bd      	mov	sp, r7
 800c316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31a:	4770      	bx	lr

0800c31c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
 800c324:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d10a      	bne.n	800c346 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c334:	f383 8811 	msr	BASEPRI, r3
 800c338:	f3bf 8f6f 	isb	sy
 800c33c:	f3bf 8f4f 	dsb	sy
 800c340:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c342:	bf00      	nop
 800c344:	e7fe      	b.n	800c344 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800c346:	f001 fd5d 	bl	800de04 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	681a      	ldr	r2, [r3, #0]
 800c34e:	68fb      	ldr	r3, [r7, #12]
 800c350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c352:	68f9      	ldr	r1, [r7, #12]
 800c354:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c356:	fb01 f303 	mul.w	r3, r1, r3
 800c35a:	441a      	add	r2, r3
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	2200      	movs	r2, #0
 800c364:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	681a      	ldr	r2, [r3, #0]
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681a      	ldr	r2, [r3, #0]
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c376:	3b01      	subs	r3, #1
 800c378:	68f9      	ldr	r1, [r7, #12]
 800c37a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c37c:	fb01 f303 	mul.w	r3, r1, r3
 800c380:	441a      	add	r2, r3
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	22ff      	movs	r2, #255	; 0xff
 800c38a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	22ff      	movs	r2, #255	; 0xff
 800c392:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d114      	bne.n	800c3c6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	691b      	ldr	r3, [r3, #16]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d01a      	beq.n	800c3da <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	3310      	adds	r3, #16
 800c3a8:	4618      	mov	r0, r3
 800c3aa:	f001 f933 	bl	800d614 <xTaskRemoveFromEventList>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d012      	beq.n	800c3da <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c3b4:	4b0c      	ldr	r3, [pc, #48]	; (800c3e8 <xQueueGenericReset+0xcc>)
 800c3b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3ba:	601a      	str	r2, [r3, #0]
 800c3bc:	f3bf 8f4f 	dsb	sy
 800c3c0:	f3bf 8f6f 	isb	sy
 800c3c4:	e009      	b.n	800c3da <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	3310      	adds	r3, #16
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f7ff fef2 	bl	800c1b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c3d0:	68fb      	ldr	r3, [r7, #12]
 800c3d2:	3324      	adds	r3, #36	; 0x24
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	f7ff feed 	bl	800c1b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c3da:	f001 fd43 	bl	800de64 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c3de:	2301      	movs	r3, #1
}
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3710      	adds	r7, #16
 800c3e4:	46bd      	mov	sp, r7
 800c3e6:	bd80      	pop	{r7, pc}
 800c3e8:	e000ed04 	.word	0xe000ed04

0800c3ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b08e      	sub	sp, #56	; 0x38
 800c3f0:	af02      	add	r7, sp, #8
 800c3f2:	60f8      	str	r0, [r7, #12]
 800c3f4:	60b9      	str	r1, [r7, #8]
 800c3f6:	607a      	str	r2, [r7, #4]
 800c3f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d10a      	bne.n	800c416 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800c400:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c404:	f383 8811 	msr	BASEPRI, r3
 800c408:	f3bf 8f6f 	isb	sy
 800c40c:	f3bf 8f4f 	dsb	sy
 800c410:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c412:	bf00      	nop
 800c414:	e7fe      	b.n	800c414 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c416:	683b      	ldr	r3, [r7, #0]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d10a      	bne.n	800c432 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800c41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c420:	f383 8811 	msr	BASEPRI, r3
 800c424:	f3bf 8f6f 	isb	sy
 800c428:	f3bf 8f4f 	dsb	sy
 800c42c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c42e:	bf00      	nop
 800c430:	e7fe      	b.n	800c430 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d002      	beq.n	800c43e <xQueueGenericCreateStatic+0x52>
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d001      	beq.n	800c442 <xQueueGenericCreateStatic+0x56>
 800c43e:	2301      	movs	r3, #1
 800c440:	e000      	b.n	800c444 <xQueueGenericCreateStatic+0x58>
 800c442:	2300      	movs	r3, #0
 800c444:	2b00      	cmp	r3, #0
 800c446:	d10a      	bne.n	800c45e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800c448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c44c:	f383 8811 	msr	BASEPRI, r3
 800c450:	f3bf 8f6f 	isb	sy
 800c454:	f3bf 8f4f 	dsb	sy
 800c458:	623b      	str	r3, [r7, #32]
}
 800c45a:	bf00      	nop
 800c45c:	e7fe      	b.n	800c45c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	2b00      	cmp	r3, #0
 800c462:	d102      	bne.n	800c46a <xQueueGenericCreateStatic+0x7e>
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	2b00      	cmp	r3, #0
 800c468:	d101      	bne.n	800c46e <xQueueGenericCreateStatic+0x82>
 800c46a:	2301      	movs	r3, #1
 800c46c:	e000      	b.n	800c470 <xQueueGenericCreateStatic+0x84>
 800c46e:	2300      	movs	r3, #0
 800c470:	2b00      	cmp	r3, #0
 800c472:	d10a      	bne.n	800c48a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800c474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c478:	f383 8811 	msr	BASEPRI, r3
 800c47c:	f3bf 8f6f 	isb	sy
 800c480:	f3bf 8f4f 	dsb	sy
 800c484:	61fb      	str	r3, [r7, #28]
}
 800c486:	bf00      	nop
 800c488:	e7fe      	b.n	800c488 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800c48a:	2348      	movs	r3, #72	; 0x48
 800c48c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800c48e:	697b      	ldr	r3, [r7, #20]
 800c490:	2b48      	cmp	r3, #72	; 0x48
 800c492:	d00a      	beq.n	800c4aa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800c494:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c498:	f383 8811 	msr	BASEPRI, r3
 800c49c:	f3bf 8f6f 	isb	sy
 800c4a0:	f3bf 8f4f 	dsb	sy
 800c4a4:	61bb      	str	r3, [r7, #24]
}
 800c4a6:	bf00      	nop
 800c4a8:	e7fe      	b.n	800c4a8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800c4aa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800c4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d00d      	beq.n	800c4d2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800c4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b8:	2201      	movs	r2, #1
 800c4ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c4be:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800c4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c4:	9300      	str	r3, [sp, #0]
 800c4c6:	4613      	mov	r3, r2
 800c4c8:	687a      	ldr	r2, [r7, #4]
 800c4ca:	68b9      	ldr	r1, [r7, #8]
 800c4cc:	68f8      	ldr	r0, [r7, #12]
 800c4ce:	f000 f83f 	bl	800c550 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3730      	adds	r7, #48	; 0x30
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}

0800c4dc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b08a      	sub	sp, #40	; 0x28
 800c4e0:	af02      	add	r7, sp, #8
 800c4e2:	60f8      	str	r0, [r7, #12]
 800c4e4:	60b9      	str	r1, [r7, #8]
 800c4e6:	4613      	mov	r3, r2
 800c4e8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d10a      	bne.n	800c506 <xQueueGenericCreate+0x2a>
	__asm volatile
 800c4f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f4:	f383 8811 	msr	BASEPRI, r3
 800c4f8:	f3bf 8f6f 	isb	sy
 800c4fc:	f3bf 8f4f 	dsb	sy
 800c500:	613b      	str	r3, [r7, #16]
}
 800c502:	bf00      	nop
 800c504:	e7fe      	b.n	800c504 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	68ba      	ldr	r2, [r7, #8]
 800c50a:	fb02 f303 	mul.w	r3, r2, r3
 800c50e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c510:	69fb      	ldr	r3, [r7, #28]
 800c512:	3348      	adds	r3, #72	; 0x48
 800c514:	4618      	mov	r0, r3
 800c516:	f001 fd97 	bl	800e048 <pvPortMalloc>
 800c51a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c51c:	69bb      	ldr	r3, [r7, #24]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	d011      	beq.n	800c546 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c522:	69bb      	ldr	r3, [r7, #24]
 800c524:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c526:	697b      	ldr	r3, [r7, #20]
 800c528:	3348      	adds	r3, #72	; 0x48
 800c52a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c52c:	69bb      	ldr	r3, [r7, #24]
 800c52e:	2200      	movs	r2, #0
 800c530:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c534:	79fa      	ldrb	r2, [r7, #7]
 800c536:	69bb      	ldr	r3, [r7, #24]
 800c538:	9300      	str	r3, [sp, #0]
 800c53a:	4613      	mov	r3, r2
 800c53c:	697a      	ldr	r2, [r7, #20]
 800c53e:	68b9      	ldr	r1, [r7, #8]
 800c540:	68f8      	ldr	r0, [r7, #12]
 800c542:	f000 f805 	bl	800c550 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c546:	69bb      	ldr	r3, [r7, #24]
	}
 800c548:	4618      	mov	r0, r3
 800c54a:	3720      	adds	r7, #32
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}

0800c550 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c550:	b580      	push	{r7, lr}
 800c552:	b084      	sub	sp, #16
 800c554:	af00      	add	r7, sp, #0
 800c556:	60f8      	str	r0, [r7, #12]
 800c558:	60b9      	str	r1, [r7, #8]
 800c55a:	607a      	str	r2, [r7, #4]
 800c55c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d103      	bne.n	800c56c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c564:	69bb      	ldr	r3, [r7, #24]
 800c566:	69ba      	ldr	r2, [r7, #24]
 800c568:	601a      	str	r2, [r3, #0]
 800c56a:	e002      	b.n	800c572 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c56c:	69bb      	ldr	r3, [r7, #24]
 800c56e:	687a      	ldr	r2, [r7, #4]
 800c570:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c572:	69bb      	ldr	r3, [r7, #24]
 800c574:	68fa      	ldr	r2, [r7, #12]
 800c576:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c578:	69bb      	ldr	r3, [r7, #24]
 800c57a:	68ba      	ldr	r2, [r7, #8]
 800c57c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c57e:	2101      	movs	r1, #1
 800c580:	69b8      	ldr	r0, [r7, #24]
 800c582:	f7ff fecb 	bl	800c31c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c586:	bf00      	nop
 800c588:	3710      	adds	r7, #16
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}
	...

0800c590 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b08e      	sub	sp, #56	; 0x38
 800c594:	af00      	add	r7, sp, #0
 800c596:	60f8      	str	r0, [r7, #12]
 800c598:	60b9      	str	r1, [r7, #8]
 800c59a:	607a      	str	r2, [r7, #4]
 800c59c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c59e:	2300      	movs	r3, #0
 800c5a0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d10a      	bne.n	800c5c2 <xQueueGenericSend+0x32>
	__asm volatile
 800c5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b0:	f383 8811 	msr	BASEPRI, r3
 800c5b4:	f3bf 8f6f 	isb	sy
 800c5b8:	f3bf 8f4f 	dsb	sy
 800c5bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c5be:	bf00      	nop
 800c5c0:	e7fe      	b.n	800c5c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c5c2:	68bb      	ldr	r3, [r7, #8]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d103      	bne.n	800c5d0 <xQueueGenericSend+0x40>
 800c5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d101      	bne.n	800c5d4 <xQueueGenericSend+0x44>
 800c5d0:	2301      	movs	r3, #1
 800c5d2:	e000      	b.n	800c5d6 <xQueueGenericSend+0x46>
 800c5d4:	2300      	movs	r3, #0
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d10a      	bne.n	800c5f0 <xQueueGenericSend+0x60>
	__asm volatile
 800c5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5de:	f383 8811 	msr	BASEPRI, r3
 800c5e2:	f3bf 8f6f 	isb	sy
 800c5e6:	f3bf 8f4f 	dsb	sy
 800c5ea:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c5ec:	bf00      	nop
 800c5ee:	e7fe      	b.n	800c5ee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	2b02      	cmp	r3, #2
 800c5f4:	d103      	bne.n	800c5fe <xQueueGenericSend+0x6e>
 800c5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c5fa:	2b01      	cmp	r3, #1
 800c5fc:	d101      	bne.n	800c602 <xQueueGenericSend+0x72>
 800c5fe:	2301      	movs	r3, #1
 800c600:	e000      	b.n	800c604 <xQueueGenericSend+0x74>
 800c602:	2300      	movs	r3, #0
 800c604:	2b00      	cmp	r3, #0
 800c606:	d10a      	bne.n	800c61e <xQueueGenericSend+0x8e>
	__asm volatile
 800c608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c60c:	f383 8811 	msr	BASEPRI, r3
 800c610:	f3bf 8f6f 	isb	sy
 800c614:	f3bf 8f4f 	dsb	sy
 800c618:	623b      	str	r3, [r7, #32]
}
 800c61a:	bf00      	nop
 800c61c:	e7fe      	b.n	800c61c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c61e:	f001 f9b7 	bl	800d990 <xTaskGetSchedulerState>
 800c622:	4603      	mov	r3, r0
 800c624:	2b00      	cmp	r3, #0
 800c626:	d102      	bne.n	800c62e <xQueueGenericSend+0x9e>
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d101      	bne.n	800c632 <xQueueGenericSend+0xa2>
 800c62e:	2301      	movs	r3, #1
 800c630:	e000      	b.n	800c634 <xQueueGenericSend+0xa4>
 800c632:	2300      	movs	r3, #0
 800c634:	2b00      	cmp	r3, #0
 800c636:	d10a      	bne.n	800c64e <xQueueGenericSend+0xbe>
	__asm volatile
 800c638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c63c:	f383 8811 	msr	BASEPRI, r3
 800c640:	f3bf 8f6f 	isb	sy
 800c644:	f3bf 8f4f 	dsb	sy
 800c648:	61fb      	str	r3, [r7, #28]
}
 800c64a:	bf00      	nop
 800c64c:	e7fe      	b.n	800c64c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c64e:	f001 fbd9 	bl	800de04 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c654:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c658:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c65a:	429a      	cmp	r2, r3
 800c65c:	d302      	bcc.n	800c664 <xQueueGenericSend+0xd4>
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	2b02      	cmp	r3, #2
 800c662:	d129      	bne.n	800c6b8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c664:	683a      	ldr	r2, [r7, #0]
 800c666:	68b9      	ldr	r1, [r7, #8]
 800c668:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c66a:	f000 fa8b 	bl	800cb84 <prvCopyDataToQueue>
 800c66e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c674:	2b00      	cmp	r3, #0
 800c676:	d010      	beq.n	800c69a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c67a:	3324      	adds	r3, #36	; 0x24
 800c67c:	4618      	mov	r0, r3
 800c67e:	f000 ffc9 	bl	800d614 <xTaskRemoveFromEventList>
 800c682:	4603      	mov	r3, r0
 800c684:	2b00      	cmp	r3, #0
 800c686:	d013      	beq.n	800c6b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c688:	4b3f      	ldr	r3, [pc, #252]	; (800c788 <xQueueGenericSend+0x1f8>)
 800c68a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c68e:	601a      	str	r2, [r3, #0]
 800c690:	f3bf 8f4f 	dsb	sy
 800c694:	f3bf 8f6f 	isb	sy
 800c698:	e00a      	b.n	800c6b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c69a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d007      	beq.n	800c6b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c6a0:	4b39      	ldr	r3, [pc, #228]	; (800c788 <xQueueGenericSend+0x1f8>)
 800c6a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6a6:	601a      	str	r2, [r3, #0]
 800c6a8:	f3bf 8f4f 	dsb	sy
 800c6ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c6b0:	f001 fbd8 	bl	800de64 <vPortExitCritical>
				return pdPASS;
 800c6b4:	2301      	movs	r3, #1
 800c6b6:	e063      	b.n	800c780 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d103      	bne.n	800c6c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c6be:	f001 fbd1 	bl	800de64 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	e05c      	b.n	800c780 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c6c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d106      	bne.n	800c6da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c6cc:	f107 0314 	add.w	r3, r7, #20
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f001 f801 	bl	800d6d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c6d6:	2301      	movs	r3, #1
 800c6d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c6da:	f001 fbc3 	bl	800de64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c6de:	f000 fd93 	bl	800d208 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c6e2:	f001 fb8f 	bl	800de04 <vPortEnterCritical>
 800c6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c6ec:	b25b      	sxtb	r3, r3
 800c6ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c6f2:	d103      	bne.n	800c6fc <xQueueGenericSend+0x16c>
 800c6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c6fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c702:	b25b      	sxtb	r3, r3
 800c704:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c708:	d103      	bne.n	800c712 <xQueueGenericSend+0x182>
 800c70a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c70c:	2200      	movs	r2, #0
 800c70e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c712:	f001 fba7 	bl	800de64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c716:	1d3a      	adds	r2, r7, #4
 800c718:	f107 0314 	add.w	r3, r7, #20
 800c71c:	4611      	mov	r1, r2
 800c71e:	4618      	mov	r0, r3
 800c720:	f000 fff0 	bl	800d704 <xTaskCheckForTimeOut>
 800c724:	4603      	mov	r3, r0
 800c726:	2b00      	cmp	r3, #0
 800c728:	d124      	bne.n	800c774 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c72a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c72c:	f000 fb22 	bl	800cd74 <prvIsQueueFull>
 800c730:	4603      	mov	r3, r0
 800c732:	2b00      	cmp	r3, #0
 800c734:	d018      	beq.n	800c768 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c738:	3310      	adds	r3, #16
 800c73a:	687a      	ldr	r2, [r7, #4]
 800c73c:	4611      	mov	r1, r2
 800c73e:	4618      	mov	r0, r3
 800c740:	f000 ff44 	bl	800d5cc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c744:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c746:	f000 faad 	bl	800cca4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c74a:	f000 fd6b 	bl	800d224 <xTaskResumeAll>
 800c74e:	4603      	mov	r3, r0
 800c750:	2b00      	cmp	r3, #0
 800c752:	f47f af7c 	bne.w	800c64e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800c756:	4b0c      	ldr	r3, [pc, #48]	; (800c788 <xQueueGenericSend+0x1f8>)
 800c758:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c75c:	601a      	str	r2, [r3, #0]
 800c75e:	f3bf 8f4f 	dsb	sy
 800c762:	f3bf 8f6f 	isb	sy
 800c766:	e772      	b.n	800c64e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c768:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c76a:	f000 fa9b 	bl	800cca4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c76e:	f000 fd59 	bl	800d224 <xTaskResumeAll>
 800c772:	e76c      	b.n	800c64e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c774:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c776:	f000 fa95 	bl	800cca4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c77a:	f000 fd53 	bl	800d224 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c77e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c780:	4618      	mov	r0, r3
 800c782:	3738      	adds	r7, #56	; 0x38
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}
 800c788:	e000ed04 	.word	0xe000ed04

0800c78c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b090      	sub	sp, #64	; 0x40
 800c790:	af00      	add	r7, sp, #0
 800c792:	60f8      	str	r0, [r7, #12]
 800c794:	60b9      	str	r1, [r7, #8]
 800c796:	607a      	str	r2, [r7, #4]
 800c798:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800c79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d10a      	bne.n	800c7ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800c7a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7a8:	f383 8811 	msr	BASEPRI, r3
 800c7ac:	f3bf 8f6f 	isb	sy
 800c7b0:	f3bf 8f4f 	dsb	sy
 800c7b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c7b6:	bf00      	nop
 800c7b8:	e7fe      	b.n	800c7b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c7ba:	68bb      	ldr	r3, [r7, #8]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d103      	bne.n	800c7c8 <xQueueGenericSendFromISR+0x3c>
 800c7c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d101      	bne.n	800c7cc <xQueueGenericSendFromISR+0x40>
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	e000      	b.n	800c7ce <xQueueGenericSendFromISR+0x42>
 800c7cc:	2300      	movs	r3, #0
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d10a      	bne.n	800c7e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800c7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7d6:	f383 8811 	msr	BASEPRI, r3
 800c7da:	f3bf 8f6f 	isb	sy
 800c7de:	f3bf 8f4f 	dsb	sy
 800c7e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c7e4:	bf00      	nop
 800c7e6:	e7fe      	b.n	800c7e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	2b02      	cmp	r3, #2
 800c7ec:	d103      	bne.n	800c7f6 <xQueueGenericSendFromISR+0x6a>
 800c7ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7f2:	2b01      	cmp	r3, #1
 800c7f4:	d101      	bne.n	800c7fa <xQueueGenericSendFromISR+0x6e>
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	e000      	b.n	800c7fc <xQueueGenericSendFromISR+0x70>
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d10a      	bne.n	800c816 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800c800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c804:	f383 8811 	msr	BASEPRI, r3
 800c808:	f3bf 8f6f 	isb	sy
 800c80c:	f3bf 8f4f 	dsb	sy
 800c810:	623b      	str	r3, [r7, #32]
}
 800c812:	bf00      	nop
 800c814:	e7fe      	b.n	800c814 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c816:	f001 fbd7 	bl	800dfc8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c81a:	f3ef 8211 	mrs	r2, BASEPRI
 800c81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c822:	f383 8811 	msr	BASEPRI, r3
 800c826:	f3bf 8f6f 	isb	sy
 800c82a:	f3bf 8f4f 	dsb	sy
 800c82e:	61fa      	str	r2, [r7, #28]
 800c830:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c832:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c834:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c838:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c83a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c83c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c83e:	429a      	cmp	r2, r3
 800c840:	d302      	bcc.n	800c848 <xQueueGenericSendFromISR+0xbc>
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	2b02      	cmp	r3, #2
 800c846:	d12f      	bne.n	800c8a8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c84a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c84e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c856:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c858:	683a      	ldr	r2, [r7, #0]
 800c85a:	68b9      	ldr	r1, [r7, #8]
 800c85c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c85e:	f000 f991 	bl	800cb84 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c862:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800c866:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c86a:	d112      	bne.n	800c892 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c870:	2b00      	cmp	r3, #0
 800c872:	d016      	beq.n	800c8a2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c876:	3324      	adds	r3, #36	; 0x24
 800c878:	4618      	mov	r0, r3
 800c87a:	f000 fecb 	bl	800d614 <xTaskRemoveFromEventList>
 800c87e:	4603      	mov	r3, r0
 800c880:	2b00      	cmp	r3, #0
 800c882:	d00e      	beq.n	800c8a2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d00b      	beq.n	800c8a2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2201      	movs	r2, #1
 800c88e:	601a      	str	r2, [r3, #0]
 800c890:	e007      	b.n	800c8a2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c892:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c896:	3301      	adds	r3, #1
 800c898:	b2db      	uxtb	r3, r3
 800c89a:	b25a      	sxtb	r2, r3
 800c89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c89e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c8a6:	e001      	b.n	800c8ac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8ae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c8b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c8b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c8ba:	4618      	mov	r0, r3
 800c8bc:	3740      	adds	r7, #64	; 0x40
 800c8be:	46bd      	mov	sp, r7
 800c8c0:	bd80      	pop	{r7, pc}
	...

0800c8c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c8c4:	b580      	push	{r7, lr}
 800c8c6:	b08c      	sub	sp, #48	; 0x30
 800c8c8:	af00      	add	r7, sp, #0
 800c8ca:	60f8      	str	r0, [r7, #12]
 800c8cc:	60b9      	str	r1, [r7, #8]
 800c8ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d10a      	bne.n	800c8f4 <xQueueReceive+0x30>
	__asm volatile
 800c8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8e2:	f383 8811 	msr	BASEPRI, r3
 800c8e6:	f3bf 8f6f 	isb	sy
 800c8ea:	f3bf 8f4f 	dsb	sy
 800c8ee:	623b      	str	r3, [r7, #32]
}
 800c8f0:	bf00      	nop
 800c8f2:	e7fe      	b.n	800c8f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c8f4:	68bb      	ldr	r3, [r7, #8]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d103      	bne.n	800c902 <xQueueReceive+0x3e>
 800c8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d101      	bne.n	800c906 <xQueueReceive+0x42>
 800c902:	2301      	movs	r3, #1
 800c904:	e000      	b.n	800c908 <xQueueReceive+0x44>
 800c906:	2300      	movs	r3, #0
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d10a      	bne.n	800c922 <xQueueReceive+0x5e>
	__asm volatile
 800c90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c910:	f383 8811 	msr	BASEPRI, r3
 800c914:	f3bf 8f6f 	isb	sy
 800c918:	f3bf 8f4f 	dsb	sy
 800c91c:	61fb      	str	r3, [r7, #28]
}
 800c91e:	bf00      	nop
 800c920:	e7fe      	b.n	800c920 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c922:	f001 f835 	bl	800d990 <xTaskGetSchedulerState>
 800c926:	4603      	mov	r3, r0
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d102      	bne.n	800c932 <xQueueReceive+0x6e>
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d101      	bne.n	800c936 <xQueueReceive+0x72>
 800c932:	2301      	movs	r3, #1
 800c934:	e000      	b.n	800c938 <xQueueReceive+0x74>
 800c936:	2300      	movs	r3, #0
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d10a      	bne.n	800c952 <xQueueReceive+0x8e>
	__asm volatile
 800c93c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c940:	f383 8811 	msr	BASEPRI, r3
 800c944:	f3bf 8f6f 	isb	sy
 800c948:	f3bf 8f4f 	dsb	sy
 800c94c:	61bb      	str	r3, [r7, #24]
}
 800c94e:	bf00      	nop
 800c950:	e7fe      	b.n	800c950 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c952:	f001 fa57 	bl	800de04 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c95a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c95c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c95e:	2b00      	cmp	r3, #0
 800c960:	d01f      	beq.n	800c9a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c962:	68b9      	ldr	r1, [r7, #8]
 800c964:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c966:	f000 f977 	bl	800cc58 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c96c:	1e5a      	subs	r2, r3, #1
 800c96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c970:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c974:	691b      	ldr	r3, [r3, #16]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d00f      	beq.n	800c99a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c97c:	3310      	adds	r3, #16
 800c97e:	4618      	mov	r0, r3
 800c980:	f000 fe48 	bl	800d614 <xTaskRemoveFromEventList>
 800c984:	4603      	mov	r3, r0
 800c986:	2b00      	cmp	r3, #0
 800c988:	d007      	beq.n	800c99a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c98a:	4b3d      	ldr	r3, [pc, #244]	; (800ca80 <xQueueReceive+0x1bc>)
 800c98c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c990:	601a      	str	r2, [r3, #0]
 800c992:	f3bf 8f4f 	dsb	sy
 800c996:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c99a:	f001 fa63 	bl	800de64 <vPortExitCritical>
				return pdPASS;
 800c99e:	2301      	movs	r3, #1
 800c9a0:	e069      	b.n	800ca76 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d103      	bne.n	800c9b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c9a8:	f001 fa5c 	bl	800de64 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	e062      	b.n	800ca76 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c9b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d106      	bne.n	800c9c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c9b6:	f107 0310 	add.w	r3, r7, #16
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	f000 fe8c 	bl	800d6d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c9c4:	f001 fa4e 	bl	800de64 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c9c8:	f000 fc1e 	bl	800d208 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c9cc:	f001 fa1a 	bl	800de04 <vPortEnterCritical>
 800c9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c9d6:	b25b      	sxtb	r3, r3
 800c9d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9dc:	d103      	bne.n	800c9e6 <xQueueReceive+0x122>
 800c9de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e0:	2200      	movs	r2, #0
 800c9e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c9ec:	b25b      	sxtb	r3, r3
 800c9ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c9f2:	d103      	bne.n	800c9fc <xQueueReceive+0x138>
 800c9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9f6:	2200      	movs	r2, #0
 800c9f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c9fc:	f001 fa32 	bl	800de64 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ca00:	1d3a      	adds	r2, r7, #4
 800ca02:	f107 0310 	add.w	r3, r7, #16
 800ca06:	4611      	mov	r1, r2
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f000 fe7b 	bl	800d704 <xTaskCheckForTimeOut>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d123      	bne.n	800ca5c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ca14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca16:	f000 f997 	bl	800cd48 <prvIsQueueEmpty>
 800ca1a:	4603      	mov	r3, r0
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d017      	beq.n	800ca50 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ca20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca22:	3324      	adds	r3, #36	; 0x24
 800ca24:	687a      	ldr	r2, [r7, #4]
 800ca26:	4611      	mov	r1, r2
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f000 fdcf 	bl	800d5cc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ca2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca30:	f000 f938 	bl	800cca4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ca34:	f000 fbf6 	bl	800d224 <xTaskResumeAll>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d189      	bne.n	800c952 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800ca3e:	4b10      	ldr	r3, [pc, #64]	; (800ca80 <xQueueReceive+0x1bc>)
 800ca40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca44:	601a      	str	r2, [r3, #0]
 800ca46:	f3bf 8f4f 	dsb	sy
 800ca4a:	f3bf 8f6f 	isb	sy
 800ca4e:	e780      	b.n	800c952 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ca50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca52:	f000 f927 	bl	800cca4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ca56:	f000 fbe5 	bl	800d224 <xTaskResumeAll>
 800ca5a:	e77a      	b.n	800c952 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ca5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca5e:	f000 f921 	bl	800cca4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ca62:	f000 fbdf 	bl	800d224 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ca66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ca68:	f000 f96e 	bl	800cd48 <prvIsQueueEmpty>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	f43f af6f 	beq.w	800c952 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ca74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	3730      	adds	r7, #48	; 0x30
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}
 800ca7e:	bf00      	nop
 800ca80:	e000ed04 	.word	0xe000ed04

0800ca84 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b08e      	sub	sp, #56	; 0x38
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	60f8      	str	r0, [r7, #12]
 800ca8c:	60b9      	str	r1, [r7, #8]
 800ca8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ca94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d10a      	bne.n	800cab0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800ca9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca9e:	f383 8811 	msr	BASEPRI, r3
 800caa2:	f3bf 8f6f 	isb	sy
 800caa6:	f3bf 8f4f 	dsb	sy
 800caaa:	623b      	str	r3, [r7, #32]
}
 800caac:	bf00      	nop
 800caae:	e7fe      	b.n	800caae <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d103      	bne.n	800cabe <xQueueReceiveFromISR+0x3a>
 800cab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d101      	bne.n	800cac2 <xQueueReceiveFromISR+0x3e>
 800cabe:	2301      	movs	r3, #1
 800cac0:	e000      	b.n	800cac4 <xQueueReceiveFromISR+0x40>
 800cac2:	2300      	movs	r3, #0
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d10a      	bne.n	800cade <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800cac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cacc:	f383 8811 	msr	BASEPRI, r3
 800cad0:	f3bf 8f6f 	isb	sy
 800cad4:	f3bf 8f4f 	dsb	sy
 800cad8:	61fb      	str	r3, [r7, #28]
}
 800cada:	bf00      	nop
 800cadc:	e7fe      	b.n	800cadc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cade:	f001 fa73 	bl	800dfc8 <vPortValidateInterruptPriority>
	__asm volatile
 800cae2:	f3ef 8211 	mrs	r2, BASEPRI
 800cae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caea:	f383 8811 	msr	BASEPRI, r3
 800caee:	f3bf 8f6f 	isb	sy
 800caf2:	f3bf 8f4f 	dsb	sy
 800caf6:	61ba      	str	r2, [r7, #24]
 800caf8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800cafa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800cafc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb02:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cb04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d02f      	beq.n	800cb6a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800cb0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cb10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800cb14:	68b9      	ldr	r1, [r7, #8]
 800cb16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cb18:	f000 f89e 	bl	800cc58 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800cb1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb1e:	1e5a      	subs	r2, r3, #1
 800cb20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb22:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800cb24:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800cb28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cb2c:	d112      	bne.n	800cb54 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cb2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb30:	691b      	ldr	r3, [r3, #16]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d016      	beq.n	800cb64 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cb36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb38:	3310      	adds	r3, #16
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	f000 fd6a 	bl	800d614 <xTaskRemoveFromEventList>
 800cb40:	4603      	mov	r3, r0
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d00e      	beq.n	800cb64 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d00b      	beq.n	800cb64 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	2201      	movs	r2, #1
 800cb50:	601a      	str	r2, [r3, #0]
 800cb52:	e007      	b.n	800cb64 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800cb54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb58:	3301      	adds	r3, #1
 800cb5a:	b2db      	uxtb	r3, r3
 800cb5c:	b25a      	sxtb	r2, r3
 800cb5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800cb64:	2301      	movs	r3, #1
 800cb66:	637b      	str	r3, [r7, #52]	; 0x34
 800cb68:	e001      	b.n	800cb6e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	637b      	str	r3, [r7, #52]	; 0x34
 800cb6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb70:	613b      	str	r3, [r7, #16]
	__asm volatile
 800cb72:	693b      	ldr	r3, [r7, #16]
 800cb74:	f383 8811 	msr	BASEPRI, r3
}
 800cb78:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cb7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3738      	adds	r7, #56	; 0x38
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}

0800cb84 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b086      	sub	sp, #24
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	60f8      	str	r0, [r7, #12]
 800cb8c:	60b9      	str	r1, [r7, #8]
 800cb8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800cb90:	2300      	movs	r3, #0
 800cb92:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb98:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d10d      	bne.n	800cbbe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d14d      	bne.n	800cc46 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	689b      	ldr	r3, [r3, #8]
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f000 ff0c 	bl	800d9cc <xTaskPriorityDisinherit>
 800cbb4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	2200      	movs	r2, #0
 800cbba:	609a      	str	r2, [r3, #8]
 800cbbc:	e043      	b.n	800cc46 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d119      	bne.n	800cbf8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	6858      	ldr	r0, [r3, #4]
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbcc:	461a      	mov	r2, r3
 800cbce:	68b9      	ldr	r1, [r7, #8]
 800cbd0:	f001 ff6a 	bl	800eaa8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	685a      	ldr	r2, [r3, #4]
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbdc:	441a      	add	r2, r3
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	685a      	ldr	r2, [r3, #4]
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	689b      	ldr	r3, [r3, #8]
 800cbea:	429a      	cmp	r2, r3
 800cbec:	d32b      	bcc.n	800cc46 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	681a      	ldr	r2, [r3, #0]
 800cbf2:	68fb      	ldr	r3, [r7, #12]
 800cbf4:	605a      	str	r2, [r3, #4]
 800cbf6:	e026      	b.n	800cc46 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	68d8      	ldr	r0, [r3, #12]
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc00:	461a      	mov	r2, r3
 800cc02:	68b9      	ldr	r1, [r7, #8]
 800cc04:	f001 ff50 	bl	800eaa8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	68da      	ldr	r2, [r3, #12]
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc10:	425b      	negs	r3, r3
 800cc12:	441a      	add	r2, r3
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	68da      	ldr	r2, [r3, #12]
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	429a      	cmp	r2, r3
 800cc22:	d207      	bcs.n	800cc34 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	689a      	ldr	r2, [r3, #8]
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc2c:	425b      	negs	r3, r3
 800cc2e:	441a      	add	r2, r3
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2b02      	cmp	r3, #2
 800cc38:	d105      	bne.n	800cc46 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cc3a:	693b      	ldr	r3, [r7, #16]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d002      	beq.n	800cc46 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800cc40:	693b      	ldr	r3, [r7, #16]
 800cc42:	3b01      	subs	r3, #1
 800cc44:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cc46:	693b      	ldr	r3, [r7, #16]
 800cc48:	1c5a      	adds	r2, r3, #1
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800cc4e:	697b      	ldr	r3, [r7, #20]
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3718      	adds	r7, #24
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b082      	sub	sp, #8
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
 800cc60:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d018      	beq.n	800cc9c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	68da      	ldr	r2, [r3, #12]
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc72:	441a      	add	r2, r3
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	68da      	ldr	r2, [r3, #12]
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	689b      	ldr	r3, [r3, #8]
 800cc80:	429a      	cmp	r2, r3
 800cc82:	d303      	bcc.n	800cc8c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681a      	ldr	r2, [r3, #0]
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	68d9      	ldr	r1, [r3, #12]
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc94:	461a      	mov	r2, r3
 800cc96:	6838      	ldr	r0, [r7, #0]
 800cc98:	f001 ff06 	bl	800eaa8 <memcpy>
	}
}
 800cc9c:	bf00      	nop
 800cc9e:	3708      	adds	r7, #8
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b084      	sub	sp, #16
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ccac:	f001 f8aa 	bl	800de04 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ccb6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ccb8:	e011      	b.n	800ccde <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d012      	beq.n	800cce8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	3324      	adds	r3, #36	; 0x24
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	f000 fca4 	bl	800d614 <xTaskRemoveFromEventList>
 800cccc:	4603      	mov	r3, r0
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d001      	beq.n	800ccd6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ccd2:	f000 fd79 	bl	800d7c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ccd6:	7bfb      	ldrb	r3, [r7, #15]
 800ccd8:	3b01      	subs	r3, #1
 800ccda:	b2db      	uxtb	r3, r3
 800ccdc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ccde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	dce9      	bgt.n	800ccba <prvUnlockQueue+0x16>
 800cce6:	e000      	b.n	800ccea <prvUnlockQueue+0x46>
					break;
 800cce8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	22ff      	movs	r2, #255	; 0xff
 800ccee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ccf2:	f001 f8b7 	bl	800de64 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ccf6:	f001 f885 	bl	800de04 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cd00:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cd02:	e011      	b.n	800cd28 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	691b      	ldr	r3, [r3, #16]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d012      	beq.n	800cd32 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	3310      	adds	r3, #16
 800cd10:	4618      	mov	r0, r3
 800cd12:	f000 fc7f 	bl	800d614 <xTaskRemoveFromEventList>
 800cd16:	4603      	mov	r3, r0
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d001      	beq.n	800cd20 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800cd1c:	f000 fd54 	bl	800d7c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800cd20:	7bbb      	ldrb	r3, [r7, #14]
 800cd22:	3b01      	subs	r3, #1
 800cd24:	b2db      	uxtb	r3, r3
 800cd26:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cd28:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	dce9      	bgt.n	800cd04 <prvUnlockQueue+0x60>
 800cd30:	e000      	b.n	800cd34 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800cd32:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	22ff      	movs	r2, #255	; 0xff
 800cd38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800cd3c:	f001 f892 	bl	800de64 <vPortExitCritical>
}
 800cd40:	bf00      	nop
 800cd42:	3710      	adds	r7, #16
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}

0800cd48 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b084      	sub	sp, #16
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cd50:	f001 f858 	bl	800de04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d102      	bne.n	800cd62 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	60fb      	str	r3, [r7, #12]
 800cd60:	e001      	b.n	800cd66 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800cd62:	2300      	movs	r3, #0
 800cd64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cd66:	f001 f87d 	bl	800de64 <vPortExitCritical>

	return xReturn;
 800cd6a:	68fb      	ldr	r3, [r7, #12]
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3710      	adds	r7, #16
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}

0800cd74 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800cd74:	b580      	push	{r7, lr}
 800cd76:	b084      	sub	sp, #16
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cd7c:	f001 f842 	bl	800de04 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cd88:	429a      	cmp	r2, r3
 800cd8a:	d102      	bne.n	800cd92 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800cd8c:	2301      	movs	r3, #1
 800cd8e:	60fb      	str	r3, [r7, #12]
 800cd90:	e001      	b.n	800cd96 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800cd92:	2300      	movs	r3, #0
 800cd94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800cd96:	f001 f865 	bl	800de64 <vPortExitCritical>

	return xReturn;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
}
 800cd9c:	4618      	mov	r0, r3
 800cd9e:	3710      	adds	r7, #16
 800cda0:	46bd      	mov	sp, r7
 800cda2:	bd80      	pop	{r7, pc}

0800cda4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800cda4:	b580      	push	{r7, lr}
 800cda6:	b08e      	sub	sp, #56	; 0x38
 800cda8:	af04      	add	r7, sp, #16
 800cdaa:	60f8      	str	r0, [r7, #12]
 800cdac:	60b9      	str	r1, [r7, #8]
 800cdae:	607a      	str	r2, [r7, #4]
 800cdb0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800cdb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d10a      	bne.n	800cdce <xTaskCreateStatic+0x2a>
	__asm volatile
 800cdb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdbc:	f383 8811 	msr	BASEPRI, r3
 800cdc0:	f3bf 8f6f 	isb	sy
 800cdc4:	f3bf 8f4f 	dsb	sy
 800cdc8:	623b      	str	r3, [r7, #32]
}
 800cdca:	bf00      	nop
 800cdcc:	e7fe      	b.n	800cdcc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800cdce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d10a      	bne.n	800cdea <xTaskCreateStatic+0x46>
	__asm volatile
 800cdd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd8:	f383 8811 	msr	BASEPRI, r3
 800cddc:	f3bf 8f6f 	isb	sy
 800cde0:	f3bf 8f4f 	dsb	sy
 800cde4:	61fb      	str	r3, [r7, #28]
}
 800cde6:	bf00      	nop
 800cde8:	e7fe      	b.n	800cde8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800cdea:	2358      	movs	r3, #88	; 0x58
 800cdec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800cdee:	693b      	ldr	r3, [r7, #16]
 800cdf0:	2b58      	cmp	r3, #88	; 0x58
 800cdf2:	d00a      	beq.n	800ce0a <xTaskCreateStatic+0x66>
	__asm volatile
 800cdf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf8:	f383 8811 	msr	BASEPRI, r3
 800cdfc:	f3bf 8f6f 	isb	sy
 800ce00:	f3bf 8f4f 	dsb	sy
 800ce04:	61bb      	str	r3, [r7, #24]
}
 800ce06:	bf00      	nop
 800ce08:	e7fe      	b.n	800ce08 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ce0a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ce0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d01e      	beq.n	800ce50 <xTaskCreateStatic+0xac>
 800ce12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d01b      	beq.n	800ce50 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ce18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce1a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ce1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ce20:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ce22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce24:	2202      	movs	r2, #2
 800ce26:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	9303      	str	r3, [sp, #12]
 800ce2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce30:	9302      	str	r3, [sp, #8]
 800ce32:	f107 0314 	add.w	r3, r7, #20
 800ce36:	9301      	str	r3, [sp, #4]
 800ce38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce3a:	9300      	str	r3, [sp, #0]
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	687a      	ldr	r2, [r7, #4]
 800ce40:	68b9      	ldr	r1, [r7, #8]
 800ce42:	68f8      	ldr	r0, [r7, #12]
 800ce44:	f000 f850 	bl	800cee8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ce48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ce4a:	f000 f8df 	bl	800d00c <prvAddNewTaskToReadyList>
 800ce4e:	e001      	b.n	800ce54 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ce50:	2300      	movs	r3, #0
 800ce52:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ce54:	697b      	ldr	r3, [r7, #20]
	}
 800ce56:	4618      	mov	r0, r3
 800ce58:	3728      	adds	r7, #40	; 0x28
 800ce5a:	46bd      	mov	sp, r7
 800ce5c:	bd80      	pop	{r7, pc}

0800ce5e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ce5e:	b580      	push	{r7, lr}
 800ce60:	b08c      	sub	sp, #48	; 0x30
 800ce62:	af04      	add	r7, sp, #16
 800ce64:	60f8      	str	r0, [r7, #12]
 800ce66:	60b9      	str	r1, [r7, #8]
 800ce68:	603b      	str	r3, [r7, #0]
 800ce6a:	4613      	mov	r3, r2
 800ce6c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ce6e:	88fb      	ldrh	r3, [r7, #6]
 800ce70:	009b      	lsls	r3, r3, #2
 800ce72:	4618      	mov	r0, r3
 800ce74:	f001 f8e8 	bl	800e048 <pvPortMalloc>
 800ce78:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ce7a:	697b      	ldr	r3, [r7, #20]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d00e      	beq.n	800ce9e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ce80:	2058      	movs	r0, #88	; 0x58
 800ce82:	f001 f8e1 	bl	800e048 <pvPortMalloc>
 800ce86:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ce88:	69fb      	ldr	r3, [r7, #28]
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d003      	beq.n	800ce96 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ce8e:	69fb      	ldr	r3, [r7, #28]
 800ce90:	697a      	ldr	r2, [r7, #20]
 800ce92:	631a      	str	r2, [r3, #48]	; 0x30
 800ce94:	e005      	b.n	800cea2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ce96:	6978      	ldr	r0, [r7, #20]
 800ce98:	f001 f9a6 	bl	800e1e8 <vPortFree>
 800ce9c:	e001      	b.n	800cea2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ce9e:	2300      	movs	r3, #0
 800cea0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cea2:	69fb      	ldr	r3, [r7, #28]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d017      	beq.n	800ced8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cea8:	69fb      	ldr	r3, [r7, #28]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ceb0:	88fa      	ldrh	r2, [r7, #6]
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	9303      	str	r3, [sp, #12]
 800ceb6:	69fb      	ldr	r3, [r7, #28]
 800ceb8:	9302      	str	r3, [sp, #8]
 800ceba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cebc:	9301      	str	r3, [sp, #4]
 800cebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec0:	9300      	str	r3, [sp, #0]
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	68b9      	ldr	r1, [r7, #8]
 800cec6:	68f8      	ldr	r0, [r7, #12]
 800cec8:	f000 f80e 	bl	800cee8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cecc:	69f8      	ldr	r0, [r7, #28]
 800cece:	f000 f89d 	bl	800d00c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ced2:	2301      	movs	r3, #1
 800ced4:	61bb      	str	r3, [r7, #24]
 800ced6:	e002      	b.n	800cede <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ced8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cedc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cede:	69bb      	ldr	r3, [r7, #24]
	}
 800cee0:	4618      	mov	r0, r3
 800cee2:	3720      	adds	r7, #32
 800cee4:	46bd      	mov	sp, r7
 800cee6:	bd80      	pop	{r7, pc}

0800cee8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cee8:	b580      	push	{r7, lr}
 800ceea:	b088      	sub	sp, #32
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	60f8      	str	r0, [r7, #12]
 800cef0:	60b9      	str	r1, [r7, #8]
 800cef2:	607a      	str	r2, [r7, #4]
 800cef4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cef8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	009b      	lsls	r3, r3, #2
 800cefe:	461a      	mov	r2, r3
 800cf00:	21a5      	movs	r1, #165	; 0xa5
 800cf02:	f001 fddf 	bl	800eac4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cf06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cf10:	3b01      	subs	r3, #1
 800cf12:	009b      	lsls	r3, r3, #2
 800cf14:	4413      	add	r3, r2
 800cf16:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cf18:	69bb      	ldr	r3, [r7, #24]
 800cf1a:	f023 0307 	bic.w	r3, r3, #7
 800cf1e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cf20:	69bb      	ldr	r3, [r7, #24]
 800cf22:	f003 0307 	and.w	r3, r3, #7
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d00a      	beq.n	800cf40 <prvInitialiseNewTask+0x58>
	__asm volatile
 800cf2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf2e:	f383 8811 	msr	BASEPRI, r3
 800cf32:	f3bf 8f6f 	isb	sy
 800cf36:	f3bf 8f4f 	dsb	sy
 800cf3a:	617b      	str	r3, [r7, #20]
}
 800cf3c:	bf00      	nop
 800cf3e:	e7fe      	b.n	800cf3e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d01f      	beq.n	800cf86 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cf46:	2300      	movs	r3, #0
 800cf48:	61fb      	str	r3, [r7, #28]
 800cf4a:	e012      	b.n	800cf72 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cf4c:	68ba      	ldr	r2, [r7, #8]
 800cf4e:	69fb      	ldr	r3, [r7, #28]
 800cf50:	4413      	add	r3, r2
 800cf52:	7819      	ldrb	r1, [r3, #0]
 800cf54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf56:	69fb      	ldr	r3, [r7, #28]
 800cf58:	4413      	add	r3, r2
 800cf5a:	3334      	adds	r3, #52	; 0x34
 800cf5c:	460a      	mov	r2, r1
 800cf5e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cf60:	68ba      	ldr	r2, [r7, #8]
 800cf62:	69fb      	ldr	r3, [r7, #28]
 800cf64:	4413      	add	r3, r2
 800cf66:	781b      	ldrb	r3, [r3, #0]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d006      	beq.n	800cf7a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cf6c:	69fb      	ldr	r3, [r7, #28]
 800cf6e:	3301      	adds	r3, #1
 800cf70:	61fb      	str	r3, [r7, #28]
 800cf72:	69fb      	ldr	r3, [r7, #28]
 800cf74:	2b0f      	cmp	r3, #15
 800cf76:	d9e9      	bls.n	800cf4c <prvInitialiseNewTask+0x64>
 800cf78:	e000      	b.n	800cf7c <prvInitialiseNewTask+0x94>
			{
				break;
 800cf7a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cf7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf7e:	2200      	movs	r2, #0
 800cf80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cf84:	e003      	b.n	800cf8e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cf86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf88:	2200      	movs	r2, #0
 800cf8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cf8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf90:	2b06      	cmp	r3, #6
 800cf92:	d901      	bls.n	800cf98 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cf94:	2306      	movs	r3, #6
 800cf96:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cf98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf9c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cf9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cfa2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800cfa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cfaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfac:	3304      	adds	r3, #4
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f7ff f920 	bl	800c1f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cfb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfb6:	3318      	adds	r3, #24
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f7ff f91b 	bl	800c1f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cfbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cfc2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cfc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfc6:	f1c3 0207 	rsb	r2, r3, #7
 800cfca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfcc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cfce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cfd2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800cfd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfd6:	2200      	movs	r2, #0
 800cfd8:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cfda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfdc:	2200      	movs	r2, #0
 800cfde:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cfe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cfe8:	683a      	ldr	r2, [r7, #0]
 800cfea:	68f9      	ldr	r1, [r7, #12]
 800cfec:	69b8      	ldr	r0, [r7, #24]
 800cfee:	f000 fdd9 	bl	800dba4 <pxPortInitialiseStack>
 800cff2:	4602      	mov	r2, r0
 800cff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d002      	beq.n	800d004 <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d002:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d004:	bf00      	nop
 800d006:	3720      	adds	r7, #32
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}

0800d00c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b082      	sub	sp, #8
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d014:	f000 fef6 	bl	800de04 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d018:	4b2a      	ldr	r3, [pc, #168]	; (800d0c4 <prvAddNewTaskToReadyList+0xb8>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	3301      	adds	r3, #1
 800d01e:	4a29      	ldr	r2, [pc, #164]	; (800d0c4 <prvAddNewTaskToReadyList+0xb8>)
 800d020:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d022:	4b29      	ldr	r3, [pc, #164]	; (800d0c8 <prvAddNewTaskToReadyList+0xbc>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d109      	bne.n	800d03e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d02a:	4a27      	ldr	r2, [pc, #156]	; (800d0c8 <prvAddNewTaskToReadyList+0xbc>)
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d030:	4b24      	ldr	r3, [pc, #144]	; (800d0c4 <prvAddNewTaskToReadyList+0xb8>)
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	2b01      	cmp	r3, #1
 800d036:	d110      	bne.n	800d05a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d038:	f000 fbec 	bl	800d814 <prvInitialiseTaskLists>
 800d03c:	e00d      	b.n	800d05a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d03e:	4b23      	ldr	r3, [pc, #140]	; (800d0cc <prvAddNewTaskToReadyList+0xc0>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d109      	bne.n	800d05a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d046:	4b20      	ldr	r3, [pc, #128]	; (800d0c8 <prvAddNewTaskToReadyList+0xbc>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d050:	429a      	cmp	r2, r3
 800d052:	d802      	bhi.n	800d05a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d054:	4a1c      	ldr	r2, [pc, #112]	; (800d0c8 <prvAddNewTaskToReadyList+0xbc>)
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d05a:	4b1d      	ldr	r3, [pc, #116]	; (800d0d0 <prvAddNewTaskToReadyList+0xc4>)
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	3301      	adds	r3, #1
 800d060:	4a1b      	ldr	r2, [pc, #108]	; (800d0d0 <prvAddNewTaskToReadyList+0xc4>)
 800d062:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d068:	2201      	movs	r2, #1
 800d06a:	409a      	lsls	r2, r3
 800d06c:	4b19      	ldr	r3, [pc, #100]	; (800d0d4 <prvAddNewTaskToReadyList+0xc8>)
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	4313      	orrs	r3, r2
 800d072:	4a18      	ldr	r2, [pc, #96]	; (800d0d4 <prvAddNewTaskToReadyList+0xc8>)
 800d074:	6013      	str	r3, [r2, #0]
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d07a:	4613      	mov	r3, r2
 800d07c:	009b      	lsls	r3, r3, #2
 800d07e:	4413      	add	r3, r2
 800d080:	009b      	lsls	r3, r3, #2
 800d082:	4a15      	ldr	r2, [pc, #84]	; (800d0d8 <prvAddNewTaskToReadyList+0xcc>)
 800d084:	441a      	add	r2, r3
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	3304      	adds	r3, #4
 800d08a:	4619      	mov	r1, r3
 800d08c:	4610      	mov	r0, r2
 800d08e:	f7ff f8be 	bl	800c20e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d092:	f000 fee7 	bl	800de64 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d096:	4b0d      	ldr	r3, [pc, #52]	; (800d0cc <prvAddNewTaskToReadyList+0xc0>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d00e      	beq.n	800d0bc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d09e:	4b0a      	ldr	r3, [pc, #40]	; (800d0c8 <prvAddNewTaskToReadyList+0xbc>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0a8:	429a      	cmp	r2, r3
 800d0aa:	d207      	bcs.n	800d0bc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d0ac:	4b0b      	ldr	r3, [pc, #44]	; (800d0dc <prvAddNewTaskToReadyList+0xd0>)
 800d0ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0b2:	601a      	str	r2, [r3, #0]
 800d0b4:	f3bf 8f4f 	dsb	sy
 800d0b8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d0bc:	bf00      	nop
 800d0be:	3708      	adds	r7, #8
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}
 800d0c4:	20000990 	.word	0x20000990
 800d0c8:	20000890 	.word	0x20000890
 800d0cc:	2000099c 	.word	0x2000099c
 800d0d0:	200009ac 	.word	0x200009ac
 800d0d4:	20000998 	.word	0x20000998
 800d0d8:	20000894 	.word	0x20000894
 800d0dc:	e000ed04 	.word	0xe000ed04

0800d0e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d0e0:	b580      	push	{r7, lr}
 800d0e2:	b084      	sub	sp, #16
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d017      	beq.n	800d122 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d0f2:	4b13      	ldr	r3, [pc, #76]	; (800d140 <vTaskDelay+0x60>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d00a      	beq.n	800d110 <vTaskDelay+0x30>
	__asm volatile
 800d0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0fe:	f383 8811 	msr	BASEPRI, r3
 800d102:	f3bf 8f6f 	isb	sy
 800d106:	f3bf 8f4f 	dsb	sy
 800d10a:	60bb      	str	r3, [r7, #8]
}
 800d10c:	bf00      	nop
 800d10e:	e7fe      	b.n	800d10e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800d110:	f000 f87a 	bl	800d208 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d114:	2100      	movs	r1, #0
 800d116:	6878      	ldr	r0, [r7, #4]
 800d118:	f000 fcde 	bl	800dad8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d11c:	f000 f882 	bl	800d224 <xTaskResumeAll>
 800d120:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d107      	bne.n	800d138 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800d128:	4b06      	ldr	r3, [pc, #24]	; (800d144 <vTaskDelay+0x64>)
 800d12a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d12e:	601a      	str	r2, [r3, #0]
 800d130:	f3bf 8f4f 	dsb	sy
 800d134:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d138:	bf00      	nop
 800d13a:	3710      	adds	r7, #16
 800d13c:	46bd      	mov	sp, r7
 800d13e:	bd80      	pop	{r7, pc}
 800d140:	200009b8 	.word	0x200009b8
 800d144:	e000ed04 	.word	0xe000ed04

0800d148 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b08a      	sub	sp, #40	; 0x28
 800d14c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d14e:	2300      	movs	r3, #0
 800d150:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d152:	2300      	movs	r3, #0
 800d154:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d156:	463a      	mov	r2, r7
 800d158:	1d39      	adds	r1, r7, #4
 800d15a:	f107 0308 	add.w	r3, r7, #8
 800d15e:	4618      	mov	r0, r3
 800d160:	f7f3 fa32 	bl	80005c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d164:	6839      	ldr	r1, [r7, #0]
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	68ba      	ldr	r2, [r7, #8]
 800d16a:	9202      	str	r2, [sp, #8]
 800d16c:	9301      	str	r3, [sp, #4]
 800d16e:	2300      	movs	r3, #0
 800d170:	9300      	str	r3, [sp, #0]
 800d172:	2300      	movs	r3, #0
 800d174:	460a      	mov	r2, r1
 800d176:	491e      	ldr	r1, [pc, #120]	; (800d1f0 <vTaskStartScheduler+0xa8>)
 800d178:	481e      	ldr	r0, [pc, #120]	; (800d1f4 <vTaskStartScheduler+0xac>)
 800d17a:	f7ff fe13 	bl	800cda4 <xTaskCreateStatic>
 800d17e:	4603      	mov	r3, r0
 800d180:	4a1d      	ldr	r2, [pc, #116]	; (800d1f8 <vTaskStartScheduler+0xb0>)
 800d182:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d184:	4b1c      	ldr	r3, [pc, #112]	; (800d1f8 <vTaskStartScheduler+0xb0>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d002      	beq.n	800d192 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d18c:	2301      	movs	r3, #1
 800d18e:	617b      	str	r3, [r7, #20]
 800d190:	e001      	b.n	800d196 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d192:	2300      	movs	r3, #0
 800d194:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d196:	697b      	ldr	r3, [r7, #20]
 800d198:	2b01      	cmp	r3, #1
 800d19a:	d116      	bne.n	800d1ca <vTaskStartScheduler+0x82>
	__asm volatile
 800d19c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a0:	f383 8811 	msr	BASEPRI, r3
 800d1a4:	f3bf 8f6f 	isb	sy
 800d1a8:	f3bf 8f4f 	dsb	sy
 800d1ac:	613b      	str	r3, [r7, #16]
}
 800d1ae:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d1b0:	4b12      	ldr	r3, [pc, #72]	; (800d1fc <vTaskStartScheduler+0xb4>)
 800d1b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d1b6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d1b8:	4b11      	ldr	r3, [pc, #68]	; (800d200 <vTaskStartScheduler+0xb8>)
 800d1ba:	2201      	movs	r2, #1
 800d1bc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d1be:	4b11      	ldr	r3, [pc, #68]	; (800d204 <vTaskStartScheduler+0xbc>)
 800d1c0:	2200      	movs	r2, #0
 800d1c2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d1c4:	f000 fd7c 	bl	800dcc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d1c8:	e00e      	b.n	800d1e8 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d1ca:	697b      	ldr	r3, [r7, #20]
 800d1cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d1d0:	d10a      	bne.n	800d1e8 <vTaskStartScheduler+0xa0>
	__asm volatile
 800d1d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d6:	f383 8811 	msr	BASEPRI, r3
 800d1da:	f3bf 8f6f 	isb	sy
 800d1de:	f3bf 8f4f 	dsb	sy
 800d1e2:	60fb      	str	r3, [r7, #12]
}
 800d1e4:	bf00      	nop
 800d1e6:	e7fe      	b.n	800d1e6 <vTaskStartScheduler+0x9e>
}
 800d1e8:	bf00      	nop
 800d1ea:	3718      	adds	r7, #24
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}
 800d1f0:	0800f440 	.word	0x0800f440
 800d1f4:	0800d7e1 	.word	0x0800d7e1
 800d1f8:	200009b4 	.word	0x200009b4
 800d1fc:	200009b0 	.word	0x200009b0
 800d200:	2000099c 	.word	0x2000099c
 800d204:	20000994 	.word	0x20000994

0800d208 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d208:	b480      	push	{r7}
 800d20a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800d20c:	4b04      	ldr	r3, [pc, #16]	; (800d220 <vTaskSuspendAll+0x18>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	3301      	adds	r3, #1
 800d212:	4a03      	ldr	r2, [pc, #12]	; (800d220 <vTaskSuspendAll+0x18>)
 800d214:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800d216:	bf00      	nop
 800d218:	46bd      	mov	sp, r7
 800d21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21e:	4770      	bx	lr
 800d220:	200009b8 	.word	0x200009b8

0800d224 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b084      	sub	sp, #16
 800d228:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d22a:	2300      	movs	r3, #0
 800d22c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d22e:	2300      	movs	r3, #0
 800d230:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d232:	4b41      	ldr	r3, [pc, #260]	; (800d338 <xTaskResumeAll+0x114>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d10a      	bne.n	800d250 <xTaskResumeAll+0x2c>
	__asm volatile
 800d23a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d23e:	f383 8811 	msr	BASEPRI, r3
 800d242:	f3bf 8f6f 	isb	sy
 800d246:	f3bf 8f4f 	dsb	sy
 800d24a:	603b      	str	r3, [r7, #0]
}
 800d24c:	bf00      	nop
 800d24e:	e7fe      	b.n	800d24e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d250:	f000 fdd8 	bl	800de04 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d254:	4b38      	ldr	r3, [pc, #224]	; (800d338 <xTaskResumeAll+0x114>)
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	3b01      	subs	r3, #1
 800d25a:	4a37      	ldr	r2, [pc, #220]	; (800d338 <xTaskResumeAll+0x114>)
 800d25c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d25e:	4b36      	ldr	r3, [pc, #216]	; (800d338 <xTaskResumeAll+0x114>)
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	2b00      	cmp	r3, #0
 800d264:	d161      	bne.n	800d32a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d266:	4b35      	ldr	r3, [pc, #212]	; (800d33c <xTaskResumeAll+0x118>)
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d05d      	beq.n	800d32a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d26e:	e02e      	b.n	800d2ce <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d270:	4b33      	ldr	r3, [pc, #204]	; (800d340 <xTaskResumeAll+0x11c>)
 800d272:	68db      	ldr	r3, [r3, #12]
 800d274:	68db      	ldr	r3, [r3, #12]
 800d276:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	3318      	adds	r3, #24
 800d27c:	4618      	mov	r0, r3
 800d27e:	f7ff f823 	bl	800c2c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	3304      	adds	r3, #4
 800d286:	4618      	mov	r0, r3
 800d288:	f7ff f81e 	bl	800c2c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d290:	2201      	movs	r2, #1
 800d292:	409a      	lsls	r2, r3
 800d294:	4b2b      	ldr	r3, [pc, #172]	; (800d344 <xTaskResumeAll+0x120>)
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	4313      	orrs	r3, r2
 800d29a:	4a2a      	ldr	r2, [pc, #168]	; (800d344 <xTaskResumeAll+0x120>)
 800d29c:	6013      	str	r3, [r2, #0]
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2a2:	4613      	mov	r3, r2
 800d2a4:	009b      	lsls	r3, r3, #2
 800d2a6:	4413      	add	r3, r2
 800d2a8:	009b      	lsls	r3, r3, #2
 800d2aa:	4a27      	ldr	r2, [pc, #156]	; (800d348 <xTaskResumeAll+0x124>)
 800d2ac:	441a      	add	r2, r3
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	3304      	adds	r3, #4
 800d2b2:	4619      	mov	r1, r3
 800d2b4:	4610      	mov	r0, r2
 800d2b6:	f7fe ffaa 	bl	800c20e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2be:	4b23      	ldr	r3, [pc, #140]	; (800d34c <xTaskResumeAll+0x128>)
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2c4:	429a      	cmp	r2, r3
 800d2c6:	d302      	bcc.n	800d2ce <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800d2c8:	4b21      	ldr	r3, [pc, #132]	; (800d350 <xTaskResumeAll+0x12c>)
 800d2ca:	2201      	movs	r2, #1
 800d2cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d2ce:	4b1c      	ldr	r3, [pc, #112]	; (800d340 <xTaskResumeAll+0x11c>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d1cc      	bne.n	800d270 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d001      	beq.n	800d2e0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d2dc:	f000 fb38 	bl	800d950 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d2e0:	4b1c      	ldr	r3, [pc, #112]	; (800d354 <xTaskResumeAll+0x130>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d010      	beq.n	800d30e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d2ec:	f000 f836 	bl	800d35c <xTaskIncrementTick>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d002      	beq.n	800d2fc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800d2f6:	4b16      	ldr	r3, [pc, #88]	; (800d350 <xTaskResumeAll+0x12c>)
 800d2f8:	2201      	movs	r2, #1
 800d2fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	3b01      	subs	r3, #1
 800d300:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d1f1      	bne.n	800d2ec <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800d308:	4b12      	ldr	r3, [pc, #72]	; (800d354 <xTaskResumeAll+0x130>)
 800d30a:	2200      	movs	r2, #0
 800d30c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d30e:	4b10      	ldr	r3, [pc, #64]	; (800d350 <xTaskResumeAll+0x12c>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d009      	beq.n	800d32a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d316:	2301      	movs	r3, #1
 800d318:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d31a:	4b0f      	ldr	r3, [pc, #60]	; (800d358 <xTaskResumeAll+0x134>)
 800d31c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d320:	601a      	str	r2, [r3, #0]
 800d322:	f3bf 8f4f 	dsb	sy
 800d326:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d32a:	f000 fd9b 	bl	800de64 <vPortExitCritical>

	return xAlreadyYielded;
 800d32e:	68bb      	ldr	r3, [r7, #8]
}
 800d330:	4618      	mov	r0, r3
 800d332:	3710      	adds	r7, #16
 800d334:	46bd      	mov	sp, r7
 800d336:	bd80      	pop	{r7, pc}
 800d338:	200009b8 	.word	0x200009b8
 800d33c:	20000990 	.word	0x20000990
 800d340:	20000950 	.word	0x20000950
 800d344:	20000998 	.word	0x20000998
 800d348:	20000894 	.word	0x20000894
 800d34c:	20000890 	.word	0x20000890
 800d350:	200009a4 	.word	0x200009a4
 800d354:	200009a0 	.word	0x200009a0
 800d358:	e000ed04 	.word	0xe000ed04

0800d35c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b086      	sub	sp, #24
 800d360:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d362:	2300      	movs	r3, #0
 800d364:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d366:	4b4e      	ldr	r3, [pc, #312]	; (800d4a0 <xTaskIncrementTick+0x144>)
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	f040 808e 	bne.w	800d48c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d370:	4b4c      	ldr	r3, [pc, #304]	; (800d4a4 <xTaskIncrementTick+0x148>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	3301      	adds	r3, #1
 800d376:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d378:	4a4a      	ldr	r2, [pc, #296]	; (800d4a4 <xTaskIncrementTick+0x148>)
 800d37a:	693b      	ldr	r3, [r7, #16]
 800d37c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d120      	bne.n	800d3c6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d384:	4b48      	ldr	r3, [pc, #288]	; (800d4a8 <xTaskIncrementTick+0x14c>)
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	d00a      	beq.n	800d3a4 <xTaskIncrementTick+0x48>
	__asm volatile
 800d38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d392:	f383 8811 	msr	BASEPRI, r3
 800d396:	f3bf 8f6f 	isb	sy
 800d39a:	f3bf 8f4f 	dsb	sy
 800d39e:	603b      	str	r3, [r7, #0]
}
 800d3a0:	bf00      	nop
 800d3a2:	e7fe      	b.n	800d3a2 <xTaskIncrementTick+0x46>
 800d3a4:	4b40      	ldr	r3, [pc, #256]	; (800d4a8 <xTaskIncrementTick+0x14c>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	60fb      	str	r3, [r7, #12]
 800d3aa:	4b40      	ldr	r3, [pc, #256]	; (800d4ac <xTaskIncrementTick+0x150>)
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	4a3e      	ldr	r2, [pc, #248]	; (800d4a8 <xTaskIncrementTick+0x14c>)
 800d3b0:	6013      	str	r3, [r2, #0]
 800d3b2:	4a3e      	ldr	r2, [pc, #248]	; (800d4ac <xTaskIncrementTick+0x150>)
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	6013      	str	r3, [r2, #0]
 800d3b8:	4b3d      	ldr	r3, [pc, #244]	; (800d4b0 <xTaskIncrementTick+0x154>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	3301      	adds	r3, #1
 800d3be:	4a3c      	ldr	r2, [pc, #240]	; (800d4b0 <xTaskIncrementTick+0x154>)
 800d3c0:	6013      	str	r3, [r2, #0]
 800d3c2:	f000 fac5 	bl	800d950 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d3c6:	4b3b      	ldr	r3, [pc, #236]	; (800d4b4 <xTaskIncrementTick+0x158>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	693a      	ldr	r2, [r7, #16]
 800d3cc:	429a      	cmp	r2, r3
 800d3ce:	d348      	bcc.n	800d462 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d3d0:	4b35      	ldr	r3, [pc, #212]	; (800d4a8 <xTaskIncrementTick+0x14c>)
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d104      	bne.n	800d3e4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d3da:	4b36      	ldr	r3, [pc, #216]	; (800d4b4 <xTaskIncrementTick+0x158>)
 800d3dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d3e0:	601a      	str	r2, [r3, #0]
					break;
 800d3e2:	e03e      	b.n	800d462 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3e4:	4b30      	ldr	r3, [pc, #192]	; (800d4a8 <xTaskIncrementTick+0x14c>)
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	68db      	ldr	r3, [r3, #12]
 800d3ea:	68db      	ldr	r3, [r3, #12]
 800d3ec:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d3ee:	68bb      	ldr	r3, [r7, #8]
 800d3f0:	685b      	ldr	r3, [r3, #4]
 800d3f2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d3f4:	693a      	ldr	r2, [r7, #16]
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	429a      	cmp	r2, r3
 800d3fa:	d203      	bcs.n	800d404 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d3fc:	4a2d      	ldr	r2, [pc, #180]	; (800d4b4 <xTaskIncrementTick+0x158>)
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d402:	e02e      	b.n	800d462 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d404:	68bb      	ldr	r3, [r7, #8]
 800d406:	3304      	adds	r3, #4
 800d408:	4618      	mov	r0, r3
 800d40a:	f7fe ff5d 	bl	800c2c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d412:	2b00      	cmp	r3, #0
 800d414:	d004      	beq.n	800d420 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	3318      	adds	r3, #24
 800d41a:	4618      	mov	r0, r3
 800d41c:	f7fe ff54 	bl	800c2c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d424:	2201      	movs	r2, #1
 800d426:	409a      	lsls	r2, r3
 800d428:	4b23      	ldr	r3, [pc, #140]	; (800d4b8 <xTaskIncrementTick+0x15c>)
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	4313      	orrs	r3, r2
 800d42e:	4a22      	ldr	r2, [pc, #136]	; (800d4b8 <xTaskIncrementTick+0x15c>)
 800d430:	6013      	str	r3, [r2, #0]
 800d432:	68bb      	ldr	r3, [r7, #8]
 800d434:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d436:	4613      	mov	r3, r2
 800d438:	009b      	lsls	r3, r3, #2
 800d43a:	4413      	add	r3, r2
 800d43c:	009b      	lsls	r3, r3, #2
 800d43e:	4a1f      	ldr	r2, [pc, #124]	; (800d4bc <xTaskIncrementTick+0x160>)
 800d440:	441a      	add	r2, r3
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	3304      	adds	r3, #4
 800d446:	4619      	mov	r1, r3
 800d448:	4610      	mov	r0, r2
 800d44a:	f7fe fee0 	bl	800c20e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d452:	4b1b      	ldr	r3, [pc, #108]	; (800d4c0 <xTaskIncrementTick+0x164>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d458:	429a      	cmp	r2, r3
 800d45a:	d3b9      	bcc.n	800d3d0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d45c:	2301      	movs	r3, #1
 800d45e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d460:	e7b6      	b.n	800d3d0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d462:	4b17      	ldr	r3, [pc, #92]	; (800d4c0 <xTaskIncrementTick+0x164>)
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d468:	4914      	ldr	r1, [pc, #80]	; (800d4bc <xTaskIncrementTick+0x160>)
 800d46a:	4613      	mov	r3, r2
 800d46c:	009b      	lsls	r3, r3, #2
 800d46e:	4413      	add	r3, r2
 800d470:	009b      	lsls	r3, r3, #2
 800d472:	440b      	add	r3, r1
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	2b01      	cmp	r3, #1
 800d478:	d901      	bls.n	800d47e <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800d47a:	2301      	movs	r3, #1
 800d47c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d47e:	4b11      	ldr	r3, [pc, #68]	; (800d4c4 <xTaskIncrementTick+0x168>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d007      	beq.n	800d496 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800d486:	2301      	movs	r3, #1
 800d488:	617b      	str	r3, [r7, #20]
 800d48a:	e004      	b.n	800d496 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d48c:	4b0e      	ldr	r3, [pc, #56]	; (800d4c8 <xTaskIncrementTick+0x16c>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	3301      	adds	r3, #1
 800d492:	4a0d      	ldr	r2, [pc, #52]	; (800d4c8 <xTaskIncrementTick+0x16c>)
 800d494:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d496:	697b      	ldr	r3, [r7, #20]
}
 800d498:	4618      	mov	r0, r3
 800d49a:	3718      	adds	r7, #24
 800d49c:	46bd      	mov	sp, r7
 800d49e:	bd80      	pop	{r7, pc}
 800d4a0:	200009b8 	.word	0x200009b8
 800d4a4:	20000994 	.word	0x20000994
 800d4a8:	20000948 	.word	0x20000948
 800d4ac:	2000094c 	.word	0x2000094c
 800d4b0:	200009a8 	.word	0x200009a8
 800d4b4:	200009b0 	.word	0x200009b0
 800d4b8:	20000998 	.word	0x20000998
 800d4bc:	20000894 	.word	0x20000894
 800d4c0:	20000890 	.word	0x20000890
 800d4c4:	200009a4 	.word	0x200009a4
 800d4c8:	200009a0 	.word	0x200009a0

0800d4cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b088      	sub	sp, #32
 800d4d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d4d2:	4b39      	ldr	r3, [pc, #228]	; (800d5b8 <vTaskSwitchContext+0xec>)
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d003      	beq.n	800d4e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d4da:	4b38      	ldr	r3, [pc, #224]	; (800d5bc <vTaskSwitchContext+0xf0>)
 800d4dc:	2201      	movs	r2, #1
 800d4de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d4e0:	e066      	b.n	800d5b0 <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 800d4e2:	4b36      	ldr	r3, [pc, #216]	; (800d5bc <vTaskSwitchContext+0xf0>)
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800d4e8:	4b35      	ldr	r3, [pc, #212]	; (800d5c0 <vTaskSwitchContext+0xf4>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4ee:	61fb      	str	r3, [r7, #28]
 800d4f0:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800d4f4:	61bb      	str	r3, [r7, #24]
 800d4f6:	69fb      	ldr	r3, [r7, #28]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	69ba      	ldr	r2, [r7, #24]
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	d111      	bne.n	800d524 <vTaskSwitchContext+0x58>
 800d500:	69fb      	ldr	r3, [r7, #28]
 800d502:	3304      	adds	r3, #4
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	69ba      	ldr	r2, [r7, #24]
 800d508:	429a      	cmp	r2, r3
 800d50a:	d10b      	bne.n	800d524 <vTaskSwitchContext+0x58>
 800d50c:	69fb      	ldr	r3, [r7, #28]
 800d50e:	3308      	adds	r3, #8
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	69ba      	ldr	r2, [r7, #24]
 800d514:	429a      	cmp	r2, r3
 800d516:	d105      	bne.n	800d524 <vTaskSwitchContext+0x58>
 800d518:	69fb      	ldr	r3, [r7, #28]
 800d51a:	330c      	adds	r3, #12
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	69ba      	ldr	r2, [r7, #24]
 800d520:	429a      	cmp	r2, r3
 800d522:	d008      	beq.n	800d536 <vTaskSwitchContext+0x6a>
 800d524:	4b26      	ldr	r3, [pc, #152]	; (800d5c0 <vTaskSwitchContext+0xf4>)
 800d526:	681a      	ldr	r2, [r3, #0]
 800d528:	4b25      	ldr	r3, [pc, #148]	; (800d5c0 <vTaskSwitchContext+0xf4>)
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	3334      	adds	r3, #52	; 0x34
 800d52e:	4619      	mov	r1, r3
 800d530:	4610      	mov	r0, r2
 800d532:	f7f3 f836 	bl	80005a2 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d536:	4b23      	ldr	r3, [pc, #140]	; (800d5c4 <vTaskSwitchContext+0xf8>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	fab3 f383 	clz	r3, r3
 800d542:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d544:	7afb      	ldrb	r3, [r7, #11]
 800d546:	f1c3 031f 	rsb	r3, r3, #31
 800d54a:	617b      	str	r3, [r7, #20]
 800d54c:	491e      	ldr	r1, [pc, #120]	; (800d5c8 <vTaskSwitchContext+0xfc>)
 800d54e:	697a      	ldr	r2, [r7, #20]
 800d550:	4613      	mov	r3, r2
 800d552:	009b      	lsls	r3, r3, #2
 800d554:	4413      	add	r3, r2
 800d556:	009b      	lsls	r3, r3, #2
 800d558:	440b      	add	r3, r1
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d10a      	bne.n	800d576 <vTaskSwitchContext+0xaa>
	__asm volatile
 800d560:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d564:	f383 8811 	msr	BASEPRI, r3
 800d568:	f3bf 8f6f 	isb	sy
 800d56c:	f3bf 8f4f 	dsb	sy
 800d570:	607b      	str	r3, [r7, #4]
}
 800d572:	bf00      	nop
 800d574:	e7fe      	b.n	800d574 <vTaskSwitchContext+0xa8>
 800d576:	697a      	ldr	r2, [r7, #20]
 800d578:	4613      	mov	r3, r2
 800d57a:	009b      	lsls	r3, r3, #2
 800d57c:	4413      	add	r3, r2
 800d57e:	009b      	lsls	r3, r3, #2
 800d580:	4a11      	ldr	r2, [pc, #68]	; (800d5c8 <vTaskSwitchContext+0xfc>)
 800d582:	4413      	add	r3, r2
 800d584:	613b      	str	r3, [r7, #16]
 800d586:	693b      	ldr	r3, [r7, #16]
 800d588:	685b      	ldr	r3, [r3, #4]
 800d58a:	685a      	ldr	r2, [r3, #4]
 800d58c:	693b      	ldr	r3, [r7, #16]
 800d58e:	605a      	str	r2, [r3, #4]
 800d590:	693b      	ldr	r3, [r7, #16]
 800d592:	685a      	ldr	r2, [r3, #4]
 800d594:	693b      	ldr	r3, [r7, #16]
 800d596:	3308      	adds	r3, #8
 800d598:	429a      	cmp	r2, r3
 800d59a:	d104      	bne.n	800d5a6 <vTaskSwitchContext+0xda>
 800d59c:	693b      	ldr	r3, [r7, #16]
 800d59e:	685b      	ldr	r3, [r3, #4]
 800d5a0:	685a      	ldr	r2, [r3, #4]
 800d5a2:	693b      	ldr	r3, [r7, #16]
 800d5a4:	605a      	str	r2, [r3, #4]
 800d5a6:	693b      	ldr	r3, [r7, #16]
 800d5a8:	685b      	ldr	r3, [r3, #4]
 800d5aa:	68db      	ldr	r3, [r3, #12]
 800d5ac:	4a04      	ldr	r2, [pc, #16]	; (800d5c0 <vTaskSwitchContext+0xf4>)
 800d5ae:	6013      	str	r3, [r2, #0]
}
 800d5b0:	bf00      	nop
 800d5b2:	3720      	adds	r7, #32
 800d5b4:	46bd      	mov	sp, r7
 800d5b6:	bd80      	pop	{r7, pc}
 800d5b8:	200009b8 	.word	0x200009b8
 800d5bc:	200009a4 	.word	0x200009a4
 800d5c0:	20000890 	.word	0x20000890
 800d5c4:	20000998 	.word	0x20000998
 800d5c8:	20000894 	.word	0x20000894

0800d5cc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b084      	sub	sp, #16
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d10a      	bne.n	800d5f2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5e0:	f383 8811 	msr	BASEPRI, r3
 800d5e4:	f3bf 8f6f 	isb	sy
 800d5e8:	f3bf 8f4f 	dsb	sy
 800d5ec:	60fb      	str	r3, [r7, #12]
}
 800d5ee:	bf00      	nop
 800d5f0:	e7fe      	b.n	800d5f0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d5f2:	4b07      	ldr	r3, [pc, #28]	; (800d610 <vTaskPlaceOnEventList+0x44>)
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	3318      	adds	r3, #24
 800d5f8:	4619      	mov	r1, r3
 800d5fa:	6878      	ldr	r0, [r7, #4]
 800d5fc:	f7fe fe2b 	bl	800c256 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d600:	2101      	movs	r1, #1
 800d602:	6838      	ldr	r0, [r7, #0]
 800d604:	f000 fa68 	bl	800dad8 <prvAddCurrentTaskToDelayedList>
}
 800d608:	bf00      	nop
 800d60a:	3710      	adds	r7, #16
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}
 800d610:	20000890 	.word	0x20000890

0800d614 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b086      	sub	sp, #24
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	68db      	ldr	r3, [r3, #12]
 800d620:	68db      	ldr	r3, [r3, #12]
 800d622:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d624:	693b      	ldr	r3, [r7, #16]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d10a      	bne.n	800d640 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d62a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d62e:	f383 8811 	msr	BASEPRI, r3
 800d632:	f3bf 8f6f 	isb	sy
 800d636:	f3bf 8f4f 	dsb	sy
 800d63a:	60fb      	str	r3, [r7, #12]
}
 800d63c:	bf00      	nop
 800d63e:	e7fe      	b.n	800d63e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d640:	693b      	ldr	r3, [r7, #16]
 800d642:	3318      	adds	r3, #24
 800d644:	4618      	mov	r0, r3
 800d646:	f7fe fe3f 	bl	800c2c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d64a:	4b1d      	ldr	r3, [pc, #116]	; (800d6c0 <xTaskRemoveFromEventList+0xac>)
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d11c      	bne.n	800d68c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	3304      	adds	r3, #4
 800d656:	4618      	mov	r0, r3
 800d658:	f7fe fe36 	bl	800c2c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d65c:	693b      	ldr	r3, [r7, #16]
 800d65e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d660:	2201      	movs	r2, #1
 800d662:	409a      	lsls	r2, r3
 800d664:	4b17      	ldr	r3, [pc, #92]	; (800d6c4 <xTaskRemoveFromEventList+0xb0>)
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	4313      	orrs	r3, r2
 800d66a:	4a16      	ldr	r2, [pc, #88]	; (800d6c4 <xTaskRemoveFromEventList+0xb0>)
 800d66c:	6013      	str	r3, [r2, #0]
 800d66e:	693b      	ldr	r3, [r7, #16]
 800d670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d672:	4613      	mov	r3, r2
 800d674:	009b      	lsls	r3, r3, #2
 800d676:	4413      	add	r3, r2
 800d678:	009b      	lsls	r3, r3, #2
 800d67a:	4a13      	ldr	r2, [pc, #76]	; (800d6c8 <xTaskRemoveFromEventList+0xb4>)
 800d67c:	441a      	add	r2, r3
 800d67e:	693b      	ldr	r3, [r7, #16]
 800d680:	3304      	adds	r3, #4
 800d682:	4619      	mov	r1, r3
 800d684:	4610      	mov	r0, r2
 800d686:	f7fe fdc2 	bl	800c20e <vListInsertEnd>
 800d68a:	e005      	b.n	800d698 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d68c:	693b      	ldr	r3, [r7, #16]
 800d68e:	3318      	adds	r3, #24
 800d690:	4619      	mov	r1, r3
 800d692:	480e      	ldr	r0, [pc, #56]	; (800d6cc <xTaskRemoveFromEventList+0xb8>)
 800d694:	f7fe fdbb 	bl	800c20e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d698:	693b      	ldr	r3, [r7, #16]
 800d69a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d69c:	4b0c      	ldr	r3, [pc, #48]	; (800d6d0 <xTaskRemoveFromEventList+0xbc>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6a2:	429a      	cmp	r2, r3
 800d6a4:	d905      	bls.n	800d6b2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d6a6:	2301      	movs	r3, #1
 800d6a8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d6aa:	4b0a      	ldr	r3, [pc, #40]	; (800d6d4 <xTaskRemoveFromEventList+0xc0>)
 800d6ac:	2201      	movs	r2, #1
 800d6ae:	601a      	str	r2, [r3, #0]
 800d6b0:	e001      	b.n	800d6b6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d6b6:	697b      	ldr	r3, [r7, #20]
}
 800d6b8:	4618      	mov	r0, r3
 800d6ba:	3718      	adds	r7, #24
 800d6bc:	46bd      	mov	sp, r7
 800d6be:	bd80      	pop	{r7, pc}
 800d6c0:	200009b8 	.word	0x200009b8
 800d6c4:	20000998 	.word	0x20000998
 800d6c8:	20000894 	.word	0x20000894
 800d6cc:	20000950 	.word	0x20000950
 800d6d0:	20000890 	.word	0x20000890
 800d6d4:	200009a4 	.word	0x200009a4

0800d6d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d6d8:	b480      	push	{r7}
 800d6da:	b083      	sub	sp, #12
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d6e0:	4b06      	ldr	r3, [pc, #24]	; (800d6fc <vTaskInternalSetTimeOutState+0x24>)
 800d6e2:	681a      	ldr	r2, [r3, #0]
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d6e8:	4b05      	ldr	r3, [pc, #20]	; (800d700 <vTaskInternalSetTimeOutState+0x28>)
 800d6ea:	681a      	ldr	r2, [r3, #0]
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	605a      	str	r2, [r3, #4]
}
 800d6f0:	bf00      	nop
 800d6f2:	370c      	adds	r7, #12
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fa:	4770      	bx	lr
 800d6fc:	200009a8 	.word	0x200009a8
 800d700:	20000994 	.word	0x20000994

0800d704 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b088      	sub	sp, #32
 800d708:	af00      	add	r7, sp, #0
 800d70a:	6078      	str	r0, [r7, #4]
 800d70c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2b00      	cmp	r3, #0
 800d712:	d10a      	bne.n	800d72a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d718:	f383 8811 	msr	BASEPRI, r3
 800d71c:	f3bf 8f6f 	isb	sy
 800d720:	f3bf 8f4f 	dsb	sy
 800d724:	613b      	str	r3, [r7, #16]
}
 800d726:	bf00      	nop
 800d728:	e7fe      	b.n	800d728 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d10a      	bne.n	800d746 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d734:	f383 8811 	msr	BASEPRI, r3
 800d738:	f3bf 8f6f 	isb	sy
 800d73c:	f3bf 8f4f 	dsb	sy
 800d740:	60fb      	str	r3, [r7, #12]
}
 800d742:	bf00      	nop
 800d744:	e7fe      	b.n	800d744 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d746:	f000 fb5d 	bl	800de04 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d74a:	4b1d      	ldr	r3, [pc, #116]	; (800d7c0 <xTaskCheckForTimeOut+0xbc>)
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	685b      	ldr	r3, [r3, #4]
 800d754:	69ba      	ldr	r2, [r7, #24]
 800d756:	1ad3      	subs	r3, r2, r3
 800d758:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d762:	d102      	bne.n	800d76a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d764:	2300      	movs	r3, #0
 800d766:	61fb      	str	r3, [r7, #28]
 800d768:	e023      	b.n	800d7b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681a      	ldr	r2, [r3, #0]
 800d76e:	4b15      	ldr	r3, [pc, #84]	; (800d7c4 <xTaskCheckForTimeOut+0xc0>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	429a      	cmp	r2, r3
 800d774:	d007      	beq.n	800d786 <xTaskCheckForTimeOut+0x82>
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	685b      	ldr	r3, [r3, #4]
 800d77a:	69ba      	ldr	r2, [r7, #24]
 800d77c:	429a      	cmp	r2, r3
 800d77e:	d302      	bcc.n	800d786 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d780:	2301      	movs	r3, #1
 800d782:	61fb      	str	r3, [r7, #28]
 800d784:	e015      	b.n	800d7b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	697a      	ldr	r2, [r7, #20]
 800d78c:	429a      	cmp	r2, r3
 800d78e:	d20b      	bcs.n	800d7a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	681a      	ldr	r2, [r3, #0]
 800d794:	697b      	ldr	r3, [r7, #20]
 800d796:	1ad2      	subs	r2, r2, r3
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d79c:	6878      	ldr	r0, [r7, #4]
 800d79e:	f7ff ff9b 	bl	800d6d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d7a2:	2300      	movs	r3, #0
 800d7a4:	61fb      	str	r3, [r7, #28]
 800d7a6:	e004      	b.n	800d7b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d7a8:	683b      	ldr	r3, [r7, #0]
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d7ae:	2301      	movs	r3, #1
 800d7b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d7b2:	f000 fb57 	bl	800de64 <vPortExitCritical>

	return xReturn;
 800d7b6:	69fb      	ldr	r3, [r7, #28]
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	3720      	adds	r7, #32
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	bd80      	pop	{r7, pc}
 800d7c0:	20000994 	.word	0x20000994
 800d7c4:	200009a8 	.word	0x200009a8

0800d7c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d7c8:	b480      	push	{r7}
 800d7ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d7cc:	4b03      	ldr	r3, [pc, #12]	; (800d7dc <vTaskMissedYield+0x14>)
 800d7ce:	2201      	movs	r2, #1
 800d7d0:	601a      	str	r2, [r3, #0]
}
 800d7d2:	bf00      	nop
 800d7d4:	46bd      	mov	sp, r7
 800d7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7da:	4770      	bx	lr
 800d7dc:	200009a4 	.word	0x200009a4

0800d7e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b082      	sub	sp, #8
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d7e8:	f000 f854 	bl	800d894 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d7ec:	4b07      	ldr	r3, [pc, #28]	; (800d80c <prvIdleTask+0x2c>)
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	2b01      	cmp	r3, #1
 800d7f2:	d907      	bls.n	800d804 <prvIdleTask+0x24>
			{
				taskYIELD();
 800d7f4:	4b06      	ldr	r3, [pc, #24]	; (800d810 <prvIdleTask+0x30>)
 800d7f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7fa:	601a      	str	r2, [r3, #0]
 800d7fc:	f3bf 8f4f 	dsb	sy
 800d800:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800d804:	f7f2 fec6 	bl	8000594 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800d808:	e7ee      	b.n	800d7e8 <prvIdleTask+0x8>
 800d80a:	bf00      	nop
 800d80c:	20000894 	.word	0x20000894
 800d810:	e000ed04 	.word	0xe000ed04

0800d814 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d814:	b580      	push	{r7, lr}
 800d816:	b082      	sub	sp, #8
 800d818:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d81a:	2300      	movs	r3, #0
 800d81c:	607b      	str	r3, [r7, #4]
 800d81e:	e00c      	b.n	800d83a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d820:	687a      	ldr	r2, [r7, #4]
 800d822:	4613      	mov	r3, r2
 800d824:	009b      	lsls	r3, r3, #2
 800d826:	4413      	add	r3, r2
 800d828:	009b      	lsls	r3, r3, #2
 800d82a:	4a12      	ldr	r2, [pc, #72]	; (800d874 <prvInitialiseTaskLists+0x60>)
 800d82c:	4413      	add	r3, r2
 800d82e:	4618      	mov	r0, r3
 800d830:	f7fe fcc0 	bl	800c1b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	3301      	adds	r3, #1
 800d838:	607b      	str	r3, [r7, #4]
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2b06      	cmp	r3, #6
 800d83e:	d9ef      	bls.n	800d820 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d840:	480d      	ldr	r0, [pc, #52]	; (800d878 <prvInitialiseTaskLists+0x64>)
 800d842:	f7fe fcb7 	bl	800c1b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d846:	480d      	ldr	r0, [pc, #52]	; (800d87c <prvInitialiseTaskLists+0x68>)
 800d848:	f7fe fcb4 	bl	800c1b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d84c:	480c      	ldr	r0, [pc, #48]	; (800d880 <prvInitialiseTaskLists+0x6c>)
 800d84e:	f7fe fcb1 	bl	800c1b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d852:	480c      	ldr	r0, [pc, #48]	; (800d884 <prvInitialiseTaskLists+0x70>)
 800d854:	f7fe fcae 	bl	800c1b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d858:	480b      	ldr	r0, [pc, #44]	; (800d888 <prvInitialiseTaskLists+0x74>)
 800d85a:	f7fe fcab 	bl	800c1b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d85e:	4b0b      	ldr	r3, [pc, #44]	; (800d88c <prvInitialiseTaskLists+0x78>)
 800d860:	4a05      	ldr	r2, [pc, #20]	; (800d878 <prvInitialiseTaskLists+0x64>)
 800d862:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d864:	4b0a      	ldr	r3, [pc, #40]	; (800d890 <prvInitialiseTaskLists+0x7c>)
 800d866:	4a05      	ldr	r2, [pc, #20]	; (800d87c <prvInitialiseTaskLists+0x68>)
 800d868:	601a      	str	r2, [r3, #0]
}
 800d86a:	bf00      	nop
 800d86c:	3708      	adds	r7, #8
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}
 800d872:	bf00      	nop
 800d874:	20000894 	.word	0x20000894
 800d878:	20000920 	.word	0x20000920
 800d87c:	20000934 	.word	0x20000934
 800d880:	20000950 	.word	0x20000950
 800d884:	20000964 	.word	0x20000964
 800d888:	2000097c 	.word	0x2000097c
 800d88c:	20000948 	.word	0x20000948
 800d890:	2000094c 	.word	0x2000094c

0800d894 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d894:	b580      	push	{r7, lr}
 800d896:	b082      	sub	sp, #8
 800d898:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d89a:	e019      	b.n	800d8d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d89c:	f000 fab2 	bl	800de04 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8a0:	4b10      	ldr	r3, [pc, #64]	; (800d8e4 <prvCheckTasksWaitingTermination+0x50>)
 800d8a2:	68db      	ldr	r3, [r3, #12]
 800d8a4:	68db      	ldr	r3, [r3, #12]
 800d8a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	3304      	adds	r3, #4
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f7fe fd0b 	bl	800c2c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d8b2:	4b0d      	ldr	r3, [pc, #52]	; (800d8e8 <prvCheckTasksWaitingTermination+0x54>)
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	3b01      	subs	r3, #1
 800d8b8:	4a0b      	ldr	r2, [pc, #44]	; (800d8e8 <prvCheckTasksWaitingTermination+0x54>)
 800d8ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d8bc:	4b0b      	ldr	r3, [pc, #44]	; (800d8ec <prvCheckTasksWaitingTermination+0x58>)
 800d8be:	681b      	ldr	r3, [r3, #0]
 800d8c0:	3b01      	subs	r3, #1
 800d8c2:	4a0a      	ldr	r2, [pc, #40]	; (800d8ec <prvCheckTasksWaitingTermination+0x58>)
 800d8c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d8c6:	f000 facd 	bl	800de64 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	f000 f810 	bl	800d8f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d8d0:	4b06      	ldr	r3, [pc, #24]	; (800d8ec <prvCheckTasksWaitingTermination+0x58>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d1e1      	bne.n	800d89c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d8d8:	bf00      	nop
 800d8da:	bf00      	nop
 800d8dc:	3708      	adds	r7, #8
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}
 800d8e2:	bf00      	nop
 800d8e4:	20000964 	.word	0x20000964
 800d8e8:	20000990 	.word	0x20000990
 800d8ec:	20000978 	.word	0x20000978

0800d8f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b084      	sub	sp, #16
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d108      	bne.n	800d914 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d906:	4618      	mov	r0, r3
 800d908:	f000 fc6e 	bl	800e1e8 <vPortFree>
				vPortFree( pxTCB );
 800d90c:	6878      	ldr	r0, [r7, #4]
 800d90e:	f000 fc6b 	bl	800e1e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d912:	e018      	b.n	800d946 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d91a:	2b01      	cmp	r3, #1
 800d91c:	d103      	bne.n	800d926 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d91e:	6878      	ldr	r0, [r7, #4]
 800d920:	f000 fc62 	bl	800e1e8 <vPortFree>
	}
 800d924:	e00f      	b.n	800d946 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d92c:	2b02      	cmp	r3, #2
 800d92e:	d00a      	beq.n	800d946 <prvDeleteTCB+0x56>
	__asm volatile
 800d930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d934:	f383 8811 	msr	BASEPRI, r3
 800d938:	f3bf 8f6f 	isb	sy
 800d93c:	f3bf 8f4f 	dsb	sy
 800d940:	60fb      	str	r3, [r7, #12]
}
 800d942:	bf00      	nop
 800d944:	e7fe      	b.n	800d944 <prvDeleteTCB+0x54>
	}
 800d946:	bf00      	nop
 800d948:	3710      	adds	r7, #16
 800d94a:	46bd      	mov	sp, r7
 800d94c:	bd80      	pop	{r7, pc}
	...

0800d950 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d950:	b480      	push	{r7}
 800d952:	b083      	sub	sp, #12
 800d954:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d956:	4b0c      	ldr	r3, [pc, #48]	; (800d988 <prvResetNextTaskUnblockTime+0x38>)
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	681b      	ldr	r3, [r3, #0]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d104      	bne.n	800d96a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d960:	4b0a      	ldr	r3, [pc, #40]	; (800d98c <prvResetNextTaskUnblockTime+0x3c>)
 800d962:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d966:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d968:	e008      	b.n	800d97c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d96a:	4b07      	ldr	r3, [pc, #28]	; (800d988 <prvResetNextTaskUnblockTime+0x38>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	68db      	ldr	r3, [r3, #12]
 800d970:	68db      	ldr	r3, [r3, #12]
 800d972:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	685b      	ldr	r3, [r3, #4]
 800d978:	4a04      	ldr	r2, [pc, #16]	; (800d98c <prvResetNextTaskUnblockTime+0x3c>)
 800d97a:	6013      	str	r3, [r2, #0]
}
 800d97c:	bf00      	nop
 800d97e:	370c      	adds	r7, #12
 800d980:	46bd      	mov	sp, r7
 800d982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d986:	4770      	bx	lr
 800d988:	20000948 	.word	0x20000948
 800d98c:	200009b0 	.word	0x200009b0

0800d990 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d990:	b480      	push	{r7}
 800d992:	b083      	sub	sp, #12
 800d994:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d996:	4b0b      	ldr	r3, [pc, #44]	; (800d9c4 <xTaskGetSchedulerState+0x34>)
 800d998:	681b      	ldr	r3, [r3, #0]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d102      	bne.n	800d9a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d99e:	2301      	movs	r3, #1
 800d9a0:	607b      	str	r3, [r7, #4]
 800d9a2:	e008      	b.n	800d9b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d9a4:	4b08      	ldr	r3, [pc, #32]	; (800d9c8 <xTaskGetSchedulerState+0x38>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d102      	bne.n	800d9b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d9ac:	2302      	movs	r3, #2
 800d9ae:	607b      	str	r3, [r7, #4]
 800d9b0:	e001      	b.n	800d9b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d9b2:	2300      	movs	r3, #0
 800d9b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d9b6:	687b      	ldr	r3, [r7, #4]
	}
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	370c      	adds	r7, #12
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c2:	4770      	bx	lr
 800d9c4:	2000099c 	.word	0x2000099c
 800d9c8:	200009b8 	.word	0x200009b8

0800d9cc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b086      	sub	sp, #24
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d9d8:	2300      	movs	r3, #0
 800d9da:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d06e      	beq.n	800dac0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d9e2:	4b3a      	ldr	r3, [pc, #232]	; (800dacc <xTaskPriorityDisinherit+0x100>)
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	693a      	ldr	r2, [r7, #16]
 800d9e8:	429a      	cmp	r2, r3
 800d9ea:	d00a      	beq.n	800da02 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9f0:	f383 8811 	msr	BASEPRI, r3
 800d9f4:	f3bf 8f6f 	isb	sy
 800d9f8:	f3bf 8f4f 	dsb	sy
 800d9fc:	60fb      	str	r3, [r7, #12]
}
 800d9fe:	bf00      	nop
 800da00:	e7fe      	b.n	800da00 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800da02:	693b      	ldr	r3, [r7, #16]
 800da04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da06:	2b00      	cmp	r3, #0
 800da08:	d10a      	bne.n	800da20 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800da0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da0e:	f383 8811 	msr	BASEPRI, r3
 800da12:	f3bf 8f6f 	isb	sy
 800da16:	f3bf 8f4f 	dsb	sy
 800da1a:	60bb      	str	r3, [r7, #8]
}
 800da1c:	bf00      	nop
 800da1e:	e7fe      	b.n	800da1e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da24:	1e5a      	subs	r2, r3, #1
 800da26:	693b      	ldr	r3, [r7, #16]
 800da28:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800da2a:	693b      	ldr	r3, [r7, #16]
 800da2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da2e:	693b      	ldr	r3, [r7, #16]
 800da30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800da32:	429a      	cmp	r2, r3
 800da34:	d044      	beq.n	800dac0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800da36:	693b      	ldr	r3, [r7, #16]
 800da38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d140      	bne.n	800dac0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da3e:	693b      	ldr	r3, [r7, #16]
 800da40:	3304      	adds	r3, #4
 800da42:	4618      	mov	r0, r3
 800da44:	f7fe fc40 	bl	800c2c8 <uxListRemove>
 800da48:	4603      	mov	r3, r0
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d115      	bne.n	800da7a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800da4e:	693b      	ldr	r3, [r7, #16]
 800da50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da52:	491f      	ldr	r1, [pc, #124]	; (800dad0 <xTaskPriorityDisinherit+0x104>)
 800da54:	4613      	mov	r3, r2
 800da56:	009b      	lsls	r3, r3, #2
 800da58:	4413      	add	r3, r2
 800da5a:	009b      	lsls	r3, r3, #2
 800da5c:	440b      	add	r3, r1
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	2b00      	cmp	r3, #0
 800da62:	d10a      	bne.n	800da7a <xTaskPriorityDisinherit+0xae>
 800da64:	693b      	ldr	r3, [r7, #16]
 800da66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da68:	2201      	movs	r2, #1
 800da6a:	fa02 f303 	lsl.w	r3, r2, r3
 800da6e:	43da      	mvns	r2, r3
 800da70:	4b18      	ldr	r3, [pc, #96]	; (800dad4 <xTaskPriorityDisinherit+0x108>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	4013      	ands	r3, r2
 800da76:	4a17      	ldr	r2, [pc, #92]	; (800dad4 <xTaskPriorityDisinherit+0x108>)
 800da78:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800da7a:	693b      	ldr	r3, [r7, #16]
 800da7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800da7e:	693b      	ldr	r3, [r7, #16]
 800da80:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da82:	693b      	ldr	r3, [r7, #16]
 800da84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da86:	f1c3 0207 	rsb	r2, r3, #7
 800da8a:	693b      	ldr	r3, [r7, #16]
 800da8c:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800da8e:	693b      	ldr	r3, [r7, #16]
 800da90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da92:	2201      	movs	r2, #1
 800da94:	409a      	lsls	r2, r3
 800da96:	4b0f      	ldr	r3, [pc, #60]	; (800dad4 <xTaskPriorityDisinherit+0x108>)
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	4313      	orrs	r3, r2
 800da9c:	4a0d      	ldr	r2, [pc, #52]	; (800dad4 <xTaskPriorityDisinherit+0x108>)
 800da9e:	6013      	str	r3, [r2, #0]
 800daa0:	693b      	ldr	r3, [r7, #16]
 800daa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800daa4:	4613      	mov	r3, r2
 800daa6:	009b      	lsls	r3, r3, #2
 800daa8:	4413      	add	r3, r2
 800daaa:	009b      	lsls	r3, r3, #2
 800daac:	4a08      	ldr	r2, [pc, #32]	; (800dad0 <xTaskPriorityDisinherit+0x104>)
 800daae:	441a      	add	r2, r3
 800dab0:	693b      	ldr	r3, [r7, #16]
 800dab2:	3304      	adds	r3, #4
 800dab4:	4619      	mov	r1, r3
 800dab6:	4610      	mov	r0, r2
 800dab8:	f7fe fba9 	bl	800c20e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800dabc:	2301      	movs	r3, #1
 800dabe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800dac0:	697b      	ldr	r3, [r7, #20]
	}
 800dac2:	4618      	mov	r0, r3
 800dac4:	3718      	adds	r7, #24
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}
 800daca:	bf00      	nop
 800dacc:	20000890 	.word	0x20000890
 800dad0:	20000894 	.word	0x20000894
 800dad4:	20000998 	.word	0x20000998

0800dad8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800dad8:	b580      	push	{r7, lr}
 800dada:	b084      	sub	sp, #16
 800dadc:	af00      	add	r7, sp, #0
 800dade:	6078      	str	r0, [r7, #4]
 800dae0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dae2:	4b29      	ldr	r3, [pc, #164]	; (800db88 <prvAddCurrentTaskToDelayedList+0xb0>)
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dae8:	4b28      	ldr	r3, [pc, #160]	; (800db8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	3304      	adds	r3, #4
 800daee:	4618      	mov	r0, r3
 800daf0:	f7fe fbea 	bl	800c2c8 <uxListRemove>
 800daf4:	4603      	mov	r3, r0
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d10b      	bne.n	800db12 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800dafa:	4b24      	ldr	r3, [pc, #144]	; (800db8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db00:	2201      	movs	r2, #1
 800db02:	fa02 f303 	lsl.w	r3, r2, r3
 800db06:	43da      	mvns	r2, r3
 800db08:	4b21      	ldr	r3, [pc, #132]	; (800db90 <prvAddCurrentTaskToDelayedList+0xb8>)
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	4013      	ands	r3, r2
 800db0e:	4a20      	ldr	r2, [pc, #128]	; (800db90 <prvAddCurrentTaskToDelayedList+0xb8>)
 800db10:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db18:	d10a      	bne.n	800db30 <prvAddCurrentTaskToDelayedList+0x58>
 800db1a:	683b      	ldr	r3, [r7, #0]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d007      	beq.n	800db30 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db20:	4b1a      	ldr	r3, [pc, #104]	; (800db8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	3304      	adds	r3, #4
 800db26:	4619      	mov	r1, r3
 800db28:	481a      	ldr	r0, [pc, #104]	; (800db94 <prvAddCurrentTaskToDelayedList+0xbc>)
 800db2a:	f7fe fb70 	bl	800c20e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800db2e:	e026      	b.n	800db7e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800db30:	68fa      	ldr	r2, [r7, #12]
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	4413      	add	r3, r2
 800db36:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800db38:	4b14      	ldr	r3, [pc, #80]	; (800db8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	68ba      	ldr	r2, [r7, #8]
 800db3e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800db40:	68ba      	ldr	r2, [r7, #8]
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	429a      	cmp	r2, r3
 800db46:	d209      	bcs.n	800db5c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db48:	4b13      	ldr	r3, [pc, #76]	; (800db98 <prvAddCurrentTaskToDelayedList+0xc0>)
 800db4a:	681a      	ldr	r2, [r3, #0]
 800db4c:	4b0f      	ldr	r3, [pc, #60]	; (800db8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	3304      	adds	r3, #4
 800db52:	4619      	mov	r1, r3
 800db54:	4610      	mov	r0, r2
 800db56:	f7fe fb7e 	bl	800c256 <vListInsert>
}
 800db5a:	e010      	b.n	800db7e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db5c:	4b0f      	ldr	r3, [pc, #60]	; (800db9c <prvAddCurrentTaskToDelayedList+0xc4>)
 800db5e:	681a      	ldr	r2, [r3, #0]
 800db60:	4b0a      	ldr	r3, [pc, #40]	; (800db8c <prvAddCurrentTaskToDelayedList+0xb4>)
 800db62:	681b      	ldr	r3, [r3, #0]
 800db64:	3304      	adds	r3, #4
 800db66:	4619      	mov	r1, r3
 800db68:	4610      	mov	r0, r2
 800db6a:	f7fe fb74 	bl	800c256 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800db6e:	4b0c      	ldr	r3, [pc, #48]	; (800dba0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	68ba      	ldr	r2, [r7, #8]
 800db74:	429a      	cmp	r2, r3
 800db76:	d202      	bcs.n	800db7e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800db78:	4a09      	ldr	r2, [pc, #36]	; (800dba0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800db7a:	68bb      	ldr	r3, [r7, #8]
 800db7c:	6013      	str	r3, [r2, #0]
}
 800db7e:	bf00      	nop
 800db80:	3710      	adds	r7, #16
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}
 800db86:	bf00      	nop
 800db88:	20000994 	.word	0x20000994
 800db8c:	20000890 	.word	0x20000890
 800db90:	20000998 	.word	0x20000998
 800db94:	2000097c 	.word	0x2000097c
 800db98:	2000094c 	.word	0x2000094c
 800db9c:	20000948 	.word	0x20000948
 800dba0:	200009b0 	.word	0x200009b0

0800dba4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dba4:	b480      	push	{r7}
 800dba6:	b085      	sub	sp, #20
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	60f8      	str	r0, [r7, #12]
 800dbac:	60b9      	str	r1, [r7, #8]
 800dbae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	3b04      	subs	r3, #4
 800dbb4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dbbc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	3b04      	subs	r3, #4
 800dbc2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	f023 0201 	bic.w	r2, r3, #1
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	3b04      	subs	r3, #4
 800dbd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dbd4:	4a0c      	ldr	r2, [pc, #48]	; (800dc08 <pxPortInitialiseStack+0x64>)
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	3b14      	subs	r3, #20
 800dbde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800dbe0:	687a      	ldr	r2, [r7, #4]
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	3b04      	subs	r3, #4
 800dbea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	f06f 0202 	mvn.w	r2, #2
 800dbf2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800dbf4:	68fb      	ldr	r3, [r7, #12]
 800dbf6:	3b20      	subs	r3, #32
 800dbf8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
}
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	3714      	adds	r7, #20
 800dc00:	46bd      	mov	sp, r7
 800dc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc06:	4770      	bx	lr
 800dc08:	0800dc0d 	.word	0x0800dc0d

0800dc0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800dc0c:	b480      	push	{r7}
 800dc0e:	b085      	sub	sp, #20
 800dc10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800dc12:	2300      	movs	r3, #0
 800dc14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800dc16:	4b12      	ldr	r3, [pc, #72]	; (800dc60 <prvTaskExitError+0x54>)
 800dc18:	681b      	ldr	r3, [r3, #0]
 800dc1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dc1e:	d00a      	beq.n	800dc36 <prvTaskExitError+0x2a>
	__asm volatile
 800dc20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc24:	f383 8811 	msr	BASEPRI, r3
 800dc28:	f3bf 8f6f 	isb	sy
 800dc2c:	f3bf 8f4f 	dsb	sy
 800dc30:	60fb      	str	r3, [r7, #12]
}
 800dc32:	bf00      	nop
 800dc34:	e7fe      	b.n	800dc34 <prvTaskExitError+0x28>
	__asm volatile
 800dc36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc3a:	f383 8811 	msr	BASEPRI, r3
 800dc3e:	f3bf 8f6f 	isb	sy
 800dc42:	f3bf 8f4f 	dsb	sy
 800dc46:	60bb      	str	r3, [r7, #8]
}
 800dc48:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dc4a:	bf00      	nop
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d0fc      	beq.n	800dc4c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dc52:	bf00      	nop
 800dc54:	bf00      	nop
 800dc56:	3714      	adds	r7, #20
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc5e:	4770      	bx	lr
 800dc60:	20000074 	.word	0x20000074
	...

0800dc70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dc70:	4b07      	ldr	r3, [pc, #28]	; (800dc90 <pxCurrentTCBConst2>)
 800dc72:	6819      	ldr	r1, [r3, #0]
 800dc74:	6808      	ldr	r0, [r1, #0]
 800dc76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc7a:	f380 8809 	msr	PSP, r0
 800dc7e:	f3bf 8f6f 	isb	sy
 800dc82:	f04f 0000 	mov.w	r0, #0
 800dc86:	f380 8811 	msr	BASEPRI, r0
 800dc8a:	4770      	bx	lr
 800dc8c:	f3af 8000 	nop.w

0800dc90 <pxCurrentTCBConst2>:
 800dc90:	20000890 	.word	0x20000890
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dc94:	bf00      	nop
 800dc96:	bf00      	nop

0800dc98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dc98:	4808      	ldr	r0, [pc, #32]	; (800dcbc <prvPortStartFirstTask+0x24>)
 800dc9a:	6800      	ldr	r0, [r0, #0]
 800dc9c:	6800      	ldr	r0, [r0, #0]
 800dc9e:	f380 8808 	msr	MSP, r0
 800dca2:	f04f 0000 	mov.w	r0, #0
 800dca6:	f380 8814 	msr	CONTROL, r0
 800dcaa:	b662      	cpsie	i
 800dcac:	b661      	cpsie	f
 800dcae:	f3bf 8f4f 	dsb	sy
 800dcb2:	f3bf 8f6f 	isb	sy
 800dcb6:	df00      	svc	0
 800dcb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dcba:	bf00      	nop
 800dcbc:	e000ed08 	.word	0xe000ed08

0800dcc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b086      	sub	sp, #24
 800dcc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dcc6:	4b46      	ldr	r3, [pc, #280]	; (800dde0 <xPortStartScheduler+0x120>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	4a46      	ldr	r2, [pc, #280]	; (800dde4 <xPortStartScheduler+0x124>)
 800dccc:	4293      	cmp	r3, r2
 800dcce:	d10a      	bne.n	800dce6 <xPortStartScheduler+0x26>
	__asm volatile
 800dcd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcd4:	f383 8811 	msr	BASEPRI, r3
 800dcd8:	f3bf 8f6f 	isb	sy
 800dcdc:	f3bf 8f4f 	dsb	sy
 800dce0:	613b      	str	r3, [r7, #16]
}
 800dce2:	bf00      	nop
 800dce4:	e7fe      	b.n	800dce4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dce6:	4b3e      	ldr	r3, [pc, #248]	; (800dde0 <xPortStartScheduler+0x120>)
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	4a3f      	ldr	r2, [pc, #252]	; (800dde8 <xPortStartScheduler+0x128>)
 800dcec:	4293      	cmp	r3, r2
 800dcee:	d10a      	bne.n	800dd06 <xPortStartScheduler+0x46>
	__asm volatile
 800dcf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcf4:	f383 8811 	msr	BASEPRI, r3
 800dcf8:	f3bf 8f6f 	isb	sy
 800dcfc:	f3bf 8f4f 	dsb	sy
 800dd00:	60fb      	str	r3, [r7, #12]
}
 800dd02:	bf00      	nop
 800dd04:	e7fe      	b.n	800dd04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dd06:	4b39      	ldr	r3, [pc, #228]	; (800ddec <xPortStartScheduler+0x12c>)
 800dd08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dd0a:	697b      	ldr	r3, [r7, #20]
 800dd0c:	781b      	ldrb	r3, [r3, #0]
 800dd0e:	b2db      	uxtb	r3, r3
 800dd10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	22ff      	movs	r2, #255	; 0xff
 800dd16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dd18:	697b      	ldr	r3, [r7, #20]
 800dd1a:	781b      	ldrb	r3, [r3, #0]
 800dd1c:	b2db      	uxtb	r3, r3
 800dd1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dd20:	78fb      	ldrb	r3, [r7, #3]
 800dd22:	b2db      	uxtb	r3, r3
 800dd24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dd28:	b2da      	uxtb	r2, r3
 800dd2a:	4b31      	ldr	r3, [pc, #196]	; (800ddf0 <xPortStartScheduler+0x130>)
 800dd2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dd2e:	4b31      	ldr	r3, [pc, #196]	; (800ddf4 <xPortStartScheduler+0x134>)
 800dd30:	2207      	movs	r2, #7
 800dd32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dd34:	e009      	b.n	800dd4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800dd36:	4b2f      	ldr	r3, [pc, #188]	; (800ddf4 <xPortStartScheduler+0x134>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	3b01      	subs	r3, #1
 800dd3c:	4a2d      	ldr	r2, [pc, #180]	; (800ddf4 <xPortStartScheduler+0x134>)
 800dd3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dd40:	78fb      	ldrb	r3, [r7, #3]
 800dd42:	b2db      	uxtb	r3, r3
 800dd44:	005b      	lsls	r3, r3, #1
 800dd46:	b2db      	uxtb	r3, r3
 800dd48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dd4a:	78fb      	ldrb	r3, [r7, #3]
 800dd4c:	b2db      	uxtb	r3, r3
 800dd4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd52:	2b80      	cmp	r3, #128	; 0x80
 800dd54:	d0ef      	beq.n	800dd36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dd56:	4b27      	ldr	r3, [pc, #156]	; (800ddf4 <xPortStartScheduler+0x134>)
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	f1c3 0307 	rsb	r3, r3, #7
 800dd5e:	2b04      	cmp	r3, #4
 800dd60:	d00a      	beq.n	800dd78 <xPortStartScheduler+0xb8>
	__asm volatile
 800dd62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd66:	f383 8811 	msr	BASEPRI, r3
 800dd6a:	f3bf 8f6f 	isb	sy
 800dd6e:	f3bf 8f4f 	dsb	sy
 800dd72:	60bb      	str	r3, [r7, #8]
}
 800dd74:	bf00      	nop
 800dd76:	e7fe      	b.n	800dd76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dd78:	4b1e      	ldr	r3, [pc, #120]	; (800ddf4 <xPortStartScheduler+0x134>)
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	021b      	lsls	r3, r3, #8
 800dd7e:	4a1d      	ldr	r2, [pc, #116]	; (800ddf4 <xPortStartScheduler+0x134>)
 800dd80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dd82:	4b1c      	ldr	r3, [pc, #112]	; (800ddf4 <xPortStartScheduler+0x134>)
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dd8a:	4a1a      	ldr	r2, [pc, #104]	; (800ddf4 <xPortStartScheduler+0x134>)
 800dd8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	b2da      	uxtb	r2, r3
 800dd92:	697b      	ldr	r3, [r7, #20]
 800dd94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dd96:	4b18      	ldr	r3, [pc, #96]	; (800ddf8 <xPortStartScheduler+0x138>)
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	4a17      	ldr	r2, [pc, #92]	; (800ddf8 <xPortStartScheduler+0x138>)
 800dd9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dda0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dda2:	4b15      	ldr	r3, [pc, #84]	; (800ddf8 <xPortStartScheduler+0x138>)
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	4a14      	ldr	r2, [pc, #80]	; (800ddf8 <xPortStartScheduler+0x138>)
 800dda8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ddac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ddae:	f000 f8dd 	bl	800df6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ddb2:	4b12      	ldr	r3, [pc, #72]	; (800ddfc <xPortStartScheduler+0x13c>)
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ddb8:	f000 f8fc 	bl	800dfb4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ddbc:	4b10      	ldr	r3, [pc, #64]	; (800de00 <xPortStartScheduler+0x140>)
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	4a0f      	ldr	r2, [pc, #60]	; (800de00 <xPortStartScheduler+0x140>)
 800ddc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ddc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ddc8:	f7ff ff66 	bl	800dc98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ddcc:	f7ff fb7e 	bl	800d4cc <vTaskSwitchContext>
	prvTaskExitError();
 800ddd0:	f7ff ff1c 	bl	800dc0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ddd4:	2300      	movs	r3, #0
}
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	3718      	adds	r7, #24
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}
 800ddde:	bf00      	nop
 800dde0:	e000ed00 	.word	0xe000ed00
 800dde4:	410fc271 	.word	0x410fc271
 800dde8:	410fc270 	.word	0x410fc270
 800ddec:	e000e400 	.word	0xe000e400
 800ddf0:	200009bc 	.word	0x200009bc
 800ddf4:	200009c0 	.word	0x200009c0
 800ddf8:	e000ed20 	.word	0xe000ed20
 800ddfc:	20000074 	.word	0x20000074
 800de00:	e000ef34 	.word	0xe000ef34

0800de04 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800de04:	b480      	push	{r7}
 800de06:	b083      	sub	sp, #12
 800de08:	af00      	add	r7, sp, #0
	__asm volatile
 800de0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de0e:	f383 8811 	msr	BASEPRI, r3
 800de12:	f3bf 8f6f 	isb	sy
 800de16:	f3bf 8f4f 	dsb	sy
 800de1a:	607b      	str	r3, [r7, #4]
}
 800de1c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800de1e:	4b0f      	ldr	r3, [pc, #60]	; (800de5c <vPortEnterCritical+0x58>)
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	3301      	adds	r3, #1
 800de24:	4a0d      	ldr	r2, [pc, #52]	; (800de5c <vPortEnterCritical+0x58>)
 800de26:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800de28:	4b0c      	ldr	r3, [pc, #48]	; (800de5c <vPortEnterCritical+0x58>)
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	2b01      	cmp	r3, #1
 800de2e:	d10f      	bne.n	800de50 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800de30:	4b0b      	ldr	r3, [pc, #44]	; (800de60 <vPortEnterCritical+0x5c>)
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	b2db      	uxtb	r3, r3
 800de36:	2b00      	cmp	r3, #0
 800de38:	d00a      	beq.n	800de50 <vPortEnterCritical+0x4c>
	__asm volatile
 800de3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de3e:	f383 8811 	msr	BASEPRI, r3
 800de42:	f3bf 8f6f 	isb	sy
 800de46:	f3bf 8f4f 	dsb	sy
 800de4a:	603b      	str	r3, [r7, #0]
}
 800de4c:	bf00      	nop
 800de4e:	e7fe      	b.n	800de4e <vPortEnterCritical+0x4a>
	}
}
 800de50:	bf00      	nop
 800de52:	370c      	adds	r7, #12
 800de54:	46bd      	mov	sp, r7
 800de56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de5a:	4770      	bx	lr
 800de5c:	20000074 	.word	0x20000074
 800de60:	e000ed04 	.word	0xe000ed04

0800de64 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800de64:	b480      	push	{r7}
 800de66:	b083      	sub	sp, #12
 800de68:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800de6a:	4b12      	ldr	r3, [pc, #72]	; (800deb4 <vPortExitCritical+0x50>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d10a      	bne.n	800de88 <vPortExitCritical+0x24>
	__asm volatile
 800de72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de76:	f383 8811 	msr	BASEPRI, r3
 800de7a:	f3bf 8f6f 	isb	sy
 800de7e:	f3bf 8f4f 	dsb	sy
 800de82:	607b      	str	r3, [r7, #4]
}
 800de84:	bf00      	nop
 800de86:	e7fe      	b.n	800de86 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800de88:	4b0a      	ldr	r3, [pc, #40]	; (800deb4 <vPortExitCritical+0x50>)
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	3b01      	subs	r3, #1
 800de8e:	4a09      	ldr	r2, [pc, #36]	; (800deb4 <vPortExitCritical+0x50>)
 800de90:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800de92:	4b08      	ldr	r3, [pc, #32]	; (800deb4 <vPortExitCritical+0x50>)
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d105      	bne.n	800dea6 <vPortExitCritical+0x42>
 800de9a:	2300      	movs	r3, #0
 800de9c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800de9e:	683b      	ldr	r3, [r7, #0]
 800dea0:	f383 8811 	msr	BASEPRI, r3
}
 800dea4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800dea6:	bf00      	nop
 800dea8:	370c      	adds	r7, #12
 800deaa:	46bd      	mov	sp, r7
 800deac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb0:	4770      	bx	lr
 800deb2:	bf00      	nop
 800deb4:	20000074 	.word	0x20000074
	...

0800dec0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dec0:	f3ef 8009 	mrs	r0, PSP
 800dec4:	f3bf 8f6f 	isb	sy
 800dec8:	4b15      	ldr	r3, [pc, #84]	; (800df20 <pxCurrentTCBConst>)
 800deca:	681a      	ldr	r2, [r3, #0]
 800decc:	f01e 0f10 	tst.w	lr, #16
 800ded0:	bf08      	it	eq
 800ded2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ded6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800deda:	6010      	str	r0, [r2, #0]
 800dedc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dee0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dee4:	f380 8811 	msr	BASEPRI, r0
 800dee8:	f3bf 8f4f 	dsb	sy
 800deec:	f3bf 8f6f 	isb	sy
 800def0:	f7ff faec 	bl	800d4cc <vTaskSwitchContext>
 800def4:	f04f 0000 	mov.w	r0, #0
 800def8:	f380 8811 	msr	BASEPRI, r0
 800defc:	bc09      	pop	{r0, r3}
 800defe:	6819      	ldr	r1, [r3, #0]
 800df00:	6808      	ldr	r0, [r1, #0]
 800df02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df06:	f01e 0f10 	tst.w	lr, #16
 800df0a:	bf08      	it	eq
 800df0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800df10:	f380 8809 	msr	PSP, r0
 800df14:	f3bf 8f6f 	isb	sy
 800df18:	4770      	bx	lr
 800df1a:	bf00      	nop
 800df1c:	f3af 8000 	nop.w

0800df20 <pxCurrentTCBConst>:
 800df20:	20000890 	.word	0x20000890
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800df24:	bf00      	nop
 800df26:	bf00      	nop

0800df28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b082      	sub	sp, #8
 800df2c:	af00      	add	r7, sp, #0
	__asm volatile
 800df2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df32:	f383 8811 	msr	BASEPRI, r3
 800df36:	f3bf 8f6f 	isb	sy
 800df3a:	f3bf 8f4f 	dsb	sy
 800df3e:	607b      	str	r3, [r7, #4]
}
 800df40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800df42:	f7ff fa0b 	bl	800d35c <xTaskIncrementTick>
 800df46:	4603      	mov	r3, r0
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d003      	beq.n	800df54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800df4c:	4b06      	ldr	r3, [pc, #24]	; (800df68 <SysTick_Handler+0x40>)
 800df4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df52:	601a      	str	r2, [r3, #0]
 800df54:	2300      	movs	r3, #0
 800df56:	603b      	str	r3, [r7, #0]
	__asm volatile
 800df58:	683b      	ldr	r3, [r7, #0]
 800df5a:	f383 8811 	msr	BASEPRI, r3
}
 800df5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800df60:	bf00      	nop
 800df62:	3708      	adds	r7, #8
 800df64:	46bd      	mov	sp, r7
 800df66:	bd80      	pop	{r7, pc}
 800df68:	e000ed04 	.word	0xe000ed04

0800df6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800df6c:	b480      	push	{r7}
 800df6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800df70:	4b0b      	ldr	r3, [pc, #44]	; (800dfa0 <vPortSetupTimerInterrupt+0x34>)
 800df72:	2200      	movs	r2, #0
 800df74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800df76:	4b0b      	ldr	r3, [pc, #44]	; (800dfa4 <vPortSetupTimerInterrupt+0x38>)
 800df78:	2200      	movs	r2, #0
 800df7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800df7c:	4b0a      	ldr	r3, [pc, #40]	; (800dfa8 <vPortSetupTimerInterrupt+0x3c>)
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	4a0a      	ldr	r2, [pc, #40]	; (800dfac <vPortSetupTimerInterrupt+0x40>)
 800df82:	fba2 2303 	umull	r2, r3, r2, r3
 800df86:	099b      	lsrs	r3, r3, #6
 800df88:	4a09      	ldr	r2, [pc, #36]	; (800dfb0 <vPortSetupTimerInterrupt+0x44>)
 800df8a:	3b01      	subs	r3, #1
 800df8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800df8e:	4b04      	ldr	r3, [pc, #16]	; (800dfa0 <vPortSetupTimerInterrupt+0x34>)
 800df90:	2207      	movs	r2, #7
 800df92:	601a      	str	r2, [r3, #0]
}
 800df94:	bf00      	nop
 800df96:	46bd      	mov	sp, r7
 800df98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9c:	4770      	bx	lr
 800df9e:	bf00      	nop
 800dfa0:	e000e010 	.word	0xe000e010
 800dfa4:	e000e018 	.word	0xe000e018
 800dfa8:	20000000 	.word	0x20000000
 800dfac:	10624dd3 	.word	0x10624dd3
 800dfb0:	e000e014 	.word	0xe000e014

0800dfb4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dfb4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dfc4 <vPortEnableVFP+0x10>
 800dfb8:	6801      	ldr	r1, [r0, #0]
 800dfba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dfbe:	6001      	str	r1, [r0, #0]
 800dfc0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dfc2:	bf00      	nop
 800dfc4:	e000ed88 	.word	0xe000ed88

0800dfc8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dfc8:	b480      	push	{r7}
 800dfca:	b085      	sub	sp, #20
 800dfcc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800dfce:	f3ef 8305 	mrs	r3, IPSR
 800dfd2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	2b0f      	cmp	r3, #15
 800dfd8:	d914      	bls.n	800e004 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800dfda:	4a17      	ldr	r2, [pc, #92]	; (800e038 <vPortValidateInterruptPriority+0x70>)
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	4413      	add	r3, r2
 800dfe0:	781b      	ldrb	r3, [r3, #0]
 800dfe2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dfe4:	4b15      	ldr	r3, [pc, #84]	; (800e03c <vPortValidateInterruptPriority+0x74>)
 800dfe6:	781b      	ldrb	r3, [r3, #0]
 800dfe8:	7afa      	ldrb	r2, [r7, #11]
 800dfea:	429a      	cmp	r2, r3
 800dfec:	d20a      	bcs.n	800e004 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800dfee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dff2:	f383 8811 	msr	BASEPRI, r3
 800dff6:	f3bf 8f6f 	isb	sy
 800dffa:	f3bf 8f4f 	dsb	sy
 800dffe:	607b      	str	r3, [r7, #4]
}
 800e000:	bf00      	nop
 800e002:	e7fe      	b.n	800e002 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e004:	4b0e      	ldr	r3, [pc, #56]	; (800e040 <vPortValidateInterruptPriority+0x78>)
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e00c:	4b0d      	ldr	r3, [pc, #52]	; (800e044 <vPortValidateInterruptPriority+0x7c>)
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	429a      	cmp	r2, r3
 800e012:	d90a      	bls.n	800e02a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e014:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e018:	f383 8811 	msr	BASEPRI, r3
 800e01c:	f3bf 8f6f 	isb	sy
 800e020:	f3bf 8f4f 	dsb	sy
 800e024:	603b      	str	r3, [r7, #0]
}
 800e026:	bf00      	nop
 800e028:	e7fe      	b.n	800e028 <vPortValidateInterruptPriority+0x60>
	}
 800e02a:	bf00      	nop
 800e02c:	3714      	adds	r7, #20
 800e02e:	46bd      	mov	sp, r7
 800e030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e034:	4770      	bx	lr
 800e036:	bf00      	nop
 800e038:	e000e3f0 	.word	0xe000e3f0
 800e03c:	200009bc 	.word	0x200009bc
 800e040:	e000ed0c 	.word	0xe000ed0c
 800e044:	200009c0 	.word	0x200009c0

0800e048 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b08a      	sub	sp, #40	; 0x28
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e050:	2300      	movs	r3, #0
 800e052:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e054:	f7ff f8d8 	bl	800d208 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e058:	4b5d      	ldr	r3, [pc, #372]	; (800e1d0 <pvPortMalloc+0x188>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d101      	bne.n	800e064 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e060:	f000 f924 	bl	800e2ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e064:	4b5b      	ldr	r3, [pc, #364]	; (800e1d4 <pvPortMalloc+0x18c>)
 800e066:	681a      	ldr	r2, [r3, #0]
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	4013      	ands	r3, r2
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	f040 8093 	bne.w	800e198 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d01d      	beq.n	800e0b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e078:	2208      	movs	r2, #8
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	4413      	add	r3, r2
 800e07e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	f003 0307 	and.w	r3, r3, #7
 800e086:	2b00      	cmp	r3, #0
 800e088:	d014      	beq.n	800e0b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	f023 0307 	bic.w	r3, r3, #7
 800e090:	3308      	adds	r3, #8
 800e092:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f003 0307 	and.w	r3, r3, #7
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d00a      	beq.n	800e0b4 <pvPortMalloc+0x6c>
	__asm volatile
 800e09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0a2:	f383 8811 	msr	BASEPRI, r3
 800e0a6:	f3bf 8f6f 	isb	sy
 800e0aa:	f3bf 8f4f 	dsb	sy
 800e0ae:	617b      	str	r3, [r7, #20]
}
 800e0b0:	bf00      	nop
 800e0b2:	e7fe      	b.n	800e0b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d06e      	beq.n	800e198 <pvPortMalloc+0x150>
 800e0ba:	4b47      	ldr	r3, [pc, #284]	; (800e1d8 <pvPortMalloc+0x190>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	687a      	ldr	r2, [r7, #4]
 800e0c0:	429a      	cmp	r2, r3
 800e0c2:	d869      	bhi.n	800e198 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e0c4:	4b45      	ldr	r3, [pc, #276]	; (800e1dc <pvPortMalloc+0x194>)
 800e0c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e0c8:	4b44      	ldr	r3, [pc, #272]	; (800e1dc <pvPortMalloc+0x194>)
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e0ce:	e004      	b.n	800e0da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e0d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d6:	681b      	ldr	r3, [r3, #0]
 800e0d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0dc:	685b      	ldr	r3, [r3, #4]
 800e0de:	687a      	ldr	r2, [r7, #4]
 800e0e0:	429a      	cmp	r2, r3
 800e0e2:	d903      	bls.n	800e0ec <pvPortMalloc+0xa4>
 800e0e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d1f1      	bne.n	800e0d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e0ec:	4b38      	ldr	r3, [pc, #224]	; (800e1d0 <pvPortMalloc+0x188>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e0f2:	429a      	cmp	r2, r3
 800e0f4:	d050      	beq.n	800e198 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e0f6:	6a3b      	ldr	r3, [r7, #32]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	2208      	movs	r2, #8
 800e0fc:	4413      	add	r3, r2
 800e0fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e102:	681a      	ldr	r2, [r3, #0]
 800e104:	6a3b      	ldr	r3, [r7, #32]
 800e106:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e10a:	685a      	ldr	r2, [r3, #4]
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	1ad2      	subs	r2, r2, r3
 800e110:	2308      	movs	r3, #8
 800e112:	005b      	lsls	r3, r3, #1
 800e114:	429a      	cmp	r2, r3
 800e116:	d91f      	bls.n	800e158 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	4413      	add	r3, r2
 800e11e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e120:	69bb      	ldr	r3, [r7, #24]
 800e122:	f003 0307 	and.w	r3, r3, #7
 800e126:	2b00      	cmp	r3, #0
 800e128:	d00a      	beq.n	800e140 <pvPortMalloc+0xf8>
	__asm volatile
 800e12a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e12e:	f383 8811 	msr	BASEPRI, r3
 800e132:	f3bf 8f6f 	isb	sy
 800e136:	f3bf 8f4f 	dsb	sy
 800e13a:	613b      	str	r3, [r7, #16]
}
 800e13c:	bf00      	nop
 800e13e:	e7fe      	b.n	800e13e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e142:	685a      	ldr	r2, [r3, #4]
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	1ad2      	subs	r2, r2, r3
 800e148:	69bb      	ldr	r3, [r7, #24]
 800e14a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e14e:	687a      	ldr	r2, [r7, #4]
 800e150:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e152:	69b8      	ldr	r0, [r7, #24]
 800e154:	f000 f90c 	bl	800e370 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e158:	4b1f      	ldr	r3, [pc, #124]	; (800e1d8 <pvPortMalloc+0x190>)
 800e15a:	681a      	ldr	r2, [r3, #0]
 800e15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e15e:	685b      	ldr	r3, [r3, #4]
 800e160:	1ad3      	subs	r3, r2, r3
 800e162:	4a1d      	ldr	r2, [pc, #116]	; (800e1d8 <pvPortMalloc+0x190>)
 800e164:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e166:	4b1c      	ldr	r3, [pc, #112]	; (800e1d8 <pvPortMalloc+0x190>)
 800e168:	681a      	ldr	r2, [r3, #0]
 800e16a:	4b1d      	ldr	r3, [pc, #116]	; (800e1e0 <pvPortMalloc+0x198>)
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	429a      	cmp	r2, r3
 800e170:	d203      	bcs.n	800e17a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e172:	4b19      	ldr	r3, [pc, #100]	; (800e1d8 <pvPortMalloc+0x190>)
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	4a1a      	ldr	r2, [pc, #104]	; (800e1e0 <pvPortMalloc+0x198>)
 800e178:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e17c:	685a      	ldr	r2, [r3, #4]
 800e17e:	4b15      	ldr	r3, [pc, #84]	; (800e1d4 <pvPortMalloc+0x18c>)
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	431a      	orrs	r2, r3
 800e184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e186:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e18a:	2200      	movs	r2, #0
 800e18c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e18e:	4b15      	ldr	r3, [pc, #84]	; (800e1e4 <pvPortMalloc+0x19c>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	3301      	adds	r3, #1
 800e194:	4a13      	ldr	r2, [pc, #76]	; (800e1e4 <pvPortMalloc+0x19c>)
 800e196:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e198:	f7ff f844 	bl	800d224 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800e19c:	69fb      	ldr	r3, [r7, #28]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d101      	bne.n	800e1a6 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800e1a2:	f7f2 fa09 	bl	80005b8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e1a6:	69fb      	ldr	r3, [r7, #28]
 800e1a8:	f003 0307 	and.w	r3, r3, #7
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d00a      	beq.n	800e1c6 <pvPortMalloc+0x17e>
	__asm volatile
 800e1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b4:	f383 8811 	msr	BASEPRI, r3
 800e1b8:	f3bf 8f6f 	isb	sy
 800e1bc:	f3bf 8f4f 	dsb	sy
 800e1c0:	60fb      	str	r3, [r7, #12]
}
 800e1c2:	bf00      	nop
 800e1c4:	e7fe      	b.n	800e1c4 <pvPortMalloc+0x17c>
	return pvReturn;
 800e1c6:	69fb      	ldr	r3, [r7, #28]
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	3728      	adds	r7, #40	; 0x28
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}
 800e1d0:	200089cc 	.word	0x200089cc
 800e1d4:	200089e0 	.word	0x200089e0
 800e1d8:	200089d0 	.word	0x200089d0
 800e1dc:	200089c4 	.word	0x200089c4
 800e1e0:	200089d4 	.word	0x200089d4
 800e1e4:	200089d8 	.word	0x200089d8

0800e1e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b086      	sub	sp, #24
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d04d      	beq.n	800e296 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e1fa:	2308      	movs	r3, #8
 800e1fc:	425b      	negs	r3, r3
 800e1fe:	697a      	ldr	r2, [r7, #20]
 800e200:	4413      	add	r3, r2
 800e202:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e204:	697b      	ldr	r3, [r7, #20]
 800e206:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e208:	693b      	ldr	r3, [r7, #16]
 800e20a:	685a      	ldr	r2, [r3, #4]
 800e20c:	4b24      	ldr	r3, [pc, #144]	; (800e2a0 <vPortFree+0xb8>)
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	4013      	ands	r3, r2
 800e212:	2b00      	cmp	r3, #0
 800e214:	d10a      	bne.n	800e22c <vPortFree+0x44>
	__asm volatile
 800e216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e21a:	f383 8811 	msr	BASEPRI, r3
 800e21e:	f3bf 8f6f 	isb	sy
 800e222:	f3bf 8f4f 	dsb	sy
 800e226:	60fb      	str	r3, [r7, #12]
}
 800e228:	bf00      	nop
 800e22a:	e7fe      	b.n	800e22a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e22c:	693b      	ldr	r3, [r7, #16]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	2b00      	cmp	r3, #0
 800e232:	d00a      	beq.n	800e24a <vPortFree+0x62>
	__asm volatile
 800e234:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e238:	f383 8811 	msr	BASEPRI, r3
 800e23c:	f3bf 8f6f 	isb	sy
 800e240:	f3bf 8f4f 	dsb	sy
 800e244:	60bb      	str	r3, [r7, #8]
}
 800e246:	bf00      	nop
 800e248:	e7fe      	b.n	800e248 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e24a:	693b      	ldr	r3, [r7, #16]
 800e24c:	685a      	ldr	r2, [r3, #4]
 800e24e:	4b14      	ldr	r3, [pc, #80]	; (800e2a0 <vPortFree+0xb8>)
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	4013      	ands	r3, r2
 800e254:	2b00      	cmp	r3, #0
 800e256:	d01e      	beq.n	800e296 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e258:	693b      	ldr	r3, [r7, #16]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d11a      	bne.n	800e296 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e260:	693b      	ldr	r3, [r7, #16]
 800e262:	685a      	ldr	r2, [r3, #4]
 800e264:	4b0e      	ldr	r3, [pc, #56]	; (800e2a0 <vPortFree+0xb8>)
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	43db      	mvns	r3, r3
 800e26a:	401a      	ands	r2, r3
 800e26c:	693b      	ldr	r3, [r7, #16]
 800e26e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e270:	f7fe ffca 	bl	800d208 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e274:	693b      	ldr	r3, [r7, #16]
 800e276:	685a      	ldr	r2, [r3, #4]
 800e278:	4b0a      	ldr	r3, [pc, #40]	; (800e2a4 <vPortFree+0xbc>)
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	4413      	add	r3, r2
 800e27e:	4a09      	ldr	r2, [pc, #36]	; (800e2a4 <vPortFree+0xbc>)
 800e280:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e282:	6938      	ldr	r0, [r7, #16]
 800e284:	f000 f874 	bl	800e370 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e288:	4b07      	ldr	r3, [pc, #28]	; (800e2a8 <vPortFree+0xc0>)
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	3301      	adds	r3, #1
 800e28e:	4a06      	ldr	r2, [pc, #24]	; (800e2a8 <vPortFree+0xc0>)
 800e290:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e292:	f7fe ffc7 	bl	800d224 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e296:	bf00      	nop
 800e298:	3718      	adds	r7, #24
 800e29a:	46bd      	mov	sp, r7
 800e29c:	bd80      	pop	{r7, pc}
 800e29e:	bf00      	nop
 800e2a0:	200089e0 	.word	0x200089e0
 800e2a4:	200089d0 	.word	0x200089d0
 800e2a8:	200089dc 	.word	0x200089dc

0800e2ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e2ac:	b480      	push	{r7}
 800e2ae:	b085      	sub	sp, #20
 800e2b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e2b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e2b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e2b8:	4b27      	ldr	r3, [pc, #156]	; (800e358 <prvHeapInit+0xac>)
 800e2ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	f003 0307 	and.w	r3, r3, #7
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d00c      	beq.n	800e2e0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e2c6:	68fb      	ldr	r3, [r7, #12]
 800e2c8:	3307      	adds	r3, #7
 800e2ca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	f023 0307 	bic.w	r3, r3, #7
 800e2d2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e2d4:	68ba      	ldr	r2, [r7, #8]
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	1ad3      	subs	r3, r2, r3
 800e2da:	4a1f      	ldr	r2, [pc, #124]	; (800e358 <prvHeapInit+0xac>)
 800e2dc:	4413      	add	r3, r2
 800e2de:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e2e4:	4a1d      	ldr	r2, [pc, #116]	; (800e35c <prvHeapInit+0xb0>)
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e2ea:	4b1c      	ldr	r3, [pc, #112]	; (800e35c <prvHeapInit+0xb0>)
 800e2ec:	2200      	movs	r2, #0
 800e2ee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	68ba      	ldr	r2, [r7, #8]
 800e2f4:	4413      	add	r3, r2
 800e2f6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e2f8:	2208      	movs	r2, #8
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	1a9b      	subs	r3, r3, r2
 800e2fe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	f023 0307 	bic.w	r3, r3, #7
 800e306:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e308:	68fb      	ldr	r3, [r7, #12]
 800e30a:	4a15      	ldr	r2, [pc, #84]	; (800e360 <prvHeapInit+0xb4>)
 800e30c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e30e:	4b14      	ldr	r3, [pc, #80]	; (800e360 <prvHeapInit+0xb4>)
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	2200      	movs	r2, #0
 800e314:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e316:	4b12      	ldr	r3, [pc, #72]	; (800e360 <prvHeapInit+0xb4>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	2200      	movs	r2, #0
 800e31c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	68fa      	ldr	r2, [r7, #12]
 800e326:	1ad2      	subs	r2, r2, r3
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e32c:	4b0c      	ldr	r3, [pc, #48]	; (800e360 <prvHeapInit+0xb4>)
 800e32e:	681a      	ldr	r2, [r3, #0]
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e334:	683b      	ldr	r3, [r7, #0]
 800e336:	685b      	ldr	r3, [r3, #4]
 800e338:	4a0a      	ldr	r2, [pc, #40]	; (800e364 <prvHeapInit+0xb8>)
 800e33a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e33c:	683b      	ldr	r3, [r7, #0]
 800e33e:	685b      	ldr	r3, [r3, #4]
 800e340:	4a09      	ldr	r2, [pc, #36]	; (800e368 <prvHeapInit+0xbc>)
 800e342:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e344:	4b09      	ldr	r3, [pc, #36]	; (800e36c <prvHeapInit+0xc0>)
 800e346:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e34a:	601a      	str	r2, [r3, #0]
}
 800e34c:	bf00      	nop
 800e34e:	3714      	adds	r7, #20
 800e350:	46bd      	mov	sp, r7
 800e352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e356:	4770      	bx	lr
 800e358:	200009c4 	.word	0x200009c4
 800e35c:	200089c4 	.word	0x200089c4
 800e360:	200089cc 	.word	0x200089cc
 800e364:	200089d4 	.word	0x200089d4
 800e368:	200089d0 	.word	0x200089d0
 800e36c:	200089e0 	.word	0x200089e0

0800e370 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e370:	b480      	push	{r7}
 800e372:	b085      	sub	sp, #20
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e378:	4b28      	ldr	r3, [pc, #160]	; (800e41c <prvInsertBlockIntoFreeList+0xac>)
 800e37a:	60fb      	str	r3, [r7, #12]
 800e37c:	e002      	b.n	800e384 <prvInsertBlockIntoFreeList+0x14>
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	681b      	ldr	r3, [r3, #0]
 800e382:	60fb      	str	r3, [r7, #12]
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	687a      	ldr	r2, [r7, #4]
 800e38a:	429a      	cmp	r2, r3
 800e38c:	d8f7      	bhi.n	800e37e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	685b      	ldr	r3, [r3, #4]
 800e396:	68ba      	ldr	r2, [r7, #8]
 800e398:	4413      	add	r3, r2
 800e39a:	687a      	ldr	r2, [r7, #4]
 800e39c:	429a      	cmp	r2, r3
 800e39e:	d108      	bne.n	800e3b2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	685a      	ldr	r2, [r3, #4]
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	685b      	ldr	r3, [r3, #4]
 800e3a8:	441a      	add	r2, r3
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	685b      	ldr	r3, [r3, #4]
 800e3ba:	68ba      	ldr	r2, [r7, #8]
 800e3bc:	441a      	add	r2, r3
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	429a      	cmp	r2, r3
 800e3c4:	d118      	bne.n	800e3f8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	681a      	ldr	r2, [r3, #0]
 800e3ca:	4b15      	ldr	r3, [pc, #84]	; (800e420 <prvInsertBlockIntoFreeList+0xb0>)
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	429a      	cmp	r2, r3
 800e3d0:	d00d      	beq.n	800e3ee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	685a      	ldr	r2, [r3, #4]
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	685b      	ldr	r3, [r3, #4]
 800e3dc:	441a      	add	r2, r3
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	681a      	ldr	r2, [r3, #0]
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	601a      	str	r2, [r3, #0]
 800e3ec:	e008      	b.n	800e400 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e3ee:	4b0c      	ldr	r3, [pc, #48]	; (800e420 <prvInsertBlockIntoFreeList+0xb0>)
 800e3f0:	681a      	ldr	r2, [r3, #0]
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	601a      	str	r2, [r3, #0]
 800e3f6:	e003      	b.n	800e400 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	681a      	ldr	r2, [r3, #0]
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e400:	68fa      	ldr	r2, [r7, #12]
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	429a      	cmp	r2, r3
 800e406:	d002      	beq.n	800e40e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	687a      	ldr	r2, [r7, #4]
 800e40c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e40e:	bf00      	nop
 800e410:	3714      	adds	r7, #20
 800e412:	46bd      	mov	sp, r7
 800e414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e418:	4770      	bx	lr
 800e41a:	bf00      	nop
 800e41c:	200089c4 	.word	0x200089c4
 800e420:	200089cc 	.word	0x200089cc

0800e424 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800e428:	2200      	movs	r2, #0
 800e42a:	490e      	ldr	r1, [pc, #56]	; (800e464 <MX_USB_HOST_Init+0x40>)
 800e42c:	480e      	ldr	r0, [pc, #56]	; (800e468 <MX_USB_HOST_Init+0x44>)
 800e42e:	f7fb fecf 	bl	800a1d0 <USBH_Init>
 800e432:	4603      	mov	r3, r0
 800e434:	2b00      	cmp	r3, #0
 800e436:	d001      	beq.n	800e43c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800e438:	f7f2 fd60 	bl	8000efc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800e43c:	490b      	ldr	r1, [pc, #44]	; (800e46c <MX_USB_HOST_Init+0x48>)
 800e43e:	480a      	ldr	r0, [pc, #40]	; (800e468 <MX_USB_HOST_Init+0x44>)
 800e440:	f7fb ff7c 	bl	800a33c <USBH_RegisterClass>
 800e444:	4603      	mov	r3, r0
 800e446:	2b00      	cmp	r3, #0
 800e448:	d001      	beq.n	800e44e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800e44a:	f7f2 fd57 	bl	8000efc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800e44e:	4806      	ldr	r0, [pc, #24]	; (800e468 <MX_USB_HOST_Init+0x44>)
 800e450:	f7fc f800 	bl	800a454 <USBH_Start>
 800e454:	4603      	mov	r3, r0
 800e456:	2b00      	cmp	r3, #0
 800e458:	d001      	beq.n	800e45e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800e45a:	f7f2 fd4f 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800e45e:	bf00      	nop
 800e460:	bd80      	pop	{r7, pc}
 800e462:	bf00      	nop
 800e464:	0800e471 	.word	0x0800e471
 800e468:	200089e4 	.word	0x200089e4
 800e46c:	20000054 	.word	0x20000054

0800e470 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800e470:	b480      	push	{r7}
 800e472:	b083      	sub	sp, #12
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
 800e478:	460b      	mov	r3, r1
 800e47a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800e47c:	78fb      	ldrb	r3, [r7, #3]
 800e47e:	3b01      	subs	r3, #1
 800e480:	2b04      	cmp	r3, #4
 800e482:	d819      	bhi.n	800e4b8 <USBH_UserProcess+0x48>
 800e484:	a201      	add	r2, pc, #4	; (adr r2, 800e48c <USBH_UserProcess+0x1c>)
 800e486:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e48a:	bf00      	nop
 800e48c:	0800e4b9 	.word	0x0800e4b9
 800e490:	0800e4a9 	.word	0x0800e4a9
 800e494:	0800e4b9 	.word	0x0800e4b9
 800e498:	0800e4b1 	.word	0x0800e4b1
 800e49c:	0800e4a1 	.word	0x0800e4a1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e4a0:	4b09      	ldr	r3, [pc, #36]	; (800e4c8 <USBH_UserProcess+0x58>)
 800e4a2:	2203      	movs	r2, #3
 800e4a4:	701a      	strb	r2, [r3, #0]
  break;
 800e4a6:	e008      	b.n	800e4ba <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e4a8:	4b07      	ldr	r3, [pc, #28]	; (800e4c8 <USBH_UserProcess+0x58>)
 800e4aa:	2202      	movs	r2, #2
 800e4ac:	701a      	strb	r2, [r3, #0]
  break;
 800e4ae:	e004      	b.n	800e4ba <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e4b0:	4b05      	ldr	r3, [pc, #20]	; (800e4c8 <USBH_UserProcess+0x58>)
 800e4b2:	2201      	movs	r2, #1
 800e4b4:	701a      	strb	r2, [r3, #0]
  break;
 800e4b6:	e000      	b.n	800e4ba <USBH_UserProcess+0x4a>

  default:
  break;
 800e4b8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e4ba:	bf00      	nop
 800e4bc:	370c      	adds	r7, #12
 800e4be:	46bd      	mov	sp, r7
 800e4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4c4:	4770      	bx	lr
 800e4c6:	bf00      	nop
 800e4c8:	20008dc8 	.word	0x20008dc8

0800e4cc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800e4cc:	b580      	push	{r7, lr}
 800e4ce:	b08a      	sub	sp, #40	; 0x28
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e4d4:	f107 0314 	add.w	r3, r7, #20
 800e4d8:	2200      	movs	r2, #0
 800e4da:	601a      	str	r2, [r3, #0]
 800e4dc:	605a      	str	r2, [r3, #4]
 800e4de:	609a      	str	r2, [r3, #8]
 800e4e0:	60da      	str	r2, [r3, #12]
 800e4e2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	4a24      	ldr	r2, [pc, #144]	; (800e57c <HAL_HCD_MspInit+0xb0>)
 800e4ea:	4293      	cmp	r3, r2
 800e4ec:	d141      	bne.n	800e572 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	613b      	str	r3, [r7, #16]
 800e4f2:	4b23      	ldr	r3, [pc, #140]	; (800e580 <HAL_HCD_MspInit+0xb4>)
 800e4f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4f6:	4a22      	ldr	r2, [pc, #136]	; (800e580 <HAL_HCD_MspInit+0xb4>)
 800e4f8:	f043 0302 	orr.w	r3, r3, #2
 800e4fc:	6313      	str	r3, [r2, #48]	; 0x30
 800e4fe:	4b20      	ldr	r3, [pc, #128]	; (800e580 <HAL_HCD_MspInit+0xb4>)
 800e500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e502:	f003 0302 	and.w	r3, r3, #2
 800e506:	613b      	str	r3, [r7, #16]
 800e508:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800e50a:	f44f 4350 	mov.w	r3, #53248	; 0xd000
 800e50e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e510:	2302      	movs	r3, #2
 800e512:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e514:	2300      	movs	r3, #0
 800e516:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e518:	2300      	movs	r3, #0
 800e51a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800e51c:	230c      	movs	r3, #12
 800e51e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e520:	f107 0314 	add.w	r3, r7, #20
 800e524:	4619      	mov	r1, r3
 800e526:	4817      	ldr	r0, [pc, #92]	; (800e584 <HAL_HCD_MspInit+0xb8>)
 800e528:	f7f4 fd4c 	bl	8002fc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800e52c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800e532:	2300      	movs	r3, #0
 800e534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e536:	2300      	movs	r3, #0
 800e538:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800e53a:	f107 0314 	add.w	r3, r7, #20
 800e53e:	4619      	mov	r1, r3
 800e540:	4810      	ldr	r0, [pc, #64]	; (800e584 <HAL_HCD_MspInit+0xb8>)
 800e542:	f7f4 fd3f 	bl	8002fc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800e546:	2300      	movs	r3, #0
 800e548:	60fb      	str	r3, [r7, #12]
 800e54a:	4b0d      	ldr	r3, [pc, #52]	; (800e580 <HAL_HCD_MspInit+0xb4>)
 800e54c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e54e:	4a0c      	ldr	r2, [pc, #48]	; (800e580 <HAL_HCD_MspInit+0xb4>)
 800e550:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e554:	6313      	str	r3, [r2, #48]	; 0x30
 800e556:	4b0a      	ldr	r3, [pc, #40]	; (800e580 <HAL_HCD_MspInit+0xb4>)
 800e558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e55a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e55e:	60fb      	str	r3, [r7, #12]
 800e560:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 5, 0);
 800e562:	2200      	movs	r2, #0
 800e564:	2105      	movs	r1, #5
 800e566:	204d      	movs	r0, #77	; 0x4d
 800e568:	f7f4 f93c 	bl	80027e4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800e56c:	204d      	movs	r0, #77	; 0x4d
 800e56e:	f7f4 f955 	bl	800281c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800e572:	bf00      	nop
 800e574:	3728      	adds	r7, #40	; 0x28
 800e576:	46bd      	mov	sp, r7
 800e578:	bd80      	pop	{r7, pc}
 800e57a:	bf00      	nop
 800e57c:	40040000 	.word	0x40040000
 800e580:	40023800 	.word	0x40023800
 800e584:	40020400 	.word	0x40020400

0800e588 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b082      	sub	sp, #8
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e596:	4618      	mov	r0, r3
 800e598:	f7fc fc13 	bl	800adc2 <USBH_LL_IncTimer>
}
 800e59c:	bf00      	nop
 800e59e:	3708      	adds	r7, #8
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}

0800e5a4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e5a4:	b580      	push	{r7, lr}
 800e5a6:	b082      	sub	sp, #8
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f7fc fc57 	bl	800ae66 <USBH_LL_Connect>
}
 800e5b8:	bf00      	nop
 800e5ba:	3708      	adds	r7, #8
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bd80      	pop	{r7, pc}

0800e5c0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b082      	sub	sp, #8
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	f7fc fc6c 	bl	800aeac <USBH_LL_Disconnect>
}
 800e5d4:	bf00      	nop
 800e5d6:	3708      	adds	r7, #8
 800e5d8:	46bd      	mov	sp, r7
 800e5da:	bd80      	pop	{r7, pc}

0800e5dc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b082      	sub	sp, #8
 800e5e0:	af00      	add	r7, sp, #0
 800e5e2:	6078      	str	r0, [r7, #4]
 800e5e4:	460b      	mov	r3, r1
 800e5e6:	70fb      	strb	r3, [r7, #3]
 800e5e8:	4613      	mov	r3, r2
 800e5ea:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f7fc fca1 	bl	800af3a <USBH_LL_NotifyURBChange>
#endif
}
 800e5f8:	bf00      	nop
 800e5fa:	3708      	adds	r7, #8
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	bd80      	pop	{r7, pc}

0800e600 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	b082      	sub	sp, #8
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e60e:	4618      	mov	r0, r3
 800e610:	f7fc fc01 	bl	800ae16 <USBH_LL_PortEnabled>
}
 800e614:	bf00      	nop
 800e616:	3708      	adds	r7, #8
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}

0800e61c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b082      	sub	sp, #8
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e62a:	4618      	mov	r0, r3
 800e62c:	f7fc fc0d 	bl	800ae4a <USBH_LL_PortDisabled>
}
 800e630:	bf00      	nop
 800e632:	3708      	adds	r7, #8
 800e634:	46bd      	mov	sp, r7
 800e636:	bd80      	pop	{r7, pc}

0800e638 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800e638:	b580      	push	{r7, lr}
 800e63a:	b082      	sub	sp, #8
 800e63c:	af00      	add	r7, sp, #0
 800e63e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e646:	2b00      	cmp	r3, #0
 800e648:	d132      	bne.n	800e6b0 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800e64a:	4a1c      	ldr	r2, [pc, #112]	; (800e6bc <USBH_LL_Init+0x84>)
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_HS;
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	4a19      	ldr	r2, [pc, #100]	; (800e6bc <USBH_LL_Init+0x84>)
 800e656:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800e65a:	4b18      	ldr	r3, [pc, #96]	; (800e6bc <USBH_LL_Init+0x84>)
 800e65c:	4a18      	ldr	r2, [pc, #96]	; (800e6c0 <USBH_LL_Init+0x88>)
 800e65e:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800e660:	4b16      	ldr	r3, [pc, #88]	; (800e6bc <USBH_LL_Init+0x84>)
 800e662:	220c      	movs	r2, #12
 800e664:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800e666:	4b15      	ldr	r3, [pc, #84]	; (800e6bc <USBH_LL_Init+0x84>)
 800e668:	2201      	movs	r2, #1
 800e66a:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800e66c:	4b13      	ldr	r3, [pc, #76]	; (800e6bc <USBH_LL_Init+0x84>)
 800e66e:	2200      	movs	r2, #0
 800e670:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800e672:	4b12      	ldr	r3, [pc, #72]	; (800e6bc <USBH_LL_Init+0x84>)
 800e674:	2202      	movs	r2, #2
 800e676:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800e678:	4b10      	ldr	r3, [pc, #64]	; (800e6bc <USBH_LL_Init+0x84>)
 800e67a:	2200      	movs	r2, #0
 800e67c:	61da      	str	r2, [r3, #28]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800e67e:	4b0f      	ldr	r3, [pc, #60]	; (800e6bc <USBH_LL_Init+0x84>)
 800e680:	2200      	movs	r2, #0
 800e682:	621a      	str	r2, [r3, #32]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800e684:	4b0d      	ldr	r3, [pc, #52]	; (800e6bc <USBH_LL_Init+0x84>)
 800e686:	2200      	movs	r2, #0
 800e688:	62da      	str	r2, [r3, #44]	; 0x2c
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800e68a:	4b0c      	ldr	r3, [pc, #48]	; (800e6bc <USBH_LL_Init+0x84>)
 800e68c:	2200      	movs	r2, #0
 800e68e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800e690:	480a      	ldr	r0, [pc, #40]	; (800e6bc <USBH_LL_Init+0x84>)
 800e692:	f7f4 ff68 	bl	8003566 <HAL_HCD_Init>
 800e696:	4603      	mov	r3, r0
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d001      	beq.n	800e6a0 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800e69c:	f7f2 fc2e 	bl	8000efc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800e6a0:	4806      	ldr	r0, [pc, #24]	; (800e6bc <USBH_LL_Init+0x84>)
 800e6a2:	f7f5 fb4c 	bl	8003d3e <HAL_HCD_GetCurrentFrame>
 800e6a6:	4603      	mov	r3, r0
 800e6a8:	4619      	mov	r1, r3
 800e6aa:	6878      	ldr	r0, [r7, #4]
 800e6ac:	f7fc fb7a 	bl	800ada4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800e6b0:	2300      	movs	r3, #0
}
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	3708      	adds	r7, #8
 800e6b6:	46bd      	mov	sp, r7
 800e6b8:	bd80      	pop	{r7, pc}
 800e6ba:	bf00      	nop
 800e6bc:	20008dcc 	.word	0x20008dcc
 800e6c0:	40040000 	.word	0x40040000

0800e6c4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b084      	sub	sp, #16
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e6da:	4618      	mov	r0, r3
 800e6dc:	f7f5 fab9 	bl	8003c52 <HAL_HCD_Start>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e6e4:	7bfb      	ldrb	r3, [r7, #15]
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	f000 f95c 	bl	800e9a4 <USBH_Get_USB_Status>
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e6f0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e6f2:	4618      	mov	r0, r3
 800e6f4:	3710      	adds	r7, #16
 800e6f6:	46bd      	mov	sp, r7
 800e6f8:	bd80      	pop	{r7, pc}

0800e6fa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800e6fa:	b580      	push	{r7, lr}
 800e6fc:	b084      	sub	sp, #16
 800e6fe:	af00      	add	r7, sp, #0
 800e700:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e702:	2300      	movs	r3, #0
 800e704:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e706:	2300      	movs	r3, #0
 800e708:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e710:	4618      	mov	r0, r3
 800e712:	f7f5 fac1 	bl	8003c98 <HAL_HCD_Stop>
 800e716:	4603      	mov	r3, r0
 800e718:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e71a:	7bfb      	ldrb	r3, [r7, #15]
 800e71c:	4618      	mov	r0, r3
 800e71e:	f000 f941 	bl	800e9a4 <USBH_Get_USB_Status>
 800e722:	4603      	mov	r3, r0
 800e724:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e726:	7bbb      	ldrb	r3, [r7, #14]
}
 800e728:	4618      	mov	r0, r3
 800e72a:	3710      	adds	r7, #16
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}

0800e730 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b084      	sub	sp, #16
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800e738:	2301      	movs	r3, #1
 800e73a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e742:	4618      	mov	r0, r3
 800e744:	f7f5 fb09 	bl	8003d5a <HAL_HCD_GetCurrentSpeed>
 800e748:	4603      	mov	r3, r0
 800e74a:	2b02      	cmp	r3, #2
 800e74c:	d00c      	beq.n	800e768 <USBH_LL_GetSpeed+0x38>
 800e74e:	2b02      	cmp	r3, #2
 800e750:	d80d      	bhi.n	800e76e <USBH_LL_GetSpeed+0x3e>
 800e752:	2b00      	cmp	r3, #0
 800e754:	d002      	beq.n	800e75c <USBH_LL_GetSpeed+0x2c>
 800e756:	2b01      	cmp	r3, #1
 800e758:	d003      	beq.n	800e762 <USBH_LL_GetSpeed+0x32>
 800e75a:	e008      	b.n	800e76e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800e75c:	2300      	movs	r3, #0
 800e75e:	73fb      	strb	r3, [r7, #15]
    break;
 800e760:	e008      	b.n	800e774 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800e762:	2301      	movs	r3, #1
 800e764:	73fb      	strb	r3, [r7, #15]
    break;
 800e766:	e005      	b.n	800e774 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800e768:	2302      	movs	r3, #2
 800e76a:	73fb      	strb	r3, [r7, #15]
    break;
 800e76c:	e002      	b.n	800e774 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800e76e:	2301      	movs	r3, #1
 800e770:	73fb      	strb	r3, [r7, #15]
    break;
 800e772:	bf00      	nop
  }
  return  speed;
 800e774:	7bfb      	ldrb	r3, [r7, #15]
}
 800e776:	4618      	mov	r0, r3
 800e778:	3710      	adds	r7, #16
 800e77a:	46bd      	mov	sp, r7
 800e77c:	bd80      	pop	{r7, pc}

0800e77e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800e77e:	b580      	push	{r7, lr}
 800e780:	b084      	sub	sp, #16
 800e782:	af00      	add	r7, sp, #0
 800e784:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e786:	2300      	movs	r3, #0
 800e788:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e78a:	2300      	movs	r3, #0
 800e78c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e794:	4618      	mov	r0, r3
 800e796:	f7f5 fa9c 	bl	8003cd2 <HAL_HCD_ResetPort>
 800e79a:	4603      	mov	r3, r0
 800e79c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e79e:	7bfb      	ldrb	r3, [r7, #15]
 800e7a0:	4618      	mov	r0, r3
 800e7a2:	f000 f8ff 	bl	800e9a4 <USBH_Get_USB_Status>
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	3710      	adds	r7, #16
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	bd80      	pop	{r7, pc}

0800e7b4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b082      	sub	sp, #8
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
 800e7bc:	460b      	mov	r3, r1
 800e7be:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e7c6:	78fa      	ldrb	r2, [r7, #3]
 800e7c8:	4611      	mov	r1, r2
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	f7f5 faa3 	bl	8003d16 <HAL_HCD_HC_GetXferCount>
 800e7d0:	4603      	mov	r3, r0
}
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	3708      	adds	r7, #8
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	bd80      	pop	{r7, pc}

0800e7da <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e7da:	b590      	push	{r4, r7, lr}
 800e7dc:	b089      	sub	sp, #36	; 0x24
 800e7de:	af04      	add	r7, sp, #16
 800e7e0:	6078      	str	r0, [r7, #4]
 800e7e2:	4608      	mov	r0, r1
 800e7e4:	4611      	mov	r1, r2
 800e7e6:	461a      	mov	r2, r3
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	70fb      	strb	r3, [r7, #3]
 800e7ec:	460b      	mov	r3, r1
 800e7ee:	70bb      	strb	r3, [r7, #2]
 800e7f0:	4613      	mov	r3, r2
 800e7f2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e802:	787c      	ldrb	r4, [r7, #1]
 800e804:	78ba      	ldrb	r2, [r7, #2]
 800e806:	78f9      	ldrb	r1, [r7, #3]
 800e808:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e80a:	9302      	str	r3, [sp, #8]
 800e80c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e810:	9301      	str	r3, [sp, #4]
 800e812:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e816:	9300      	str	r3, [sp, #0]
 800e818:	4623      	mov	r3, r4
 800e81a:	f7f4 ff06 	bl	800362a <HAL_HCD_HC_Init>
 800e81e:	4603      	mov	r3, r0
 800e820:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800e822:	7bfb      	ldrb	r3, [r7, #15]
 800e824:	4618      	mov	r0, r3
 800e826:	f000 f8bd 	bl	800e9a4 <USBH_Get_USB_Status>
 800e82a:	4603      	mov	r3, r0
 800e82c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e82e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e830:	4618      	mov	r0, r3
 800e832:	3714      	adds	r7, #20
 800e834:	46bd      	mov	sp, r7
 800e836:	bd90      	pop	{r4, r7, pc}

0800e838 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b084      	sub	sp, #16
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
 800e840:	460b      	mov	r3, r1
 800e842:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e844:	2300      	movs	r3, #0
 800e846:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e848:	2300      	movs	r3, #0
 800e84a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e852:	78fa      	ldrb	r2, [r7, #3]
 800e854:	4611      	mov	r1, r2
 800e856:	4618      	mov	r0, r3
 800e858:	f7f4 ff76 	bl	8003748 <HAL_HCD_HC_Halt>
 800e85c:	4603      	mov	r3, r0
 800e85e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800e860:	7bfb      	ldrb	r3, [r7, #15]
 800e862:	4618      	mov	r0, r3
 800e864:	f000 f89e 	bl	800e9a4 <USBH_Get_USB_Status>
 800e868:	4603      	mov	r3, r0
 800e86a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e86c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e86e:	4618      	mov	r0, r3
 800e870:	3710      	adds	r7, #16
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}

0800e876 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800e876:	b590      	push	{r4, r7, lr}
 800e878:	b089      	sub	sp, #36	; 0x24
 800e87a:	af04      	add	r7, sp, #16
 800e87c:	6078      	str	r0, [r7, #4]
 800e87e:	4608      	mov	r0, r1
 800e880:	4611      	mov	r1, r2
 800e882:	461a      	mov	r2, r3
 800e884:	4603      	mov	r3, r0
 800e886:	70fb      	strb	r3, [r7, #3]
 800e888:	460b      	mov	r3, r1
 800e88a:	70bb      	strb	r3, [r7, #2]
 800e88c:	4613      	mov	r3, r2
 800e88e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e890:	2300      	movs	r3, #0
 800e892:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e894:	2300      	movs	r3, #0
 800e896:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800e89e:	787c      	ldrb	r4, [r7, #1]
 800e8a0:	78ba      	ldrb	r2, [r7, #2]
 800e8a2:	78f9      	ldrb	r1, [r7, #3]
 800e8a4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800e8a8:	9303      	str	r3, [sp, #12]
 800e8aa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800e8ac:	9302      	str	r3, [sp, #8]
 800e8ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b0:	9301      	str	r3, [sp, #4]
 800e8b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800e8b6:	9300      	str	r3, [sp, #0]
 800e8b8:	4623      	mov	r3, r4
 800e8ba:	f7f4 ff69 	bl	8003790 <HAL_HCD_HC_SubmitRequest>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800e8c2:	7bfb      	ldrb	r3, [r7, #15]
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	f000 f86d 	bl	800e9a4 <USBH_Get_USB_Status>
 800e8ca:	4603      	mov	r3, r0
 800e8cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e8ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	3714      	adds	r7, #20
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	bd90      	pop	{r4, r7, pc}

0800e8d8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	b082      	sub	sp, #8
 800e8dc:	af00      	add	r7, sp, #0
 800e8de:	6078      	str	r0, [r7, #4]
 800e8e0:	460b      	mov	r3, r1
 800e8e2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e8ea:	78fa      	ldrb	r2, [r7, #3]
 800e8ec:	4611      	mov	r1, r2
 800e8ee:	4618      	mov	r0, r3
 800e8f0:	f7f5 f9fd 	bl	8003cee <HAL_HCD_HC_GetURBState>
 800e8f4:	4603      	mov	r3, r0
}
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	3708      	adds	r7, #8
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	bd80      	pop	{r7, pc}

0800e8fe <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800e8fe:	b580      	push	{r7, lr}
 800e900:	b082      	sub	sp, #8
 800e902:	af00      	add	r7, sp, #0
 800e904:	6078      	str	r0, [r7, #4]
 800e906:	460b      	mov	r3, r1
 800e908:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800e910:	2b00      	cmp	r3, #0
 800e912:	d103      	bne.n	800e91c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800e914:	78fb      	ldrb	r3, [r7, #3]
 800e916:	4618      	mov	r0, r3
 800e918:	f000 f870 	bl	800e9fc <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800e91c:	20c8      	movs	r0, #200	; 0xc8
 800e91e:	f7f3 fe85 	bl	800262c <HAL_Delay>
  return USBH_OK;
 800e922:	2300      	movs	r3, #0
}
 800e924:	4618      	mov	r0, r3
 800e926:	3708      	adds	r7, #8
 800e928:	46bd      	mov	sp, r7
 800e92a:	bd80      	pop	{r7, pc}

0800e92c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800e92c:	b480      	push	{r7}
 800e92e:	b085      	sub	sp, #20
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
 800e934:	460b      	mov	r3, r1
 800e936:	70fb      	strb	r3, [r7, #3]
 800e938:	4613      	mov	r3, r2
 800e93a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800e942:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800e944:	78fb      	ldrb	r3, [r7, #3]
 800e946:	68fa      	ldr	r2, [r7, #12]
 800e948:	212c      	movs	r1, #44	; 0x2c
 800e94a:	fb01 f303 	mul.w	r3, r1, r3
 800e94e:	4413      	add	r3, r2
 800e950:	333b      	adds	r3, #59	; 0x3b
 800e952:	781b      	ldrb	r3, [r3, #0]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d009      	beq.n	800e96c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800e958:	78fb      	ldrb	r3, [r7, #3]
 800e95a:	68fa      	ldr	r2, [r7, #12]
 800e95c:	212c      	movs	r1, #44	; 0x2c
 800e95e:	fb01 f303 	mul.w	r3, r1, r3
 800e962:	4413      	add	r3, r2
 800e964:	3354      	adds	r3, #84	; 0x54
 800e966:	78ba      	ldrb	r2, [r7, #2]
 800e968:	701a      	strb	r2, [r3, #0]
 800e96a:	e008      	b.n	800e97e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800e96c:	78fb      	ldrb	r3, [r7, #3]
 800e96e:	68fa      	ldr	r2, [r7, #12]
 800e970:	212c      	movs	r1, #44	; 0x2c
 800e972:	fb01 f303 	mul.w	r3, r1, r3
 800e976:	4413      	add	r3, r2
 800e978:	3355      	adds	r3, #85	; 0x55
 800e97a:	78ba      	ldrb	r2, [r7, #2]
 800e97c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800e97e:	2300      	movs	r3, #0
}
 800e980:	4618      	mov	r0, r3
 800e982:	3714      	adds	r7, #20
 800e984:	46bd      	mov	sp, r7
 800e986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98a:	4770      	bx	lr

0800e98c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b082      	sub	sp, #8
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800e994:	6878      	ldr	r0, [r7, #4]
 800e996:	f7f3 fe49 	bl	800262c <HAL_Delay>
}
 800e99a:	bf00      	nop
 800e99c:	3708      	adds	r7, #8
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}
	...

0800e9a4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e9a4:	b480      	push	{r7}
 800e9a6:	b085      	sub	sp, #20
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e9b2:	79fb      	ldrb	r3, [r7, #7]
 800e9b4:	2b03      	cmp	r3, #3
 800e9b6:	d817      	bhi.n	800e9e8 <USBH_Get_USB_Status+0x44>
 800e9b8:	a201      	add	r2, pc, #4	; (adr r2, 800e9c0 <USBH_Get_USB_Status+0x1c>)
 800e9ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9be:	bf00      	nop
 800e9c0:	0800e9d1 	.word	0x0800e9d1
 800e9c4:	0800e9d7 	.word	0x0800e9d7
 800e9c8:	0800e9dd 	.word	0x0800e9dd
 800e9cc:	0800e9e3 	.word	0x0800e9e3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	73fb      	strb	r3, [r7, #15]
    break;
 800e9d4:	e00b      	b.n	800e9ee <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800e9d6:	2302      	movs	r3, #2
 800e9d8:	73fb      	strb	r3, [r7, #15]
    break;
 800e9da:	e008      	b.n	800e9ee <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800e9dc:	2301      	movs	r3, #1
 800e9de:	73fb      	strb	r3, [r7, #15]
    break;
 800e9e0:	e005      	b.n	800e9ee <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800e9e2:	2302      	movs	r3, #2
 800e9e4:	73fb      	strb	r3, [r7, #15]
    break;
 800e9e6:	e002      	b.n	800e9ee <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800e9e8:	2302      	movs	r3, #2
 800e9ea:	73fb      	strb	r3, [r7, #15]
    break;
 800e9ec:	bf00      	nop
  }
  return usb_status;
 800e9ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9f0:	4618      	mov	r0, r3
 800e9f2:	3714      	adds	r7, #20
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fa:	4770      	bx	lr

0800e9fc <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800e9fc:	b580      	push	{r7, lr}
 800e9fe:	b084      	sub	sp, #16
 800ea00:	af00      	add	r7, sp, #0
 800ea02:	4603      	mov	r3, r0
 800ea04:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800ea06:	79fb      	ldrb	r3, [r7, #7]
 800ea08:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800ea0a:	79fb      	ldrb	r3, [r7, #7]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d102      	bne.n	800ea16 <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800ea10:	2301      	movs	r3, #1
 800ea12:	73fb      	strb	r3, [r7, #15]
 800ea14:	e001      	b.n	800ea1a <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800ea16:	2300      	movs	r3, #0
 800ea18:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800ea1a:	7bfb      	ldrb	r3, [r7, #15]
 800ea1c:	461a      	mov	r2, r3
 800ea1e:	2110      	movs	r1, #16
 800ea20:	4803      	ldr	r0, [pc, #12]	; (800ea30 <MX_DriverVbusHS+0x34>)
 800ea22:	f7f4 fd87 	bl	8003534 <HAL_GPIO_WritePin>
}
 800ea26:	bf00      	nop
 800ea28:	3710      	adds	r7, #16
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}
 800ea2e:	bf00      	nop
 800ea30:	40020800 	.word	0x40020800

0800ea34 <__errno>:
 800ea34:	4b01      	ldr	r3, [pc, #4]	; (800ea3c <__errno+0x8>)
 800ea36:	6818      	ldr	r0, [r3, #0]
 800ea38:	4770      	bx	lr
 800ea3a:	bf00      	nop
 800ea3c:	20000078 	.word	0x20000078

0800ea40 <__libc_init_array>:
 800ea40:	b570      	push	{r4, r5, r6, lr}
 800ea42:	4d0d      	ldr	r5, [pc, #52]	; (800ea78 <__libc_init_array+0x38>)
 800ea44:	4c0d      	ldr	r4, [pc, #52]	; (800ea7c <__libc_init_array+0x3c>)
 800ea46:	1b64      	subs	r4, r4, r5
 800ea48:	10a4      	asrs	r4, r4, #2
 800ea4a:	2600      	movs	r6, #0
 800ea4c:	42a6      	cmp	r6, r4
 800ea4e:	d109      	bne.n	800ea64 <__libc_init_array+0x24>
 800ea50:	4d0b      	ldr	r5, [pc, #44]	; (800ea80 <__libc_init_array+0x40>)
 800ea52:	4c0c      	ldr	r4, [pc, #48]	; (800ea84 <__libc_init_array+0x44>)
 800ea54:	f000 fc9e 	bl	800f394 <_init>
 800ea58:	1b64      	subs	r4, r4, r5
 800ea5a:	10a4      	asrs	r4, r4, #2
 800ea5c:	2600      	movs	r6, #0
 800ea5e:	42a6      	cmp	r6, r4
 800ea60:	d105      	bne.n	800ea6e <__libc_init_array+0x2e>
 800ea62:	bd70      	pop	{r4, r5, r6, pc}
 800ea64:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea68:	4798      	blx	r3
 800ea6a:	3601      	adds	r6, #1
 800ea6c:	e7ee      	b.n	800ea4c <__libc_init_array+0xc>
 800ea6e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea72:	4798      	blx	r3
 800ea74:	3601      	adds	r6, #1
 800ea76:	e7f2      	b.n	800ea5e <__libc_init_array+0x1e>
 800ea78:	08010f5c 	.word	0x08010f5c
 800ea7c:	08010f5c 	.word	0x08010f5c
 800ea80:	08010f5c 	.word	0x08010f5c
 800ea84:	08010f60 	.word	0x08010f60

0800ea88 <malloc>:
 800ea88:	4b02      	ldr	r3, [pc, #8]	; (800ea94 <malloc+0xc>)
 800ea8a:	4601      	mov	r1, r0
 800ea8c:	6818      	ldr	r0, [r3, #0]
 800ea8e:	f000 b88d 	b.w	800ebac <_malloc_r>
 800ea92:	bf00      	nop
 800ea94:	20000078 	.word	0x20000078

0800ea98 <free>:
 800ea98:	4b02      	ldr	r3, [pc, #8]	; (800eaa4 <free+0xc>)
 800ea9a:	4601      	mov	r1, r0
 800ea9c:	6818      	ldr	r0, [r3, #0]
 800ea9e:	f000 b819 	b.w	800ead4 <_free_r>
 800eaa2:	bf00      	nop
 800eaa4:	20000078 	.word	0x20000078

0800eaa8 <memcpy>:
 800eaa8:	440a      	add	r2, r1
 800eaaa:	4291      	cmp	r1, r2
 800eaac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800eab0:	d100      	bne.n	800eab4 <memcpy+0xc>
 800eab2:	4770      	bx	lr
 800eab4:	b510      	push	{r4, lr}
 800eab6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eaba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eabe:	4291      	cmp	r1, r2
 800eac0:	d1f9      	bne.n	800eab6 <memcpy+0xe>
 800eac2:	bd10      	pop	{r4, pc}

0800eac4 <memset>:
 800eac4:	4402      	add	r2, r0
 800eac6:	4603      	mov	r3, r0
 800eac8:	4293      	cmp	r3, r2
 800eaca:	d100      	bne.n	800eace <memset+0xa>
 800eacc:	4770      	bx	lr
 800eace:	f803 1b01 	strb.w	r1, [r3], #1
 800ead2:	e7f9      	b.n	800eac8 <memset+0x4>

0800ead4 <_free_r>:
 800ead4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ead6:	2900      	cmp	r1, #0
 800ead8:	d044      	beq.n	800eb64 <_free_r+0x90>
 800eada:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eade:	9001      	str	r0, [sp, #4]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	f1a1 0404 	sub.w	r4, r1, #4
 800eae6:	bfb8      	it	lt
 800eae8:	18e4      	addlt	r4, r4, r3
 800eaea:	f000 f903 	bl	800ecf4 <__malloc_lock>
 800eaee:	4a1e      	ldr	r2, [pc, #120]	; (800eb68 <_free_r+0x94>)
 800eaf0:	9801      	ldr	r0, [sp, #4]
 800eaf2:	6813      	ldr	r3, [r2, #0]
 800eaf4:	b933      	cbnz	r3, 800eb04 <_free_r+0x30>
 800eaf6:	6063      	str	r3, [r4, #4]
 800eaf8:	6014      	str	r4, [r2, #0]
 800eafa:	b003      	add	sp, #12
 800eafc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eb00:	f000 b8fe 	b.w	800ed00 <__malloc_unlock>
 800eb04:	42a3      	cmp	r3, r4
 800eb06:	d908      	bls.n	800eb1a <_free_r+0x46>
 800eb08:	6825      	ldr	r5, [r4, #0]
 800eb0a:	1961      	adds	r1, r4, r5
 800eb0c:	428b      	cmp	r3, r1
 800eb0e:	bf01      	itttt	eq
 800eb10:	6819      	ldreq	r1, [r3, #0]
 800eb12:	685b      	ldreq	r3, [r3, #4]
 800eb14:	1949      	addeq	r1, r1, r5
 800eb16:	6021      	streq	r1, [r4, #0]
 800eb18:	e7ed      	b.n	800eaf6 <_free_r+0x22>
 800eb1a:	461a      	mov	r2, r3
 800eb1c:	685b      	ldr	r3, [r3, #4]
 800eb1e:	b10b      	cbz	r3, 800eb24 <_free_r+0x50>
 800eb20:	42a3      	cmp	r3, r4
 800eb22:	d9fa      	bls.n	800eb1a <_free_r+0x46>
 800eb24:	6811      	ldr	r1, [r2, #0]
 800eb26:	1855      	adds	r5, r2, r1
 800eb28:	42a5      	cmp	r5, r4
 800eb2a:	d10b      	bne.n	800eb44 <_free_r+0x70>
 800eb2c:	6824      	ldr	r4, [r4, #0]
 800eb2e:	4421      	add	r1, r4
 800eb30:	1854      	adds	r4, r2, r1
 800eb32:	42a3      	cmp	r3, r4
 800eb34:	6011      	str	r1, [r2, #0]
 800eb36:	d1e0      	bne.n	800eafa <_free_r+0x26>
 800eb38:	681c      	ldr	r4, [r3, #0]
 800eb3a:	685b      	ldr	r3, [r3, #4]
 800eb3c:	6053      	str	r3, [r2, #4]
 800eb3e:	4421      	add	r1, r4
 800eb40:	6011      	str	r1, [r2, #0]
 800eb42:	e7da      	b.n	800eafa <_free_r+0x26>
 800eb44:	d902      	bls.n	800eb4c <_free_r+0x78>
 800eb46:	230c      	movs	r3, #12
 800eb48:	6003      	str	r3, [r0, #0]
 800eb4a:	e7d6      	b.n	800eafa <_free_r+0x26>
 800eb4c:	6825      	ldr	r5, [r4, #0]
 800eb4e:	1961      	adds	r1, r4, r5
 800eb50:	428b      	cmp	r3, r1
 800eb52:	bf04      	itt	eq
 800eb54:	6819      	ldreq	r1, [r3, #0]
 800eb56:	685b      	ldreq	r3, [r3, #4]
 800eb58:	6063      	str	r3, [r4, #4]
 800eb5a:	bf04      	itt	eq
 800eb5c:	1949      	addeq	r1, r1, r5
 800eb5e:	6021      	streq	r1, [r4, #0]
 800eb60:	6054      	str	r4, [r2, #4]
 800eb62:	e7ca      	b.n	800eafa <_free_r+0x26>
 800eb64:	b003      	add	sp, #12
 800eb66:	bd30      	pop	{r4, r5, pc}
 800eb68:	200090d0 	.word	0x200090d0

0800eb6c <sbrk_aligned>:
 800eb6c:	b570      	push	{r4, r5, r6, lr}
 800eb6e:	4e0e      	ldr	r6, [pc, #56]	; (800eba8 <sbrk_aligned+0x3c>)
 800eb70:	460c      	mov	r4, r1
 800eb72:	6831      	ldr	r1, [r6, #0]
 800eb74:	4605      	mov	r5, r0
 800eb76:	b911      	cbnz	r1, 800eb7e <sbrk_aligned+0x12>
 800eb78:	f000 f88c 	bl	800ec94 <_sbrk_r>
 800eb7c:	6030      	str	r0, [r6, #0]
 800eb7e:	4621      	mov	r1, r4
 800eb80:	4628      	mov	r0, r5
 800eb82:	f000 f887 	bl	800ec94 <_sbrk_r>
 800eb86:	1c43      	adds	r3, r0, #1
 800eb88:	d00a      	beq.n	800eba0 <sbrk_aligned+0x34>
 800eb8a:	1cc4      	adds	r4, r0, #3
 800eb8c:	f024 0403 	bic.w	r4, r4, #3
 800eb90:	42a0      	cmp	r0, r4
 800eb92:	d007      	beq.n	800eba4 <sbrk_aligned+0x38>
 800eb94:	1a21      	subs	r1, r4, r0
 800eb96:	4628      	mov	r0, r5
 800eb98:	f000 f87c 	bl	800ec94 <_sbrk_r>
 800eb9c:	3001      	adds	r0, #1
 800eb9e:	d101      	bne.n	800eba4 <sbrk_aligned+0x38>
 800eba0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800eba4:	4620      	mov	r0, r4
 800eba6:	bd70      	pop	{r4, r5, r6, pc}
 800eba8:	200090d4 	.word	0x200090d4

0800ebac <_malloc_r>:
 800ebac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebb0:	1ccd      	adds	r5, r1, #3
 800ebb2:	f025 0503 	bic.w	r5, r5, #3
 800ebb6:	3508      	adds	r5, #8
 800ebb8:	2d0c      	cmp	r5, #12
 800ebba:	bf38      	it	cc
 800ebbc:	250c      	movcc	r5, #12
 800ebbe:	2d00      	cmp	r5, #0
 800ebc0:	4607      	mov	r7, r0
 800ebc2:	db01      	blt.n	800ebc8 <_malloc_r+0x1c>
 800ebc4:	42a9      	cmp	r1, r5
 800ebc6:	d905      	bls.n	800ebd4 <_malloc_r+0x28>
 800ebc8:	230c      	movs	r3, #12
 800ebca:	603b      	str	r3, [r7, #0]
 800ebcc:	2600      	movs	r6, #0
 800ebce:	4630      	mov	r0, r6
 800ebd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebd4:	4e2e      	ldr	r6, [pc, #184]	; (800ec90 <_malloc_r+0xe4>)
 800ebd6:	f000 f88d 	bl	800ecf4 <__malloc_lock>
 800ebda:	6833      	ldr	r3, [r6, #0]
 800ebdc:	461c      	mov	r4, r3
 800ebde:	bb34      	cbnz	r4, 800ec2e <_malloc_r+0x82>
 800ebe0:	4629      	mov	r1, r5
 800ebe2:	4638      	mov	r0, r7
 800ebe4:	f7ff ffc2 	bl	800eb6c <sbrk_aligned>
 800ebe8:	1c43      	adds	r3, r0, #1
 800ebea:	4604      	mov	r4, r0
 800ebec:	d14d      	bne.n	800ec8a <_malloc_r+0xde>
 800ebee:	6834      	ldr	r4, [r6, #0]
 800ebf0:	4626      	mov	r6, r4
 800ebf2:	2e00      	cmp	r6, #0
 800ebf4:	d140      	bne.n	800ec78 <_malloc_r+0xcc>
 800ebf6:	6823      	ldr	r3, [r4, #0]
 800ebf8:	4631      	mov	r1, r6
 800ebfa:	4638      	mov	r0, r7
 800ebfc:	eb04 0803 	add.w	r8, r4, r3
 800ec00:	f000 f848 	bl	800ec94 <_sbrk_r>
 800ec04:	4580      	cmp	r8, r0
 800ec06:	d13a      	bne.n	800ec7e <_malloc_r+0xd2>
 800ec08:	6821      	ldr	r1, [r4, #0]
 800ec0a:	3503      	adds	r5, #3
 800ec0c:	1a6d      	subs	r5, r5, r1
 800ec0e:	f025 0503 	bic.w	r5, r5, #3
 800ec12:	3508      	adds	r5, #8
 800ec14:	2d0c      	cmp	r5, #12
 800ec16:	bf38      	it	cc
 800ec18:	250c      	movcc	r5, #12
 800ec1a:	4629      	mov	r1, r5
 800ec1c:	4638      	mov	r0, r7
 800ec1e:	f7ff ffa5 	bl	800eb6c <sbrk_aligned>
 800ec22:	3001      	adds	r0, #1
 800ec24:	d02b      	beq.n	800ec7e <_malloc_r+0xd2>
 800ec26:	6823      	ldr	r3, [r4, #0]
 800ec28:	442b      	add	r3, r5
 800ec2a:	6023      	str	r3, [r4, #0]
 800ec2c:	e00e      	b.n	800ec4c <_malloc_r+0xa0>
 800ec2e:	6822      	ldr	r2, [r4, #0]
 800ec30:	1b52      	subs	r2, r2, r5
 800ec32:	d41e      	bmi.n	800ec72 <_malloc_r+0xc6>
 800ec34:	2a0b      	cmp	r2, #11
 800ec36:	d916      	bls.n	800ec66 <_malloc_r+0xba>
 800ec38:	1961      	adds	r1, r4, r5
 800ec3a:	42a3      	cmp	r3, r4
 800ec3c:	6025      	str	r5, [r4, #0]
 800ec3e:	bf18      	it	ne
 800ec40:	6059      	strne	r1, [r3, #4]
 800ec42:	6863      	ldr	r3, [r4, #4]
 800ec44:	bf08      	it	eq
 800ec46:	6031      	streq	r1, [r6, #0]
 800ec48:	5162      	str	r2, [r4, r5]
 800ec4a:	604b      	str	r3, [r1, #4]
 800ec4c:	4638      	mov	r0, r7
 800ec4e:	f104 060b 	add.w	r6, r4, #11
 800ec52:	f000 f855 	bl	800ed00 <__malloc_unlock>
 800ec56:	f026 0607 	bic.w	r6, r6, #7
 800ec5a:	1d23      	adds	r3, r4, #4
 800ec5c:	1af2      	subs	r2, r6, r3
 800ec5e:	d0b6      	beq.n	800ebce <_malloc_r+0x22>
 800ec60:	1b9b      	subs	r3, r3, r6
 800ec62:	50a3      	str	r3, [r4, r2]
 800ec64:	e7b3      	b.n	800ebce <_malloc_r+0x22>
 800ec66:	6862      	ldr	r2, [r4, #4]
 800ec68:	42a3      	cmp	r3, r4
 800ec6a:	bf0c      	ite	eq
 800ec6c:	6032      	streq	r2, [r6, #0]
 800ec6e:	605a      	strne	r2, [r3, #4]
 800ec70:	e7ec      	b.n	800ec4c <_malloc_r+0xa0>
 800ec72:	4623      	mov	r3, r4
 800ec74:	6864      	ldr	r4, [r4, #4]
 800ec76:	e7b2      	b.n	800ebde <_malloc_r+0x32>
 800ec78:	4634      	mov	r4, r6
 800ec7a:	6876      	ldr	r6, [r6, #4]
 800ec7c:	e7b9      	b.n	800ebf2 <_malloc_r+0x46>
 800ec7e:	230c      	movs	r3, #12
 800ec80:	603b      	str	r3, [r7, #0]
 800ec82:	4638      	mov	r0, r7
 800ec84:	f000 f83c 	bl	800ed00 <__malloc_unlock>
 800ec88:	e7a1      	b.n	800ebce <_malloc_r+0x22>
 800ec8a:	6025      	str	r5, [r4, #0]
 800ec8c:	e7de      	b.n	800ec4c <_malloc_r+0xa0>
 800ec8e:	bf00      	nop
 800ec90:	200090d0 	.word	0x200090d0

0800ec94 <_sbrk_r>:
 800ec94:	b538      	push	{r3, r4, r5, lr}
 800ec96:	4d06      	ldr	r5, [pc, #24]	; (800ecb0 <_sbrk_r+0x1c>)
 800ec98:	2300      	movs	r3, #0
 800ec9a:	4604      	mov	r4, r0
 800ec9c:	4608      	mov	r0, r1
 800ec9e:	602b      	str	r3, [r5, #0]
 800eca0:	f7f2 fd92 	bl	80017c8 <_sbrk>
 800eca4:	1c43      	adds	r3, r0, #1
 800eca6:	d102      	bne.n	800ecae <_sbrk_r+0x1a>
 800eca8:	682b      	ldr	r3, [r5, #0]
 800ecaa:	b103      	cbz	r3, 800ecae <_sbrk_r+0x1a>
 800ecac:	6023      	str	r3, [r4, #0]
 800ecae:	bd38      	pop	{r3, r4, r5, pc}
 800ecb0:	200090d8 	.word	0x200090d8

0800ecb4 <siprintf>:
 800ecb4:	b40e      	push	{r1, r2, r3}
 800ecb6:	b500      	push	{lr}
 800ecb8:	b09c      	sub	sp, #112	; 0x70
 800ecba:	ab1d      	add	r3, sp, #116	; 0x74
 800ecbc:	9002      	str	r0, [sp, #8]
 800ecbe:	9006      	str	r0, [sp, #24]
 800ecc0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ecc4:	4809      	ldr	r0, [pc, #36]	; (800ecec <siprintf+0x38>)
 800ecc6:	9107      	str	r1, [sp, #28]
 800ecc8:	9104      	str	r1, [sp, #16]
 800ecca:	4909      	ldr	r1, [pc, #36]	; (800ecf0 <siprintf+0x3c>)
 800eccc:	f853 2b04 	ldr.w	r2, [r3], #4
 800ecd0:	9105      	str	r1, [sp, #20]
 800ecd2:	6800      	ldr	r0, [r0, #0]
 800ecd4:	9301      	str	r3, [sp, #4]
 800ecd6:	a902      	add	r1, sp, #8
 800ecd8:	f000 f874 	bl	800edc4 <_svfiprintf_r>
 800ecdc:	9b02      	ldr	r3, [sp, #8]
 800ecde:	2200      	movs	r2, #0
 800ece0:	701a      	strb	r2, [r3, #0]
 800ece2:	b01c      	add	sp, #112	; 0x70
 800ece4:	f85d eb04 	ldr.w	lr, [sp], #4
 800ece8:	b003      	add	sp, #12
 800ecea:	4770      	bx	lr
 800ecec:	20000078 	.word	0x20000078
 800ecf0:	ffff0208 	.word	0xffff0208

0800ecf4 <__malloc_lock>:
 800ecf4:	4801      	ldr	r0, [pc, #4]	; (800ecfc <__malloc_lock+0x8>)
 800ecf6:	f000 baf9 	b.w	800f2ec <__retarget_lock_acquire_recursive>
 800ecfa:	bf00      	nop
 800ecfc:	200090dc 	.word	0x200090dc

0800ed00 <__malloc_unlock>:
 800ed00:	4801      	ldr	r0, [pc, #4]	; (800ed08 <__malloc_unlock+0x8>)
 800ed02:	f000 baf4 	b.w	800f2ee <__retarget_lock_release_recursive>
 800ed06:	bf00      	nop
 800ed08:	200090dc 	.word	0x200090dc

0800ed0c <__ssputs_r>:
 800ed0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed10:	688e      	ldr	r6, [r1, #8]
 800ed12:	429e      	cmp	r6, r3
 800ed14:	4682      	mov	sl, r0
 800ed16:	460c      	mov	r4, r1
 800ed18:	4690      	mov	r8, r2
 800ed1a:	461f      	mov	r7, r3
 800ed1c:	d838      	bhi.n	800ed90 <__ssputs_r+0x84>
 800ed1e:	898a      	ldrh	r2, [r1, #12]
 800ed20:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ed24:	d032      	beq.n	800ed8c <__ssputs_r+0x80>
 800ed26:	6825      	ldr	r5, [r4, #0]
 800ed28:	6909      	ldr	r1, [r1, #16]
 800ed2a:	eba5 0901 	sub.w	r9, r5, r1
 800ed2e:	6965      	ldr	r5, [r4, #20]
 800ed30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ed34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ed38:	3301      	adds	r3, #1
 800ed3a:	444b      	add	r3, r9
 800ed3c:	106d      	asrs	r5, r5, #1
 800ed3e:	429d      	cmp	r5, r3
 800ed40:	bf38      	it	cc
 800ed42:	461d      	movcc	r5, r3
 800ed44:	0553      	lsls	r3, r2, #21
 800ed46:	d531      	bpl.n	800edac <__ssputs_r+0xa0>
 800ed48:	4629      	mov	r1, r5
 800ed4a:	f7ff ff2f 	bl	800ebac <_malloc_r>
 800ed4e:	4606      	mov	r6, r0
 800ed50:	b950      	cbnz	r0, 800ed68 <__ssputs_r+0x5c>
 800ed52:	230c      	movs	r3, #12
 800ed54:	f8ca 3000 	str.w	r3, [sl]
 800ed58:	89a3      	ldrh	r3, [r4, #12]
 800ed5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed5e:	81a3      	strh	r3, [r4, #12]
 800ed60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ed64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed68:	6921      	ldr	r1, [r4, #16]
 800ed6a:	464a      	mov	r2, r9
 800ed6c:	f7ff fe9c 	bl	800eaa8 <memcpy>
 800ed70:	89a3      	ldrh	r3, [r4, #12]
 800ed72:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ed76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed7a:	81a3      	strh	r3, [r4, #12]
 800ed7c:	6126      	str	r6, [r4, #16]
 800ed7e:	6165      	str	r5, [r4, #20]
 800ed80:	444e      	add	r6, r9
 800ed82:	eba5 0509 	sub.w	r5, r5, r9
 800ed86:	6026      	str	r6, [r4, #0]
 800ed88:	60a5      	str	r5, [r4, #8]
 800ed8a:	463e      	mov	r6, r7
 800ed8c:	42be      	cmp	r6, r7
 800ed8e:	d900      	bls.n	800ed92 <__ssputs_r+0x86>
 800ed90:	463e      	mov	r6, r7
 800ed92:	6820      	ldr	r0, [r4, #0]
 800ed94:	4632      	mov	r2, r6
 800ed96:	4641      	mov	r1, r8
 800ed98:	f000 faaa 	bl	800f2f0 <memmove>
 800ed9c:	68a3      	ldr	r3, [r4, #8]
 800ed9e:	1b9b      	subs	r3, r3, r6
 800eda0:	60a3      	str	r3, [r4, #8]
 800eda2:	6823      	ldr	r3, [r4, #0]
 800eda4:	4433      	add	r3, r6
 800eda6:	6023      	str	r3, [r4, #0]
 800eda8:	2000      	movs	r0, #0
 800edaa:	e7db      	b.n	800ed64 <__ssputs_r+0x58>
 800edac:	462a      	mov	r2, r5
 800edae:	f000 fab9 	bl	800f324 <_realloc_r>
 800edb2:	4606      	mov	r6, r0
 800edb4:	2800      	cmp	r0, #0
 800edb6:	d1e1      	bne.n	800ed7c <__ssputs_r+0x70>
 800edb8:	6921      	ldr	r1, [r4, #16]
 800edba:	4650      	mov	r0, sl
 800edbc:	f7ff fe8a 	bl	800ead4 <_free_r>
 800edc0:	e7c7      	b.n	800ed52 <__ssputs_r+0x46>
	...

0800edc4 <_svfiprintf_r>:
 800edc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edc8:	4698      	mov	r8, r3
 800edca:	898b      	ldrh	r3, [r1, #12]
 800edcc:	061b      	lsls	r3, r3, #24
 800edce:	b09d      	sub	sp, #116	; 0x74
 800edd0:	4607      	mov	r7, r0
 800edd2:	460d      	mov	r5, r1
 800edd4:	4614      	mov	r4, r2
 800edd6:	d50e      	bpl.n	800edf6 <_svfiprintf_r+0x32>
 800edd8:	690b      	ldr	r3, [r1, #16]
 800edda:	b963      	cbnz	r3, 800edf6 <_svfiprintf_r+0x32>
 800eddc:	2140      	movs	r1, #64	; 0x40
 800edde:	f7ff fee5 	bl	800ebac <_malloc_r>
 800ede2:	6028      	str	r0, [r5, #0]
 800ede4:	6128      	str	r0, [r5, #16]
 800ede6:	b920      	cbnz	r0, 800edf2 <_svfiprintf_r+0x2e>
 800ede8:	230c      	movs	r3, #12
 800edea:	603b      	str	r3, [r7, #0]
 800edec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800edf0:	e0d1      	b.n	800ef96 <_svfiprintf_r+0x1d2>
 800edf2:	2340      	movs	r3, #64	; 0x40
 800edf4:	616b      	str	r3, [r5, #20]
 800edf6:	2300      	movs	r3, #0
 800edf8:	9309      	str	r3, [sp, #36]	; 0x24
 800edfa:	2320      	movs	r3, #32
 800edfc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ee00:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee04:	2330      	movs	r3, #48	; 0x30
 800ee06:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800efb0 <_svfiprintf_r+0x1ec>
 800ee0a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ee0e:	f04f 0901 	mov.w	r9, #1
 800ee12:	4623      	mov	r3, r4
 800ee14:	469a      	mov	sl, r3
 800ee16:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee1a:	b10a      	cbz	r2, 800ee20 <_svfiprintf_r+0x5c>
 800ee1c:	2a25      	cmp	r2, #37	; 0x25
 800ee1e:	d1f9      	bne.n	800ee14 <_svfiprintf_r+0x50>
 800ee20:	ebba 0b04 	subs.w	fp, sl, r4
 800ee24:	d00b      	beq.n	800ee3e <_svfiprintf_r+0x7a>
 800ee26:	465b      	mov	r3, fp
 800ee28:	4622      	mov	r2, r4
 800ee2a:	4629      	mov	r1, r5
 800ee2c:	4638      	mov	r0, r7
 800ee2e:	f7ff ff6d 	bl	800ed0c <__ssputs_r>
 800ee32:	3001      	adds	r0, #1
 800ee34:	f000 80aa 	beq.w	800ef8c <_svfiprintf_r+0x1c8>
 800ee38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ee3a:	445a      	add	r2, fp
 800ee3c:	9209      	str	r2, [sp, #36]	; 0x24
 800ee3e:	f89a 3000 	ldrb.w	r3, [sl]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	f000 80a2 	beq.w	800ef8c <_svfiprintf_r+0x1c8>
 800ee48:	2300      	movs	r3, #0
 800ee4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ee4e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee52:	f10a 0a01 	add.w	sl, sl, #1
 800ee56:	9304      	str	r3, [sp, #16]
 800ee58:	9307      	str	r3, [sp, #28]
 800ee5a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ee5e:	931a      	str	r3, [sp, #104]	; 0x68
 800ee60:	4654      	mov	r4, sl
 800ee62:	2205      	movs	r2, #5
 800ee64:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee68:	4851      	ldr	r0, [pc, #324]	; (800efb0 <_svfiprintf_r+0x1ec>)
 800ee6a:	f7f1 f9c1 	bl	80001f0 <memchr>
 800ee6e:	9a04      	ldr	r2, [sp, #16]
 800ee70:	b9d8      	cbnz	r0, 800eeaa <_svfiprintf_r+0xe6>
 800ee72:	06d0      	lsls	r0, r2, #27
 800ee74:	bf44      	itt	mi
 800ee76:	2320      	movmi	r3, #32
 800ee78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee7c:	0711      	lsls	r1, r2, #28
 800ee7e:	bf44      	itt	mi
 800ee80:	232b      	movmi	r3, #43	; 0x2b
 800ee82:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ee86:	f89a 3000 	ldrb.w	r3, [sl]
 800ee8a:	2b2a      	cmp	r3, #42	; 0x2a
 800ee8c:	d015      	beq.n	800eeba <_svfiprintf_r+0xf6>
 800ee8e:	9a07      	ldr	r2, [sp, #28]
 800ee90:	4654      	mov	r4, sl
 800ee92:	2000      	movs	r0, #0
 800ee94:	f04f 0c0a 	mov.w	ip, #10
 800ee98:	4621      	mov	r1, r4
 800ee9a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee9e:	3b30      	subs	r3, #48	; 0x30
 800eea0:	2b09      	cmp	r3, #9
 800eea2:	d94e      	bls.n	800ef42 <_svfiprintf_r+0x17e>
 800eea4:	b1b0      	cbz	r0, 800eed4 <_svfiprintf_r+0x110>
 800eea6:	9207      	str	r2, [sp, #28]
 800eea8:	e014      	b.n	800eed4 <_svfiprintf_r+0x110>
 800eeaa:	eba0 0308 	sub.w	r3, r0, r8
 800eeae:	fa09 f303 	lsl.w	r3, r9, r3
 800eeb2:	4313      	orrs	r3, r2
 800eeb4:	9304      	str	r3, [sp, #16]
 800eeb6:	46a2      	mov	sl, r4
 800eeb8:	e7d2      	b.n	800ee60 <_svfiprintf_r+0x9c>
 800eeba:	9b03      	ldr	r3, [sp, #12]
 800eebc:	1d19      	adds	r1, r3, #4
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	9103      	str	r1, [sp, #12]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	bfbb      	ittet	lt
 800eec6:	425b      	neglt	r3, r3
 800eec8:	f042 0202 	orrlt.w	r2, r2, #2
 800eecc:	9307      	strge	r3, [sp, #28]
 800eece:	9307      	strlt	r3, [sp, #28]
 800eed0:	bfb8      	it	lt
 800eed2:	9204      	strlt	r2, [sp, #16]
 800eed4:	7823      	ldrb	r3, [r4, #0]
 800eed6:	2b2e      	cmp	r3, #46	; 0x2e
 800eed8:	d10c      	bne.n	800eef4 <_svfiprintf_r+0x130>
 800eeda:	7863      	ldrb	r3, [r4, #1]
 800eedc:	2b2a      	cmp	r3, #42	; 0x2a
 800eede:	d135      	bne.n	800ef4c <_svfiprintf_r+0x188>
 800eee0:	9b03      	ldr	r3, [sp, #12]
 800eee2:	1d1a      	adds	r2, r3, #4
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	9203      	str	r2, [sp, #12]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	bfb8      	it	lt
 800eeec:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800eef0:	3402      	adds	r4, #2
 800eef2:	9305      	str	r3, [sp, #20]
 800eef4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800efc0 <_svfiprintf_r+0x1fc>
 800eef8:	7821      	ldrb	r1, [r4, #0]
 800eefa:	2203      	movs	r2, #3
 800eefc:	4650      	mov	r0, sl
 800eefe:	f7f1 f977 	bl	80001f0 <memchr>
 800ef02:	b140      	cbz	r0, 800ef16 <_svfiprintf_r+0x152>
 800ef04:	2340      	movs	r3, #64	; 0x40
 800ef06:	eba0 000a 	sub.w	r0, r0, sl
 800ef0a:	fa03 f000 	lsl.w	r0, r3, r0
 800ef0e:	9b04      	ldr	r3, [sp, #16]
 800ef10:	4303      	orrs	r3, r0
 800ef12:	3401      	adds	r4, #1
 800ef14:	9304      	str	r3, [sp, #16]
 800ef16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef1a:	4826      	ldr	r0, [pc, #152]	; (800efb4 <_svfiprintf_r+0x1f0>)
 800ef1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ef20:	2206      	movs	r2, #6
 800ef22:	f7f1 f965 	bl	80001f0 <memchr>
 800ef26:	2800      	cmp	r0, #0
 800ef28:	d038      	beq.n	800ef9c <_svfiprintf_r+0x1d8>
 800ef2a:	4b23      	ldr	r3, [pc, #140]	; (800efb8 <_svfiprintf_r+0x1f4>)
 800ef2c:	bb1b      	cbnz	r3, 800ef76 <_svfiprintf_r+0x1b2>
 800ef2e:	9b03      	ldr	r3, [sp, #12]
 800ef30:	3307      	adds	r3, #7
 800ef32:	f023 0307 	bic.w	r3, r3, #7
 800ef36:	3308      	adds	r3, #8
 800ef38:	9303      	str	r3, [sp, #12]
 800ef3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef3c:	4433      	add	r3, r6
 800ef3e:	9309      	str	r3, [sp, #36]	; 0x24
 800ef40:	e767      	b.n	800ee12 <_svfiprintf_r+0x4e>
 800ef42:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef46:	460c      	mov	r4, r1
 800ef48:	2001      	movs	r0, #1
 800ef4a:	e7a5      	b.n	800ee98 <_svfiprintf_r+0xd4>
 800ef4c:	2300      	movs	r3, #0
 800ef4e:	3401      	adds	r4, #1
 800ef50:	9305      	str	r3, [sp, #20]
 800ef52:	4619      	mov	r1, r3
 800ef54:	f04f 0c0a 	mov.w	ip, #10
 800ef58:	4620      	mov	r0, r4
 800ef5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef5e:	3a30      	subs	r2, #48	; 0x30
 800ef60:	2a09      	cmp	r2, #9
 800ef62:	d903      	bls.n	800ef6c <_svfiprintf_r+0x1a8>
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d0c5      	beq.n	800eef4 <_svfiprintf_r+0x130>
 800ef68:	9105      	str	r1, [sp, #20]
 800ef6a:	e7c3      	b.n	800eef4 <_svfiprintf_r+0x130>
 800ef6c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef70:	4604      	mov	r4, r0
 800ef72:	2301      	movs	r3, #1
 800ef74:	e7f0      	b.n	800ef58 <_svfiprintf_r+0x194>
 800ef76:	ab03      	add	r3, sp, #12
 800ef78:	9300      	str	r3, [sp, #0]
 800ef7a:	462a      	mov	r2, r5
 800ef7c:	4b0f      	ldr	r3, [pc, #60]	; (800efbc <_svfiprintf_r+0x1f8>)
 800ef7e:	a904      	add	r1, sp, #16
 800ef80:	4638      	mov	r0, r7
 800ef82:	f3af 8000 	nop.w
 800ef86:	1c42      	adds	r2, r0, #1
 800ef88:	4606      	mov	r6, r0
 800ef8a:	d1d6      	bne.n	800ef3a <_svfiprintf_r+0x176>
 800ef8c:	89ab      	ldrh	r3, [r5, #12]
 800ef8e:	065b      	lsls	r3, r3, #25
 800ef90:	f53f af2c 	bmi.w	800edec <_svfiprintf_r+0x28>
 800ef94:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef96:	b01d      	add	sp, #116	; 0x74
 800ef98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef9c:	ab03      	add	r3, sp, #12
 800ef9e:	9300      	str	r3, [sp, #0]
 800efa0:	462a      	mov	r2, r5
 800efa2:	4b06      	ldr	r3, [pc, #24]	; (800efbc <_svfiprintf_r+0x1f8>)
 800efa4:	a904      	add	r1, sp, #16
 800efa6:	4638      	mov	r0, r7
 800efa8:	f000 f87a 	bl	800f0a0 <_printf_i>
 800efac:	e7eb      	b.n	800ef86 <_svfiprintf_r+0x1c2>
 800efae:	bf00      	nop
 800efb0:	08010f20 	.word	0x08010f20
 800efb4:	08010f2a 	.word	0x08010f2a
 800efb8:	00000000 	.word	0x00000000
 800efbc:	0800ed0d 	.word	0x0800ed0d
 800efc0:	08010f26 	.word	0x08010f26

0800efc4 <_printf_common>:
 800efc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efc8:	4616      	mov	r6, r2
 800efca:	4699      	mov	r9, r3
 800efcc:	688a      	ldr	r2, [r1, #8]
 800efce:	690b      	ldr	r3, [r1, #16]
 800efd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800efd4:	4293      	cmp	r3, r2
 800efd6:	bfb8      	it	lt
 800efd8:	4613      	movlt	r3, r2
 800efda:	6033      	str	r3, [r6, #0]
 800efdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800efe0:	4607      	mov	r7, r0
 800efe2:	460c      	mov	r4, r1
 800efe4:	b10a      	cbz	r2, 800efea <_printf_common+0x26>
 800efe6:	3301      	adds	r3, #1
 800efe8:	6033      	str	r3, [r6, #0]
 800efea:	6823      	ldr	r3, [r4, #0]
 800efec:	0699      	lsls	r1, r3, #26
 800efee:	bf42      	ittt	mi
 800eff0:	6833      	ldrmi	r3, [r6, #0]
 800eff2:	3302      	addmi	r3, #2
 800eff4:	6033      	strmi	r3, [r6, #0]
 800eff6:	6825      	ldr	r5, [r4, #0]
 800eff8:	f015 0506 	ands.w	r5, r5, #6
 800effc:	d106      	bne.n	800f00c <_printf_common+0x48>
 800effe:	f104 0a19 	add.w	sl, r4, #25
 800f002:	68e3      	ldr	r3, [r4, #12]
 800f004:	6832      	ldr	r2, [r6, #0]
 800f006:	1a9b      	subs	r3, r3, r2
 800f008:	42ab      	cmp	r3, r5
 800f00a:	dc26      	bgt.n	800f05a <_printf_common+0x96>
 800f00c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f010:	1e13      	subs	r3, r2, #0
 800f012:	6822      	ldr	r2, [r4, #0]
 800f014:	bf18      	it	ne
 800f016:	2301      	movne	r3, #1
 800f018:	0692      	lsls	r2, r2, #26
 800f01a:	d42b      	bmi.n	800f074 <_printf_common+0xb0>
 800f01c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f020:	4649      	mov	r1, r9
 800f022:	4638      	mov	r0, r7
 800f024:	47c0      	blx	r8
 800f026:	3001      	adds	r0, #1
 800f028:	d01e      	beq.n	800f068 <_printf_common+0xa4>
 800f02a:	6823      	ldr	r3, [r4, #0]
 800f02c:	68e5      	ldr	r5, [r4, #12]
 800f02e:	6832      	ldr	r2, [r6, #0]
 800f030:	f003 0306 	and.w	r3, r3, #6
 800f034:	2b04      	cmp	r3, #4
 800f036:	bf08      	it	eq
 800f038:	1aad      	subeq	r5, r5, r2
 800f03a:	68a3      	ldr	r3, [r4, #8]
 800f03c:	6922      	ldr	r2, [r4, #16]
 800f03e:	bf0c      	ite	eq
 800f040:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f044:	2500      	movne	r5, #0
 800f046:	4293      	cmp	r3, r2
 800f048:	bfc4      	itt	gt
 800f04a:	1a9b      	subgt	r3, r3, r2
 800f04c:	18ed      	addgt	r5, r5, r3
 800f04e:	2600      	movs	r6, #0
 800f050:	341a      	adds	r4, #26
 800f052:	42b5      	cmp	r5, r6
 800f054:	d11a      	bne.n	800f08c <_printf_common+0xc8>
 800f056:	2000      	movs	r0, #0
 800f058:	e008      	b.n	800f06c <_printf_common+0xa8>
 800f05a:	2301      	movs	r3, #1
 800f05c:	4652      	mov	r2, sl
 800f05e:	4649      	mov	r1, r9
 800f060:	4638      	mov	r0, r7
 800f062:	47c0      	blx	r8
 800f064:	3001      	adds	r0, #1
 800f066:	d103      	bne.n	800f070 <_printf_common+0xac>
 800f068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f06c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f070:	3501      	adds	r5, #1
 800f072:	e7c6      	b.n	800f002 <_printf_common+0x3e>
 800f074:	18e1      	adds	r1, r4, r3
 800f076:	1c5a      	adds	r2, r3, #1
 800f078:	2030      	movs	r0, #48	; 0x30
 800f07a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f07e:	4422      	add	r2, r4
 800f080:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f084:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f088:	3302      	adds	r3, #2
 800f08a:	e7c7      	b.n	800f01c <_printf_common+0x58>
 800f08c:	2301      	movs	r3, #1
 800f08e:	4622      	mov	r2, r4
 800f090:	4649      	mov	r1, r9
 800f092:	4638      	mov	r0, r7
 800f094:	47c0      	blx	r8
 800f096:	3001      	adds	r0, #1
 800f098:	d0e6      	beq.n	800f068 <_printf_common+0xa4>
 800f09a:	3601      	adds	r6, #1
 800f09c:	e7d9      	b.n	800f052 <_printf_common+0x8e>
	...

0800f0a0 <_printf_i>:
 800f0a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f0a4:	7e0f      	ldrb	r7, [r1, #24]
 800f0a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f0a8:	2f78      	cmp	r7, #120	; 0x78
 800f0aa:	4691      	mov	r9, r2
 800f0ac:	4680      	mov	r8, r0
 800f0ae:	460c      	mov	r4, r1
 800f0b0:	469a      	mov	sl, r3
 800f0b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f0b6:	d807      	bhi.n	800f0c8 <_printf_i+0x28>
 800f0b8:	2f62      	cmp	r7, #98	; 0x62
 800f0ba:	d80a      	bhi.n	800f0d2 <_printf_i+0x32>
 800f0bc:	2f00      	cmp	r7, #0
 800f0be:	f000 80d8 	beq.w	800f272 <_printf_i+0x1d2>
 800f0c2:	2f58      	cmp	r7, #88	; 0x58
 800f0c4:	f000 80a3 	beq.w	800f20e <_printf_i+0x16e>
 800f0c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f0cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f0d0:	e03a      	b.n	800f148 <_printf_i+0xa8>
 800f0d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f0d6:	2b15      	cmp	r3, #21
 800f0d8:	d8f6      	bhi.n	800f0c8 <_printf_i+0x28>
 800f0da:	a101      	add	r1, pc, #4	; (adr r1, 800f0e0 <_printf_i+0x40>)
 800f0dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f0e0:	0800f139 	.word	0x0800f139
 800f0e4:	0800f14d 	.word	0x0800f14d
 800f0e8:	0800f0c9 	.word	0x0800f0c9
 800f0ec:	0800f0c9 	.word	0x0800f0c9
 800f0f0:	0800f0c9 	.word	0x0800f0c9
 800f0f4:	0800f0c9 	.word	0x0800f0c9
 800f0f8:	0800f14d 	.word	0x0800f14d
 800f0fc:	0800f0c9 	.word	0x0800f0c9
 800f100:	0800f0c9 	.word	0x0800f0c9
 800f104:	0800f0c9 	.word	0x0800f0c9
 800f108:	0800f0c9 	.word	0x0800f0c9
 800f10c:	0800f259 	.word	0x0800f259
 800f110:	0800f17d 	.word	0x0800f17d
 800f114:	0800f23b 	.word	0x0800f23b
 800f118:	0800f0c9 	.word	0x0800f0c9
 800f11c:	0800f0c9 	.word	0x0800f0c9
 800f120:	0800f27b 	.word	0x0800f27b
 800f124:	0800f0c9 	.word	0x0800f0c9
 800f128:	0800f17d 	.word	0x0800f17d
 800f12c:	0800f0c9 	.word	0x0800f0c9
 800f130:	0800f0c9 	.word	0x0800f0c9
 800f134:	0800f243 	.word	0x0800f243
 800f138:	682b      	ldr	r3, [r5, #0]
 800f13a:	1d1a      	adds	r2, r3, #4
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	602a      	str	r2, [r5, #0]
 800f140:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f144:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f148:	2301      	movs	r3, #1
 800f14a:	e0a3      	b.n	800f294 <_printf_i+0x1f4>
 800f14c:	6820      	ldr	r0, [r4, #0]
 800f14e:	6829      	ldr	r1, [r5, #0]
 800f150:	0606      	lsls	r6, r0, #24
 800f152:	f101 0304 	add.w	r3, r1, #4
 800f156:	d50a      	bpl.n	800f16e <_printf_i+0xce>
 800f158:	680e      	ldr	r6, [r1, #0]
 800f15a:	602b      	str	r3, [r5, #0]
 800f15c:	2e00      	cmp	r6, #0
 800f15e:	da03      	bge.n	800f168 <_printf_i+0xc8>
 800f160:	232d      	movs	r3, #45	; 0x2d
 800f162:	4276      	negs	r6, r6
 800f164:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f168:	485e      	ldr	r0, [pc, #376]	; (800f2e4 <_printf_i+0x244>)
 800f16a:	230a      	movs	r3, #10
 800f16c:	e019      	b.n	800f1a2 <_printf_i+0x102>
 800f16e:	680e      	ldr	r6, [r1, #0]
 800f170:	602b      	str	r3, [r5, #0]
 800f172:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f176:	bf18      	it	ne
 800f178:	b236      	sxthne	r6, r6
 800f17a:	e7ef      	b.n	800f15c <_printf_i+0xbc>
 800f17c:	682b      	ldr	r3, [r5, #0]
 800f17e:	6820      	ldr	r0, [r4, #0]
 800f180:	1d19      	adds	r1, r3, #4
 800f182:	6029      	str	r1, [r5, #0]
 800f184:	0601      	lsls	r1, r0, #24
 800f186:	d501      	bpl.n	800f18c <_printf_i+0xec>
 800f188:	681e      	ldr	r6, [r3, #0]
 800f18a:	e002      	b.n	800f192 <_printf_i+0xf2>
 800f18c:	0646      	lsls	r6, r0, #25
 800f18e:	d5fb      	bpl.n	800f188 <_printf_i+0xe8>
 800f190:	881e      	ldrh	r6, [r3, #0]
 800f192:	4854      	ldr	r0, [pc, #336]	; (800f2e4 <_printf_i+0x244>)
 800f194:	2f6f      	cmp	r7, #111	; 0x6f
 800f196:	bf0c      	ite	eq
 800f198:	2308      	moveq	r3, #8
 800f19a:	230a      	movne	r3, #10
 800f19c:	2100      	movs	r1, #0
 800f19e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f1a2:	6865      	ldr	r5, [r4, #4]
 800f1a4:	60a5      	str	r5, [r4, #8]
 800f1a6:	2d00      	cmp	r5, #0
 800f1a8:	bfa2      	ittt	ge
 800f1aa:	6821      	ldrge	r1, [r4, #0]
 800f1ac:	f021 0104 	bicge.w	r1, r1, #4
 800f1b0:	6021      	strge	r1, [r4, #0]
 800f1b2:	b90e      	cbnz	r6, 800f1b8 <_printf_i+0x118>
 800f1b4:	2d00      	cmp	r5, #0
 800f1b6:	d04d      	beq.n	800f254 <_printf_i+0x1b4>
 800f1b8:	4615      	mov	r5, r2
 800f1ba:	fbb6 f1f3 	udiv	r1, r6, r3
 800f1be:	fb03 6711 	mls	r7, r3, r1, r6
 800f1c2:	5dc7      	ldrb	r7, [r0, r7]
 800f1c4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f1c8:	4637      	mov	r7, r6
 800f1ca:	42bb      	cmp	r3, r7
 800f1cc:	460e      	mov	r6, r1
 800f1ce:	d9f4      	bls.n	800f1ba <_printf_i+0x11a>
 800f1d0:	2b08      	cmp	r3, #8
 800f1d2:	d10b      	bne.n	800f1ec <_printf_i+0x14c>
 800f1d4:	6823      	ldr	r3, [r4, #0]
 800f1d6:	07de      	lsls	r6, r3, #31
 800f1d8:	d508      	bpl.n	800f1ec <_printf_i+0x14c>
 800f1da:	6923      	ldr	r3, [r4, #16]
 800f1dc:	6861      	ldr	r1, [r4, #4]
 800f1de:	4299      	cmp	r1, r3
 800f1e0:	bfde      	ittt	le
 800f1e2:	2330      	movle	r3, #48	; 0x30
 800f1e4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f1e8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800f1ec:	1b52      	subs	r2, r2, r5
 800f1ee:	6122      	str	r2, [r4, #16]
 800f1f0:	f8cd a000 	str.w	sl, [sp]
 800f1f4:	464b      	mov	r3, r9
 800f1f6:	aa03      	add	r2, sp, #12
 800f1f8:	4621      	mov	r1, r4
 800f1fa:	4640      	mov	r0, r8
 800f1fc:	f7ff fee2 	bl	800efc4 <_printf_common>
 800f200:	3001      	adds	r0, #1
 800f202:	d14c      	bne.n	800f29e <_printf_i+0x1fe>
 800f204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f208:	b004      	add	sp, #16
 800f20a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f20e:	4835      	ldr	r0, [pc, #212]	; (800f2e4 <_printf_i+0x244>)
 800f210:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f214:	6829      	ldr	r1, [r5, #0]
 800f216:	6823      	ldr	r3, [r4, #0]
 800f218:	f851 6b04 	ldr.w	r6, [r1], #4
 800f21c:	6029      	str	r1, [r5, #0]
 800f21e:	061d      	lsls	r5, r3, #24
 800f220:	d514      	bpl.n	800f24c <_printf_i+0x1ac>
 800f222:	07df      	lsls	r7, r3, #31
 800f224:	bf44      	itt	mi
 800f226:	f043 0320 	orrmi.w	r3, r3, #32
 800f22a:	6023      	strmi	r3, [r4, #0]
 800f22c:	b91e      	cbnz	r6, 800f236 <_printf_i+0x196>
 800f22e:	6823      	ldr	r3, [r4, #0]
 800f230:	f023 0320 	bic.w	r3, r3, #32
 800f234:	6023      	str	r3, [r4, #0]
 800f236:	2310      	movs	r3, #16
 800f238:	e7b0      	b.n	800f19c <_printf_i+0xfc>
 800f23a:	6823      	ldr	r3, [r4, #0]
 800f23c:	f043 0320 	orr.w	r3, r3, #32
 800f240:	6023      	str	r3, [r4, #0]
 800f242:	2378      	movs	r3, #120	; 0x78
 800f244:	4828      	ldr	r0, [pc, #160]	; (800f2e8 <_printf_i+0x248>)
 800f246:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f24a:	e7e3      	b.n	800f214 <_printf_i+0x174>
 800f24c:	0659      	lsls	r1, r3, #25
 800f24e:	bf48      	it	mi
 800f250:	b2b6      	uxthmi	r6, r6
 800f252:	e7e6      	b.n	800f222 <_printf_i+0x182>
 800f254:	4615      	mov	r5, r2
 800f256:	e7bb      	b.n	800f1d0 <_printf_i+0x130>
 800f258:	682b      	ldr	r3, [r5, #0]
 800f25a:	6826      	ldr	r6, [r4, #0]
 800f25c:	6961      	ldr	r1, [r4, #20]
 800f25e:	1d18      	adds	r0, r3, #4
 800f260:	6028      	str	r0, [r5, #0]
 800f262:	0635      	lsls	r5, r6, #24
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	d501      	bpl.n	800f26c <_printf_i+0x1cc>
 800f268:	6019      	str	r1, [r3, #0]
 800f26a:	e002      	b.n	800f272 <_printf_i+0x1d2>
 800f26c:	0670      	lsls	r0, r6, #25
 800f26e:	d5fb      	bpl.n	800f268 <_printf_i+0x1c8>
 800f270:	8019      	strh	r1, [r3, #0]
 800f272:	2300      	movs	r3, #0
 800f274:	6123      	str	r3, [r4, #16]
 800f276:	4615      	mov	r5, r2
 800f278:	e7ba      	b.n	800f1f0 <_printf_i+0x150>
 800f27a:	682b      	ldr	r3, [r5, #0]
 800f27c:	1d1a      	adds	r2, r3, #4
 800f27e:	602a      	str	r2, [r5, #0]
 800f280:	681d      	ldr	r5, [r3, #0]
 800f282:	6862      	ldr	r2, [r4, #4]
 800f284:	2100      	movs	r1, #0
 800f286:	4628      	mov	r0, r5
 800f288:	f7f0 ffb2 	bl	80001f0 <memchr>
 800f28c:	b108      	cbz	r0, 800f292 <_printf_i+0x1f2>
 800f28e:	1b40      	subs	r0, r0, r5
 800f290:	6060      	str	r0, [r4, #4]
 800f292:	6863      	ldr	r3, [r4, #4]
 800f294:	6123      	str	r3, [r4, #16]
 800f296:	2300      	movs	r3, #0
 800f298:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f29c:	e7a8      	b.n	800f1f0 <_printf_i+0x150>
 800f29e:	6923      	ldr	r3, [r4, #16]
 800f2a0:	462a      	mov	r2, r5
 800f2a2:	4649      	mov	r1, r9
 800f2a4:	4640      	mov	r0, r8
 800f2a6:	47d0      	blx	sl
 800f2a8:	3001      	adds	r0, #1
 800f2aa:	d0ab      	beq.n	800f204 <_printf_i+0x164>
 800f2ac:	6823      	ldr	r3, [r4, #0]
 800f2ae:	079b      	lsls	r3, r3, #30
 800f2b0:	d413      	bmi.n	800f2da <_printf_i+0x23a>
 800f2b2:	68e0      	ldr	r0, [r4, #12]
 800f2b4:	9b03      	ldr	r3, [sp, #12]
 800f2b6:	4298      	cmp	r0, r3
 800f2b8:	bfb8      	it	lt
 800f2ba:	4618      	movlt	r0, r3
 800f2bc:	e7a4      	b.n	800f208 <_printf_i+0x168>
 800f2be:	2301      	movs	r3, #1
 800f2c0:	4632      	mov	r2, r6
 800f2c2:	4649      	mov	r1, r9
 800f2c4:	4640      	mov	r0, r8
 800f2c6:	47d0      	blx	sl
 800f2c8:	3001      	adds	r0, #1
 800f2ca:	d09b      	beq.n	800f204 <_printf_i+0x164>
 800f2cc:	3501      	adds	r5, #1
 800f2ce:	68e3      	ldr	r3, [r4, #12]
 800f2d0:	9903      	ldr	r1, [sp, #12]
 800f2d2:	1a5b      	subs	r3, r3, r1
 800f2d4:	42ab      	cmp	r3, r5
 800f2d6:	dcf2      	bgt.n	800f2be <_printf_i+0x21e>
 800f2d8:	e7eb      	b.n	800f2b2 <_printf_i+0x212>
 800f2da:	2500      	movs	r5, #0
 800f2dc:	f104 0619 	add.w	r6, r4, #25
 800f2e0:	e7f5      	b.n	800f2ce <_printf_i+0x22e>
 800f2e2:	bf00      	nop
 800f2e4:	08010f31 	.word	0x08010f31
 800f2e8:	08010f42 	.word	0x08010f42

0800f2ec <__retarget_lock_acquire_recursive>:
 800f2ec:	4770      	bx	lr

0800f2ee <__retarget_lock_release_recursive>:
 800f2ee:	4770      	bx	lr

0800f2f0 <memmove>:
 800f2f0:	4288      	cmp	r0, r1
 800f2f2:	b510      	push	{r4, lr}
 800f2f4:	eb01 0402 	add.w	r4, r1, r2
 800f2f8:	d902      	bls.n	800f300 <memmove+0x10>
 800f2fa:	4284      	cmp	r4, r0
 800f2fc:	4623      	mov	r3, r4
 800f2fe:	d807      	bhi.n	800f310 <memmove+0x20>
 800f300:	1e43      	subs	r3, r0, #1
 800f302:	42a1      	cmp	r1, r4
 800f304:	d008      	beq.n	800f318 <memmove+0x28>
 800f306:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f30a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f30e:	e7f8      	b.n	800f302 <memmove+0x12>
 800f310:	4402      	add	r2, r0
 800f312:	4601      	mov	r1, r0
 800f314:	428a      	cmp	r2, r1
 800f316:	d100      	bne.n	800f31a <memmove+0x2a>
 800f318:	bd10      	pop	{r4, pc}
 800f31a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f31e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f322:	e7f7      	b.n	800f314 <memmove+0x24>

0800f324 <_realloc_r>:
 800f324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f328:	4680      	mov	r8, r0
 800f32a:	4614      	mov	r4, r2
 800f32c:	460e      	mov	r6, r1
 800f32e:	b921      	cbnz	r1, 800f33a <_realloc_r+0x16>
 800f330:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f334:	4611      	mov	r1, r2
 800f336:	f7ff bc39 	b.w	800ebac <_malloc_r>
 800f33a:	b92a      	cbnz	r2, 800f348 <_realloc_r+0x24>
 800f33c:	f7ff fbca 	bl	800ead4 <_free_r>
 800f340:	4625      	mov	r5, r4
 800f342:	4628      	mov	r0, r5
 800f344:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f348:	f000 f81b 	bl	800f382 <_malloc_usable_size_r>
 800f34c:	4284      	cmp	r4, r0
 800f34e:	4607      	mov	r7, r0
 800f350:	d802      	bhi.n	800f358 <_realloc_r+0x34>
 800f352:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f356:	d812      	bhi.n	800f37e <_realloc_r+0x5a>
 800f358:	4621      	mov	r1, r4
 800f35a:	4640      	mov	r0, r8
 800f35c:	f7ff fc26 	bl	800ebac <_malloc_r>
 800f360:	4605      	mov	r5, r0
 800f362:	2800      	cmp	r0, #0
 800f364:	d0ed      	beq.n	800f342 <_realloc_r+0x1e>
 800f366:	42bc      	cmp	r4, r7
 800f368:	4622      	mov	r2, r4
 800f36a:	4631      	mov	r1, r6
 800f36c:	bf28      	it	cs
 800f36e:	463a      	movcs	r2, r7
 800f370:	f7ff fb9a 	bl	800eaa8 <memcpy>
 800f374:	4631      	mov	r1, r6
 800f376:	4640      	mov	r0, r8
 800f378:	f7ff fbac 	bl	800ead4 <_free_r>
 800f37c:	e7e1      	b.n	800f342 <_realloc_r+0x1e>
 800f37e:	4635      	mov	r5, r6
 800f380:	e7df      	b.n	800f342 <_realloc_r+0x1e>

0800f382 <_malloc_usable_size_r>:
 800f382:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f386:	1f18      	subs	r0, r3, #4
 800f388:	2b00      	cmp	r3, #0
 800f38a:	bfbc      	itt	lt
 800f38c:	580b      	ldrlt	r3, [r1, r0]
 800f38e:	18c0      	addlt	r0, r0, r3
 800f390:	4770      	bx	lr
	...

0800f394 <_init>:
 800f394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f396:	bf00      	nop
 800f398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f39a:	bc08      	pop	{r3}
 800f39c:	469e      	mov	lr, r3
 800f39e:	4770      	bx	lr

0800f3a0 <_fini>:
 800f3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3a2:	bf00      	nop
 800f3a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3a6:	bc08      	pop	{r3}
 800f3a8:	469e      	mov	lr, r3
 800f3aa:	4770      	bx	lr
